CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CODEPEN" is
    --
    PROCEDURE getCodepen(pArticleId IN article.id%type);
    --
    PROCEDURE uploadCodepen(pId IN VARCHAR2, pZipFile IN BLOB);
    --
    PROCEDURE buildBodyHtml(
        pUserId IN users.id%type, 
        pWebsiteId IN website.id%type, 
        pEnv IN VARCHAR2,
        pRestUrl IN VARCHAR2,
        pArticleId IN article.id%type, 
        pCollectionType IN website_article.collection_type%type, 
        pIsMedia IN BOOLEAN, 
        pContactForm IN website_article.contact_form%type, 
        pLoginForm IN website.login_form%type, 
        pHeader IN CLOB, 
        pFooter IN CLOB, 
        pHtml IN OUt NOCOPY CLOB
    );
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CODEPEN" is

    g_curve CONSTANT VARCHAR2(100):='<svg class="curve full-width" aria-hidden="true" focusable="false"><use href="#curve"></use></svg>';

    TYPE tt_nav_labels IS RECORD (
        article_id website_article.article_id%type,
        navigation_label website_article.navigation_label%type,
        collection_type website_article.collection_type%type
    );
    TYPE t_nav_labels IS TABLE OF tt_nav_labels;
    g_nav_labels t_nav_labels;

    /*
     **  Build Login Component
     */
    FUNCTION buildLoginAside(pWebsiteId IN website.id%type) RETURN VARCHAR2 IS
        l_html LONG;
        l_uri_template ords_endpoints.uri_template%type;
    BEGIN
        /* Get the endpoint for Log in */
        SELECT o.uri_template
          INTO l_uri_template
          FROM api_endpoint a, role r, ords_endpoints o
         WHERE a.website_id=pWebsiteId 
           AND a.role_id=r.id 
           AND r.name='visitor'
           AND o.label='Log In'
           AND a.template_id=o.template_id;
        
        l_html:=
'<aside class="login align-end">
  <section class="dropdown">
    <details>
      <summary>
        <svg height="1em" viewBox="0 0 32 32" preserveAspectRatio="none">
          <rect class="top" x="0" y="0" width="32" height="6" fill="currentColor" />
          <rect class="middle" x="0" y="13" width="32" height="6" fill="currentColor" />
          <rect class="bottom" x="0" y="26" width="32" height="6" fill="currentColor" />
        </svg>
      </summary>
      <ul class="dropdown-content" role="list">
        <li class="align-center"><small class="email"></small></li>
        <li class="align-center"><small class="expires"></small></li>
        <ul class="menulist" role="list"></ul>
        <li><button type="button" class="button login-btn" data-endpoint="' || l_uri_template || '">Log In</button></li>
      </ul>
    </details>
  </section>
</aside>';
        RETURN(l_html);
    END;

    /*
     **  Build Login Form
     */
    FUNCTION buildLoginForm RETURN VARCHAR2 IS
    BEGIN
        RETURN(
q'{<dialog class="login-email">
    <form class="flow">
        <input type="hidden" name="url" value="">
        <input type="hidden" name="request_type" value="">
        <header class="flex-items space-between">
            <h2>Sign up or log in</h2>
            <button type="button" class="button close no-focus" data-button-variant="round-icon">
                <svg class="icon" aria-hidden="true" focusable="false" viewBox="0 0 16 16">
                    <use href="#cross"></use>
                </svg>
            </button>
        </header>
        <article class="flow">
            <div>
                <label for="emailInput">Email</label>
                <input type="email" id="emailInput" name="email" required maxlength="50" autocapitalize="none" autocorrect="off">
                <span class="sendmail-result"></span>
            </div>
            <div class="visually-hidden">
                <label for="passcodeInput">Enter Passcode</label>
                <input type="text" id="passcodeInput" name="passcode" pattern="\d{6}" title="6 digit passcode">
                <span class="passcode-result"></span>
            </div>
        </article>
        <footer>
            <menu class="flex-items">
                <button class="button sendmail-magic" type="button">Send Magic Link</button>
                <button class="button sendmail-passcode" type="button">Send Passcode</button>
                <button class="button validate-passcode visually-hidden" type="button">Submit Passcode</button>
            </menu>
        </footer>
    </form>
 </dialog>}');
    END;

    /*
     **  Build Content Dialog - here is where we show output from calling API
     */
    FUNCTION buildContentDialog RETURN VARCHAR2 IS
    BEGIN
        RETURN(
q'{<dialog class="output">
    <form>
        <header class="flex-items space-between">
            <ul role="list" class="flex-items"></ul>
            <button class="button close no-focus" data-button-variant="round-icon">
                <svg class="icon" aria-hidden="true" focusable="false" viewBox="0 0 16 16">
                    <use href="#cross"></use>
                </svg>
            </button>
        </header>
        <article></article>
        <footer class="flex-items space-between">
            <span></span>
            <button type="button" class="button show-more" data-button-variant="no-styles">More >></button>
        </footer>
    </form>
 </dialog>}');
    END;

    /*
     **  Build Content Dialog - here is where we show output from calling API
     */
    FUNCTION buildMessageDialog RETURN VARCHAR2 IS
    BEGIN
        RETURN(
q'{<dialog class="message">
    <form>
        <header class="flex-items space-between">
            <h2>Leave a Message</h2>
            <button class="button close" data-button-variant="round-icon">
                <svg class="icon" aria-hidden="true" focusable="false" viewBox="0 0 16 16">
                    <use href="#cross"></use>
                </svg>
            </button>
        </header>
        <article class="flow">
             <div>
                <label for="messageInput">Message</label>
                <textarea id="messageInput" name="message" required minlength="1" maxlength="400" rows="5" cols="40"></textarea>
                <div class="flex-items space-between">
                    <span class="messageInput-result"></span>
                    <span class="charcounter"></span>
                </div>
            </div>
        </article>
        <footer class="flex-items space-between">
            <button type="button" class="button send">SEND</button>
            <span class="send-result"></span>
        </footer>
    </form>
 </dialog>}');
    END;

    FUNCTION buildNavLabels(pArticleId IN article.id%type) RETURN VARCHAR2 IS
        l_nav_labels LONG;
        l_article_id article.id%type;
    BEGIN
        /* IF pArticleId is a child article set aria-current-page on owner */
        FOR i IN 1..g_nav_labels.COUNT LOOP
            IF (g_nav_labels(i).article_id=pArticleId) THEN
                l_article_id:=pArticleId;
            END IF;
        END LOOP;
        IF (l_article_id IS NULL) THEN
            SELECT parent_id INTO l_article_id FROM article WHERE id=pArticleId;
        END IF;
        IF (g_nav_labels.COUNT>1) THEN
            FOR i IN 1..g_nav_labels.COUNT LOOP
                IF (i=1) THEN
                    l_nav_labels:=
                    '<nav class="section" aria-label="Main Navigation">';
                    l_nav_labels:=l_nav_labels || 
                        '<div class="section__inner flex-items space-around">';
                END IF;
                l_nav_labels:=l_nav_labels || 
                    '<a href="/' || CASE WHEN i>1 THEN apex_string_util.get_slug(g_nav_labels(i).navigation_label) END || '" class="button" data-button-variant="nav-item"' || 
                        CASE WHEN g_nav_labels(i).article_id=l_article_id THEN ' aria-current="page"' END  || 
                        ' data-id="' || g_nav_labels(i).article_id || '">' || g_nav_labels(i).navigation_label || '</a>';
                IF (i=g_nav_labels.COUNT) THEN
                    l_nav_labels:=l_nav_labels || '</div>' || g_CURVE || '</nav>';
                END IF;
            END LOOP;
        END IF;

        RETURN (l_nav_labels);
    END;

    /*
     **  Build Contact Form
     */
    FUNCTION buildContactForm RETURN VARCHAR2 IS
    BEGIN
        RETURN(
'<div class="content-grid">
    <form class="contact flow">
      <input type="hidden" name="url" value="">
      <div>
        <label for="nameInput">Name</label>
        <input type="text" id="nameInput" name="name" required minlength="1" maxlength="50">
      </div>
      <div>
        <label for="emailInput">Email</label>
        <input type="email" id="emailInput" name="email" required maxlength="50">
      </div>
      <div>
        <label for="messageInput">Message</label>
        <textarea id="messageInput" name="message" required minlength="1" maxlength="400" rows="5" cols="40"></textarea>
      </div>
      <div>
        <button type="submit">
          SEND
        </button>
        <span class="result"></span>
      </div>
    </form>
 </div>');
    END;

    /*
    ** HTML document body structure
    **
    ** <header>
    ** <nav>
    ** <main>
    ** <footer>
    ** <dialog>
    ** <svg>
    */

    PROCEDURE buildBodyHtml(
        pUserId IN users.id%type, 
        pWebsiteId IN website.id%type, 
        pEnv IN VARCHAR2,
        pRestUrl IN VARCHAR2,
        pArticleId IN article.id%type, 
        pCollectionType IN website_article.collection_type%type, 
        pIsMedia IN BOOLEAN, 
        pContactForm IN website_article.contact_form%type, 
        pLoginForm IN website.login_form%type, 
        pHeader IN CLOB, 
        pFooter IN CLOB, 
        pHtml IN OUt NOCOPY CLOB) 
    IS
        l_header CLOB;
        l_footer CLOB;
        l_featured_id VARCHAR2(10);
        l_featured_ids apex_t_varchar2:=apex_t_varchar2();
        l_featured_regex VARCHAR2(200);
        l_featured_replace VARCHAR2(200);
        l_thumbnails CLOB;
        l_email users.email%type;
        l_icon_id icon.id%type;
        l_icons apex_t_varchar2:=apex_t_varchar2();
        l_svg_html CLOB;
        nb_articles PLS_INTEGER;
        n PLS_INTEGER;

    BEGIN
        /* Build navigation label collection once */
        IF (g_nav_labels IS NULL) THEN
            SELECT wa.article_id, wa.navigation_label, wa.collection_type
              BULK COLLECT INTO g_nav_labels
              FROM website w, website_article wa
             WHERE w.id=pWebsiteId
               AND wa.website_id=w.id
             ORDER BY wa.display_order;
        END IF;

        /* 
        ** Create sections for any featured collections
        */
        l_featured_regex:='<article class="featured" data-id="([^"]+)">';
        n:=NVL(regexp_count(pHtml,l_featured_regex),0);
        FOR i IN 1..n 
        LOOP
            l_featured_id:=REGEXP_SUBSTR(pHtml,l_featured_regex,1,i,null,1);
            apex_string.push(l_featured_ids,l_featured_id);
        END LOOP;

        IF (n>0) THEN
            FOR C IN (SELECT column_value as article_id FROM TABLE(l_featured_ids))
            LOOP
                l_featured_replace:=replace(l_featured_regex,'([^"]+)',C.article_id);
                pHtml:=REPLACE(pHtml,l_featured_replace,l_featured_replace || pck_core.buildBlogList(pEnv, pWebsiteId, C.article_id, pClasses => 'featured'));
            END LOOP;
        END IF;

        /* Enclose content in <article class="flow"> container if article.body_html was created in ckeditor for example */
        IF (pHtml IS NULL OR INSTR(pHtml,'<article')=0) THEN
            pHtml:='<article class="flow">' || pHtml || '</article>';
        END IF;

        /* Remove empty elements */
        pHtml:=REPLACE(pHtml,'<h1>&nbsp;</h1>',null);
        pHtml:=REPLACE(pHtml,'<p>&nbsp;</p>',null);

        /* <article> signifies start of page section - insert svg to show curved sections */
        --pHtml:=REPLACE(pHtml,'<article',g_curve || '<article');

        /* Remove any inline styles - pages are deployed with strict Content Security policy */
        --pHtml:=REGEXP_REPLACE(pHtml,' style="[^"]*"');

        /* Construct start of <main> element */
        --pHtml:='<main class="content-grid">' || pHtml;
    
        /* Build index if page is index of Blog / Media / Product */
        IF (pCollectionType='BLOG') THEN
            pHtml:=pHtml || pck_core.buildBlogList(pEnv, pWebsiteId, pArticleId);
        ELSIF (pCollectionType='MEDIA') THEN
            pHtml:=pHtml || pck_core.buildMediaList(pWebsiteId, pArticleId);
        ELSIF (pCollectionType='PRODUCT') THEN
            pHtml:=pHtml || pck_core.buildProductList(pWebsiteId, pArticleId);
            --l_javascript:=l_javascript || getJSCode('deploy_cart.js');
        ELSIF (pIsMedia) THEN
            pck_media.getThumbnails(pArticleId,pDeploy=>TRUE,pHtml=>l_thumbnails);
            pHtml:=pHtml || 
            '<ol class="gallery-list">' || l_thumbnails || '</ol>
            <div class="gallery-overlay">
                <img src="">
                <span class="counter"></span>
                <button type="button" class="close-fullscreen">&times;</button>
                <button type="button" class="prev">&lt;</button>
                <button type="button" class="next">&gt;</button>
            </div>';
            --l_javascript:=l_javascript || getJSCode('deploy_gallery.js');
        END IF;

        /* Append Contact Form */
        IF (pContactForm='YES') THEN
            SELECT email INTO l_email FROM users WHERE id=pUserId;
            pHtml:=pHtml || buildContactForm();
            --l_javascript:=l_javascript || getJSCode('deploy_contact.js');
        END IF;

        /* 
        ** All images lazy loaded except first
        */
        n:=regexp_count(pHtml,'<img');
        IF (n>1) THEN
            FOR i IN 2..n 
            LOOP
                pHtml:=REGEXP_REPLACE(pHtml,'<img', '<img loading="lazy"',1,i);
            END LOOP;
        END IF;

        nb_articles:=MOD(regexp_count(pHtml,'<article'),2);

        /* 
        ** Build website header 
        */
        l_header:='<header class="section">';
        IF (pHeader IS NULL) THEN
            l_header:=l_header || '<div class="section__inner">';
            IF (pLoginForm='YES') THEN 
                l_header:=l_header || buildLoginAside(pWebsiteId);
            END IF;
            l_header:=l_header || '</div>';
        ELSE
            IF (pLoginForm='YES') THEN 
                l_header:=l_header || REPLACE(pHeader,'<div class="section__inner">','<div class="section__inner">' || buildLoginAside(pWebsiteId) );
            ELSE
                l_header:=l_header || pHeader;
            END IF;
        END IF;
        
        l_header:=l_header || '</header>';

        /* 
        ** Build website footer 
        */
        l_footer:='<footer class="section">' || pFooter || '</footer>';

        /* 
        ** Assemble content part of document 
        */
        pHtml:=l_header || 
               buildNavLabels(pArticleId) || 
               '<main class="wrapper flow">' || 
                '<div id="editor"></div>' ||
                    pHtml  || 
               '</main>' || 
               l_footer;

        /* 
        ** Append any Dialog elements
        */
        IF (pLoginForm='YES') THEN 
            pHtml:=pHtml || buildLoginForm;
            pHtml:=pHtml || buildContentDialog;
            pHtml:=pHtml || buildMessageDialog;
        END IF;

        /* 
        ** Append any referenced svg as symbols 
        */
        n:=regexp_count(pHtml,'<use href="#([^"]+)');
        FOR i IN 1..n 
        LOOP
            l_icon_id:=REGEXP_SUBSTR(pHtml,'<use href="#([^"]+)',1,i,null,1);
            apex_string.push(l_icons,l_icon_id);
        END LOOP;

        IF (n>0) THEN
            pHtml:=pHtml || '<svg width="0" height="0">';
            FOR C IN (SELECT id, title, viewbox, preserveaspectratio, svg FROM icon WHERE id IN (SELECT DISTINCT column_value FROM TABLE(l_icons)) ORDER BY id)
            LOOP
                pHtml:=pHtml || '<symbol id="' || C.id|| '" viewBox="' || C.viewbox|| '" preserveAspectRatio="' || C.preserveaspectratio || '">' || C.svg || '</symbol>';
            END LOOP;
            pHtml:=pHtml || '</svg>';
        END IF;

        /*
        ** Return complete <body> element with data attributes identifying internal id of website and article
        */
        pHtml:='<body data-websiteid="' || pWebsiteId || '" data-articleid="' || pArticleId || '" data-resturl="' || pRestUrl || '">' || pHtml || '</body>';

    END;

    /*
    ** Build resources to open requested article in Codepen
    */
    PROCEDURE getCodepen(pArticleId IN article.id%type) IS
        l_website_id website.id%type;
        
        l_domain_name website.domain_name%type;
        l_contact_form website_article.contact_form%type;
        l_login_form website.login_form%type; 
        l_collection_type website_article.collection_type%type;
        l_is_blog BOOLEAN:=FALSE;
        l_is_media BOOLEAN:=FALSE;
        l_html CLOB;
        l_header CLOB;
        l_footer CLOB;
        l_css CLOB;
        l_javascript CLOB;
        l_fluid_types pck_core.fluid_type_t;
        l_fluid_css LONG;
        l_session_data pck_core.session_data_rt;

        FUNCTION getJSCode(pFilename IN VARCHAR2) RETURN CLOB IS
        BEGIN
            FOR C IN (SELECT apex_util.blob_to_clob(file_content) file_content
                        FROM apex_application_static_files 
                       WHERE application_id=l_session_data.app_id
                         AND file_name=pFilename) 
            LOOP
                RETURN (C.file_content);
            END LOOP;
        END;

    BEGIN
        l_session_data:=pck_core.getSessionData();

        /* Get id of website owning the article because we need to build navigation labels as would appear in the deployed site */

        FOR C IN (SELECT website_id FROM website_article WHERE article_id=pArticleId AND user_id=l_session_data.user_id) LOOP
            l_website_id:=C.website_id;
        END LOOP;

        IF (l_website_id IS NULL) THEN
            /* Must be a sub-page article - so get website id from its parent article */
            FOR C IN (SELECT wa.website_id, wa.collection_type
                        FROM website_article wa, article a 
                       WHERE a.id=pArticleId
                         AND wa.article_id=a.parent_id
                         AND author_user_id=l_session_data.user_id ) 
            LOOP
                l_website_id:=C.website_id;
                l_is_blog:=C.collection_type='BLOG';
                l_is_media:=C.collection_type='MEDIA';
            END LOOP;
        END IF;

        /* Get page content */

        IF (l_is_blog OR l_is_media) THEN
            SELECT w.domain_name, w.header, a.body_html, w.footer, w.login_form,  null, null
              INTO l_domain_name, l_header, l_html, l_footer, l_login_form, l_contact_form, l_collection_type
              FROM website w, article a
             WHERE w.id=l_website_id
               AND a.id=pArticleId;
        ELSE
            SELECT w.domain_name, w.header, a.body_html, w.footer, w.login_form, wa.contact_form, wa.collection_type
              INTO l_domain_name, l_header, l_html, l_footer, l_login_form, l_contact_form, l_collection_type
              FROM website w, website_article wa, article a
             WHERE w.id=l_website_id
               AND wa.website_id=w.id
               AND wa.article_id=a.id
               AND a.id=pArticleId;
        END IF;

        buildBodyHtml(
            l_session_data.user_id, 
            l_website_id,
            'TEST', /* TEST environemt for Codepen */
            pck_core.getresturl(),
            pArticleId, 
            l_collection_type, 
            l_is_media, 
            l_contact_form, 
            l_login_form,
            l_header, 
            l_footer, 
            l_html);

        IF (l_login_form='YES') THEN
            l_javascript:=l_javascript || getJSCode('deploy_cms.js');
        END IF;
        
        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('domain_name', l_domain_name);
        apex_json.write('html', l_html);
        apex_json.write('css', pck_core.buildCssRoot(l_website_id, l_session_data.app_id));
        apex_json.write('js', l_javascript);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN 
            pck_core.log_error;
    END;

    /*
     **  Update website HTML / CSS from the contents of an exported Codepen zip file
     */        
    PROCEDURE uploadCodepen(pId IN VARCHAR2, pZipFile IN BLOB) IS
        l_website_id website.id%type;
        l_article_id article.id%type;
        l_css CLOB;
        l_header CLOB;
        l_main CLOB;
        l_footer CLOB;
        l_body_html CLOB;
        l_zip BLOB:=pZipFile;
        l_files apex_zip.t_files;
        l_session_data pck_core.session_data_rt;
        l_nb_files PLS_INTEGER:=0;
        l_ddl VARCHAR2(500);
        l_deploy_css CLOB;
        l_updated_columns apex_t_varchar2:=apex_t_varchar2();
        l_updated_files apex_t_clob:=apex_t_clob();

        PROCEDURE send_json(pMessage IN VARCHAR2) IS
            l_message VARCHAR2(200);
        BEGIN
            IF (l_updated_files.COUNT>0) THEN
                l_message:='UPLOADED: ' || apex_string.join(l_updated_columns,',');
            END IF;
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('message', l_message || pMessage);
            apex_json.close_object;
        END;

    BEGIN
        l_session_data:=pck_core.getSessionData();

        /* pId contains website_id,article_id */
        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_article_id:=SUBSTR(pId,INSTR(pId,',')+1);

        l_files:=apex_zip.get_files(p_zipped_blob => l_zip);

        FOR i in 1 .. l_files.COUNT LOOP
            IF (INSTR(l_files(i),'/src/style.css')>0) THEN
                l_css:=apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name => l_files(i)));
                l_nb_files:=l_nb_files+1;
            ELSIF (INSTR(l_files(i),'/src/index.html')>0) THEN
                l_body_html:=REPLACE(apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob=>l_zip, p_file_name=>l_files(i))),chr(10));
                l_nb_files:=l_nb_files+1;
            END IF;
        END LOOP;

        IF (l_nb_files<2) THEN
            apex_json.open_object;
            apex_json.write('success', FALSE);
            apex_json.write('message', '** ZIP MUST INCLUDE FILES "/src/index.html", "/src/css.styles" **');
            apex_json.close_object;
            RETURN;
        END IF;

        FOR C IN (SELECT css, header, footer FROM website WHERE id=l_website_id) LOOP
            
            SELECT apex_util.blob_to_clob(file_content)
              INTO l_deploy_css
              FROM apex_application_static_files 
             WHERE application_id=l_session_data.app_id
               AND file_name='deploy.css';

            /* 
            ** remove :root css pre-pended when codepen was created 
            ** 'n' handles case where user formats the css in codepen before exporting
            ** Note that we want to retain user formatting uploaded to the css column
            */
            l_css:=regexp_replace(l_css,':root(.*?)}',null,1,1,'n');

            IF (l_css IS NULL) THEN
                apex_string.push(l_updated_columns,'CSS');
                apex_string.push(l_updated_files,l_css);
            ELSIF (dbms_lob.compare(REPLACE(l_deploy_css,chr(10)),REPLACE(l_css,chr(10)))<>0) THEN
                apex_string.push(l_updated_columns,'CSS');
                apex_string.push(l_updated_files,l_css);
            END IF;

            /*
            ** header and footer are the first and last elements of class "section" in l_body_html
            */

            l_header:=regexp_substr(l_body_html,'<header class="section.+?>(.+?)</header>',1,1,'n',1);
            l_header:=regexp_replace(l_header,'<aside class="login.+?</aside>');
            l_header:=TRIM(l_header);
            IF (l_header IS NULL AND C.header IS NOT NULL) THEN
                apex_string.push(l_updated_columns,'HEADER');
                apex_string.push(l_updated_files,l_header);
            ELSIF (dbms_lob.compare(l_header,NVL(C.header,'x'))<>0) THEN
                apex_string.push(l_updated_columns,'HEADER');
                apex_string.push(l_updated_files,l_header);
            END IF;

            l_footer:=regexp_substr(l_body_html,'<footer class="section.+?>(.+?)</footer>',1,1,'n',1);
            l_footer:=TRIM(l_footer);
            IF (l_footer IS NULL AND C.footer IS NOT NULL) THEN
                apex_string.push(l_updated_columns,'FOOTER');
                apex_string.push(l_updated_files,l_footer);
            ELSIF (dbms_lob.compare(REPLACE(l_footer,chr(10)),REPLACE(NVL(C.footer,'x'),chr(10)))<>0) THEN
                apex_string.push(l_updated_columns,'FOOTER');
                apex_string.push(l_updated_files,l_footer);
            END IF;

            FOR i IN 1..l_updated_columns.COUNT LOOP
                IF (i=1) THEN
                    l_ddl:='UPDATE website SET updated_date=current_timestamp';
                END IF;
                CASE l_updated_columns(i)
                    WHEN 'CSS' THEN l_ddl:=l_ddl || ',css=:B' || i;
                    WHEN 'HEADER' THEN l_ddl:=l_ddl || ',header=:B' || i;
                    WHEN 'FOOTER' THEN l_ddl:=l_ddl || ',footer=:B' || i;
                END CASE;
            END LOOP;

            IF (l_ddl IS NOT NULL) THEN
                l_ddl:=l_ddl || ' WHERE id=:B';
                CASE l_updated_columns.COUNT
                    WHEN 1 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_website_id;
                    WHEN 2 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_updated_files(2), l_website_id;
                    WHEN 3 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_updated_files(2), l_updated_files(3), l_website_id;
                END CASE;
            END IF;
        END LOOP;

        /*
        ** EXTRACT AND PROCESS HTML ELEMENT
        */
        l_main:=regexp_substr(l_body_html,'<main.+?</main>');
        IF (INSTR(l_main,'<pre>')>0) THEN
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('message', CASE WHEN l_updated_files.COUNT>0 THEN 'UPLOADED: ' || apex_string.join(l_updated_columns,',') END || ' - ** &lt;main&gt; SKIPPED - CONTAINS &lt;PRE&gt; ELEMENT **');
            apex_json.close_object;
            RETURN;
        END IF;
        
        /* Remove elements added in getCodepen procedure */
        l_main:=regexp_replace(regexp_replace(regexp_replace(l_main,
            '<ol class="featured.+?</ol>'),
            '<main.+?>'),
            '</main>');
        
        FOR C IN (SELECT body_html FROM article WHERE id=l_article_id) LOOP
            IF (dbms_lob.compare(C.body_html,l_main)<>0) THEN
                UPDATE article SET body_html=l_main, updated_date=current_timestamp WHERE id=l_article_id;
                apex_string.push(l_updated_columns,'MAIN');
            END IF;
        END LOOP;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', CASE WHEN l_updated_files.COUNT>0 THEN 'UPLOADED: ' || apex_string.join(l_updated_columns,',') ELSE 'NO CHANGES' END );
        apex_json.write('html',l_main);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;    
end;
/