CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CODEPEN" is
    --
    TYPE tt_nav_labels IS RECORD (
        article_id website_article.article_id%type,
        navigation_label website_article.navigation_label%type,
        collection_type website_article.collection_type%type
    );
    TYPE t_nav_labels IS TABLE OF tt_nav_labels;
    g_nav_labels t_nav_labels;
    --
    PROCEDURE getCodepen(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER);
    --
    FUNCTION buildCssRoot(pWebsiteId IN website.id%type) RETURN VARCHAR2;
    --
    PROCEDURE uploadCodepen(pId IN VARCHAR2, pZipFile IN BLOB);
    --
    PROCEDURE buildBodyHtml(
        pUserId IN users.id%type, 
        pWebsiteId IN website.id%type, 
        pEnv IN VARCHAR2,
        pRestUrl IN VARCHAR2,
        pArticleId IN article.id%type, 
        pCollectionType IN website_article.collection_type%type, 
        pIsMedia IN BOOLEAN, 
        pTitle website.title%type,
        pSubtitle website.subtitle%type,
        pHeaderEffect website.header_effect%type,
        pHeroAssetId website.hero_asset_id%type,
        pContactEmail website.contact_email%type,
        pTelephoneNumber website.telephone_number%type,
        pMobileNumber website.mobile_number%type,
        pLinkedinName website.linkedin_name%type,
        pInstagramName website.instagram_name%type,
        pPromotion website.promotion%type,
        pHtml IN OUt NOCOPY CLOB
    );
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CODEPEN" is

    g_curve CONSTANT VARCHAR2(100):='<svg class="curve full-width" aria-hidden="true" focusable="false"><use href="#curve"></use></svg>';

    

    g_font_styles_title VARCHAR2(1000);
    g_font_styles_subtitle VARCHAR2(1000);

    TYPE fluid_type_rt IS RECORD(
        property VARCHAR2(30),
        value VARCHAR2(200)
    );
    
    TYPE fluid_type_t IS TABLE OF fluid_type_rt;
    
    FUNCTION getFluidTypes(pMinFontSize IN NUMBER, pMinWidthPx IN NUMBER, pMinScale IN NUMBER, pMaxFontSize IN NUMBER, pMaxWidthPx IN NUMBER, pMaxScale IN NUMBER) RETURN fluid_type_t IS
        l_fluid_type fluid_type_t:=fluid_type_t();
        l_min_font NUMBER;
        l_max_font NUMBER;
        l_min_width NUMBER;
        l_max_width NUMBER;
        l_slope NUMBER;
        l_intersect NUMBER;
        l_clamp VARCHAR2(200);

        TYPE tt_spaces IS RECORD(dimension VARCHAR2(3), multiplier NUMBER);
        TYPE t_spaces IS TABLE OF tt_spaces INDEX BY PLS_INTEGER;
        l_spaces t_spaces:=t_spaces(
            1=>tt_spaces('3xs',0.25), 
            2=>tt_spaces('2xs',0.5), 
            3=>tt_spaces('xs',0.75), 
            4=>tt_spaces('s',1), 
            5=>tt_spaces('m',1.5), 
            6=>tt_spaces('l',2), 
            7=>tt_spaces('xl',3), 
            8=>tt_spaces('2xl',4), 
            9=>tt_spaces('3xl',6)
        );

        FUNCTION round4dp(pNumber IN NUMBER) RETURN VARCHAR2 IS
            l_number NUMBER;
        BEGIN
            l_number:=ROUND(pNumber,4);
            IF (MOD(l_number,1)=0) THEN /* integer */
                RETURN (TO_CHAR(l_number));
            ELSE
                RETURN(LTRIM(RTRIM(TO_CHAR(ROUND(pNumber,4),'fm90.0000'),'0')));
            END IF;
        END;

        PROCEDURE addFluidType(pProperty IN VARCHAR2) IS 
        BEGIN
            l_fluid_type.EXTEND;
            l_fluid_type(l_fluid_type.LAST).property:=pProperty;
            l_clamp:='clamp(' || round4dp(l_min_font) || 'rem,' || round4dp(l_intersect) || 'rem + ' || round4dp(l_slope * 100) || 'cqi,' || round4dp(l_max_font) || 'rem)';
            l_fluid_type(l_fluid_type.LAST).value:=l_clamp;
        END;

    BEGIN
        l_min_width:=pMinWidthPx/16; 
        l_max_width:=pMaxWidthPx/16;
        FOR i IN -2 .. 6 LOOP
            IF (i<0) THEN
                l_min_font:=pMinFontSize/(pMinScale**ABS(i));
                l_max_font:=pMaxFontSize/(pMaxScale**ABS(i));
            ELSE
                l_min_font:=pMinFontSize*(pMinScale**i);
                l_max_font:=pMaxFontSize*(pMaxScale**i);
            END IF;
            l_slope:=(l_max_font - l_min_font) / (l_max_width - l_min_width);
            l_intersect:= -l_min_width * l_slope + l_min_font;
            addFluidType('--step-' || i);
        END LOOP;

        FOR i IN 1..l_spaces.COUNT LOOP
            l_min_font:=pMinFontSize*l_spaces(i).multiplier;
            l_max_font:=pMaxFontSize*l_spaces(i).multiplier;
            l_slope:=(l_max_font - l_min_font) / (l_max_width - l_min_width);
            l_intersect:= -l_min_width * l_slope + l_min_font;
            addFluidType('--space-' || l_spaces(i).dimension);
        END LOOP;

        RETURN l_fluid_type;
    END;

    /* 
    ** Build page CSS root
    */ 
    FUNCTION buildCssRoot(pWebsiteId IN website.id%type) RETURN VARCHAR2 IS
        l_fluid_types fluid_type_t;

        TYPE t_rgb_arr IS VARRAY(3) OF PLS_INTEGER;
        l_rgb_arr t_rgb_arr:=t_rgb_arr();

        TYPE t_rgb_tint_arr IS VARRAY(3) OF VARCHAR2(6);
        l_rgb_light VARCHAR2(6);
        l_rgb_lighter VARCHAR2(6);
        l_rgb_lightest VARCHAR2(6);
        
        l_css_file apex_application_static_files.file_name%type;
        l_font_url VARCHAR2(200);
        l_root_css LONG;
    BEGIN
        FOR C IN (
            SELECT w.max_width, w.color_text, w.color_background, w.color_primary, w.footer_background_color, w.footer_color, w.css,
                     w.min_font_size, w.min_width_px, w.min_scale, w.max_font_size, w.max_width_px, w.max_scale, w.img_border_radius
              FROM website w
             WHERE w.id=pWebsiteId
            )
        LOOP
            /* Build design tokens */

            l_fluid_types:=getFluidTypes(C.min_font_size, C.min_width_px, C.min_scale, C.max_font_size, C.max_width_px, C.max_scale);

            
            l_root_css:=l_root_css ||
            ':root {' ||
                '-webkit-text-size-adjust: none;' ||
                'text-size-adjust: none;';
            FOR i IN 1..l_fluid_types.COUNT LOOP
                l_root_css:=l_root_css || l_fluid_types(i).property || ': ' || l_fluid_types(i).value || ';';
            END LOOP;
            FOR C1 IN (
                SELECT wf.context, f.family, f.category
                  FROM font f, website_font wf
                 WHERE f.id=wf.font_id
                   AND wf.website_id=pWebsiteId
                 ORDER BY wf.context
            ) LOOP
                l_root_css:=l_root_css || 
                '--font-family-' || C1.context || ':"' || C1.family || '",' || CASE WHEN C1.category IN ('serif','sans-serif') THEN C1.category ELSE 'sans-serif' END || ';';
            END LOOP;
            l_root_css:=l_root_css || 
            '--font-family-ui: system-ui, sans-serif;' ||
            '--max-width: ' || C.max_width || ';' || 
            '--img-border-radius: ' || C.img_border_radius || ';' ||
            '--color-text: ' || C.color_text || ';' || 
            '--color-background: ' || C.color_background || ';' || 
            '--color-primary: ' || C.color_primary || ';' ||
            '--footer-background-color: ' || C.footer_background_color || ';' ||
            '--footer-color: ' || C.footer_color || ';';

            FOR i IN 1..3 LOOP
                l_rgb_arr.EXTEND;
                l_rgb_arr(l_rgb_arr.LAST):=TO_NUMBER(SUBSTR(SUBSTR(C.color_primary,2),i+(i-1),2),'xx');
            END LOOP;

            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_light:=l_rgb_light|| TO_CHAR(l_rgb_arr(i) + (0.25 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;
            
            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_lighter:=l_rgb_lighter|| TO_CHAR(l_rgb_arr(i) + (0.5 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;

            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_lightest:=l_rgb_lightest|| TO_CHAR(l_rgb_arr(i) + (0.75 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;

            l_root_css:=l_root_css || 
            '--color-primary-light: #' || l_rgb_light || ';' ||
            '--color-primary-lighter: #' || l_rgb_lighter || ';' ||
            '--color-primary-lightest: #' || l_rgb_lightest || ';' || 
            '--ck-image-style-spacing: 1.5em;' ||
	        '--ck-inline-image-style-spacing: calc(var(--ck-image-style-spacing) / 2);' ||
            '}';

            
        END LOOP;

        RETURN (l_root_css);
    END;

    /*
     **  Build Login Component
     */
    FUNCTION buildLoginAside(pWebsiteId IN website.id%type) RETURN VARCHAR2 IS
        l_html LONG;
        l_uri_template ords_endpoints.uri_template%type;
    BEGIN
        pck_sec.refreshOrdsEndpoints(pWebsiteId);
        /* Get the endpoint for Log in */
        SELECT o.uri_template
          INTO l_uri_template
          FROM api_endpoint a, role r, ords_endpoints o
         WHERE a.website_id=pWebsiteId 
           AND a.role_id=r.id 
           AND r.name='visitor'
           AND o.label='Log In'
           AND a.template_id=o.template_id;

        l_html:=
            '<div>' ||
                '<button type="button" popovertarget="metrics" id="metrics-btn" style="anchor-name:--metrics-btn" aria-label="Page loading details">' ||
                '00KB' ||
                '</button>' ||
                '<div popover id="metrics" style="position-anchor:--metrics-btn">' ||
                    '<table>' ||
                        '<thead><tr><th>Resource</th><th>Start</th><th>End</th><th>Redirect</th><th>Cache</th><th>DNS</th><th>TCP</th><th>Request</th><th>Response</th><th>Duration</th><th>Transfer</th></tr></thead>' ||
                        '<tbody></tbody>' ||
                    '</table>' ||
                '</div>' ||
                '<button type="button" popovertarget="menulist" id="menulist-btn" style="anchor-name:--menulist-btn" aria-label="dropdown menu">' ||
                    '<svg height="1rem" viewBox="0 0 32 32" preserveAspectRatio="none" aria-hidden="true" focusable="false">' ||
                      '<rect class="top" x="0" y="0" width="32" height="6" fill="currentColor" />' ||
                      '<rect class="middle" x="0" y="13" width="32" height="6" fill="currentColor" />' ||
                      '<rect class="bottom" x="0" y="26" width="32" height="6" fill="currentColor" />' ||
                    '</svg>' ||
                '</button>' ||
                '<ul popover id="menulist" class="dropdown scrollable" role="list"  style="position-anchor:--menulist-btn">' ||
                    '<li class="align-center"><small class="email"></small></li>' ||
                    '<li class="align-center">' ||
                        '<table>' ||
                            '<thead><tr><th>TTFB</th><th>FCP</th><th>LCP</th><th>CLS</th><th>INP</th><th>WGT</th></tr></thead>' || 
                            '<tbody><tr><td class="TTFB"></td><td class="FCP"></td><td class="LCP"></td><td class="CLS"></td><td class="INP"></td><td class="page-weight"></td></tr></tbody>' ||
                        '</table></li>' ||
                    '<li><button type="button" class="button login-btn" data-endpoint="' || l_uri_template || '">Log In</button></li>' ||
                '</ul>' ||
            '</div>';
            
        RETURN(l_html);
    END;

    

    FUNCTION buildNavLabels(pWebsiteId IN website.id%type, pArticleId IN article.id%type) RETURN VARCHAR2 IS
        l_nav_labels LONG;
        l_nav_length PLS_INTEGER:=0;
        l_article_id article.id%type;
    BEGIN
        /* IF pArticleId is a child article set aria-current-page on owner */
        FOR i IN 1..g_nav_labels.COUNT LOOP
            IF (g_nav_labels(i).article_id=pArticleId) THEN
                l_article_id:=pArticleId;
            END IF;
            /* Calculate length of nav labels to guide client in case visitor using narrow device */
            l_nav_length:=l_nav_length+LENGTH(g_nav_labels(i).navigation_label)+1;
        END LOOP;
        IF (l_article_id IS NULL) THEN
            SELECT parent_id INTO l_article_id FROM article WHERE id=pArticleId;
        END IF;

        l_nav_labels:=
        '<div class="topnav flex-items space-between">' ||
            '<span class="logo"></span>' ||
            '<nav aria-label="Main Navigation"'|| CASE WHEN l_nav_length>40 THEN ' class="can-shrink"' END || '>' ||
                '<ul role="list" class="flex-items" style="--flex-gap:.5rem;--flex-wrap:nowrap">';
        FOR i IN 1..g_nav_labels.COUNT LOOP
            l_nav_labels:=l_nav_labels || 
                '<li' || CASE WHEN g_nav_labels(i).article_id=l_article_id THEN ' class="active"' END || '><a href="/' || CASE WHEN i>1 THEN apex_string_util.get_slug(g_nav_labels(i).navigation_label) END || '"' ||
                    CASE WHEN g_nav_labels(i).article_id=l_article_id THEN ' aria-current="page"' END  || 
                    CASE WHEN g_nav_labels.COUNT=1 THEN ' class="visually-hidden"' END ||
                    ' data-id="' || g_nav_labels(i).article_id || '" data-collection="' || g_nav_labels(i).collection_type || '">' || g_nav_labels(i).navigation_label || 
                '</a></li>';
        END LOOP;
        l_nav_labels:=l_nav_labels || 
                '</ul>' ||
            '</nav>';
        l_nav_labels:=l_nav_labels || buildLoginAside(pWebsiteId) ||
        '</div>';

        RETURN (l_nav_labels);
    END;

    /*
     **  Build Login Form
     */
    FUNCTION buildLoginForm RETURN VARCHAR2 IS
    BEGIN
        RETURN(
            '<dialog class="login-email" style="--max-width:40rem">' ||
                '<form>' ||
                    '<input type="hidden" name="url" value="">' ||
                    '<input type="hidden" name="request_type" value="">' ||
                    '<input type="hidden" name="domain" value="">' ||
                    '<header class="flex-items space-between">' ||
                        '<h2>Log in</h2>' ||
                        '<button type="button" class="button close no-focus" data-button-variant="round-icon">' ||
                            '<svg class="icon" aria-hidden="true" focusable="false">' ||
                                '<use href="#cross"></use>' ||
                            '</svg>' ||
                        '</button>' ||
                    '</header>' ||
                    '<article class="flow">' ||
                        '<div>' ||
                            '<label for="emailInput">Email</label>' ||
                            '<input type="email" id="emailInput" name="email" required maxlength="50" autocapitalize="none" autocorrect="off" autocomplete="on">' ||
                            '<output for="email" class="sendmail-result"></output>' ||
                        '</div>' ||
                        '<div class="visually-hidden">' ||
                            '<label for="passcodeInput">Enter Passcode</label>' ||
                            '<input type="text" id="passcodeInput" name="passcode" pattern="\d{6}" inputmode="numeric" maxlength="6" autocomplete="one-time-code">' ||
                            '<output for="passcode" class="passcode-result"></output>' ||
                        '</div>' ||
                        '<div class="loader visually-hidden"></div>' ||
                    '</article>' ||
                    '<footer class="flex-items space-apart no-wrap">' ||
                        '<button class="button sendmail-magic" type="button">Send Link</button>' ||
                        '<div><hr><span>OR</span><hr></div>' ||
                        '<button class="button sendmail-passcode" type="button">Send Code</button>' ||
                        '<button class="button validate-passcode visually-hidden" type="button">Submit Passcode</button>' ||
                    '</footer>' ||
                '</form>' ||
             '</dialog>');
    END;

    /*
     **  Build Content Dialog - include pagination button
     */
    FUNCTION buildContentDialog RETURN VARCHAR2 IS
    BEGIN
        RETURN(
            '<dialog class="output">' ||
                '<form method="dialog">' ||
                    '<header class="flex-items space-between no-wrap">' ||
                        '<div></div>' ||
                        '<button type="button" class="button close no-focus" data-button-variant="round-icon">' ||
                            '<svg class="icon" aria-hidden="true" focusable="false">' ||
                                '<use href="#cross"></use>' ||
                            '</svg>' ||
                        '</button>' ||
                    '</header>' ||
                    '<article class="flow"></article>' ||
                    '<footer class="flex-items space-between">' ||
                    '</footer>' ||
                '</form>' ||
             '</dialog>');
    END;

    /*
    ** HTML document body structure
    **
    ** <header>
    ** <nav>
    ** <main>
    ** <footer>
    ** <dialog>
    ** <svg>
    */

    PROCEDURE buildBodyHtml(
        pUserId IN users.id%type, 
        pWebsiteId IN website.id%type, 
        pEnv IN VARCHAR2,
        pRestUrl IN VARCHAR2,
        pArticleId IN article.id%type, 
        pCollectionType IN website_article.collection_type%type, 
        pIsMedia IN BOOLEAN, 
        pTitle website.title%type,
        pSubtitle website.subtitle%type,
        pHeaderEffect website.header_effect%type,
        pHeroAssetId website.hero_asset_id%type,
        pContactEmail website.contact_email%type,
        pTelephoneNumber website.telephone_number%type,
        pMobileNumber website.mobile_number%type,
        pLinkedinName website.linkedin_name%type,
        pInstagramName website.instagram_name%type,
        pPromotion website.promotion%type,
        pHtml IN OUT NOCOPY CLOB) 
    IS
        l_font_styles VARCHAR2(500);
        l_header CLOB;
        l_footer CLOB;
        l_featured_id VARCHAR2(10);
        l_featured_ids apex_t_varchar2:=apex_t_varchar2();
        l_featured_regex VARCHAR2(200);
        l_featured_replace VARCHAR2(200);
        l_thumbnails CLOB;
        l_email users.email%type;
        l_icon_id icon.id%type;
        l_icons apex_t_varchar2:=apex_t_varchar2();
        l_svg_html CLOB;
        m PLS_INTEGER;
        n PLS_INTEGER;

    BEGIN
        /* Build navigation label collection once */
        IF (g_nav_labels IS NULL) THEN
            SELECT wa.article_id, wa.navigation_label, wa.collection_type
              BULK COLLECT INTO g_nav_labels
              FROM website w, website_article wa
             WHERE w.id=pWebsiteId
               AND wa.website_id=w.id
             ORDER BY wa.display_order;
        END IF;

        /* Build font syles collection once */
        IF (g_font_styles_title IS NULL) THEN
            FOR C IN (
                SELECT context, font_size, color, underline, margin
                  FROM website_font
                 WHERE website_id=pWebsiteId
            ) LOOP
                l_font_styles:='font-size:clamp(2cqi,' || C.font_size || 'cqi,14cqi)';
                
                l_font_styles:=l_font_styles || ';color:' || C.color;

                IF (C.underline>0) THEN
                    l_font_styles:=l_font_styles || ';text-decoration:underline;text-underline-offset:' || C.underline || '%;text-decoration-thickness:' || C.underline || '%' ;
                END IF;
                
                IF (C.margin>0) THEN
                    l_font_styles:=l_font_styles || ';margin-block:' || C.margin || 'vh' ;
                END IF;

                CASE C.context
                    WHEN 'headings' THEN
                        g_font_styles_title:=l_font_styles;
                    WHEN 'text' THEN
                        g_font_styles_subtitle:=l_font_styles;
                END CASE;

            END LOOP;
        END IF;

        /* 
        ** Create sections for any featured collections
        */
        l_featured_regex:='<article class="featured" data-id="([^"]+)">';
        n:=NVL(regexp_count(pHtml,l_featured_regex),0);
        FOR i IN 1..n 
        LOOP
            l_featured_id:=REGEXP_SUBSTR(pHtml,l_featured_regex,1,i,null,1);
            apex_string.push(l_featured_ids,l_featured_id);
        END LOOP;

        IF (n>0) THEN
            FOR C IN (SELECT column_value as article_id FROM TABLE(l_featured_ids))
            LOOP
                l_featured_replace:=replace(l_featured_regex,'([^"]+)',C.article_id);
                pHtml:=REPLACE(pHtml,l_featured_replace,l_featured_replace || pck_core.buildBlogList(pEnv, pWebsiteId, C.article_id, pClasses => 'featured'));
            END LOOP;
        END IF;

        /* Enclose content in <article class="flow"> container if article.body_html was created in ckeditor for example */
        IF (pHtml IS NULL OR INSTR(pHtml,'<article')=0) THEN
            pHtml:='<article class="flow">' || pHtml || '</article>';
        END IF;
    
        /* Build index if page is index of Blog / Media / Product */
        IF (pCollectionType='BLOG') THEN
            pHtml:=pHtml || pck_core.buildBlogList(pEnv, pWebsiteId, pArticleId);
        ELSIF (pCollectionType='MEDIA') THEN
            pHtml:=pHtml || pck_core.buildMediaList(pWebsiteId, pArticleId);
        ELSIF (pCollectionType='PRODUCT') THEN
            pHtml:=pHtml || pck_core.buildProductList(pWebsiteId, pArticleId);
            --l_javascript:=l_javascript || getJSCode('deploy_cart.js');
        ELSIF (pIsMedia) THEN
            pck_media.getThumbnails(pArticleId,pDeploy=>TRUE,pHtml=>l_thumbnails);
            pHtml:=pHtml || 
            '<ol class="gallery-list">' || l_thumbnails || '</ol>
            <div class="gallery-overlay">
                <img src="">
                <span class="counter"></span>
                <button type="button" class="close-fullscreen">&times;</button>
                <button type="button" class="prev">&lt;</button>
                <button type="button" class="next">&gt;</button>
            </div>';
            --l_javascript:=l_javascript || getJSCode('deploy_gallery.js');
        END IF;

        /* 
        ** Build website header 
        */
        l_header:=
            '<header>' ||
                '<div>' ||
                    CASE WHEN pHeroAssetId IS NOT NULL THEN pck_media.getImageSrcset(pHeroAssetId) END ||
                    '<h1 class="title" style="' || g_font_styles_title ||'">' || pTitle || '</h1>' ||
                    '<p class="subtitle" style="' || g_font_styles_subtitle   ||'">' || pSubtitle || '</p>' ||
                '</div>' ||
            '</header>' || 
            CASE WHEN pHeroAssetId IS NULL THEN g_curve END;

        l_footer:=
            '<footer class="flex-items">' ||
                CASE WHEN pContactEmail IS NOT NULL THEN
                '<a class="icon-with-text" href="mailto:' || pContactEmail || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#email"></use></svg><span>' || pContactEmail || '</span>' ||
                '</a>'
                END ||
                CASE WHEN pTelephoneNumber IS NOT NULL THEN
                '<a class="icon-with-text" href="tel:' || pTelephoneNumber || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#phone"></use></svg><span>' || pTelephoneNumber || '</span>' ||
                '</a>'
                END ||
                CASE WHEN pMobileNumber IS NOT NULL THEN
                '<a class="icon-with-text" href="tel:' || pMobileNumber || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#mobile"></use></svg><span>' || pMobileNumber || '</span>' ||
                '</a>'
                END ||
                CASE WHEN pLinkedinName IS NOT NULL THEN
                '<a class="icon-with-text" href="https://www.linkedin.com/in/' || pLinkedinName || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#linkedin"></use></svg><span>Let''s Connect</span>' ||
                '</a>'
                END ||
                CASE WHEN pInstagramName IS NOT NULL THEN
                '<a class="icon-with-text" href="https://www.instagram.com/' || pInstagramName || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#instagram"></use></svg><span>Instagram</span>' ||
                '</a>'
                END ||
            '</footer>';


        /* 
        ** Build website footer 
        */
        --l_footer:='<footer class="section">' || pFooter || '</footer>';

        /* 
        ** Assemble content part of document 
        */
        pHtml:=
            buildNavLabels(pWebsiteId,pArticleId) || 
            CASE WHEN pEnv='TEST' THEN '<form class="edit-header"></form>' END ||
            l_header || 
            '<main class="wrapper flow">' || 
                pPromotion ||
                CASE WHEN pEnv='TEST' THEN '<div id="editor"></div>' END ||
                pHtml  || 
            '</main>' || 
            CASE WHEN pEnv='TEST' THEN '<form class="edit-footer"></form>' END ||
            l_footer;

        /* 
        ** Append any Dialog elements
        */
        
        
        pHtml:=pHtml || buildLoginForm || buildContentDialog;


        /* 
        ** Append any referenced svg as symbols 
        */
        n:=regexp_count(pHtml,'<use href="#([^"]+)');
        FOR i IN 1..n 
        LOOP
            l_icon_id:=REGEXP_SUBSTR(pHtml,'<use href="#([^"]+)',1,i,null,1);
            apex_string.push(l_icons,l_icon_id);
        END LOOP;
        
        IF (pEnv='TEST') THEN
            apex_string.push(l_icons,'copy');
            apex_string.push(l_icons,'delete');
        END IF;

        IF (n>0) THEN
            pHtml:=pHtml || '<svg width="0" height="0">';
            FOR C IN (SELECT id, title, viewbox, preserveaspectratio, svg FROM icon WHERE id IN (SELECT DISTINCT column_value FROM TABLE(l_icons)) ORDER BY id)
            LOOP
                pHtml:=pHtml || '<symbol id="' || C.id|| '" viewBox="' || C.viewbox|| '" preserveAspectRatio="' || C.preserveaspectratio || '">' || C.svg || '</symbol>';
            END LOOP;
            pHtml:=pHtml || '</svg>';
        END IF;

        /*  Include dummy form for CODEPEN if TEST env */
        IF (pEnv='TEST') THEN
            pHtml:=pHtml ||
            '<form action="https://codepen.io/pen/define" method="POST" target="_blank"><input type="hidden" name="data" value=""></form>';
        END IF;

    END;

    /*
    ** Build resources to open requested article in Codepen
    */
    PROCEDURE getCodepen(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER) IS
        l_domain_name website.domain_name%type;
        l_is_media BOOLEAN:=FALSE;
        l_html CLOB;
        l_css website.css%type;
        l_javascript CLOB;
        l_session_data pck_sec.t_session_data;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);


        /* Get page content */

        FOR C IN (
            SELECT w.css, w.domain_name, w.title, w.subtitle, w.header_effect, w.hero_asset_id, w.promotion, a.body_html, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name, w.instagram_name, wa.collection_type
              FROM website w, website_article wa, article a
             WHERE w.id=pWebsiteId
               AND wa.website_id=w.id
               AND wa.article_id=a.id
               AND a.id=pArticleId
        ) LOOP
            l_domain_name:=C.domain_name;
            l_html:=C.body_html;
            l_is_media:=C.collection_type='MEDIA';
            buildBodyHtml(
                l_session_data.user_id, 
                pWebsiteId,
                'TEST', /* TEST environemt for Codepen */
                pck_core.getresturl(),
                pArticleId, 
                C.collection_type, 
                l_is_media, 
                C.title, 
                C.subtitle, 
                C.header_effect,
                C.hero_asset_id,
                C.contact_email,
                C.telephone_number, 
                C.mobile_number, 
                C.linkedin_name,
                C.instagram_name,
                C.promotion,
                l_html);

            l_html:=l_html || '</body>';

            /* Import font-face first for codepen */
            FOR C1 IN (
                SELECT DISTINCT f.family
                  FROM font f, website_font wf
                 WHERE f.id=wf.font_id
                   AND wf.website_id=pWebsiteId
            ) LOOP
                l_css:=l_css ||
                '@import url("https://fonts.googleapis.com/css2?family=' || REPLACE(C1.family,' ','+') || '");' || chr(10);
            END LOOP;

            l_css:=l_css || buildCSSRoot(pWebsiteId);

            /* Append either author-uploaded CSS or mine  */
            IF (C.css IS NOT NULL) THEN
                l_css:=l_css || C.css;
            ELSE
                FOR C IN (
                    SELECT apex_util.blob_to_clob(file_content) file_content
                      FROM apex_application_static_files 
                     WHERE application_id=101
                       AND file_name='deploy.css'
                ) LOOP
                    l_css:=l_css || C.file_content;
                END LOOP;
            END IF;
        END LOOP;

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('domain_name', l_domain_name);
        apex_json.write('html', l_html);
        apex_json.write('css', l_css);
        apex_json.write('js', l_javascript);
        apex_json.close_object;

        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN 
            pck_core.log_error;
    END;

    /*
     **  Update website HTML / CSS from the contents of an exported Codepen zip file
     */        
    PROCEDURE uploadCodepen(pId IN VARCHAR2, pZipFile IN BLOB) IS
        l_website_id website.id%type;
        l_article_id article.id%type;
        l_css CLOB;
        l_header CLOB;
        l_main CLOB;
        l_footer CLOB;
        l_body_html CLOB;
        l_zip BLOB:=pZipFile;
        l_files apex_zip.t_files;
        l_session_data pck_sec.t_session_data;
        l_nb_files PLS_INTEGER:=0;
        l_ddl VARCHAR2(500);
        l_deploy_css CLOB;
        l_updated_columns apex_t_varchar2:=apex_t_varchar2();
        l_updated_files apex_t_clob:=apex_t_clob();

        PROCEDURE send_json(pMessage IN VARCHAR2) IS
            l_message VARCHAR2(200);
        BEGIN
            IF (l_updated_files.COUNT>0) THEN
                l_message:='UPLOADED: ' || apex_string.join(l_updated_columns,',');
            END IF;
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('message', l_message || pMessage);
            apex_json.close_object;
        END;

    BEGIN
        

        /* pId contains website_id,article_id */
        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_article_id:=SUBSTR(pId,INSTR(pId,',')+1);

        l_session_data:=pck_sec.getSessionData(l_website_id);

        l_files:=apex_zip.get_files(p_zipped_blob => l_zip);

        FOR i in 1 .. l_files.COUNT LOOP
            IF (INSTR(l_files(i),'/src/style.css')>0) THEN
                l_css:=apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name => l_files(i)));
                l_nb_files:=l_nb_files+1;
            ELSIF (INSTR(l_files(i),'/src/index.html')>0) THEN
                l_body_html:=REPLACE(apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob=>l_zip, p_file_name=>l_files(i))),chr(10));
                l_nb_files:=l_nb_files+1;
            END IF;
        END LOOP;

        IF (l_nb_files<2) THEN
            apex_json.open_object;
            apex_json.write('success', FALSE);
            apex_json.write('message', '** ZIP MUST INCLUDE FILES "/src/index.html", "/src/css.styles" **');
            apex_json.close_object;
            RETURN;
        END IF;

        FOR C IN (SELECT css, header, footer FROM website WHERE id=l_website_id) LOOP
            
            SELECT apex_util.blob_to_clob(file_content)
              INTO l_deploy_css
              FROM apex_application_static_files 
             WHERE application_id=101
               AND file_name='deploy.css';

            /* 
            ** remove :root css pre-pended when codepen was created 
            ** 'n' handles case where user formats the css in codepen before exporting
            ** Note that we want to retain user formatting uploaded to the css column
            */
            l_css:=regexp_replace(l_css,':root(.*?)}',null,1,1,'n');

            IF (l_css IS NULL) THEN
                apex_string.push(l_updated_columns,'CSS');
                apex_string.push(l_updated_files,l_css);
            ELSIF (dbms_lob.compare(REPLACE(l_deploy_css,chr(10)),REPLACE(l_css,chr(10)))<>0) THEN
                apex_string.push(l_updated_columns,'CSS');
                apex_string.push(l_updated_files,l_css);
            END IF;

            /*
            ** header and footer are the first and last elements of class "section" in l_body_html
            */

            l_header:=regexp_substr(l_body_html,'<header class="section.+?>(.+?)</header>',1,1,'n',1);
            l_header:=regexp_replace(l_header,'<aside class="login.+?</aside>');
            l_header:=TRIM(l_header);
            IF (l_header IS NULL AND C.header IS NOT NULL) THEN
                apex_string.push(l_updated_columns,'HEADER');
                apex_string.push(l_updated_files,l_header);
            ELSIF (dbms_lob.compare(l_header,NVL(C.header,'x'))<>0) THEN
                apex_string.push(l_updated_columns,'HEADER');
                apex_string.push(l_updated_files,l_header);
            END IF;

            l_footer:=regexp_substr(l_body_html,'<footer class="section.+?>(.+?)</footer>',1,1,'n',1);
            l_footer:=TRIM(l_footer);
            IF (l_footer IS NULL AND C.footer IS NOT NULL) THEN
                apex_string.push(l_updated_columns,'FOOTER');
                apex_string.push(l_updated_files,l_footer);
            ELSIF (dbms_lob.compare(REPLACE(l_footer,chr(10)),REPLACE(NVL(C.footer,'x'),chr(10)))<>0) THEN
                apex_string.push(l_updated_columns,'FOOTER');
                apex_string.push(l_updated_files,l_footer);
            END IF;

            FOR i IN 1..l_updated_columns.COUNT LOOP
                IF (i=1) THEN
                    l_ddl:='UPDATE website SET updated_date=current_timestamp';
                END IF;
                CASE l_updated_columns(i)
                    WHEN 'CSS' THEN l_ddl:=l_ddl || ',css=:B' || i;
                    WHEN 'HEADER' THEN l_ddl:=l_ddl || ',header=:B' || i;
                    WHEN 'FOOTER' THEN l_ddl:=l_ddl || ',footer=:B' || i;
                END CASE;
            END LOOP;

            IF (l_ddl IS NOT NULL) THEN
                l_ddl:=l_ddl || ' WHERE id=:B';
                CASE l_updated_columns.COUNT
                    WHEN 1 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_website_id;
                    WHEN 2 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_updated_files(2), l_website_id;
                    WHEN 3 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_updated_files(2), l_updated_files(3), l_website_id;
                END CASE;
            END IF;
        END LOOP;

        /*
        ** EXTRACT AND PROCESS HTML ELEMENT
        */
        l_main:=regexp_substr(l_body_html,'<main.+?</main>');
        IF (INSTR(l_main,'<pre>')>0) THEN
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('message', CASE WHEN l_updated_files.COUNT>0 THEN 'UPLOADED: ' || apex_string.join(l_updated_columns,',') END || ' - ** &lt;main&gt; SKIPPED - CONTAINS &lt;PRE&gt; ELEMENT **');
            apex_json.close_object;
            RETURN;
        END IF;
        
        /* Remove elements added in getCodepen procedure */
        l_main:=regexp_replace(regexp_replace(regexp_replace(l_main,
            '<ol class="featured.+?</ol>'),
            '<main.+?>'),
            '</main>');
        
        FOR C IN (SELECT body_html FROM article WHERE id=l_article_id) LOOP
            IF (dbms_lob.compare(C.body_html,l_main)<>0) THEN
                UPDATE article SET body_html=l_main, updated_date=current_timestamp WHERE id=l_article_id;
                apex_string.push(l_updated_columns,'MAIN');
            END IF;
        END LOOP;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', CASE WHEN l_updated_files.COUNT>0 THEN 'UPLOADED: ' || apex_string.join(l_updated_columns,',') ELSE 'NO CHANGES' END );
        apex_json.write('html',l_main);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;    
end;
/