CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CODEPEN" is
    --
    PROCEDURE getCodepen(pArticleId IN article.id%type);
    --
    FUNCTION buildCssRoot(pWebsiteId IN website.id%type, pApplicationId IN NUMBER, pDeploy IN BOOLEAN DEFAULT FALSE) RETURN VARCHAR2;
    --
    PROCEDURE uploadCodepen(pId IN VARCHAR2, pZipFile IN BLOB);
    --
    PROCEDURE buildBodyHtml(
        pUserId IN users.id%type, 
        pWebsiteId IN website.id%type, 
        pEnv IN VARCHAR2,
        pRestUrl IN VARCHAR2,
        pArticleId IN article.id%type, 
        pCollectionType IN website_article.collection_type%type, 
        pIsMedia IN BOOLEAN, 
        pContactForm IN website_article.contact_form%type, 
        pTitle website.title%type,
        pSubtitle website.subtitle%type,
        pHeaderEffect website.header_effect%type,
        pHeroAssetId website.hero_asset_id%type,
        pContactEmail website.contact_email%type,
        pTelephoneNumber website.telephone_number%type,
        pMobileNumber website.mobile_number%type,
        pLinkedinName website.linkedin_name%type,
        pInstagramName website.instagram_name%type,
        pPromotion website.promotion%type,
        pHtml IN OUt NOCOPY CLOB
    );
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CODEPEN" is

    g_curve CONSTANT VARCHAR2(100):='<svg class="curve full-width" aria-hidden="true" focusable="false"><use href="#curve"></use></svg>';

    TYPE tt_nav_labels IS RECORD (
        article_id website_article.article_id%type,
        navigation_label website_article.navigation_label%type,
        collection_type website_article.collection_type%type
    );
    TYPE t_nav_labels IS TABLE OF tt_nav_labels;
    g_nav_labels t_nav_labels;

    g_font_styles_title VARCHAR2(1000);
    g_font_styles_subtitle VARCHAR2(1000);

    TYPE fluid_type_rt IS RECORD(
        property VARCHAR2(30),
        value VARCHAR2(200)
    );
    
    TYPE fluid_type_t IS TABLE OF fluid_type_rt;
    
    FUNCTION getFluidTypes(pMinFontSize IN NUMBER, pMinWidthPx IN NUMBER, pMinScale IN NUMBER, pMaxFontSize IN NUMBER, pMaxWidthPx IN NUMBER, pMaxScale IN NUMBER) RETURN fluid_type_t IS
        l_fluid_type fluid_type_t:=fluid_type_t();
        l_min_font NUMBER;
        l_max_font NUMBER;
        l_min_width NUMBER;
        l_max_width NUMBER;
        l_slope NUMBER;
        l_intersect NUMBER;
        l_clamp VARCHAR2(200);

        TYPE tt_spaces IS RECORD(dimension VARCHAR2(3), multiplier NUMBER);
        TYPE t_spaces IS TABLE OF tt_spaces INDEX BY PLS_INTEGER;
        l_spaces t_spaces:=t_spaces(
            1=>tt_spaces('3xs',0.25), 
            2=>tt_spaces('2xs',0.5), 
            3=>tt_spaces('xs',0.75), 
            4=>tt_spaces('s',1), 
            5=>tt_spaces('m',1.5), 
            6=>tt_spaces('l',2), 
            7=>tt_spaces('xl',3), 
            8=>tt_spaces('2xl',4), 
            9=>tt_spaces('3xl',6)
        );

        FUNCTION round4dp(pNumber IN NUMBER) RETURN VARCHAR2 IS
            l_number NUMBER;
        BEGIN
            l_number:=ROUND(pNumber,4);
            IF (MOD(l_number,1)=0) THEN /* integer */
                RETURN (TO_CHAR(l_number));
            ELSE
                RETURN(LTRIM(RTRIM(TO_CHAR(ROUND(pNumber,4),'fm90.0000'),'0')));
            END IF;
        END;

        PROCEDURE addFluidType(pProperty IN VARCHAR2) IS 
        BEGIN
            l_fluid_type.EXTEND;
            l_fluid_type(l_fluid_type.LAST).property:=pProperty;
            l_clamp:='clamp(' || round4dp(l_min_font) || 'rem,' || round4dp(l_intersect) || 'rem + ' || round4dp(l_slope * 100) || 'cqi,' || round4dp(l_max_font) || 'rem)';
            l_fluid_type(l_fluid_type.LAST).value:=l_clamp;
        END;

    BEGIN
        l_min_width:=pMinWidthPx/16; 
        l_max_width:=pMaxWidthPx/16;
        FOR i IN -2 .. 6 LOOP
            IF (i<0) THEN
                l_min_font:=pMinFontSize/(pMinScale**ABS(i));
                l_max_font:=pMaxFontSize/(pMaxScale**ABS(i));
            ELSE
                l_min_font:=pMinFontSize*(pMinScale**i);
                l_max_font:=pMaxFontSize*(pMaxScale**i);
            END IF;
            l_slope:=(l_max_font - l_min_font) / (l_max_width - l_min_width);
            l_intersect:= -l_min_width * l_slope + l_min_font;
            addFluidType('--step-' || i);
        END LOOP;

        FOR i IN 1..l_spaces.COUNT LOOP
            l_min_font:=pMinFontSize*l_spaces(i).multiplier;
            l_max_font:=pMaxFontSize*l_spaces(i).multiplier;
            l_slope:=(l_max_font - l_min_font) / (l_max_width - l_min_width);
            l_intersect:= -l_min_width * l_slope + l_min_font;
            addFluidType('--space-' || l_spaces(i).dimension);
        END LOOP;

        RETURN l_fluid_type;
    END;

    /* 
    ** Build page CSS
    */ 
    FUNCTION buildCssRoot(pWebsiteId IN website.id%type, pApplicationId IN NUMBER, pDeploy IN BOOLEAN DEFAULT FALSE) RETURN VARCHAR2 IS
        l_fluid_types fluid_type_t;

        TYPE t_rgb_arr IS VARRAY(3) OF PLS_INTEGER;
        l_rgb_arr t_rgb_arr:=t_rgb_arr();

        TYPE t_rgb_tint_arr IS VARRAY(3) OF VARCHAR2(6);
        l_rgb_light VARCHAR2(6);
        l_rgb_lighter VARCHAR2(6);
        l_rgb_lightest VARCHAR2(6);
        
        l_css_file apex_application_static_files.file_name%type;
        l_font_category google_font_variable.category%type;
        l_font_url VARCHAR2(200);
        l_root_css LONG;
        l_deploy_css CLOB;
    BEGIN
        FOR C IN (
            SELECT w.max_width, w.color_text, w.color_background, w.color_primary, w.css,
                     w.min_font_size, w.min_width_px, w.min_scale, w.max_font_size, w.max_width_px, w.max_scale, w.img_border_radius, w.header_text_color
              FROM website w
             WHERE w.id=pWebsiteId
            )
        LOOP
            /* Build design tokens */

            l_fluid_types:=getFluidTypes(C.min_font_size, C.min_width_px, C.min_scale, C.max_font_size, C.max_width_px, C.max_scale);

            IF (NOT pDeploy) THEN
                FOR C IN (
                    SELECT DISTINCT f.family
                      FROM font f, website_font wf
                     WHERE f.id=wf.font_id
                       AND wf.website_id=pWebsiteId
                       AND COALESCE(wf.chars_italic,wf.chars_normal) IS NOT NUll
                ) LOOP
                    l_root_css:=l_root_css ||
                    '@import url("https://fonts.googleapis.com/css2?family=' || REPLACE(C.family,' ','+') || '");' || chr(10);
                END LOOP;
            END IF;
            l_root_css:=l_root_css ||
            ':root {' ||
                '-webkit-text-size-adjust: none;' ||
                'text-size-adjust: none;';
            FOR i IN 1..l_fluid_types.COUNT LOOP
                l_root_css:=l_root_css || l_fluid_types(i).property || ': ' || l_fluid_types(i).value || ';';
            END LOOP;
            FOR C1 IN (
                SELECT LOWER(wf.context) context, f.family, f.category
                FROM font f, website_font wf
               WHERE f.id=wf.font_id
                 AND wf.website_id=pWebsiteId
            ) LOOP
                l_root_css:=l_root_css || 
                '--font-family-' || C1.context || ':"' || C1.family || '",' || CASE WHEN C1.category IN ('serif','sans-serif') THEN C1.category ELSE 'sans-serif' END || ';' ;
            END LOOP;
            l_root_css:=l_root_css || 
            '--font-family-ui: system-ui, sans-serif;' ||
            '--max-width: ' || C.max_width || ';' || 
            '--img-border-radius: ' || C.img_border_radius || ';' || 
            '--header-text-color: ' || C.header_text_color || ';' || 
            '--color-text: ' || C.color_text || ';' || 
            '--color-background: ' || C.color_background || ';' || 
            '--color-primary: ' || C.color_primary || ';';

            FOR i IN 1..3 LOOP
                l_rgb_arr.EXTEND;
                l_rgb_arr(l_rgb_arr.LAST):=TO_NUMBER(SUBSTR(SUBSTR(C.color_primary,2),i+(i-1),2),'xx');
            END LOOP;

            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_light:=l_rgb_light|| TO_CHAR(l_rgb_arr(i) + (0.25 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;
            
            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_lighter:=l_rgb_lighter|| TO_CHAR(l_rgb_arr(i) + (0.5 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;

            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_lightest:=l_rgb_lightest|| TO_CHAR(l_rgb_arr(i) + (0.75 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;

            l_root_css:=l_root_css || 
            '--color-primary-light: #' || l_rgb_light || ';' ||
            '--color-primary-lighter: #' || l_rgb_lighter || ';' ||
            '--color-primary-lightest: #' || l_rgb_lightest || ';' || 
            '}';

            IF (C.css IS NULL) THEN
                 IF (pDeploy) THEN
                    l_css_file:='deploy.min.css'; -- deploy minimised css 
                ELSE
                    l_css_file:='deploy.css'; -- retain format and comments
                END IF;
                SELECT apex_util.blob_to_clob(file_content)
                  INTO l_deploy_css
                  FROM apex_application_static_files 
                 WHERE application_id=pApplicationId
                   AND file_name=l_css_file;
            ELSE
                l_deploy_css:=C.css;
            END IF;
        END LOOP;

        RETURN (l_root_css || l_deploy_css);
    END;

    /*
     **  Build Login Component
     */
    FUNCTION buildLoginAside(pWebsiteId IN website.id%type) RETURN VARCHAR2 IS
        l_html LONG;
        l_uri_template ords_endpoints.uri_template%type;
    BEGIN
        /* Get the endpoint for Log in */
        SELECT o.uri_template
          INTO l_uri_template
          FROM api_endpoint a, role r, ords_endpoints o
         WHERE a.website_id=pWebsiteId 
           AND a.role_id=r.id 
           AND r.name='visitor'
           AND o.label='Log In'
           AND a.template_id=o.template_id;
        
        l_html:=
            '<aside class="login align-end" aria-label="Actions Menu">' ||
              '<section class="dropdown">' ||
                '<details>' ||
                  '<summary>' ||
                    '<svg height="1em" viewBox="0 0 32 32" preserveAspectRatio="none">' ||
                      '<rect class="top" x="0" y="0" width="32" height="6" fill="currentColor" />' ||
                      '<rect class="middle" x="0" y="13" width="32" height="6" fill="currentColor" />' ||
                      '<rect class="bottom" x="0" y="26" width="32" height="6" fill="currentColor" />' ||
                    '</svg>' ||
                  '</summary>' ||
                  '<ul class="dropdown-content" role="list">' ||
                    '<li class="align-center"><small class="email"></small></li>' ||
                    '<li class="align-center"><small class="expires"></small></li>' ||
                    '<ul class="menulist" role="list"></ul>' ||
                    '<li><button type="button" class="button login-btn" data-endpoint="' || l_uri_template || '">Log In</button></li>' ||
                  '</ul>' ||
                '</details>' ||
              '</section>' ||
            '</aside>';
        RETURN(l_html);
    END;

    

    FUNCTION buildNavLabels(pWebsiteId IN website.id%type, pArticleId IN article.id%type) RETURN VARCHAR2 IS
        l_nav_labels LONG;
        l_article_id article.id%type;
    BEGIN
        /* IF pArticleId is a child article set aria-current-page on owner */
        FOR i IN 1..g_nav_labels.COUNT LOOP
            IF (g_nav_labels(i).article_id=pArticleId) THEN
                l_article_id:=pArticleId;
            END IF;
        END LOOP;
        IF (l_article_id IS NULL) THEN
            SELECT parent_id INTO l_article_id FROM article WHERE id=pArticleId;
        END IF;

        l_nav_labels:=
            '<nav class="flex-items space-between" aria-label="Main Navigation">';
                --'<span class="logo"></span>';
        IF (g_nav_labels.COUNT>1) THEN
            FOR i IN 1..g_nav_labels.COUNT LOOP
                IF (i=1) THEN
                    l_nav_labels:=l_nav_labels ||
                    '<div>';
                END IF;
                l_nav_labels:=l_nav_labels || 
                    '<a href="/' || CASE WHEN i>1 THEN apex_string_util.get_slug(g_nav_labels(i).navigation_label) END || '"' ||
                        CASE WHEN g_nav_labels(i).article_id=l_article_id THEN ' aria-current="page"' END  || 
                        ' data-id="' || g_nav_labels(i).article_id || '" data-collection="' || g_nav_labels(i).collection_type || '">' || g_nav_labels(i).navigation_label || '</a>';
                IF (i=g_nav_labels.COUNT) THEN
                    l_nav_labels:=l_nav_labels || 
                    '</div>';
                END IF;
            END LOOP;
        END IF;
        l_nav_labels:=l_nav_labels || buildLoginAside(pWebsiteId) ||
            '</nav>';

        RETURN (l_nav_labels);
    END;

    /*
     **  Build Contact Form
     */
    FUNCTION buildContactForm RETURN VARCHAR2 IS
    BEGIN
        RETURN(
'<div class="content-grid">
    <form class="contact flow">
      <input type="hidden" name="url" value="">
      <div>
        <label for="nameInput">Name</label>
        <input type="text" id="nameInput" name="name" required minlength="1" maxlength="50">
      </div>
      <div>
        <label for="emailInput">Email</label>
        <input type="email" id="emailInput" name="email" required maxlength="50">
      </div>
      <div>
        <label for="messageInput">Message</label>
        <textarea id="messageInput" name="message" required minlength="1" maxlength="400" rows="5" cols="40"></textarea>
      </div>
      <div>
        <button type="submit">
          SEND
        </button>
        <span class="result"></span>
      </div>
    </form>
 </div>');
    END;

    /*
     **  Build Login Form
     */
    FUNCTION buildLoginForm RETURN VARCHAR2 IS
    BEGIN
        RETURN(
            '<dialog class="login-email">' ||
                '<form class="flow">' ||
                    '<input type="hidden" name="url" value="">' ||
                    '<input type="hidden" name="request_type" value="">' ||
                    '<input type="hidden" name="domain" value="">' ||
                    '<header class="flex-items space-between">' ||
                        '<h2>Sign up or log in</h2>' ||
                        '<button type="button" class="button close no-focus" data-button-variant="round-icon">' ||
                            '<svg class="icon" aria-hidden="true" focusable="false">' ||
                                '<use href="#cross"></use>' ||
                            '</svg>' ||
                        '</button>' ||
                    '</header>' ||
                    '<article class="flow">' ||
                        '<div>' ||
                            '<label for="emailInput">Email</label>' ||
                            '<input type="email" id="emailInput" name="email" required maxlength="50" autocapitalize="none" autocorrect="off">' ||
                            '<span class="sendmail-result"></span>' ||
                        '</div>' ||
                        '<div class="visually-hidden">' ||
                            '<label for="passcodeInput">Enter Passcode</label>' ||
                            '<input type="text" id="passcodeInput" name="passcode" pattern="\d{6}" inputmode="numeric" maxlength="6" autocomplete="6-digit-passcode">' ||
                            '<span class="passcode-result"></span>' ||
                        '</div>' ||
                        '<div class="loader visually-hidden"></div>' ||
                        --'<div class="visually-hidden">' ||
                          --  '<label for="domainInput">Domain Name</label>' ||
                            --'<input type="text" id="domainInput" name="domain" required pattern="[a-z0-9\-.]+" maxlength="37" spellcheck="false" autocapitalize="none" autocorrect="off">' ||
                            --'<span class="domain-result"></span>' ||
                        --'</div>' ||
                    '</article>' ||
                    '<footer class="flex-items space-apart">' ||
                        '<button class="button sendmail-magic" type="button">Send a Link</button>' ||
                        '<div><hr><span>OR</span><hr></div>' ||
                        '<button class="button sendmail-passcode" type="button">Send a Code</button>' ||
                        '<button class="button validate-passcode visually-hidden" type="button">Submit Passcode</button>' ||
                    '</footer>' ||
                '</form>' ||
             '</dialog>');
    END;

    /*
    ** HTML document body structure
    **
    ** <header>
    ** <nav>
    ** <main>
    ** <footer>
    ** <dialog>
    ** <svg>
    */

    PROCEDURE buildBodyHtml(
        pUserId IN users.id%type, 
        pWebsiteId IN website.id%type, 
        pEnv IN VARCHAR2,
        pRestUrl IN VARCHAR2,
        pArticleId IN article.id%type, 
        pCollectionType IN website_article.collection_type%type, 
        pIsMedia IN BOOLEAN, 
        pContactForm IN website_article.contact_form%type, 
        pTitle website.title%type,
        pSubtitle website.subtitle%type,
        pHeaderEffect website.header_effect%type,
        pHeroAssetId website.hero_asset_id%type,
        pContactEmail website.contact_email%type,
        pTelephoneNumber website.telephone_number%type,
        pMobileNumber website.mobile_number%type,
        pLinkedinName website.linkedin_name%type,
        pInstagramName website.instagram_name%type,
        pPromotion website.promotion%type,
        pHtml IN OUt NOCOPY CLOB) 
    IS
        l_font_styles VARCHAR2(500);
        l_header CLOB;
        l_footer CLOB;
        l_featured_id VARCHAR2(10);
        l_featured_ids apex_t_varchar2:=apex_t_varchar2();
        l_featured_regex VARCHAR2(200);
        l_featured_replace VARCHAR2(200);
        l_thumbnails CLOB;
        l_email users.email%type;
        l_icon_id icon.id%type;
        l_icons apex_t_varchar2:=apex_t_varchar2();
        l_svg_html CLOB;
        nb_articles PLS_INTEGER;
        n PLS_INTEGER;

    BEGIN
        /* Build navigation label collection once */
        IF (g_nav_labels IS NULL) THEN
            SELECT wa.article_id, wa.navigation_label, wa.collection_type
              BULK COLLECT INTO g_nav_labels
              FROM website w, website_article wa
             WHERE w.id=pWebsiteId
               AND wa.website_id=w.id
             ORDER BY wa.display_order;
        END IF;

        /* Build font syles collection once */
        IF (g_font_styles_title IS NULL) THEN
            FOR C IN (
                SELECT context, font_size, underline, ital, opsz, slnt, wdth, wght
                  FROM website_font
                 WHERE website_id=pWebsiteId
            ) LOOP
                l_font_styles:='font-size:clamp(2cqi,' || C.font_size || 'cqi,14cqi)';

                IF (C.underline IS NOT NULL) THEN
                    l_font_styles:=l_font_styles || ';text-decoration:underline;text-underline-offset:' || C.underline || '%;text-decoration-thickness:' || C.underline || '%' ;
                END IF;

                IF (C.ital=1) THEN
                    l_font_styles:=l_font_styles || ';font-style:italic';
                END IF;
                IF (C.opsz IS NOT NULL) THEN
                    l_font_styles:=l_font_styles || ';font-variation-settings:''opsz'''|| C.opsz;
                END IF;
                IF (C.slnt IS NOT NULL) THEN
                    l_font_styles:=l_font_styles || ';font-variation-settings:''slnt'''|| C.slnt;
                END IF;
                IF (C.wdth IS NOT NULL) THEN
                    l_font_styles:=l_font_styles || ';font-stretch:'|| C.wdth || '%';
                END IF;
                IF (C.wght IS NOT NULL) THEN
                    l_font_styles:=l_font_styles || ';font-weight:'|| C.wght;
                END IF;

                CASE C.context
                    WHEN 'TITLE' THEN
                        g_font_styles_title:=l_font_styles;
                    WHEN 'SUBTITLE' THEN
                        g_font_styles_subtitle:=l_font_styles;
                END CASE;

            END LOOP;
        END IF;

        /* 
        ** Create sections for any featured collections
        */
        l_featured_regex:='<article class="featured" data-id="([^"]+)">';
        n:=NVL(regexp_count(pHtml,l_featured_regex),0);
        FOR i IN 1..n 
        LOOP
            l_featured_id:=REGEXP_SUBSTR(pHtml,l_featured_regex,1,i,null,1);
            apex_string.push(l_featured_ids,l_featured_id);
        END LOOP;

        IF (n>0) THEN
            FOR C IN (SELECT column_value as article_id FROM TABLE(l_featured_ids))
            LOOP
                l_featured_replace:=replace(l_featured_regex,'([^"]+)',C.article_id);
                pHtml:=REPLACE(pHtml,l_featured_replace,l_featured_replace || pck_core.buildBlogList(pEnv, pWebsiteId, C.article_id, pClasses => 'featured'));
            END LOOP;
        END IF;

        /* Enclose content in <article class="flow"> container if article.body_html was created in ckeditor for example */
        IF (pHtml IS NULL OR INSTR(pHtml,'<article')=0) THEN
            pHtml:='<article class="flow">' || pHtml || '</article>';
        END IF;

        /* Remove empty elements */
        pHtml:=REPLACE(pHtml,'<h1>&nbsp;</h1>',null);
        pHtml:=REPLACE(pHtml,'<p>&nbsp;</p>',null);
    
        /* Build index if page is index of Blog / Media / Product */
        IF (pCollectionType='BLOG') THEN
            pHtml:=pHtml || pck_core.buildBlogList(pEnv, pWebsiteId, pArticleId);
        ELSIF (pCollectionType='MEDIA') THEN
            pHtml:=pHtml || pck_core.buildMediaList(pWebsiteId, pArticleId);
        ELSIF (pCollectionType='PRODUCT') THEN
            pHtml:=pHtml || pck_core.buildProductList(pWebsiteId, pArticleId);
            --l_javascript:=l_javascript || getJSCode('deploy_cart.js');
        ELSIF (pIsMedia) THEN
            pck_media.getThumbnails(pArticleId,pDeploy=>TRUE,pHtml=>l_thumbnails);
            pHtml:=pHtml || 
            '<ol class="gallery-list">' || l_thumbnails || '</ol>
            <div class="gallery-overlay">
                <img src="">
                <span class="counter"></span>
                <button type="button" class="close-fullscreen">&times;</button>
                <button type="button" class="prev">&lt;</button>
                <button type="button" class="next">&gt;</button>
            </div>';
            --l_javascript:=l_javascript || getJSCode('deploy_gallery.js');
        END IF;

        /* Append Contact Form */
        IF (pContactForm='YES') THEN
            SELECT email INTO l_email FROM users WHERE id=pUserId;
            pHtml:=pHtml || buildContactForm();
            --l_javascript:=l_javascript || getJSCode('deploy_contact.js');
        END IF;

        /* Remove all style="width:n%;" */
        --pHtml:=regexp_replace(pHtml,'style="width:.+?"',null);

        /* 
        ** All images lazy loaded except first
        */
        n:=regexp_count(pHtml,'<img');
        FOR i IN 1..n 
        LOOP
            IF (i=1) THEN
                pHtml:=REGEXP_REPLACE(pHtml,'<img', '<img loading="eager" fetchpriority="high"',1,i);
            ELSE
                pHtml:=REGEXP_REPLACE(pHtml,'<img', '<img loading="lazy"',1,i);
            END IF;
        END LOOP;

        nb_articles:=MOD(regexp_count(pHtml,'<article'),2);

        /* 
        ** Build website header 
        */
        

        l_header:=
            '<header>' ||
                '<div>' ||
                    CASE WHEN pHeroAssetId IS NOT NULL THEN pck_media.getImageSrcset(pHeroAssetId) END ||
                    '<h1 class="title" style="' || g_font_styles_title ||'">' || pTitle || '</h1>' ||
                    '<h2 class="subtitle" style="' || g_font_styles_subtitle   ||'">' || pSubtitle || '</h2>' ||
                '</div>' ||
            '</header>' || 
            CASE WHEN pHeroAssetId IS NULL THEN g_curve END;

        l_footer:=
            '<footer class="flex-items">' ||
                CASE WHEN pContactEmail IS NOT NULL THEN
                '<a class="icon-with-text" href="mailto:' || pContactEmail || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#email"></use></svg><span>' || pContactEmail || '</span>' ||
                '</a>'
                END ||
                CASE WHEN pTelephoneNumber IS NOT NULL THEN
                '<a class="icon-with-text" href="tel:' || pTelephoneNumber || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#phone"></use></svg><span>' || pTelephoneNumber || '</span>' ||
                '</a>'
                END ||
                CASE WHEN pMobileNumber IS NOT NULL THEN
                '<a class="icon-with-text" href="tel:' || pMobileNumber || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#mobile"></use></svg><span>' || pMobileNumber || '</span>' ||
                '</a>'
                END ||
                CASE WHEN pLinkedinName IS NOT NULL THEN
                '<a class="icon-with-text" href="https://www.linkedin.com/in/' || pLinkedinName || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#linkedin"></use></svg><span>Let''s Connect</span>' ||
                '</a>'
                END ||
                CASE WHEN pInstagramName IS NOT NULL THEN
                '<a class="icon-with-text" href="https://www.instagram.com/' || pInstagramName || '">' ||
                    '<svg class="icon" aria-hidden="true" focusable="false"><use href="#instagram"></use></svg><span>Instagram</span>' ||
                '</a>'
                END ||
            '</footer>';


        /* 
        ** Build website footer 
        */
        --l_footer:='<footer class="section">' || pFooter || '</footer>';

        /* 
        ** Assemble content part of document 
        */
        pHtml:=
            buildNavLabels(pWebsiteId,pArticleId) || 
            '<form class="edit-header"></form>' ||
            l_header || 
            '<main class="wrapper flow">' || 
                pPromotion ||
                '<div id="editor"></div>' ||
                pHtml  || 
            '</main>' || 
            '<form class="edit-footer"></form>' ||
            l_footer;

        /* 
        ** Append any Dialog elements
        */
        
        
        pHtml:=pHtml || buildLoginForm;


        /* 
        ** Append any referenced svg as symbols 
        */
        n:=regexp_count(pHtml,'<use href="#([^"]+)');
        FOR i IN 1..n 
        LOOP
            l_icon_id:=REGEXP_SUBSTR(pHtml,'<use href="#([^"]+)',1,i,null,1);
            apex_string.push(l_icons,l_icon_id);
        END LOOP;

        IF (n>0) THEN
            pHtml:=pHtml || '<svg width="0" height="0">';
            FOR C IN (SELECT id, title, viewbox, preserveaspectratio, svg FROM icon WHERE id IN (SELECT DISTINCT column_value FROM TABLE(l_icons)) ORDER BY id)
            LOOP
                pHtml:=pHtml || '<symbol id="' || C.id|| '" viewBox="' || C.viewbox|| '" preserveAspectRatio="' || C.preserveaspectratio || '">' || C.svg || '</symbol>';
            END LOOP;
            pHtml:=pHtml || '</svg>';
        END IF;

        /*
        ** Return complete <body> element with data attributes identifying internal id of website and article
        */
        pHtml:='<body data-websiteid="' || pWebsiteId || '" data-articleid="' || pArticleId || '" data-resturl="' || pRestUrl || '">' || pHtml || '</body>';

    END;

    /*
    ** Build resources to open requested article in Codepen
    */
    PROCEDURE getCodepen(pArticleId IN article.id%type) IS
        l_website_id website.id%type;
        
        l_domain_name website.domain_name%type;
        l_contact_form website_article.contact_form%type;
        l_collection_type website_article.collection_type%type;
        l_is_blog BOOLEAN:=FALSE;
        l_is_media BOOLEAN:=FALSE;
        l_html CLOB;
        l_title website.title%type;
        l_subtitle website.subtitle%type;
        l_header_effect website.header_effect%type;
        l_hero_asset_id website.hero_asset_id%type;
        l_promotion website.promotion%type;
        l_contact_email website.contact_email%type;
        l_telephone_number website.telephone_number%type;
        l_mobile_number website.mobile_number%type;
        l_linkedin_name website.linkedin_name%type;
        l_instagram_name website.instagram_name%type;
        l_css CLOB;
        l_javascript CLOB;
        l_fluid_types pck_core.fluid_type_t;
        l_fluid_css LONG;
        l_session_data pck_core.session_data_rt;

        FUNCTION getJSCode(pFilename IN VARCHAR2) RETURN CLOB IS
        BEGIN
            FOR C IN (SELECT apex_util.blob_to_clob(file_content) file_content
                        FROM apex_application_static_files 
                       WHERE application_id=l_session_data.app_id
                         AND file_name=pFilename) 
            LOOP
                RETURN (C.file_content);
            END LOOP;
        END;

    BEGIN
        l_session_data:=pck_core.getSessionData();

        /* Get id of website owning the article because we need to build navigation labels as would appear in the deployed site */

        FOR C IN (SELECT website_id FROM website_article WHERE article_id=pArticleId AND user_id=l_session_data.user_id) LOOP
            l_website_id:=C.website_id;
        END LOOP;

        IF (l_website_id IS NULL) THEN
            /* Must be a sub-page article - so get website id from its parent article */
            FOR C IN (SELECT wa.website_id, wa.collection_type
                        FROM website_article wa, article a 
                       WHERE a.id=pArticleId
                         AND wa.article_id=a.parent_id
                         AND author_user_id=l_session_data.user_id ) 
            LOOP
                l_website_id:=C.website_id;
                l_is_blog:=C.collection_type='BLOG';
                l_is_media:=C.collection_type='MEDIA';
            END LOOP;
        END IF;

        /* Get page content */

        IF (l_is_blog OR l_is_media) THEN
            SELECT w.domain_name, w.title, w.subtitle, w.header_effect, w.hero_asset_id, w.promotion, a.body_html, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name, w.instagram_name, null,null
              INTO l_domain_name, l_title, l_subtitle, l_header_effect, l_hero_asset_id, l_promotion, l_html, l_contact_email, l_telephone_number, l_mobile_number, l_linkedin_name, l_instagram_name, l_contact_form, l_collection_type
              FROM website w, article a
             WHERE w.id=l_website_id
               AND a.id=pArticleId;
        ELSE
            SELECT w.domain_name, w.title, w.subtitle, w.header_effect, w.hero_asset_id, w.promotion, a.body_html, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name, w.instagram_name, wa.contact_form, wa.collection_type
              INTO l_domain_name, l_title, l_subtitle, l_header_effect, l_hero_asset_id, l_promotion, l_html, l_contact_email, l_telephone_number, l_mobile_number, l_linkedin_name, l_instagram_name, l_contact_form, l_collection_type
              FROM website w, website_article wa, article a
             WHERE w.id=l_website_id
               AND wa.website_id=w.id
               AND wa.article_id=a.id
               AND a.id=pArticleId;
        END IF;

        buildBodyHtml(
            l_session_data.user_id, 
            l_website_id,
            'TEST', /* TEST environemt for Codepen */
            pck_core.getresturl(),
            pArticleId, 
            l_collection_type, 
            l_is_media, 
            l_contact_form, 
            l_title, 
            l_subtitle, 
            l_header_effect,
            l_hero_asset_id,
            l_contact_email,
            l_telephone_number, 
            l_mobile_number, 
            l_linkedin_name,
            l_instagram_name,
            l_promotion,
            l_html);

        l_javascript:=
        'document.querySelector(".login-btn").addEventListener("click", () => {' || 
            'document.querySelector(".login-email").showModal();' ||
        '})';
        
        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('domain_name', l_domain_name);
        apex_json.write('html', l_html);
        apex_json.write('css', buildCssRoot(l_website_id, l_session_data.app_id));
        apex_json.write('js', l_javascript);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN 
            pck_core.log_error;
    END;

    /*
     **  Update website HTML / CSS from the contents of an exported Codepen zip file
     */        
    PROCEDURE uploadCodepen(pId IN VARCHAR2, pZipFile IN BLOB) IS
        l_website_id website.id%type;
        l_article_id article.id%type;
        l_css CLOB;
        l_header CLOB;
        l_main CLOB;
        l_footer CLOB;
        l_body_html CLOB;
        l_zip BLOB:=pZipFile;
        l_files apex_zip.t_files;
        l_session_data pck_core.session_data_rt;
        l_nb_files PLS_INTEGER:=0;
        l_ddl VARCHAR2(500);
        l_deploy_css CLOB;
        l_updated_columns apex_t_varchar2:=apex_t_varchar2();
        l_updated_files apex_t_clob:=apex_t_clob();

        PROCEDURE send_json(pMessage IN VARCHAR2) IS
            l_message VARCHAR2(200);
        BEGIN
            IF (l_updated_files.COUNT>0) THEN
                l_message:='UPLOADED: ' || apex_string.join(l_updated_columns,',');
            END IF;
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('message', l_message || pMessage);
            apex_json.close_object;
        END;

    BEGIN
        l_session_data:=pck_core.getSessionData();

        /* pId contains website_id,article_id */
        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_article_id:=SUBSTR(pId,INSTR(pId,',')+1);

        l_files:=apex_zip.get_files(p_zipped_blob => l_zip);

        FOR i in 1 .. l_files.COUNT LOOP
            IF (INSTR(l_files(i),'/src/style.css')>0) THEN
                l_css:=apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name => l_files(i)));
                l_nb_files:=l_nb_files+1;
            ELSIF (INSTR(l_files(i),'/src/index.html')>0) THEN
                l_body_html:=REPLACE(apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob=>l_zip, p_file_name=>l_files(i))),chr(10));
                l_nb_files:=l_nb_files+1;
            END IF;
        END LOOP;

        IF (l_nb_files<2) THEN
            apex_json.open_object;
            apex_json.write('success', FALSE);
            apex_json.write('message', '** ZIP MUST INCLUDE FILES "/src/index.html", "/src/css.styles" **');
            apex_json.close_object;
            RETURN;
        END IF;

        FOR C IN (SELECT css, header, footer FROM website WHERE id=l_website_id) LOOP
            
            SELECT apex_util.blob_to_clob(file_content)
              INTO l_deploy_css
              FROM apex_application_static_files 
             WHERE application_id=l_session_data.app_id
               AND file_name='deploy.css';

            /* 
            ** remove :root css pre-pended when codepen was created 
            ** 'n' handles case where user formats the css in codepen before exporting
            ** Note that we want to retain user formatting uploaded to the css column
            */
            l_css:=regexp_replace(l_css,':root(.*?)}',null,1,1,'n');

            IF (l_css IS NULL) THEN
                apex_string.push(l_updated_columns,'CSS');
                apex_string.push(l_updated_files,l_css);
            ELSIF (dbms_lob.compare(REPLACE(l_deploy_css,chr(10)),REPLACE(l_css,chr(10)))<>0) THEN
                apex_string.push(l_updated_columns,'CSS');
                apex_string.push(l_updated_files,l_css);
            END IF;

            /*
            ** header and footer are the first and last elements of class "section" in l_body_html
            */

            l_header:=regexp_substr(l_body_html,'<header class="section.+?>(.+?)</header>',1,1,'n',1);
            l_header:=regexp_replace(l_header,'<aside class="login.+?</aside>');
            l_header:=TRIM(l_header);
            IF (l_header IS NULL AND C.header IS NOT NULL) THEN
                apex_string.push(l_updated_columns,'HEADER');
                apex_string.push(l_updated_files,l_header);
            ELSIF (dbms_lob.compare(l_header,NVL(C.header,'x'))<>0) THEN
                apex_string.push(l_updated_columns,'HEADER');
                apex_string.push(l_updated_files,l_header);
            END IF;

            l_footer:=regexp_substr(l_body_html,'<footer class="section.+?>(.+?)</footer>',1,1,'n',1);
            l_footer:=TRIM(l_footer);
            IF (l_footer IS NULL AND C.footer IS NOT NULL) THEN
                apex_string.push(l_updated_columns,'FOOTER');
                apex_string.push(l_updated_files,l_footer);
            ELSIF (dbms_lob.compare(REPLACE(l_footer,chr(10)),REPLACE(NVL(C.footer,'x'),chr(10)))<>0) THEN
                apex_string.push(l_updated_columns,'FOOTER');
                apex_string.push(l_updated_files,l_footer);
            END IF;

            FOR i IN 1..l_updated_columns.COUNT LOOP
                IF (i=1) THEN
                    l_ddl:='UPDATE website SET updated_date=current_timestamp';
                END IF;
                CASE l_updated_columns(i)
                    WHEN 'CSS' THEN l_ddl:=l_ddl || ',css=:B' || i;
                    WHEN 'HEADER' THEN l_ddl:=l_ddl || ',header=:B' || i;
                    WHEN 'FOOTER' THEN l_ddl:=l_ddl || ',footer=:B' || i;
                END CASE;
            END LOOP;

            IF (l_ddl IS NOT NULL) THEN
                l_ddl:=l_ddl || ' WHERE id=:B';
                CASE l_updated_columns.COUNT
                    WHEN 1 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_website_id;
                    WHEN 2 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_updated_files(2), l_website_id;
                    WHEN 3 THEN EXECUTE IMMEDIATE l_ddl USING l_updated_files(1), l_updated_files(2), l_updated_files(3), l_website_id;
                END CASE;
            END IF;
        END LOOP;

        /*
        ** EXTRACT AND PROCESS HTML ELEMENT
        */
        l_main:=regexp_substr(l_body_html,'<main.+?</main>');
        IF (INSTR(l_main,'<pre>')>0) THEN
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('message', CASE WHEN l_updated_files.COUNT>0 THEN 'UPLOADED: ' || apex_string.join(l_updated_columns,',') END || ' - ** &lt;main&gt; SKIPPED - CONTAINS &lt;PRE&gt; ELEMENT **');
            apex_json.close_object;
            RETURN;
        END IF;
        
        /* Remove elements added in getCodepen procedure */
        l_main:=regexp_replace(regexp_replace(regexp_replace(l_main,
            '<ol class="featured.+?</ol>'),
            '<main.+?>'),
            '</main>');
        
        FOR C IN (SELECT body_html FROM article WHERE id=l_article_id) LOOP
            IF (dbms_lob.compare(C.body_html,l_main)<>0) THEN
                UPDATE article SET body_html=l_main, updated_date=current_timestamp WHERE id=l_article_id;
                apex_string.push(l_updated_columns,'MAIN');
            END IF;
        END LOOP;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', CASE WHEN l_updated_files.COUNT>0 THEN 'UPLOADED: ' || apex_string.join(l_updated_columns,',') ELSE 'NO CHANGES' END );
        apex_json.write('html',l_main);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;    
end;
/