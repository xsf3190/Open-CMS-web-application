CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_HOSTING" is
    --
    PROCEDURE changeURL(pWebsiteId IN website.id%type, pBodytext IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE createWebsite(pWebsiteId IN website.id%type, pUserid IN users.id%type, pEmail IN users.email%type, pUrl IN OUT VARCHAR2);
    --
    PROCEDURE deleteDNS(pWebsiteId IN website.id%type);
    --
    PROCEDURE deleteWebsite(pWebsiteid IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getChangeURL(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getDNS(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    FUNCTION getEditorDomain(pEmail IN users.email%type) RETURN VARCHAR2;
    --
    PROCEDURE linkDNS(pWebsiteId IN website.id%type, pBodytext IN CLOB, pStatus OUT NUMBER);
    --
    FUNCTION urlExists(pUrl IN VARCHAR2) RETURN BOOLEAN;
    --
    PROCEDURE waitDeployment(pWebsiteId IN website.id%type, pUserid IN users.id%type, pWaitSeconds IN NUMBER DEFAULT 10);
    --
    PROCEDURE createURLExistsJob(pUrl IN VARCHAR2, pUserid IN website.user_id%type);

    PROCEDURE runURLExists(pUrl IN VARCHAR2, pUserid IN website.user_id%type);
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_HOSTING" is

    /*
    ** POLL NETLIFY "deploys" API FOR STATUS="ready"
    */
    PROCEDURE waitDeployment(pWebsiteId IN website.id%type, pUserid IN users.id%type, pWaitSeconds IN NUMBER) IS
        l_netlify_deploy_id website.netlify_deploy_id%type;
        l_netlify_site_id website.netlify_site_id%type;
        l_clob CLOB;
        l_state VARCHAR2(20);
        l_done BOOLEAN:=FALSE;
        n PLS_INTEGER:=2;
    BEGIN
        /* WAIT A COUPLE OF SECONDS BEFORE STARTING. HOPEFULLY WILL BE "ready"  */
        dbms_session.sleep(n);

        SELECT netlify_deploy_id, netlify_site_id INTO l_netlify_deploy_id, l_netlify_site_id FROM website WHERE id=pWebsiteId;

        WHILE NOT l_done 
        LOOP
            pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites/'|| l_netlify_site_id || '/deploys/' || l_netlify_deploy_id, pMethod=>'GET', pData=>l_clob);
            
            SELECT state INTO l_state FROM JSON_TABLE(l_clob, '$' COLUMNS (state));

            n:=n+1;
            IF (n>=pWaitSeconds) THEN
                l_done:=TRUE;
                EXIT;
            END IF;

            IF (l_state='ready') THEN
                l_done:=TRUE;
            ELSE
                dbms_session.sleep(1);
            END IF;

        END LOOP;

        IF (n=pWaitSeconds) THEN
            RAISE_APPLICATION_ERROR(-20100,'Waited too long for Netlify Deploy');
        END IF;
    END;

    /* 
    ** CHECKS URL EXISTS
    */
    FUNCTION urlExists(pUrl IN VARCHAR2) RETURN BOOLEAN IS
        l_clob CLOB;
        l_not_found EXCEPTION;
        PRAGMA EXCEPTION_INIT(l_not_found,-29273);
    BEGIN
        apex_web_service.clear_request_headers;
        l_clob:=apex_web_service.make_rest_request(p_url=>'https://' || pUrl, p_http_method=>'HEAD');
        IF (apex_web_service.g_status_code=200) THEN
            RETURN (TRUE);
        ELSE
            RETURN (FALSE);
        END IF;
        EXCEPTION
            WHEN l_not_found then
                RETURN (FALSE);
    END;

    /* 
    ** CONVERT EMAIL ACCOUNT NAME INTO VALID SUBDOMAIN NAME
    */
    FUNCTION getEditorDomain(pEmail IN users.email%type) RETURN VARCHAR2 IS
        l_domain VARCHAR2(100);
    BEGIN
        l_domain:=SUBSTR(pEmail,1,INSTR(pEmail,'@')-1);
        l_domain:=REPLACE(REPLACE(l_domain,'.','-'),'_','-');
        RETURN(l_domain);
    END;

    /* 
    ** CREATE NEW WEBSITE ON NETLIFY HOSTING SERVICE.
    ** PARAMETER pWebsiteid IS WEBSITE THROUGH WHICH PROSPECTIVE CLIENT MADE REQUEST
    */
    PROCEDURE createWebsite(pWebsiteId IN website.id%type, pUserid IN users.id%type, pEmail IN users.email%type, pUrl IN OUT VARCHAR2) IS
        l_domain website.domain_name%type;
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_netlify_site_id website.netlify_site_id%type;
        l_ssl_url VARCHAR2(100);
        l_body_html article.body_html%type:=
        '<article class="flow">' ||
        '<h2>Starter font</h2>' ||
        '<p>the quick brown fox jumps over the lazy dog!</p>' ||
        '<p>PACK MY BOX WITH FIVE DOZEN LIQUOR JUGS?</p>' ||
        '</article>';
    BEGIN
        l_domain:=getEditorDomain(pEmail);
        IF (urlExists(l_domain || '.netlify.app')) THEN
            RAISE_APPLICATION_ERROR(-20040,l_domain || '.netlify.app already exists');
        ELSE
            l_json:=new JSON_OBJECT_T;
            l_json.put('name', l_domain);
            pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);
        END IF;


        /* Get Netlify site_id for EDITOR site */
        
        SELECT site_id, ssl_url INTO l_netlify_site_id, l_ssl_url FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id, ssl_url));

        INSERT INTO website (id, domain_name, netlify_site_id, created_date, user_id, contact_email, title, subtitle, header_effect, color_primary)
        VALUES (seq_website.nextval, l_domain, l_netlify_site_id, current_timestamp, pUserid, pEmail, l_domain, 'Welcome to your website', 'curve', '#0F121A');

        INSERT INTO website_font (website_id, context, font_id, opsz, slnt, wdth, wght, font_size, color, underline, margin)
        SELECT seq_website.currval, context, font_id, opsz, slnt, wdth, wght, font_size, color, 0, 0
          FROM website_font
         WHERE website_id=pWebsiteId;

        INSERT INTO article (id, body_html, author_user_id)
        VALUES (seq_article.nextval, l_body_html, pUserid);

        INSERT INTO website_article (website_id, article_id, display_order, navigation_label)
        VALUES (seq_website.currval, seq_article.currval, 1, 'Home');

        pck_deploy.runDeployment(seq_website.currval, pUserid, 'TEST', l_netlify_site_id, pck_core.getRestUrl(),'live');
        
        waitDeployment(seq_website.currval, pUserid);

        pUrl:=l_ssl_url;
    END;

    /*
     * DELETE WEBSITE INCLUDING HOSTING AND ANY ASSETS OWNED BY US
    */
    PROCEDURE deleteWebsite(pWebsiteid IN website.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        TYPE t_website_article IS TABLE OF article.id%type INDEX BY PLS_INTEGER;
        l_website_articles t_website_article;
        l_clob CLOB;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        FOR C IN (
            SELECT w.user_id, w.netlify_site_id, w.netlify_site_id_custom, w.netlify_dns_zone_id, u.cld_api_key 
              FROM website w, users u 
             WHERE w.id=pWebsiteId
               AND w.user_id=u.id
        ) LOOP
            /* DELETE NETLIFY SITES (NOTE THAT USER MAY HAVE DELETED THESE MANUALLY IF SELF-HOSTING)  */
            IF (C.netlify_site_id_custom IS NOT NULL) THEN
                pck_api.callNetlifyAPI(pUserId=>C.user_id, pEndpoint=>'sites/' || C.netlify_site_id_custom, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
                pck_api.callNetlifyAPI(pUserId=>C.user_id, pEndpoint=>'dns_zones/' || C.netlify_dns_zone_id, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
            END IF;
            
            IF (C.netlify_site_id IS NOT NULL) THEN
                pck_api.callNetlifyAPI(pUserId=>C.user_id, pEndpoint=>'sites/' || C.netlify_site_id, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
            END IF;

            /* DELETE ALL DATABASE ROWS RELATED TO WEBSITE */

            SELECT article_id BULK COLLECT INTO l_website_articles FROM website_article WHERE website_id=pWebsiteId;
            
            FOR i IN 1..l_website_articles.COUNT LOOP

                /* DELETE ASSETS ON:Y IF WE ARE HOSTING THEM (USER OWNS THESE INDEPENDENTLY */
                IF (C.cld_api_key IS NULL) THEN
                    FOR C1 IN (SELECT DISTINCT cld_cloud_name, resource_type FROM asset WHERE article_id=l_website_articles(i)) LOOP
                        pck_api.callCloudinaryAPI(pUserId=>C.user_id, pEndpoint=>C1.cld_cloud_name || '/resources/' || C1.resource_type || '/tags/' || l_website_articles(i), pMethod=>'DELETE', pData=>l_clob);
                    END LOOP;
                END IF;

                /* DELETE ARTICLE (CASCADES TO ASSET AND WEBSITE_ARTICLE) */
                DELETE article WHERE id=l_website_articles(i);
                DELETE page_hit WHERE article_id=l_website_articles(i);
                DELETE website_article_cwv WHERE article_id=l_website_articles(i);

            END LOOP;

            /* DELETE WEBSITE (CASCADES) */
            DELETE refresh_token WHERE website_id=pWebsiteId;
            DELETE website WHERE id=pWebsiteId;

        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
        
        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /*
    ** CREATE HTML FOR FORM TO CHANGE SUBDOMAIN OF TEST URL
    */
    PROCEDURE getChangeURL(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_subdomain website.domain_name%type;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        l_subdomain:=SUBSTR(l_session_data.url,1,INSTR(l_session_data.url,'.')-1);

        apex_json.open_object;
        apex_json.write('article', '<label for="subdomain">Enter New URL</label><input type="text" name="subdomain" required value="' || l_subdomain || '"><span class="result">' || l_session_data.url || '</span>');
        apex_json.write('footer', '<button type="button" class="button change-url">CHANGE URL</button><div class="loader visually-hidden"></div>');
        apex_json.write('success', TRUE);
        apex_json.close_object;

        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /*
    ** CHANGE NETLIFY SUBDOMAIN NAME IF AVAILABLE
    */
    PROCEDURE changeURL(pWebsiteId IN website.id%type, pBodytext IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_netlify_site_id website.netlify_site_id%type;
        l_subdomain website.domain_name%type;
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_valid BOOLEAN:=TRUE;
        l_message VARCHAR2(50);
        l_new_token_domain VARCHAR2 (4000);
        l_new_refresh_domain VARCHAR2 (4000);
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT j.subdomain, w.netlify_site_id INTO l_subdomain, l_netlify_site_id  FROM JSON_TABLE(pBodytext, '$' COLUMNS (subdomain)) j, website w WHERE w.id=pWebsiteId;

        IF (urlExists(l_subdomain || '.netlify.app')) THEN
            l_message:='URL already in use. Try again';
            l_valid:=FALSE;
        ELSE
            l_json:=new JSON_OBJECT_T;
            l_json.put('name', l_subdomain);
            pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites/' || l_netlify_site_id, pMethod=>'PATCH', pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
            IF (apex_web_service.g_status_code BETWEEN 200 AND 299) THEN
                l_message:='URL successfully changed';
                UPDATE website SET domain_name=l_subdomain WHERE id=pWebsiteId;
                pck_deploy.runDeployment(pWebsiteId, l_session_data.user_id, 'TEST', l_netlify_site_id, pck_core.getRestUrl(),'live');
            ELSIF (apex_web_service.g_status_code=422) THEN
                l_message:='Name already taken. Try again';
                l_valid:=FALSE;
            END IF;
        END IF;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('valid', l_valid);
        IF (l_valid) THEN
            l_new_token_domain:=apex_jwt.ENCODE (
                p_iss       => l_session_data.iss,
                p_sub       => l_session_data.sub,
                p_aud       => l_session_data.scope,
                p_jti       => l_session_data.user_id,
                p_iat_ts    => current_timestamp,
                p_exp_sec   => pck_sec.ACCESS_TOKEN_EXP,
                p_signature_key => UTL_RAW.cast_to_raw (l_session_data.client_secret)
            ); 
            l_new_refresh_domain:=apex_jwt.ENCODE (
                p_iss       => l_session_data.iss,
                p_sub       => l_session_data.sub,
                p_aud       => l_session_data.scope,
                p_jti       => l_session_data.user_id,
                p_iat_ts    => current_timestamp,
                p_exp_sec   => pck_sec.REFRESH_TOKEN_EXP,
                p_signature_key => UTL_RAW.cast_to_raw (l_session_data.client_secret)
            );
            apex_json.write('url', 'https://' || l_subdomain || '.netlify.app' || '?refresh=' || l_new_refresh_domain || '&token=' || l_new_token_domain);
        END IF;
        apex_json.write('message', l_message);
        apex_json.close_object;

        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /*
    ** GET ALL DNS ZONE SERVERS REGISTERED FOR A CUSTOM DOMAIN
    ** IF NOT REGISTERED RETURN INPUT ELEMENT AND BUTTON TO CREATE CUSTOM DOMAIN SITE
    */
    PROCEDURE getDNS(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_clob CLOB;
        l_netlify_site_id_custom website.netlify_site_id_custom%type;
        l_html VARCHAR2(500);
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT netlify_site_id_custom INTO l_netlify_site_id_custom  FROM website WHERE id=pWebsiteId;

        apex_json.open_object; 
        
        IF (l_netlify_site_id_custom IS NULL) THEN
            apex_json.write('header', '<h4>Link to custom Domain</h4>');
            apex_json.write('article', '<label for="domain_name_custom">Enter Registered Domain Name</label><input type="text" id="domain_name_custom" name="domain_name_custom" required><div class="result"></div>');
            apex_json.write('footer', '<button type="button" class="button create-dns">GET NAMESERVERS</button><div class="loader visually-hidden"></div>');
        ELSE
            pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites/' || l_netlify_site_id_custom || '/dns', pMethod=>'GET', pData=>l_clob);
            FOR C IN (SELECT dns_server  FROM JSON_TABLE(l_clob, '$' COLUMNS (NESTED PATH '$.dns_servers[*]' COLUMNS (dns_server PATH '$'))) ) 
            LOOP
                l_html:=l_html || '<li>' || C.dns_server || '</li>';
            END LOOP;
            apex_json.write('header', '<h4>Domain Name Servers</h4>');
            apex_json.write('article', '<ul>' || l_html || '</ul>');
            apex_json.write('footer', '<p>Update your domain''s nameservers</p>');
        END IF;

        apex_json.write('success', TRUE);
        apex_json.close_object;

        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /*
    ** DELETE DNS ZONE REGISTERED FOR A CUSTOM DOMAIN - CALLED AS PART OF WEBSITE DELETE PROCESS
    */
    PROCEDURE deleteDNS(pWebsiteId IN website.id%type) IS
        l_clob CLOB;
    BEGIN
        FOR C IN (
            SELECT netlify_dns_zone_id, user_id FROM website WHERE id=pWebsiteId AND netlify_dns_zone_id IS NOT NULL
        )
        LOOP
            pck_api.callNetlifyAPI(pUserId=>C.user_id, pEndpoint=>'dns_zones/' || C.netlify_dns_zone_id, pMethod=>'DELETE', pData=>l_clob);
        END LOOP;
    END;

    /*
    ** LINK EDITOR WEBSITE TO CUSTOM DOMAIN
    */
    PROCEDURE linkDNS(pWebsiteId IN website.id%type, pBodytext IN CLOB, pStatus OUT NUMBER) IS
        l_domain_name_custom website.domain_name_custom%type;
        l_domain_name website.domain_name%type;
        l_user_id website.user_id%type;
        l_session_data pck_sec.t_session_data;
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_netlify_account_slug users.netlify_account_slug%type;
        l_netlify_site_id_custom website.netlify_site_id_custom%type;
        l_netlify_dns_zone_id website.netlify_dns_zone_id%type;
        l_article VARCHAR2(1000);
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT j.domain_name_custom, w.domain_name, w.user_id INTO l_domain_name_custom, l_domain_name, l_user_id FROM website w, JSON_TABLE(pBodytext, '$' COLUMNS (domain_name_custom)) j WHERE w.id=pWebsiteId;

        pck_core.log('l_domain_name:'|| l_domain_name);
        pck_core.log('l_domain_name_custom:'||l_domain_name_custom);

        /* Create NETLIFY site object for LIVE site connected to custom domain */
        l_json:=new JSON_OBJECT_T;
        l_json.put('name', l_domain_name || ' linked to ' || l_domain_name_custom);
        l_json.put('custom_domain', l_domain_name_custom);

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites', pMethod=>'POST', pStatusAllowed=>422, pBody=>l_json.stringify, pData=>l_clob);

        IF (apex_web_service.g_status_code=422) THEN
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('error', 'Domain Name invalid. Must include top level domain, eg ".com", ".co.uk"');
            apex_json.close_object;
            RETURN;
        END IF;

        SELECT id, account_slug 
          INTO l_netlify_site_id_custom, l_netlify_account_slug
          FROM JSON_TABLE(l_clob, '$' COLUMNS (id, account_slug));

        /* Create NETLIFY DNS ZONE for LIVE site */
        l_json:=new JSON_OBJECT_T;
        l_json.put('account_slug', l_netlify_account_slug);
        l_json.put('site_id', l_netlify_site_id_custom);
        l_json.put('name', l_domain_name_custom);

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'dns_zones', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);

        /* 
        ** Get dns zone id and Netlify DNS server names to be updated in user's domain registrar 
        */
        FOR C IN (SELECT id, dns_server  FROM JSON_TABLE(l_clob, '$' COLUMNS (id, NESTED PATH '$.dns_servers[*]' COLUMNS (dns_server PATH '$'))) ) 
        LOOP
            l_netlify_dns_zone_id:=C.id;
            l_article:=l_article || '<li>' || C.dns_server || '</li>';
        END LOOP;
        l_article:='<ul role="list">' || l_article || '</ul>';

        UPDATE website 
           SET netlify_site_id_custom=l_netlify_site_id_custom, netlify_dns_zone_id=l_netlify_dns_zone_id, updated_date=current_timestamp 
         WHERE id=pWebsiteId;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('article', l_article);
        apex_json.write('footer', 'Update your domain''s nameservers');
        apex_json.close_object;

        pStatus:=200;

        /*
        ** Deploy LIVE website
        */
        pck_deploy.runDeployment(pWebsiteId, l_user_id, 'LIVE', l_netlify_site_id_custom, pck_core.getRestUrl(),'live');

        createURLExistsJob(l_domain_name_custom, l_user_id);

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /*
    ** SUBMIT JOB TO RUN EVERY 10 MINUTES CHECKING URL IS ACTIVE.
    ** RUNS AT NEXT 10 MINUTE BOUNDARY AND THEN EVERY 10 MINUTES UNTIL URL EXISTS
    */
    PROCEDURE createURLExistsJob(pUrl IN VARCHAR2, pUserId IN website.user_id%type) IS
        l_job_name VARCHAR2(30);
    BEGIN
        l_job_name:=dbms_scheduler.generate_job_name('URLEXISTS_');
        dbms_scheduler.create_job(
            job_name   => l_job_name,
            job_type   =>'STORED_PROCEDURE',
            job_action =>'pck_hosting.runURLExists',
            number_of_arguments=>1,
            start_date=>systimestamp,
            repeat_interval   => 'FREQ=minutely;BYMINUTE=0,10,20,30,40,50;BYSECOND=0'
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 1,
            argument_value => pUrl
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 2,
            argument_value => pUserId
        );
        dbms_scheduler.enable(l_job_name);
    END;

    /*
    ** CHECK URL IS ACTIVE - I.E. DNS HAS SUFFICIENTLY PROPAGATED AND NETLIFY SSL CERTIFICATE HAS BEEN ISSUED
    */
    PROCEDURE runURLExists(pUrl IN VARCHAR2, pUserId IN website.user_id%type) IS
        l_job_name VARCHAR2(30);
        l_sendmail_body LONG;
    BEGIN
        IF NOT (urlExists(pUrl)) THEN
            pck_core.log('URL ' || pUrl || ' NOK. Retry in 10 minutes');
            RETURN;
        END IF;

        pck_core.log('URL ' || pUrl || ' OK. Send mail and drop job');
        l_sendmail_body:=pck_email.emailTemplate('website',pUrl);
        FOR C IN (SELECT email FROM users WHERE id=pUserId) LOOP
            pck_email.sendmail(C.email, pUrl || ' is deployed', l_sendmail_body);
        END LOOP;

        SELECT job_name INTO l_job_name FROM user_scheduler_running_jobs WHERE session_id = sys_context('USERENV', 'SID');
        dbms_scheduler.drop_job(l_job_name,defer=>true);

    END;

    /*
    ** COPY NETLIFY STATUS TO DATABASE TABLES
    */
    PROCEDURE getNetlifyStatus(pUrl IN VARCHAR2, pUserId IN website.user_id%type) IS
    BEGIN
        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_dns_zones);
        DELETE netlify_dns_zone;
        INSERT INTO netlify_dns_zone (id, name, site_id, created_at, updated_at)
        SELECT id, name, site_id, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') 
          FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS(id, name, site_id, created_at, updated_at));

        DELETE netlify_dns_zone_server;
        INSERT INTO netlify_dns_zone_server (dns_zone_id, server)
        SELECT id, server FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS (id, NESTED '$.dns_servers[*]' COLUMNS (server varchar2(50) path '$')));

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites', pMethod=>'GET', pData=>l_sites);
        DELETE netlify_site;
        INSERT INTO netlify_site (id, name, custom_domain, url, created_at, updated_at)
        SELECT id, name, custom_domain, url, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR')
          FROM JSON_TABLE(l_sites, '$[*]' COLUMNS(id, name, custom_domain, url, created_at, updated_at));
    END;

end;
/