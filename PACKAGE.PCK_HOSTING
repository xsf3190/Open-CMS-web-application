CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_HOSTING" is
    --
    PROCEDURE createWebsite(pWebsiteId IN website.id%type, pDomain IN VARCHAR2, pUserid IN users.id%type, pEmail IN users.email%type, pUrl IN OUT VARCHAR2);
    --
    PROCEDURE deleteWebsite(pWebsiteid IN website.id%type);
    --
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_HOSTING" is

    /*
    ** POLL NETLIFY "deploys" API FOR STATUS=ready.
    */
    PROCEDURE waitDeployment(pWebsiteId IN website.id%type, pUserid IN users.id%type) IS
        l_netlify_deploy_id website.netlify_deploy_id%type;
        l_netlify_site_id website.netlify_site_id%type;
        l_clob CLOB;
        l_state VARCHAR2(20);
        l_done BOOLEAN:=FALSE;
        n PLS_INTEGER:=0;
    BEGIN
        SELECT netlify_deploy_id, netlify_site_id INTO l_netlify_deploy_id, l_netlify_site_id FROM website WHERE id=pWebsiteId;

        WHILE NOT l_done 
        LOOP
            pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites/'|| l_netlify_site_id || '/deploys/' || l_netlify_deploy_id, pMethod=>'GET', pData=>l_clob);
            
            SELECT state INTO l_state FROM JSON_TABLE(l_clob, '$' COLUMNS (state));

            n:=n+1;
            IF (n=5) THEN
                l_done:=TRUE;
                EXIT;
            END IF;

            pck_core.log(l_state);
            IF (l_state='ready') THEN
                l_done:=TRUE;
            ELSE
                dbms_session.sleep(1);
            END IF;

        END LOOP;

        IF (n=5) THEN
            RAISE_APPLICATION_ERROR(-20100,'Waited too long for Netlify Deploy');
        END IF;
    END;

    /* 
    ** CREATE NEW WEBSITE ON NETLIFY HOSTING SERVICE.
    ** PARAMETER pWebsiteid IS WEBSITE THROUGH WHICH PROSPECTIVE CLIENT MADE REQUEST
    */
    PROCEDURE createWebsite(pWebsiteId IN website.id%type, pDomain IN VARCHAR2, pUserid IN users.id%type, pEmail IN users.email%type, pUrl IN OUT VARCHAR2) IS
        l_domain website.domain_name%type:=pDomain;
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_netlify_site_id website.netlify_site_id%type;
        l_ssl_url VARCHAR2(100);
        l_home_article_id article.id%type;
    BEGIN
        l_json:=new JSON_OBJECT_T;
        l_json.put('name', l_domain);
        pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);

        /* Get Netlify site_id for EDITOR site */
        
        SELECT site_id, ssl_url INTO l_netlify_site_id, l_ssl_url FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id, ssl_url));

        INSERT INTO website (id, domain_name, netlify_site_id, created_date, user_id, contact_email, title, subtitle, header_text_color, header_effect)
        SELECT seq_website.nextval, pDomain, l_netlify_site_id, current_timestamp, pUserid, pEmail, 'TITLE', 'subtitle', header_text_color, header_effect
          FROM website WHERE id=pWebsiteId;

        INSERT INTO website_font (website_id, context, font_id, ital, wdth, wght, opsz, slnt, font_size, underline)
        SELECT seq_website.currval, context, font_id, ital, wdth, wght, opsz, slnt, font_size, underline
          FROM website_font
         WHERE website_id=pWebsiteId;

        SELECT article_id INTO l_home_article_id FROM website_article WHERE website_id=pWebsiteId AND display_order=1;

        INSERT INTO article (id, body_html, author_user_id)
        SELECT seq_article.nextval, body_html, pUserid
          FROM article
         WHERE id=l_home_article_id;

        INSERT INTO website_article (website_id, article_id, display_order, navigation_label)
        VALUES (seq_website.currval, seq_article.currval, 1, 'Home');
         

        pck_deploy.runDeployment(seq_website.currval, pUserid, 'TEST', l_netlify_site_id, pck_core.getRestUrl(), 101);
        
        /* Wait until the deployment is complete */
        waitDeployment(seq_website.currval, pUserid);

        pUrl:=l_ssl_url;
    END;

    /*
     * DELETE WEBSITE INCLUDING HOSTING AND ANY ASSETS OWNED BY US
    */
    PROCEDURE deleteWebsite(pWebsiteid IN website.id%type) IS
        TYPE t_website_article IS TABLE OF article.id%type INDEX BY PLS_INTEGER;
        l_website_articles t_website_article;
        l_clob CLOB;
    BEGIN
        FOR C IN (
            SELECT w.user_id, w.netlify_site_id, w.netlify_site_id_custom, w.netlify_dns_zone_id, u.cld_api_key 
              FROM website w, users u 
             WHERE w.id=pWebsiteId
               AND w.user_id=u.id
        ) LOOP
            /* DELETE NETLIFY SITES (NOTE THAT USER MAY HAVE DELETED THESE MANUALLY IF SELF-HOSTING)  */
            IF (C.netlify_site_id_custom IS NOT NULL) THEN
                pck_api.callNetlifyAPI(pUserId=>C.user_id, pEndpoint=>'sites/' || C.netlify_site_id_custom, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
                pck_api.callNetlifyAPI(pUserId=>C.user_id, pEndpoint=>'dns_zones/' || C.netlify_dns_zone_id, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
            END IF;
            
            IF (C.netlify_site_id IS NOT NULL) THEN
                pck_api.callNetlifyAPI(pUserId=>C.user_id, pEndpoint=>'sites/' || C.netlify_site_id, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
            END IF;

            /* DELETE ALL DATABASE ROWS RELATED TO WEBSITE */

            SELECT article_id BULK COLLECT INTO l_website_articles FROM website_article WHERE website_id=pWebsiteId;
            
            FOR i IN 1..l_website_articles.COUNT LOOP

                /* DELETE ASSETS ON:Y IF WE ARE HOSTING THEM (USER OWNS THESE INDEPENDENTLY */
                IF (C.cld_api_key IS NULL) THEN
                    FOR C1 IN (SELECT DISTINCT cld_cloud_name, resource_type FROM asset WHERE article_id=l_website_articles(i)) LOOP
                        pck_api.callCloudinaryAPI(pUserId=>C.user_id, pEndpoint=>C1.cld_cloud_name || '/resources/' || C1.resource_type || '/tags/' || l_website_articles(i), pMethod=>'DELETE', pData=>l_clob);
                    END LOOP;
                END IF;

                /* DELETE ARTICLE (CASCADES TO ASSET AND WEBSITE_ARTICLE) */
                DELETE article WHERE id=l_website_articles(i);
                DELETE page_hit WHERE article_id=l_website_articles(i);
                DELETE website_article_cwv WHERE article_id=l_website_articles(i);

            END LOOP;

            /* DELETE WEBSITE (CASCADES TO WEBSITE_FONT) */
            DELETE refresh_token WHERE website_id=pWebsiteId;
            DELETE website WHERE id=pWebsiteId;

        END LOOP;
    END;
end;
/