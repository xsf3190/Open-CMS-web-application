CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_API" IS 
    --
    FUNCTION getGithubReposOwner(pUserId IN users.id%type) RETURN VARCHAR2;
    --
    FUNCTION getNetlifyIntallationId(pUserId IN users.id%type) RETURN VARCHAR2;
    --
    FUNCTION getCloudinaryAPISecret(pUserId IN users.id%type) RETURN users.cld_api_secret%type;
    --
    PROCEDURE resetGithubCurrentBuild(pUserId IN users.id%type);
    --
    FUNCTION setGithubCurrentBuild(pUserId IN users.id%type, pSessionId IN users.current_build_session%type) RETURN NUMBER;
    --
    PROCEDURE getCloudinaryData(pUserId IN users.id%type, pCloudName IN OUT users.cld_cloud_name%type, pCldApiKey IN OUT users.cld_api_key%type, pCldImageMaxSize IN OUT INTEGER, pCldVideoMaxSize IN OUT INTEGER);
    --
    PROCEDURE getTerraformData(pUserId IN users.id%type, pTerraformOrganizationName IN OUT users.terraform_organization_name%type, pTerraformWorkspaceName IN OUT users.terraform_workspace_name%type, pTerraformPrivateKey IN OUT users.terraform_private_key%type);
    --
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callNetlifyAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callCloudinaryAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callTerraformAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_API" IS 
    FUNCTION getGithubReposOwner(pUserId IN users.id%type) RETURN VARCHAR2 IS
        l_github_repos_owner users.github_repos_owner%type;
    BEGIN
        /* Get user's account name (repository owner) */
        FOR C IN (SELECT github_repos_owner FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
        END LOOP;

        /* Get Administrator value if user has not registered github repository */
        IF (l_github_repos_owner IS NULL) THEN
            SELECT u.github_repos_owner
              INTO l_github_repos_owner
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        RETURN (l_github_repos_owner);
    END;

    FUNCTION setGithubCurrentBuild(pUserId IN users.id%type, pSessionId IN users.current_build_session%type) RETURN NUMBER IS
        l_github_repos_owner users.github_repos_owner%type;
        l_user_id users.id%type;
        l_current_build_session users.current_build_session%type;
    BEGIN
        /* Get user that manages the Github repository */
        FOR C IN (SELECT github_repos_owner, id FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
            l_user_id:=C.id;
        END LOOP;

        /* Use Administrator repository if user is not registered with github  */
        IF (l_github_repos_owner IS NULL) THEN
            SELECT u.github_repos_owner, u.id
              INTO l_github_repos_owner, l_user_id
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        /* Get value of current_build_session for user whose Github repository manages deployments */
        SELECT current_build_session INTO l_current_build_session FROM users WHERE id=l_user_id FOR UPDATE;

        /* Claim repository if available */
        IF (l_current_build_session IS NULL) THEN
            UPDATE users SET current_build_session=pSessionId, updated_date=current_timestamp WHERE id=l_user_id;
            COMMIT;
        END IF;

        RETURN (l_current_build_session);
    END;

    PROCEDURE resetGithubCurrentBuild(pUserId IN users.id%type) IS
        l_github_repos_owner users.github_repos_owner%type;
        l_user_id users.id%type;
        l_current_build_session users.current_build_session%type;
    BEGIN
        /* Get user that manages the Github repository */
        FOR C IN (SELECT github_repos_owner, id FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
            l_user_id:=C.id;
        END LOOP;

        /* Use Administrator repository if user is not registered with github  */
        IF (l_github_repos_owner IS NULL) THEN
            SELECT u.github_repos_owner, u.id
              INTO l_github_repos_owner, l_user_id
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        UPDATE users SET current_build_session=NULL, updated_date=current_timestamp  WHERE id=l_user_id;
        COMMIT;
    END;

    FUNCTION getNetlifyIntallationId(pUserId IN users.id%type) RETURN VARCHAR2 IS
        l_netlify_installation_id users.netlify_installation_id%type;
    BEGIN
        /* Get user's github token and account name (repository owner) */
        FOR C IN (SELECT netlify_installation_id FROM users WHERE id=pUserId) LOOP 
            l_netlify_installation_id:=C.netlify_installation_id;
        END LOOP;

        /* Get Administrator value if user has not registered github repository */
        IF (l_netlify_installation_id IS NULL) THEN
            SELECT u.netlify_installation_id
              INTO l_netlify_installation_id
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        RETURN (l_netlify_installation_id);
    END;

    PROCEDURE getTerraformData(pUserId IN users.id%type, pTerraformOrganizationName IN OUT users.terraform_organization_name%type, pTerraformWorkspaceName IN OUT users.terraform_workspace_name%type, pTerraformPrivateKey IN OUT users.terraform_private_key%type) IS
        l_terraform_organization_name users.terraform_organization_name%type;
        l_terraform_workspace_name users.terraform_workspace_name%type;
        l_terraform_private_key users.terraform_private_key%type;
    BEGIN
        /* Get user's github token and account name (repository owner) */
        FOR C IN (SELECT terraform_organization_name,terraform_workspace_name,terraform_private_key FROM users WHERE id=pUserId) LOOP 
            l_terraform_organization_name:=C.terraform_organization_name;
            l_terraform_workspace_name:=C.terraform_workspace_name;
            l_terraform_private_key:=C.terraform_private_key;
        END LOOP;

        /* Get Administrator value if user has not registered github repository */
        IF (l_terraform_organization_name IS NULL) THEN
            SELECT u.terraform_organization_name,u.terraform_workspace_name,u.terraform_private_key
              INTO l_terraform_organization_name,l_terraform_workspace_name,l_terraform_private_key
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        pTerraformOrganizationName:=l_terraform_organization_name;
        pTerraformWorkspaceName:=l_terraform_workspace_name;
        pTerraformPrivateKey:=l_terraform_private_key;
    END;

    PROCEDURE getCloudinaryData(pUserId IN users.id%type, pCloudName IN OUT users.cld_cloud_name%type, pCldApiKey IN OUT users.cld_api_key%type, pCldImageMaxSize IN OUT INTEGER, pCldVideoMaxSize IN OUT INTEGER) IS
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;

        /* Free Plan limits - we would have to use admin usage API to support higher limits on paid plans */
        DEFAULT_IMAGE_MAX_SIZE CONSTANT NUMBER:=10*1024*1024; 
        DEFAULT_VIDEO_MAX_SIZE CONSTANT NUMBER:=100*1024*1024;
    BEGIN
        /* Get user's Cloud name and API Key */
        FOR C IN (SELECT cld_cloud_name, cld_api_key FROM users WHERE id=pUserId) LOOP 
            l_cld_cloud_name:=C.cld_cloud_name;
            l_cld_api_key:=C.cld_api_key;
        END LOOP;

        /* Get Administrator values if user not registered with Cloudinary */
        IF (l_cld_cloud_name IS NULL) THEN
            SELECT u.cld_cloud_name,u.cld_api_key
              INTO l_cld_cloud_name,l_cld_api_key
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        pCloudName:=l_cld_cloud_name;
        pCldApiKey:=l_cld_api_key;
        pCldImageMaxSize:=DEFAULT_IMAGE_MAX_SIZE;
        pCldVideoMaxSize:=DEFAULT_VIDEO_MAX_SIZE;
    END;

    FUNCTION getCloudinaryAPISecret(pUserId IN users.id%type) RETURN users.cld_api_secret%type IS
        l_cld_api_secret users.cld_api_secret%type;
    BEGIN
        /* Get user's Cloud name and API Key */
        FOR C IN (SELECT cld_api_secret FROM users WHERE id=pUserId) LOOP 
            l_cld_api_secret:=C.cld_api_secret;
        END LOOP;

        /* Get Administrator value if user not registered with Cloudinary */
        IF (l_cld_api_secret IS NULL) THEN
            SELECT u.cld_api_secret
              INTO l_cld_api_secret
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        RETURN (l_cld_api_secret);
    END;

    /*
    **  GITHUB API
    */
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_github_repos_owner users.github_repos_owner%type;
        l_github_token users.github_token%type;
        l_github_url VARCHAR2(200):='https://api.github.com/repos/';
        l_error_message LONG;
    BEGIN
        /* Get user's github token and account name (repository owner) */
        FOR C IN (SELECT github_repos_owner, github_token FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
            l_github_token:=C.github_token;
        END LOOP;

        /* Use Administrator's token if user does not have token */
        IF (l_github_token IS NULL) THEN
            SELECT u.github_repos_owner, u.github_token
              INTO l_github_repos_owner, l_github_token
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.g_request_headers(1).name := 'Accept';
        apex_web_service.g_request_headers(1).value := 'application/vnd.github+json';
        apex_web_service.g_request_headers(2).name := 'Authorization';
        apex_web_service.g_request_headers(2).value := 'Bearer ' || l_github_token;
        apex_web_service.g_request_headers(3).name := 'User-Agent';
        apex_web_service.g_request_headers(3).value := l_github_repos_owner;

        l_github_url:=l_github_url || l_github_repos_owner || '/' || pRepository;

        IF (pEndpoint IS NOT NULL) THEN 
            l_github_url:=l_github_url || '/' || pEndpoint;
        END IF;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_github_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_github_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_github_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) OR (apex_web_service.g_status_code=pStatusAllowed) THEN
            RETURN;
        END IF;

        l_error_message:=pMethod || ' ' || l_github_url || ' https status:' || apex_web_service.g_status_code;
        FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
        END LOOP;
        RAISE_APPLICATION_ERROR(-20020,l_error_message);
    END;

    /*
    ** When Github API called without the pBody IN OUT CLOB  parameter - so use this signature and provide dummy refereenc
    */
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_clob CLOB; -- dummy variable
    BEGIN
        callGithubAPI(pUserId=>pUserId,pRepository=>pRepository,pEndpoint=>pEndpoint,pMethod=>pMethod,pBody=>l_clob,pStatusAllowed=>pStatusAllowed,pData=>pData);
    END;

    /*
    **  NETLIFY API
    */
    PROCEDURE callNetlifyAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_netlify_token users.netlify_token%type;
        l_netlify_url VARCHAR2(100):='https://api.netlify.com/api/v1/';
        l_error_message LONG;
    BEGIN
        /* Get user's netlify token */
        FOR C IN (SELECT netlify_token FROM users WHERE id=pUserId) LOOP 
            l_netlify_token:=C.netlify_token;
        END LOOP;

        /* Use Administrator's token if user does not have token */
        IF (l_netlify_token IS NULL) THEN
            SELECT u.netlify_token 
              INTO l_netlify_token 
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Authorization';
        apex_web_service.g_request_headers(1).value := 'Bearer ' || l_netlify_token;   
        apex_web_service.g_request_headers(2).name := 'Content-Type';
        apex_web_service.g_request_headers(2).value := 'application/json';

        l_netlify_url:=l_netlify_url || pEndpoint;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_netlify_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_netlify_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_netlify_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) OR (apex_web_service.g_status_code=pStatusAllowed) THEN
            RETURN;
        END IF;

        l_error_message:=pMethod || ' ' || l_netlify_url || ' https status:' || apex_web_service.g_status_code;
        FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
        END LOOP;
        RAISE_APPLICATION_ERROR(-20030,l_error_message);
    END;

    /*
    **  CLOUDINARY API
    */
    PROCEDURE callCloudinaryAPI(
        pUserId IN users.id%type, 
        pEndpoint IN VARCHAR2, 
        pMethod IN VARCHAR2, 
        pBody IN VARCHAR2 DEFAULT NULL,
        pStatusAllowed IN INTEGER DEFAULT NULL, 
        pData IN OUT NOCOPY CLOB)
    IS
        l_cloudinary_url VARCHAR2(100):='https://api.cloudinary.com/v1_1/';
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_error_message LONG;
    BEGIN
        /* Get user's API authentication details if using ADMIN API
        ** Otherwise the calling routine will have signed the parameter values
        */
        IF (pBody IS NULL) THEN
            FOR C IN (SELECT cld_api_key, cld_api_secret FROM users WHERE id=pUserId) LOOP 
                l_cld_api_key:=C.cld_api_key;
                l_cld_api_secret:=C.cld_api_secret;
            END LOOP;

            /* Use Administrator's token if user does not have token */
            IF (l_cld_api_key IS NULL) THEN
                SELECT u.cld_api_key, u.cld_api_secret
                INTO l_cld_api_key, l_cld_api_secret
                FROM apex_workspace_apex_users w, users u 
                WHERE w.email=u.email
                AND w.is_admin='Yes'
                FETCH FIRST ROW ONLY;
            END IF;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';

        l_cloudinary_url:=l_cloudinary_url || pEndpoint;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_cloudinary_url, p_http_method=>pMethod, p_username=>l_cld_api_key, p_password=>l_cld_api_secret);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_cloudinary_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_cloudinary_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) OR (apex_web_service.g_status_code=pStatusAllowed) THEN
            RETURN;
        END IF;

        l_error_message:=pMethod || ' ' || l_cloudinary_url || ' https status:' || apex_web_service.g_status_code;
        FOR C IN (SELECT message FROM JSON_TABLE(pData,'$.error' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
        END LOOP;
        RAISE_APPLICATION_ERROR(-20040,l_error_message);
    END;

    /*
    **  TERRAFORM API
    */
    PROCEDURE callTerraformAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_terraform_token users.terraform_token%type;
        l_terraform_url VARCHAR2(100):='https://app.terraform.io/';
        l_error_message LONG;
    BEGIN
        /* Get Terraform details either from website owner or Administrator */
        FOR C IN (SELECT terraform_token FROM users WHERE id=pUserId) LOOP
            l_terraform_token:=C.terraform_token;
        END LOOP;

        IF (l_terraform_token IS NULL) THEN
            SELECT u.terraform_token
              INTO l_terraform_token
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Authorization';
        apex_web_service.g_request_headers(1).value := 'Bearer ' || l_terraform_token;   
        apex_web_service.g_request_headers(2).name := 'Content-Type';
        apex_web_service.g_request_headers(2).value := 'application/json';

        l_terraform_url:=l_terraform_url || pEndpoint;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_terraform_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_terraform_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        IF (apex_web_service.g_status_code NOT BETWEEN 200 AND 299) THEN
            l_error_message:=pMethod || ' ' || l_terraform_url || ' https status:' || apex_web_service.g_status_code;
            FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
                l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
            END LOOP;
            RAISE_APPLICATION_ERROR(-20050,l_error_message);
        END IF;
    END;
END;
/