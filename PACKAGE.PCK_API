CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_API" IS 
    --
    FUNCTION getGithubReposOwner(pUserId IN users.id%type) RETURN VARCHAR2;
    --
    --FUNCTION getNetlifyIntallationId(pUserId IN users.id%type) RETURN VARCHAR2;
    --
    FUNCTION getCloudinaryAPISecret(pUserId IN users.id%type) RETURN users.cld_api_secret%type;
    --
    PROCEDURE resetGithubCurrentBuild(pUserId IN users.id%type);
    --
    FUNCTION setGithubCurrentBuild(pUserId IN users.id%type, pSessionId IN users.current_build_session%type) RETURN NUMBER;
    --
    PROCEDURE getCloudinaryData(pUserId IN users.id%type, pCloudName IN OUT users.cld_cloud_name%type, pCldApiKey IN OUT users.cld_api_key%type, pCldImageMaxSize IN OUT INTEGER, pCldVideoMaxSize IN OUT INTEGER, pGoogleApiKey IN OUT VARCHAR2);
    --
    PROCEDURE callAWSemailAPI(pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callBrowserAPI(pBody IN OUT NOCOPY CLOB, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callCloudinaryAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callGodaddyAPI(pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callGoogleAPI(pUrl IN VARCHAR2, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callIpdataAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callNetlifyAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callNetlifyAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pBodyBlob IN OUT NOCOPY BLOB, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callStripeAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pParmNames IN apex_application_global.vc_arr2, pParmValues IN apex_application_global.vc_arr2, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callTerraformAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_API" IS 

    /*
    **  WHATISMYBROWSER API
    */
    PROCEDURE callBrowserAPI(pBody IN OUT NOCOPY CLOB, pData IN OUT NOCOPY CLOB) IS
        l_whatismybrowser_api_key users.whatismybrowser_api_key%type;
        l_whatismybrowser_url VARCHAR2(100):='https://api.whatismybrowser.com/api/v3/detect';
        l_error_message LONG;
    BEGIN
        /* Get Admin user's terraform aws gateway url and api key */
        SELECT u.whatismybrowser_api_key
          INTO l_whatismybrowser_api_key
          FROM users u, apex_workspace_apex_users w
         WHERE w.email=u.email
           AND w.is_admin='Yes'
         ORDER BY date_created
         FETCH FIRST ROW ONLY;


        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'x-api-key';
        apex_web_service.g_request_headers(1).value := l_whatismybrowser_api_key;

        pData := apex_web_service.make_rest_request(p_url=>l_whatismybrowser_url, p_http_method=>'POST', p_body=>pBody);

        --pck_core.log(apex_web_service.g_status_code || ' : POST - ' || l_whatismybrowser_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) THEN
            RETURN;
        END IF;

        FOR C IN (SELECT message FROM JSON_TABLE(pData,'$.result' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
        END LOOP;
        pck_core.log(l_error_message);
    END;

    /*
    **  STRIPE API
    */
    PROCEDURE callStripeAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pParmNames IN apex_application_global.vc_arr2, pParmValues IN apex_application_global.vc_arr2, pData IN OUT NOCOPY CLOB) IS
        l_stripe_secret_key_test users.stripe_secret_key_test%type;
        l_stripe_url VARCHAR2(100):='https://api.stripe.com/v1/';
        l_error_message LONG;
    BEGIN
        /* Get Admin user's terraform aws gateway url and api key */
        SELECT stripe_secret_key_test
          INTO l_stripe_secret_key_test
          FROM users
         WHERE id=pUserId;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Authorization';
        apex_web_service.g_request_headers(1).value := 'Bearer ' || l_stripe_secret_key_test;
        apex_web_service.g_request_headers(2).name := 'Content-Type';
        apex_web_service.g_request_headers(2).value := 'application/x-www-form-urlencoded';

        l_stripe_url:=l_stripe_url || pEndpoint;

        pData := apex_web_service.make_rest_request(p_url=>l_stripe_url, p_http_method=>pMethod, p_parm_name=>pParmNames, p_parm_value=>pParmValues);

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_stripe_url);
    END;

    /*
    **  AWS SES API
    */
    PROCEDURE callAWSemailAPI(pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pData IN OUT NOCOPY CLOB) IS
        l_terraform_aws_gateway_url users.terraform_aws_gateway_url%type;
        l_terraform_api_key users.terraform_api_key%type;
    BEGIN
        /* Get Admin user's terraform aws gateway url and api key */
        SELECT u.terraform_aws_gateway_url, u.terraform_api_key 
          INTO l_terraform_aws_gateway_url, l_terraform_api_key
          FROM users u, apex_workspace_apex_users w
         WHERE w.email=u.email
           AND w.is_admin='Yes'
         ORDER BY date_created
         FETCH FIRST ROW ONLY;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'x-api-key';
        apex_web_service.g_request_headers(1).value := l_terraform_api_key;

        pData := apex_web_service.make_rest_request(p_url=>l_terraform_aws_gateway_url, p_http_method=>pMethod, p_body=>pBody);

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_terraform_aws_gateway_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) THEN
            RETURN;
        END IF;

        FOR C IN (SELECT error FROM JSON_TABLE(pData,'$' COLUMNS (error))) LOOP
            pck_core.log(C.error);
        END LOOP;
    END;


    FUNCTION getGithubReposOwner(pUserId IN users.id%type) RETURN VARCHAR2 IS
        l_github_repos_owner users.github_repos_owner%type;
    BEGIN
        /* Get user's account name (repository owner) */
        FOR C IN (SELECT github_repos_owner FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
        END LOOP;

        /* Get Administrator value if user has not registered github repository */
        IF (l_github_repos_owner IS NULL) THEN
            SELECT u.github_repos_owner
              INTO l_github_repos_owner
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        RETURN (l_github_repos_owner);
    END;

    FUNCTION setGithubCurrentBuild(pUserId IN users.id%type, pSessionId IN users.current_build_session%type) RETURN NUMBER IS
        l_github_repos_owner users.github_repos_owner%type;
        l_user_id users.id%type;
        l_current_build_session users.current_build_session%type;
    BEGIN
        /* Get user that manages the Github repository */
        FOR C IN (SELECT github_repos_owner, id FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
            l_user_id:=C.id;
        END LOOP;

        /* Use Administrator repository if user is not registered with github  */
        IF (l_github_repos_owner IS NULL) THEN
            SELECT u.github_repos_owner, u.id
              INTO l_github_repos_owner, l_user_id
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        /* Get value of current_build_session for user whose Github repository manages deployments */
        SELECT current_build_session INTO l_current_build_session FROM users WHERE id=l_user_id FOR UPDATE;

        /* Claim repository if available */
        IF (l_current_build_session IS NULL) THEN
            UPDATE users SET current_build_session=pSessionId, updated_date=current_timestamp WHERE id=l_user_id;
            COMMIT;
        END IF;

        RETURN (l_current_build_session);
    END;

    PROCEDURE resetGithubCurrentBuild(pUserId IN users.id%type) IS
        l_github_repos_owner users.github_repos_owner%type;
        l_user_id users.id%type;
        l_current_build_session users.current_build_session%type;
    BEGIN
        /* Get user that manages the Github repository */
        FOR C IN (SELECT github_repos_owner, id FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
            l_user_id:=C.id;
        END LOOP;

        /* Use Administrator repository if user is not registered with github  */
        IF (l_github_repos_owner IS NULL) THEN
            SELECT u.github_repos_owner, u.id
              INTO l_github_repos_owner, l_user_id
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        UPDATE users SET current_build_session=NULL, updated_date=current_timestamp  WHERE id=l_user_id;
        COMMIT;
    END;

    /*
    FUNCTION getNetlifyIntallationId(pUserId IN users.id%type) RETURN VARCHAR2 IS
        l_netlify_installation_id users.netlify_installation_id%type;
    BEGIN
        -- Get user's github token and account name (repository owner)
        FOR C IN (SELECT netlify_installation_id FROM users WHERE id=pUserId) LOOP 
            l_netlify_installation_id:=C.netlify_installation_id;
        END LOOP;

        -- Get Administrator value if user has not registered github repository
        IF (l_netlify_installation_id IS NULL) THEN
            SELECT u.netlify_installation_id
              INTO l_netlify_installation_id
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        RETURN (l_netlify_installation_id);
    END;
    */

    PROCEDURE getCloudinaryData(pUserId IN users.id%type, pCloudName IN OUT users.cld_cloud_name%type, pCldApiKey IN OUT users.cld_api_key%type, pCldImageMaxSize IN OUT INTEGER, pCldVideoMaxSize IN OUT INTEGER, pGoogleApiKey IN OUT VARCHAR2) IS
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_google_api_key users.google_api_key%type;

        /* Free Plan limits - we would have to use admin usage API to support higher limits on paid plans */
        DEFAULT_IMAGE_MAX_SIZE CONSTANT NUMBER:=10*1024*1024; 
        DEFAULT_VIDEO_MAX_SIZE CONSTANT NUMBER:=100*1024*1024;
    BEGIN
        /* Get user's Cloud name and API Key */
        FOR C IN (SELECT cld_cloud_name, cld_api_key, google_api_key FROM users WHERE id=pUserId) LOOP 
            l_cld_cloud_name:=C.cld_cloud_name;
            l_cld_api_key:=C.cld_api_key;
            l_google_api_key:=C.google_api_key;
        END LOOP;

        /* Get Administrator values if user not registered with Cloudinary */
        IF (l_cld_cloud_name IS NULL) THEN
            SELECT u.cld_cloud_name, u.cld_api_key, u.google_api_key
              INTO l_cld_cloud_name, l_cld_api_key, l_google_api_key
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        pCloudName:=l_cld_cloud_name;
        pCldApiKey:=l_cld_api_key;
        pCldImageMaxSize:=DEFAULT_IMAGE_MAX_SIZE;
        pCldVideoMaxSize:=DEFAULT_VIDEO_MAX_SIZE;
        pGoogleApiKey:=l_google_api_key;

    END;

    FUNCTION getCloudinaryAPISecret(pUserId IN users.id%type) RETURN users.cld_api_secret%type IS
        l_cld_api_secret users.cld_api_secret%type;
    BEGIN
        /* Get user's Cloud name and API Key */
        FOR C IN (SELECT cld_api_secret FROM users WHERE id=pUserId) LOOP 
            l_cld_api_secret:=C.cld_api_secret;
        END LOOP;

        /* Get Administrator value if user not registered with Cloudinary */
        IF (l_cld_api_secret IS NULL) THEN
            SELECT u.cld_api_secret
              INTO l_cld_api_secret
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        RETURN (l_cld_api_secret);
    END;

    /*
    **  GITHUB API
    */
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_github_repos_owner users.github_repos_owner%type;
        l_github_token users.github_token%type;
        l_github_url VARCHAR2(200):='https://api.github.com/repos/';
        l_error_message LONG;
    BEGIN
        /* Get user's github token and account name (repository owner) */
        FOR C IN (SELECT github_repos_owner, github_token FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
            l_github_token:=C.github_token;
        END LOOP;

        /* Use Administrator's token if user does not have token */
        IF (l_github_token IS NULL) THEN
            SELECT u.github_repos_owner, u.github_token
              INTO l_github_repos_owner, l_github_token
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.g_request_headers(1).name := 'Accept';
        apex_web_service.g_request_headers(1).value := 'application/vnd.github+json';
        apex_web_service.g_request_headers(2).name := 'Authorization';
        apex_web_service.g_request_headers(2).value := 'Bearer ' || l_github_token;
        apex_web_service.g_request_headers(3).name := 'User-Agent';
        apex_web_service.g_request_headers(3).value := l_github_repos_owner;

        l_github_url:=l_github_url || l_github_repos_owner || '/' || pRepository;

        IF (pEndpoint IS NOT NULL) THEN 
            l_github_url:=l_github_url || '/' || pEndpoint;
        END IF;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_github_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_github_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_github_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) OR (apex_web_service.g_status_code=pStatusAllowed) THEN
            RETURN;
        END IF;

        l_error_message:=pMethod || ' ' || l_github_url || ' https status:' || apex_web_service.g_status_code;
        FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
        END LOOP;
        RAISE_APPLICATION_ERROR(-20020,l_error_message);
    END;

    /*
    ** When Github API called without the pBody IN OUT CLOB  parameter - so use this signature and provide dummy refereenc
    */
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_clob CLOB; -- dummy variable
    BEGIN
        callGithubAPI(pUserId=>pUserId,pRepository=>pRepository,pEndpoint=>pEndpoint,pMethod=>pMethod,pBody=>l_clob,pStatusAllowed=>pStatusAllowed,pData=>pData);
    END;

    /*
    **  NETLIFY API - pBody is VARCHAR2
    */
    FUNCTION getNetlifyResponse RETURN VARCHAR2 IS
        l_response_message VARCHAR2(500);
    BEGIN
        FOR i IN 1.. apex_web_service.g_headers.count LOOP
            IF (apex_web_service.g_headers(i).name IN ('X-Ratelimit-Limit', 'X-Ratelimit-Remaining', 'X-Runtime')) THEN
                l_response_message:=l_response_message || apex_web_service.g_headers(i).name || ':' || apex_web_service.g_headers(i).value || ',';
            END IF;
        END LOOP;
        RETURN (' | ' || RTRIM(l_response_message,','));
    END;

    PROCEDURE callNetlifyAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pStatusAllowed IN INTEGER DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_netlify_token users.netlify_token%type;
        l_netlify_account_slug users.netlify_account_slug%type;
        l_netlify_url VARCHAR2(200):='https://api.netlify.com/api/v1/';
        l_error_message LONG;
    BEGIN
        /* Get user's netlify token */
        FOR C IN (SELECT netlify_token, netlify_account_slug FROM users WHERE id=pUserId) LOOP 
            l_netlify_token:=C.netlify_token;
            l_netlify_account_slug:=C.netlify_account_slug;
        END LOOP;

        /* Use Administrator's token if user does not have token */
        IF (l_netlify_token IS NULL) THEN
            SELECT u.netlify_token, u.netlify_account_slug
              INTO l_netlify_token, l_netlify_account_slug
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Authorization';
        apex_web_service.g_request_headers(1).value := 'Bearer ' || l_netlify_token;   
        apex_web_service.g_request_headers(2).name := 'Content-Type';
        apex_web_service.g_request_headers(2).value := 'application/json';

        l_netlify_url:=l_netlify_url || pEndpoint;

        IF (INSTR(l_netlify_url,'#SLUG#')>0) THEN
            l_netlify_url:=REPLACE(l_netlify_url,'#SLUG#',l_netlify_account_slug);
        END IF;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_netlify_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_netlify_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_netlify_url || getNetlifyResponse());

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) OR (apex_web_service.g_status_code=pStatusAllowed) THEN
            RETURN;
        END IF;

        l_error_message:=pMethod || ' ' || l_netlify_url || ' https status:' || apex_web_service.g_status_code;
        FOR C IN (SELECT error_message FROM JSON_TABLE(pData,'$' COLUMNS (error_message)) WHERE error_message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.error_message;
        END LOOP;
        RAISE_APPLICATION_ERROR(-20030,l_error_message);
    END;

    /*
    **  NETLIFY API - pBody is BLOB
    */
    PROCEDURE callNetlifyAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pBodyBlob IN OUT NOCOPY BLOB, pData IN OUT NOCOPY CLOB) IS
        l_netlify_token users.netlify_token%type;
        l_netlify_url VARCHAR2(200):='https://api.netlify.com/api/v1/';
        l_error_message LONG;
    BEGIN
        /* Get user's netlify token */
        FOR C IN (SELECT netlify_token FROM users WHERE id=pUserId) LOOP 
            l_netlify_token:=C.netlify_token;
        END LOOP;

        /* Use Administrator's token if user does not have token */
        IF (l_netlify_token IS NULL) THEN
            SELECT u.netlify_token 
              INTO l_netlify_token 
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Authorization';
        apex_web_service.g_request_headers(1).value := 'Bearer ' || l_netlify_token;   
        apex_web_service.g_request_headers(2).name := 'Content-Type';
        apex_web_service.g_request_headers(2).value := 'application/octet-stream';

        l_netlify_url:=l_netlify_url || pEndpoint;

        IF (pBody IS NOT NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_netlify_url, p_http_method=>pMethod, p_body=>pBody);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_netlify_url, p_http_method=>pMethod, p_body_blob=>pBodyBlob);
        END IF;

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_netlify_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) THEN
            RETURN;
        END IF;

        l_error_message:=pMethod || ' ' || l_netlify_url || ' https status:' || apex_web_service.g_status_code;
        FOR C IN (SELECT error_message FROM JSON_TABLE(pData,'$' COLUMNS (error_message)) WHERE error_message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.error_message;
        END LOOP;
        RAISE_APPLICATION_ERROR(-20030,l_error_message);
    END;

    /*
    **  CLOUDINARY API
    */
    PROCEDURE callCloudinaryAPI(
        pUserId IN users.id%type, 
        pEndpoint IN VARCHAR2, 
        pMethod IN VARCHAR2, 
        pBody IN VARCHAR2 DEFAULT NULL,
        pStatusAllowed IN INTEGER DEFAULT NULL, 
        pData IN OUT NOCOPY CLOB)
    IS
        l_cloudinary_url VARCHAR2(100):='https://api.cloudinary.com/v1_1/';
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_error_message LONG;
    BEGIN
        /* Get user's API authentication details if using ADMIN API
        ** Otherwise the calling routine will have signed the parameter values
        */
        IF (pBody IS NULL) THEN
            FOR C IN (SELECT cld_api_key, cld_api_secret FROM users WHERE id=pUserId) LOOP 
                l_cld_api_key:=C.cld_api_key;
                l_cld_api_secret:=C.cld_api_secret;
            END LOOP;

            /* Use Administrator's token if user does not have token */
            IF (l_cld_api_key IS NULL) THEN
                SELECT u.cld_api_key, u.cld_api_secret
                INTO l_cld_api_key, l_cld_api_secret
                FROM apex_workspace_apex_users w, users u 
                WHERE w.email=u.email
                AND w.is_admin='Yes'
                FETCH FIRST ROW ONLY;
            END IF;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';

        l_cloudinary_url:=l_cloudinary_url || pEndpoint;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_cloudinary_url, p_http_method=>pMethod, p_username=>l_cld_api_key, p_password=>l_cld_api_secret);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_cloudinary_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_cloudinary_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) OR (apex_web_service.g_status_code=pStatusAllowed) THEN
            RETURN;
        END IF;

        l_error_message:=pMethod || ' ' || l_cloudinary_url || ' https status:' || apex_web_service.g_status_code;
        FOR C IN (SELECT message FROM JSON_TABLE(pData,'$.error' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
        END LOOP;
        RAISE_APPLICATION_ERROR(-20040,l_error_message);
    END;

    /*
    **  GOOGLE API TO RETRIEVE FONT_FACE CSS RULES
    */
    PROCEDURE callGoogleAPI(
        pUrl IN VARCHAR2,
        pData IN OUT NOCOPY CLOB)
    IS
        l_google_url VARCHAR2(1000):='https://www.googleapis.com/webfonts/v1/webfonts';
        l_google_api_key users.google_api_key%type;
        l_error_message LONG;
    BEGIN
        /* Get user's Google api key if requesting webfonts list - e.g. in daily backup job */
        IF (INSTR(pUrl,'webfonts')>0) THEN
            SELECT u.google_api_key 
              INTO l_google_api_key
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'User-Agent';
        apex_web_service.g_request_headers(1).value := 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36';

        IF (l_google_api_key IS NOT NULL) THEN
            l_google_url:=pUrl || '?key=' || l_google_api_key || '&capability=VF';
        ELSE
            l_google_url:=pUrl;
        END IF;

        pData := apex_web_service.make_rest_request(p_url=>l_google_url, p_http_method=>'GET');

        pck_core.log(apex_web_service.g_status_code || ' : GET - ' || l_google_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) THEN
            RETURN;
        END IF;

        pck_core.log(pData);

        RAISE_APPLICATION_ERROR(-20040,'Failure in call to Google Fonts API');
    END;    

    /*
    **  IPDATA API. MUST NOT FAIL.
    */
    PROCEDURE callIpdataAPI(
        pUserId IN users.id%type, 
        pEndpoint IN VARCHAR2, 
        pMethod IN VARCHAR2, 
        pData IN OUT NOCOPY CLOB)
    IS
        l_ipdata_url VARCHAR2(200):='https://api.ipdata.co/';
        l_ipdata_api_key users.ipdata_api_key%type;
        l_error_message ip_lookup.error_message%type;
        l_error_code ip_lookup.error_code%type;
    BEGIN
        /* Get user's ipdata api key */
        FOR C IN (SELECT ipdata_api_key FROM users WHERE id=pUserId) LOOP 
            l_ipdata_api_key:=C.ipdata_api_key;
        END LOOP;

        /* Use Administrator's key if user does not have token */
        IF (l_ipdata_api_key IS NULL) THEN
            SELECT u.ipdata_api_key 
              INTO l_ipdata_api_key
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               AND u.ipdata_api_key IS NOT NULL
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';

        l_ipdata_url:=l_ipdata_url || pEndpoint || '?api-key=' || l_ipdata_api_key || '&fields=city,country_code,postal,zip';

        pData := apex_web_service.make_rest_request(p_url=>l_ipdata_url, p_http_method=>pMethod);

        l_ipdata_url:=SUBSTR(l_ipdata_url,1,INSTR(l_ipdata_url,'?')-1);
        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_ipdata_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) THEN
            RETURN;
        END IF;


        /* API Call has failed */

        l_error_code:=apex_web_service.g_status_code;

        FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message))) LOOP
            l_error_message:=C.message;
        END LOOP;

        IF (l_error_message IS NULL) THEN
            FOR C IN (SELECT code,type,info FROM JSON_TABLE(pData,'$.error' COLUMNS (code,type,info)) ) LOOP
                l_error_code:=C.code;
                l_error_message:=C.type;
            END LOOP;
        END IF;

        pck_core.log(l_error_code || ':' || l_error_message);
        pData:='{"error_code":'||l_error_code||',"error_message":"'||l_error_message||'"}';
    END;

    /*
    **  TERRAFORM API
    */
    PROCEDURE callTerraformAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_terraform_token users.terraform_token%type;
        l_terraform_url VARCHAR2(200):='https://app.terraform.io/';
        l_error_message LONG;
    BEGIN
        /* Get Terraform details either from website owner or Administrator */
        FOR C IN (SELECT terraform_token FROM users WHERE id=pUserId) LOOP
            l_terraform_token:=C.terraform_token;
        END LOOP;

        IF (l_terraform_token IS NULL) THEN
            SELECT u.terraform_token
              INTO l_terraform_token
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Authorization';
        apex_web_service.g_request_headers(1).value := 'Bearer ' || l_terraform_token;   
        apex_web_service.g_request_headers(2).name := 'Content-Type';
        apex_web_service.g_request_headers(2).value := 'application/json';

        l_terraform_url:=l_terraform_url || pEndpoint;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_terraform_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_terraform_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        IF (apex_web_service.g_status_code NOT BETWEEN 200 AND 299) THEN
            l_error_message:=pMethod || ' ' || l_terraform_url || ' https status:' || apex_web_service.g_status_code;
            FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
                l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
            END LOOP;
            RAISE_APPLICATION_ERROR(-20050,l_error_message);
        END IF;
    END;

    /*
    **  GODADDY API
    */
    PROCEDURE callGodaddyAPI(pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pData IN OUT NOCOPY CLOB)
    IS
        l_godaddy_url VARCHAR2(100):='https://api.godaddy.com/vi/';
        l_godaddy_api_key users.godaddy_api_key%type;
        l_godaddy_api_secret users.godaddy_api_secret%type;
        l_error_message LONG;
    BEGIN
        SELECT u.godaddy_api_key, u.godaddy_api_secret
          INTO l_godaddy_api_key, l_godaddy_api_secret
          FROM apex_workspace_apex_users w, users u 
         WHERE w.email=u.email
           AND w.is_admin='Yes'
         FETCH FIRST ROW ONLY;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';

        l_godaddy_url:=l_godaddy_url || pEndpoint;

        pData := apex_web_service.make_rest_request(p_url=>l_godaddy_url, p_http_method=>pMethod, p_username=>l_godaddy_api_key, p_password=>l_godaddy_api_secret,
            p_parm_name=>apex_string.string_to_table('domain'),
            p_parm_value=>apex_string.string_to_table('adfreesites.com'));

        pck_core.log(apex_web_service.g_status_code || ' : ' || pMethod || ' - ' || l_godaddy_url);

        IF (apex_web_service.g_status_code BETWEEN 200 AND 299) THEN
            RETURN;
        END IF;

        l_error_message:=pMethod || ' ' || l_godaddy_url || ' https status:' || apex_web_service.g_status_code;
        FOR C IN (SELECT message FROM JSON_TABLE(pData,'$.error' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
            l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
        END LOOP;
        RAISE_APPLICATION_ERROR(-20040,l_error_message);
    END;

        /*
        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_dns_zones);
        DELETE netlify_dns_zone;
        INSERT INTO netlify_dns_zone (id, name, site_id, created_at, updated_at)
        SELECT id, name, site_id, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') 
          FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS(id, name, site_id, created_at, updated_at));

        DELETE netlify_dns_zone_server;
        INSERT INTO netlify_dns_zone_server (dns_zone_id, server)
        SELECT id, server FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS (id, NESTED '$.dns_servers[*]' COLUMNS (server varchar2(50) path '$')));

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites', pMethod=>'GET', pData=>l_sites);
        DELETE netlify_site;
        INSERT INTO netlify_site (id, name, custom_domain, url, created_at, updated_at)
        SELECT id, name, custom_domain, url, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR')
          FROM JSON_TABLE(l_sites, '$[*]' COLUMNS(id, name, custom_domain, url, created_at, updated_at));
        */
END;
/