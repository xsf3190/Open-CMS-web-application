CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_DEPLOY" as 
    --
    PROCEDURE buildESModules(pEnv IN VARCHAR2);
    --
    PROCEDURE deleteDirectory(pWebsiteId IN website.id%type, pUserId IN users.id%type);
    --
    PROCEDURE deployInfrastructure(pSenderEmail IN VARCHAR2 DEFAULT 'contact.form');
    --
    PROCEDURE logDeployment(pWebsiteId IN website.id%type, pSiteId IN website_deploy.site_id%type, pMessage IN VARCHAR2, pStatus IN VARCHAR2 DEFAULT 'OK', pLogTime IN TIMESTAMP DEFAULT current_timestamp);
    --
    PROCEDURE runDelete(pUserId IN users.id%type, pWebsiteId IN website.id%type, pSiteId IN website.netlify_site_id%type);
    --
    PROCEDURE runDeployment(pWebsiteId IN website.id%type, pUserId IN website.user_id%type, pEnv IN VARCHAR2, pSiteId IN website.netlify_site_id%type, pResturl IN VARCHAR2, pApplicationId IN VARCHAR2) ;
    --
    PROCEDURE setTerraformApikey;
    --
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_DEPLOY" as 

    FUNCTION getSha256(pContent IN CLOB) RETURN VARCHAR2 IS
        l_sha256 RAW(92);
    BEGIN
        l_sha256:=dbms_crypto.hash(src=>pContent, typ=>dbms_crypto.hash_sh256);
        RETURN ('sha256-' || utl_raw.cast_to_varchar2(utl_encode.base64_encode(l_sha256)));
    END;
    
    PROCEDURE buildESModules(pEnv IN VARCHAR2) IS 
        TYPE tt_files IS RECORD (
            file_name apex_application_static_files.file_name%type,
            file_content CLOB
        );
        TYPE t_files IS TABLE OF tt_files INDEX BY VARCHAR2(40);
        l_deploy_files t_files;

        l_headers CLOB;
        l_files JSON_OBJECT_T;
        l_json JSON_OBJECT_T;
        l_sha1 VARCHAR2(40);
        
        l_file_name apex_application_static_files.file_name%type;
        l_integrity_value LONG;
        l_page CLOB;
        
        l_clob CLOB;
        l_netlify_site_id website.netlify_site_id%type;
        ES_MODULES_DOMAIN CONSTANT VARCHAR2(20):='es-modules';
    BEGIN
        SELECT netlify_site_id INTO l_netlify_site_id FROM website WHERE domain_name=ES_MODULES_DOMAIN;

        l_json:= new JSON_OBJECT_T;
        l_files:= new JSON_OBJECT_T;

        DELETE es_module;

        FOR C IN (
            SELECT file_name, apex_util.blob_to_clob(file_content) file_content
              FROM apex_application_static_files 
             WHERE application_id=101
               AND file_name LIKE 'deploy_%min.js%'
               AND file_name<>'deploy_main.min.js'
            )
        LOOP
            l_sha1:=LOWER(dbms_crypto.hash(src=>C.file_content, typ=>dbms_crypto.hash_sh1));
            l_deploy_files(l_sha1).file_name:=pEnv || '/' || C.file_name;
            l_deploy_files(l_sha1).file_content:=C.file_content;
            l_files.put(pEnv || '/' || C.file_name, l_sha1);
            l_integrity_value:=getSha256(C.file_content);
            INSERT INTO es_module (module_name,hash_value) VALUES (C.file_name, l_integrity_value);
        END LOOP;

        l_page:=
        '<!DOCTYPE HTML>' ||
        '<html lang="en">' ||
        '<head>' ||
            '<meta charset="UTF-8">' ||
            '<meta name="viewport" content="width=device-width, initial-scale=1.0">' ||
        '</head>' ||
        '<body>' ||
        '<h1>ES Modules for RESTARTNET.COM editor websites</h1>' ||
        '</body>' ||
        '</html>';
        l_sha1:=LOWER(dbms_crypto.hash(src=>l_page, typ=>dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='index.html';
        l_deploy_files(l_sha1).file_content:=l_page;
        l_files.put('index.html', l_sha1);

        l_headers:='/*' || chr(10) || 'Access-Control-Allow-Origin: *';
        l_sha1:=LOWER(dbms_crypto.hash(src=>l_headers, typ=>dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='_headers';
        l_deploy_files(l_sha1).file_content:=l_headers;
        l_files.put('_headers', l_sha1);

        l_json.put('files',l_files);

        pck_core.log('Sending digest of ' || l_deploy_files.COUNT || ' files to Netlify for '|| ES_MODULES_DOMAIN);
        pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'sites/' || l_netlify_site_id || '/deploys', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);

        /* upload to Netlify if required - i.e. file content has changed since last deployment  */
        FOR C IN (SELECT id, sha1 FROM JSON_TABLE(l_clob, '$' COLUMNS (id, NESTED '$.required[*]' COLUMNS (sha1 PATH '$'))) WHERE sha1 IS NOT NULL) LOOP
            pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'deploys/' || C.id || '/files/' || l_deploy_files(C.sha1).file_name, pMethod=>'PUT', 
                pBody=>l_deploy_files(C.sha1).file_content,
                pData=>l_clob
            );
            pck_core.log('Successfully uploaded ' || l_deploy_files(C.sha1).file_name);
        END LOOP;

    END;

    /*
    **  Insert row in website_deploy logging table
    */      
    PROCEDURE logDeployment(pWebsiteId IN website.id%type, pSiteId IN website_deploy.site_id%type, pMessage IN VARCHAR2, pStatus IN VARCHAR2 DEFAULT 'OK', pLogTime IN TIMESTAMP DEFAULT current_timestamp) IS 
    BEGIN
        INSERT INTO website_deploy(id, website_id, site_id, message, status, log_time) VALUES (seq_log.nextval, pWebsiteId, pSiteId, pMessage, pStatus, pLogTime);
        COMMIT;
    END; 

    /*
    ** MINIFY CSS FILE USING TOPTAL UTILITY API
    */

    FUNCTION minifyCss(pWebsiteId IN website.id%type, pSiteId IN website.netlify_site_id%type, pFilename IN VARCHAR2) RETURN CLOB IS
        l_url VARCHAR2(200):='https://www.toptal.com/developers/cssminifier/api/raw';
        l_clob clob;
        l_parm_names   apex_application_global.VC_ARR2; 
        l_parm_values  apex_application_global.VC_ARR2;
    BEGIN
        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/x-www-form-urlencoded';

        FOR C IN (SELECT apex_util.blob_to_clob(file_content) file_content
                  FROM apex_application_static_files 
                 WHERE application_id=101
                   AND file_name=pFilename)
        LOOP
            l_parm_names(1):='input';
            l_parm_values(1):=C.file_content;
            l_clob:=apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'POST', p_parm_name=>l_parm_names, p_parm_value=>l_parm_values);

            logDeployment(pWebsiteId, pSiteId,pFilename || ' minimized from ' || 
                apex_string_util.to_display_filesize(dbms_lob.getlength(C.file_content)) || ' to ' || 
                apex_string_util.to_display_filesize(dbms_lob.getlength(l_clob)));
        END LOOP;
        IF (l_clob IS NULL) THEN
            logDeployment(pWebsiteId, pSiteId,'CSS file not found or empty:' || pFilename,'NOK');
        END IF;

        RETURN (l_clob);
    end;

    /* 
    **  STATIC FONT REQUEST USES SYNTAX LIKE THIS IN THE GOOGLE API CALL -  E.G. FOR ALL FLAVOURS OF ROBOTO:
    **  css/Roboto:400normal,400italic,700normal,700italic
    **
    **  VARIABLE FONT REQUESTS USE DIFFERENT SYNTAX
    **  css2/Roboto:ital,wght@0,400;0,700;1,400;1,700
     */
    PROCEDURE getFontfaces(pWebsiteid IN website.id%type, pEnv IN VARCHAR2, pSiteId IN website.netlify_site_id%type, pCharsNormalHeadings IN VARCHAR2, pCharsItalicHeadings IN VARCHAR2, pCharsNormal IN VARCHAR2, pCharsItalic IN VARCHAR2, pCharsBoldNormal IN VARCHAR2, pCharsBoldItalic IN VARCHAR2, pFontface IN OUT NOCOPY VARCHAR2) IS
        l_api_url VARCHAR2(50);
        l_font_css LONG;

        /* Return distict characters sorted */
        FUNCTION chars_used (pCharacters IN VARCHAR2) RETURN VARCHAR2 IS
            l_chars VARCHAR2(500);
        BEGIN
            SELECT LISTAGG(DISTINCT SUBSTR(pCharacters, LEVEL, 1), NULL) WITHIN GROUP (
                      ORDER BY SUBSTR(pCharacters, LEVEL, 1))
            INTO l_chars
            FROM dual
            CONNECT BY LEVEL <= LENGTH(pCharacters);
            RETURN(l_chars);
        END;

        FUNCTION addFontface(pFamily IN font.family%type, pChars IN VARCHAR2, pWeight IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
            l_font_face LONG;
            l_api_url VARCHAR2(500);
            l_chars VARCHAR2(500);
        BEGIN
            l_chars:=chars_used(pChars);
            logDeployment(pWebsiteid, pSiteId, ' - ' || pWeight || ' characters: '||LENGTH(l_chars));
            l_api_url:='https://fonts.googleapis.com/css?family=' || REPLACE(pFamily,' ','+') || CASE WHEN pWeight IS NOT NULL THEN ':' || pWeight END 
                || '&display=swap'
                || '&capability=WOFF2' 
                || '&text=' || chars_used(pChars);
            pck_api.callGoogleAPI(l_api_url,l_font_face);
            RETURN (l_font_face);
        END;

    BEGIN
        FOR C IN (
            SELECT f.family, f.variable, wf.context, wf.ital, f.wght_start, f.wght_end
            FROM font f, website_font wf, website w
            WHERE wf.website_id=w.id
            AND f.id=wf.font_id
            AND w.id=pWebsiteId
            ORDER BY DECODE(wf.context,'TITLE',1,2) )
        LOOP
            CASE C.context
                WHEN 'TITLE' THEN /* Heading elements h1,h2,h3,h4 */
                    IF (pCharsNormalHeadings IS NOT NULL) THEN
                        pFontface:=pFontface || addFontface(C.family, pCharsNormalHeadings, CASE WHEN 700 BETWEEN C.wght_start AND C.wght_end THEN '700' END);
                    END IF;
                    IF (pCharsItalicHeadings IS NOT NULL) THEN
                        pFontface:=pFontface || addFontface(C.family, pCharsItalicHeadings, CASE WHEN 700 BETWEEN C.wght_start AND C.wght_end THEN '700italic' END);
                    END IF;

                WHEN 'SUBTITLE' THEN /* Non-heading elements */
                    IF (pCharsNormal IS NOT NULL) THEN
                        pFontface:=pFontface || addFontface(C.family, pCharsNormal, '400');
                    END IF;
                    IF (pCharsBoldNormal IS NOT NULL) THEN
                        pFontface:=pFontface || addFontface(C.family, pCharsBoldNormal, '700');
                    END IF;
                    IF (pCharsItalic IS NOT NULL) THEN
                        pFontface:=pFontface || addFontface(C.family, pCharsItalic, '400italic');
                    END IF;
                    IF (pCharsBoldItalic IS NOT NULL) THEN
                        pFontface:=pFontface || addFontface(C.family, pCharsBoldItalic, '700italic');
                    END IF;
            END CASE;
        END LOOP;
    END;

    /* 
    ** EXTRACT DISTINCT ITALIC / NORMAL / BOLD CHARACTERS IN TEXT
    */
    PROCEDURE extract_styles(pText IN VARCHAR2, pBoldItalic IN OUT VARCHAR2, pBoldNormal IN OUT VARCHAR2, pItalic IN OUT VARCHAR2, pNormal IN OUT VARCHAR2) IS
        l_text LONG:=pText;
        l_italics_regex varchar2(12):='<i>(.+?)</i>';
        l_italics_substr LONG;
        l_italics_bold_regex varchar2(30):='<i><strong>(.+?)</strong></i>';
        l_italics_bold_substr LONG;
        l_bold_regex varchar2(30):='<strong>(.+?)</strong>';
        l_bold_substr LONG;
        l_char VARCHAR2(4);
        n PLS_INTEGER;
        len PLS_INTEGER;
    BEGIN
        IF (pText IS NULL) THEN
            RETURN;
        END IF;
        n:=REGEXP_COUNT(l_text,l_italics_bold_regex);
        FOR i IN 1..n LOOP
            l_italics_bold_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_italics_bold_regex,1,i)));
            len:=LENGTH(l_italics_bold_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_italics_bold_substr,k,1);
                    IF (pBoldItalic IS NULL OR INSTR(pBoldItalic,l_char)=0) THEN
                        pBoldItalic:=pBoldItalic || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_italics_bold_regex,null);

        n:=REGEXP_COUNT(l_text,l_italics_regex);
        FOR i IN 1..n LOOP
            l_italics_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_italics_regex,1,i)));
            len:=LENGTH(l_italics_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_italics_substr,k,1);
                    IF (pItalic IS NULL OR INSTR(pItalic,l_char)=0) THEN
                        pItalic:=pItalic || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_italics_regex,null);

        n:=REGEXP_COUNT(l_text,l_bold_regex);
        FOR i IN 1..n LOOP
            l_bold_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_bold_regex,1,i)));
            len:=LENGTH(l_bold_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_bold_substr,k,1);
                    IF (pBoldNormal IS NULL OR INSTR(pBoldNormal,l_char)=0) THEN
                        pBoldNormal:=pBoldNormal || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_bold_regex,null);

        l_text:=utl_i18n.unescape_reference(apex_escape.striphtml(l_text));
        len:=LENGTH(l_text);
        
        IF (len>0) THEN
            FOR i IN 1..len LOOP
                l_char:=SUBSTR(l_text,i,1);
                IF (pNormal IS NULL OR INSTR(pNormal,l_char)=0) THEN
                    pNormal:=pNormal || l_char;
                END IF;
            END LOOP;
        END IF;
    END;


    /*
    **  DEPLOY BY UPLOADING HTML FILE CONTENT DIRECTLY TO NETLIFY
    */
    PROCEDURE runDeployment(pWebsiteId IN website.id%type, pUserId IN website.user_id%type, pEnv IN VARCHAR2, pSiteId IN website.netlify_site_id%type, pRestUrl IN VARCHAR2, pApplicationId IN VARCHAR2) IS
        MAIN_MODULE_NAME CONSTANT VARCHAR2(30):='deploy_main.min.js';
        
        l_clob CLOB;
        l_json JSON_OBJECT_T;
        l_files JSON_OBJECT_T;
        l_head CLOB;
        l_page CLOB;
        
        l_title website.title%type;
        l_subtitle website.subtitle%type;
        l_contact_email website.contact_email%type;
        l_telephone_number website.telephone_number%type;
        l_mobile_number website.mobile_number%type;
        l_linkedin_name website.linkedin_name%type;
        l_instagram_name website.instagram_name%type;
        l_color_primary website.color_primary%type;
        l_favicon_asset_id website.favicon_asset_id%type;
        l_body_html article.body_html%type;
        l_favicon_url VARCHAR2(250);
        l_favicon_download BLOB;
        l_content CLOB;
        l_text VARCHAR2(4000);
        
        l_char VARCHAR2(4);
        l_deploy_css CLOB;
        l_file_name VARCHAR2(200);
        l_sha1 VARCHAR2(40);

        
        l_chars_normal VARCHAR2(500);
        l_chars_italic VARCHAR2(500);
        l_chars_normal_headings VARCHAR2(500);
        l_chars_italic_headings VARCHAR2(500);
        l_chars_bold_normal VARCHAR2(500);
        l_chars_bold_italic VARCHAR2(500);
        
        
        l_dummy VARCHAR2(500);
        
        l_headings_regex varchar2(20):='<h.+?>(.+?)<\/h.+?>';
        
        l_heading LONG;

        TYPE tt_files IS RECORD (
            lastmod article.updated_date%type,
            url VARCHAR2(200),
            file_name VARCHAR2(200),
            file_content CLOB,
            file_content_b BLOB
        );
        TYPE t_files IS TABLE OF tt_files INDEX BY VARCHAR2(40);
        l_deploy_files t_files;

        TYPE tt_labels IS RECORD (
            parent_article_id website_article.article_id%type,
            article_id website_article.article_id%type,
            navigation_label article.title%type,  -- largest that can fit here
            path_name VARCHAR2(200),
            collection_type website_article.collection_type%type,
            page_title website_article.page_title%type,
            page_description website_article.page_description%type,
            lastmod article.updated_date%type,
            word_count article.word_count%type, 
            title website.title%type,
            subtitle website.subtitle%type,
            header_effect website.header_effect%type,
            hero_asset_id website.hero_asset_id%type,
            contact_email website.contact_email%type,
            telephone_number website.telephone_number%type,
            mobile_number website.mobile_number%type,
            linkedin_name website.linkedin_name%type,
            instagram_name website.instagram_name%type,
            promotion website.promotion%type,
            body_html article.body_html%type
        );
        TYPE t_labels IS TABLE OF tt_labels INDEX BY PLS_INTEGER;
        l_labels t_labels;

        l_is_media BOOLEAN:=FALSE;
        l_is_blog BOOLEAN:=FALSE;
        l_is_product BOOLEAN:=FALSE;

        l_importmap  CLOB;
        l_importmap_integrity  CLOB;
        l_importmap_sha256 VARCHAR2(200);

        l_message VARCHAR2(100);
        l_styles CLOB;
        l_styles_edit CLOB;
        
        l_sitemap CLOB;
        l_robots CLOB;
        l_headers CLOB;
        l_ssl_url VARCHAR2(200);
        l_url VARCHAR2(200);
        l_total_pages PLS_INTEGER;
        n PLS_INTEGER;
        n2 PLS_INTEGER;

    BEGIN
        /* For logging when running in scheduler */
        pck_sec.g_session_user_id:=pUserId;
        pck_sec.g_website_id:=pWebsiteId;

        SELECT contact_email, telephone_number, mobile_number, linkedin_name, instagram_name, SUBSTR(color_primary,2), favicon_asset_id
          INTO l_contact_email, l_telephone_number, l_mobile_number, l_linkedin_name, l_instagram_name, l_color_primary, l_favicon_asset_id
          FROM website
         WHERE id=pWebsiteId;

        FOR C IN (
            SELECT w.title, w.subtitle, wf.context, wf.ital
              FROM website w, website_font wf
             WHERE w.id=pWebsiteId
               AND wf.website_id=w.id
        ) 
        LOOP
            CASE C.context
                WHEN 'TITLE' THEN
                    l_title:=C.title;
                    IF (C.ital=1) THEN
                        l_chars_italic_headings:=C.title;
                    ELSE
                        l_chars_normal_headings:=C.title;
                    END IF;
                WHEN 'SUBTITLE' THEN
                    l_subtitle:=C.subtitle;
                    IF (C.ital=1) THEN
                        l_chars_italic:=C.subtitle;
                    ELSE
                        l_chars_normal:= C.subtitle;
                    END IF;
            END CASE;
        END LOOP;


        /*
        ** Get all website content into collection
        */
        SELECT parent_article_id, article_id, navigation_label, path_name, collection_type, page_title, page_description, lastmod, word_count, title, subtitle, header_effect, hero_asset_id, contact_email, telephone_number, mobile_number, linkedin_name, instagram_name, promotion, body_html
          BULK COLLECT INTO l_labels
          FROM
          (
        SELECT wa.article_id parent_article_id, wa.article_id, wa.navigation_label, apex_string_util.get_slug(wa.navigation_label) path_name, wa.collection_type, wa.page_title, wa.page_description, 
            wa.display_order, NVL(a.updated_date,a.created_date) lastmod, a.word_count, w.title, w.subtitle, w.header_effect, w.hero_asset_id, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name, w.instagram_name, w.promotion, a.body_html body_html
          FROM website w, website_article wa, article a
         WHERE w.id=pWebsiteId
           AND wa.website_id=w.id 
           AND wa.article_id=a.id
         UNION ALL
        SELECT wa.article_id, a.id, a.title, apex_string_util.get_slug(wa.navigation_label) || '/' || apex_string_util.get_slug(a.title),  NULL, NULL, NULL, 
            wa.display_order+NVL(a.display_order/100,0.001),  NVL(a.updated_date,a.created_date) lastmod, a.word_count, w.title, w.subtitle, w.header_effect, w.hero_asset_id, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name, w.instagram_name, w.promotion, a.body_html
          FROM website w, website_article wa, article a 
         WHERE w.id=pWebsiteId
           AND wa.website_id=w.id 
           AND a.parent_id=wa.article_id 
           AND wa.collection_type IN ('BLOG','MEDIA')
          )
         ORDER BY display_order, lastmod DESC;
        
        l_json:= new JSON_OBJECT_T;
        l_files:= new JSON_OBJECT_T;

        /* Get URL of site to be deployed */
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/' || pSiteId, pMethod=>'GET', pData=>l_clob);
        SELECT ssl_url INTO l_ssl_url FROM JSON_TABLE(l_clob, '$' COLUMNS(ssl_url));
        
        FOR i IN 1..l_labels.COUNT LOOP

            /* For each context collect distinct set of italic and normal characters in order to optimise font */
            l_body_html:=l_labels(i).body_html;           
            n:=REGEXP_COUNT(l_body_html,l_headings_regex);
            IF (n>0) THEN
                FOR j IN 1..n 
                LOOP
                    extract_styles(REGEXP_SUBSTR(l_body_html,l_headings_regex,1,j), l_dummy, l_dummy, l_chars_italic_headings, l_chars_normal_headings);
                END LOOP;
                l_body_html:=REGEXP_REPLACE(l_body_html,l_headings_regex,null);
            END IF;
            extract_styles(l_body_html, l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal);

            IF (l_labels(i).collection_type='BLOG') THEN
                l_is_blog:=TRUE;
                l_is_media:=FALSE;
            ELSIF (l_labels(i).collection_type='MEDIA') THEN
                l_is_media:=TRUE;
                l_is_blog:=FALSE;
            END IF;

            pck_codepen.buildBodyHtml(
                pUserId, 
                pWebsiteId, 
                pEnv,
                pRestUrl,
                l_labels(i).article_id, 
                l_labels(i).collection_type, 
                l_is_media, 
                l_title,
                l_subtitle,
                l_labels(i).header_effect,
                l_labels(i).hero_asset_id,
                l_labels(i).contact_email,
                l_labels(i).telephone_number,
                l_labels(i).mobile_number,
                l_labels(i).linkedin_name,
                l_labels(i).instagram_name,
                l_labels(i).promotion,
                l_labels(i).body_html
            );

        END LOOP;

        /* 
        ** The site favicon is an SVG format image file uploaded through the CMS to the Asset table.
        */
        FOR C IN (SELECT cld_cloud_name, resource_type, public_id, format FROM asset WHERE id=l_favicon_asset_id) LOOP
           l_favicon_url:=pck_media.getCloudinaryUrl(C.cld_cloud_name,C.resource_type,C.public_id,C.format, 96) || '.svg';
           l_favicon_url:=REPLACE(l_favicon_url,'q_auto,f_auto','f_auto,w_96,h_96');
        END LOOP;
        IF (l_favicon_url IS NULL) THEN
            logDeployment(pWebsiteId, pSiteId,'Website favicon missing','NOK');
        END IF;

        l_robots:='User-agent: *' || chr(10) || 'Allow: /' || chr(10) || chr(10) || 'Sitemap: ' || l_ssl_url || '/sitemap.xml';

        l_importmap:='"imports":{';
        l_importmap_integrity:='"integrity":{';

        FOR C IN (
            SELECT module_name, hash_value FROM es_module ORDER BY 1
        ) LOOP
            l_importmap:=l_importmap || '"' || SUBSTR(C.module_name,1,INSTR(C.module_name,'.min.js')-1) || '":"' || 'https://es-modules.netlify.app/test/' || C.module_name || '",';
            l_importmap_integrity:=l_importmap_integrity || '"' || 'https://es-modules.netlify.app/test/' || C.module_name || '":"' || C.hash_value || '",';
        END LOOP;
        l_importmap:=RTRIM(l_importmap,',') || '}';
        l_importmap_integrity:=RTRIM(l_importmap_integrity,',') || '}';

        /* Assemble complete inline importmap JSON script */
        l_importmap:='{' || l_importmap || ',' || l_importmap_integrity || '}';

        l_importmap_sha256:=getSha256(l_importmap);

        l_headers:=
        '/*' || chr(10) || 
            q'[Content-Security-Policy: default-src 'none';]' ||
            q'[ base-uri 'self';]' ||
            q'[ img-src 'self' res.cloudinary.com;]' ||
            q'[ font-src 'self' fonts.gstatic.com;]' ||
            q'[ style-src 'self' 'unsafe-inline' cdn.ckeditor.com;]' ||
            q'[ script-src 'self' 'strict-dynamic' cdn.ckeditor.com upload-widget.cloudinary.com es-modules.netlify.app ']' || l_importmap_sha256 || q'[';]' ||
            q'[ frame-src upload-widget.cloudinary.com  www.youtube.com;]' ||
            q'[ frame-ancestors 'none';]' ||
            q'[ connect-src ]' || pRestUrl || ';' || chr(10) ||
            q'[X-Content-Type-Options: nosniff]' || chr(10) ||
            q'[X-Frame-Options: SAMEORIGIN]' || chr(10) ||
            q'[Referrer-Policy: no-referrer-when-downgrade]' || chr(10) ||
            q'[Access-Control-Allow-Origin: *]' || chr(10) ||
            q'[Permissions-Policy: microphone=(), geolocation=()]';

        /* 
        ** Build individual website pages
        */
        FOR i IN 1..l_labels.COUNT
        LOOP
            IF (i=1) THEN
                logDeployment(pWebsiteId, pSiteId, 'Building ' || l_labels.COUNT || ' website page' || CASE WHEN l_labels.COUNT>1 THEN 's' END);
                l_sitemap:=
                '<?xml version="1.0" encoding="UTF-8"?>' || 
                '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
            END IF;

            l_sitemap:=l_sitemap ||
                '<url><loc>' || l_ssl_url || CASE WHEN i>1 THEN '/' || l_labels(i).path_name END || '</loc><lastmod>' || TO_CHAR(l_labels(i).lastmod,'YYYY-MM-DD') || '</lastmod></url>';
            IF (i=l_labels.COUNT) THEN
                l_sitemap:=l_sitemap || 
                '</urlset>';
            END IF;

            l_page:=
                '<!DOCTYPE HTML>' ||
                '<html lang="en">' ||
                '<head>' ||
                    '<meta charset="UTF-8">' ||
                    '<meta name="viewport" content="width=device-width, initial-scale=1.0">' ||
                    '<title>' || l_labels(i).page_title || '</title>' ||
                    '<meta name="description" content="' || l_labels(i).page_description || '">' ||
                    '<meta name="author" content="mark.russellbrown@gmail.com">' ||
                    '<script type="importmap" integrity="' || l_importmap_sha256 || '">' || l_importmap || '</script>' ||
                    '<link rel="modulepreload" href="/' || MAIN_MODULE_NAME || '">' ||
                    '<script src="/' || MAIN_MODULE_NAME || '" type="module"></script>' ||
                    '<link rel="icon" type="image/svg+xml" sizes="any" href="' || l_favicon_url || '">' ||
                    '<link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin>' ||
                    '<link rel="stylesheet" href="/website.css">'  ||
                '</head>' ||
                
                l_labels(i).body_html ||
            '</html>';

            l_sha1:=LOWER(dbms_crypto.hash(src=>l_page, typ=>dbms_crypto.hash_sh1));

            IF (i=1) THEN
                l_file_name:='index.html';
            ELSE
                l_file_name:=l_labels(i).path_name || '.html';
            END IF;

            l_deploy_files(l_sha1).url:=l_ssl_url || CASE WHEN i>1 THEN '/' || l_labels(i).path_name END;
            l_deploy_files(l_sha1).lastmod:=l_labels(i).lastmod;
            l_deploy_files(l_sha1).file_name:=l_file_name;
            l_deploy_files(l_sha1).file_content:=l_page;
            l_files.put(l_file_name, l_sha1);
        END LOOP;

        /* Build website assets */

        logDeployment(pWebsiteId, pSiteId, 'Building sitemap.xml for SEO');
        l_sha1:=LOWER(dbms_crypto.hash(src => l_sitemap, typ => dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='sitemap.xml';
        l_deploy_files(l_sha1).file_content:=l_sitemap;
        l_files.put('sitemap.xml', l_sha1);

        logDeployment(pWebsiteId, pSiteId, 'Building robots.txt for SEO');
        l_sha1:=LOWER(dbms_crypto.hash(src => l_robots, typ => dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='robots.txt';
        l_deploy_files(l_sha1).file_content:=l_robots;
        l_files.put('robots.txt', l_sha1);

        logDeployment(pWebsiteId, pSiteId, 'Building Content Security Policy');
        l_sha1:=LOWER(dbms_crypto.hash(src => l_headers, typ => dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='_headers';
        l_deploy_files(l_sha1).file_content:=l_headers;
        l_files.put('_headers', l_sha1);

        logDeployment(pWebsiteId, pSiteId, 'Building JS main module');
        FOR C IN (
            SELECT apex_util.blob_to_clob(file_content) file_content
              FROM apex_application_static_files 
             WHERE application_id=pApplicationId
               AND file_name=MAIN_MODULE_NAME)
        LOOP
            l_sha1:=LOWER(dbms_crypto.hash(src=>C.file_content, typ=>dbms_crypto.hash_sh1));
            l_deploy_files(l_sha1).file_name:=MAIN_MODULE_NAME;
            l_deploy_files(l_sha1).file_content:=C.file_content;
            l_files.put(MAIN_MODULE_NAME, l_sha1);
        END LOOP;
        
        
        logDeployment(pWebsiteId, pSiteId, 'Configuring FONTS for distinct characters used');

        /* For now, set footer elements as normal style characters */
        l_chars_normal:=l_chars_normal || l_contact_email || l_telephone_number || l_mobile_number || l_linkedin_name;
        
        getFontfaces(pWebsiteid, pEnv, pSiteId, l_chars_normal_headings, l_chars_italic_headings, l_chars_normal, l_chars_italic, l_chars_bold_normal, l_chars_bold_italic, l_styles);
        
        l_styles:=l_styles || pck_codepen.buildCssRoot(pWebsiteId);

        logDeployment(pWebsiteId, pSiteId, 'Building CSS');
        l_styles:=l_styles || minifyCSS(pWebsiteId, pSiteId, 'deploy.css');
        l_sha1:=LOWER(dbms_crypto.hash(src => l_styles, typ => dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='website.css';
        l_deploy_files(l_sha1).file_content:=l_styles;
        l_files.put('website.css', l_sha1);

        IF (pEnv='TEST') THEN
            l_styles_edit:=l_styles_edit || minifyCSS(pWebsiteId, pSiteId, 'deploy_edit.css');
            logDeployment(pWebsiteId, pSiteId, 'Building CSS edit styles');
            l_sha1:=LOWER(dbms_crypto.hash(src => l_styles_edit, typ => dbms_crypto.hash_sh1));
            l_deploy_files(l_sha1).file_name:='website_edit.min.css';
            l_deploy_files(l_sha1).file_content:=l_styles_edit;
            l_files.put('website_edit.min.css', l_sha1);
        END IF;

        l_json.put('files',l_files);

        logDeployment(pWebsiteId, pSiteId, 'Sending digest of ' || l_deploy_files.COUNT || ' files to Netlify');
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/' || pSiteId || '/deploys', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);
        UPDATE website SET netlify_deploy_id=(SELECT id FROM JSON_TABLE(l_clob, '$' COLUMNS (id))) WHERE id=pWebsiteId;
        COMMIT;

        /* upload to Netlify if required - i.e. file content has changed since last deployment  */
        n:=0;
        FOR C IN (SELECT id, sha1 FROM JSON_TABLE(l_clob, '$' COLUMNS (id, NESTED '$.required[*]' COLUMNS (sha1 PATH '$'))) WHERE sha1 IS NOT NULL) LOOP
            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'deploys/' || C.id || '/files/' || l_deploy_files(C.sha1).file_name, pMethod=>'PUT', 
                pBody=>l_deploy_files(C.sha1).file_content, 
                pBodyBlob=>l_deploy_files(C.sha1).file_content_b, 
                pData=>l_clob
            );
            logDeployment(pWebsiteId, pSiteId, 'Successfully uploaded ' || l_deploy_files(C.sha1).file_name);
            n:=n+1;
        END LOOP;

        IF (n>0) THEN
            logDeployment(pWebsiteId, pSiteId, 'Uploaded files: ' || n || ' Unchanged files: ' || TO_CHAR(l_deploy_files.COUNT-n));
        ELSE
            logDeployment(pWebsiteId, pSiteId, 'All files unchanged since last deployment');
        END IF;

        /* Update deployed_date if null */
        CASE pEnv
            WHEN 'TEST' THEN
                UPDATE article SET deployed_date=current_timestamp WHERE deployed_date IS NULL AND parent_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteId AND collection_type<>'N/A');
            WHEN 'LIVE' THEN
                UPDATE article SET deployed_date_custom=current_timestamp WHERE deployed_date_custom IS NULL AND parent_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteId AND collection_type<>'N/A');
        END CASE;

        EXCEPTION
            WHEN OTHERS THEN
                logDeployment(pWebsiteId, pSiteId, SUBSTR(SQLERRM,1,100),'NOK');
                pck_core.log_error;
    END;

    /*
    **  DELETE OLD DEPLOYMENTS FROM NETLIFY SYSTEM
    */
    PROCEDURE runDelete(pUserId IN users.id%type, pWebsiteId IN website.id%type, pSiteId IN website.netlify_site_id%type) IS
        l_clob CLOB;
    BEGIN
        pck_sec.g_session_user_id:=pUserId;
        pck_sec.g_website_id:=pWebsiteId;
        
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/'|| pSiteId || '/deploys', pMethod=>'GET', pData=>l_clob);
        FOR C IN (
            SELECT id, published_at, MAX(published_at) OVER() last_published_at 
            FROM
                (
                SELECT id, TO_TIMESTAMP_TZ(published_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') published_at FROM JSON_TABLE(l_clob, '$[*]' COLUMNS (id, published_at))
                )
        )
        LOOP
            IF (C.published_at<C.last_published_at) THEN
                pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/'|| pSiteId || '/deploys/' || C.id, pMethod=>'DELETE', pData=>l_clob);
            END IF;
        END LOOP;
    END;

    /*
    ** Delete Github build directory - have to delete files individually before Github removes directory
    */    
    PROCEDURE deleteDirectory(pWebsiteId IN website.id%type, pUserId IN users.id%type) IS
        l_clob CLOB;
        l_domain_name website.domain_name%type;
        l_github CLOB;
        l_json JSON_OBJECT_T;
    BEGIN
        SELECT domain_name INTO l_domain_name FROM website WHERE id=pWebsiteId;
        pck_api.callGithubAPI(pUserId=>pUserId, pEndpoint=>'contents/'||l_domain_name, pMethod=>'GET', pData=>l_clob);
        FOR C IN (SELECT name, sha, message FROM  JSON_TABLE(l_clob FORMAT JSON, '$[*]' COLUMNS (name, sha, message))) LOOP
            IF (C.message IS NOT NULL) THEN 
                pck_core.log(C.message);
                RAISE_APPLICATION_ERROR(-20050,'Error in deleteDirectory - '|| C.message);
            ELSE
                l_json:=JSON_OBJECT_T.parse('{"message":"Commit by PLSQL"}');
                l_json.put('sha',C.sha);
                l_github:=l_json.to_clob; 
                pck_api.callGithubAPI(pUserId=>pUserId, pEndpoint=>'contents/' || l_domain_name || '/'||C.name, pMethod=>'DELETE', pBody=>l_github, pData=>l_clob);
            END IF;
        END LOOP;
        pck_api.resetGithubCurrentBuild(pUserId);
    END;

    /*
    ** Build and deploy AWS SES infrastructure through Terraform by submitting Github action. 
    ** Contact form sending email address must be stored in Apex Administrator description field!
    */
    PROCEDURE deployInfrastructure(pSenderEmail IN VARCHAR2) IS
        l_clob CLOB;
        l_json_clob CLOB;
        l_json JSON_OBJECT_T;
        l_action JSON_OBJECT_T;
    BEGIN
        -- Apex admin user description must hold valid domain name of sending email address
        FOR C IN (SELECT u.id, u.terraform_token, w.description ses_domain_name
                    FROM apex_workspace_apex_users w, users u 
                   WHERE w.email=u.email
                     AND w.is_admin='Yes'
                   ORDER BY date_created
                   FETCH FIRST ROW ONLY) 
        LOOP
            IF (C.ses_domain_name IS NULL) THEN
                dbms_output.put_line('APEX ADMIN USER MUST HAVE DESCRIPTION SET TO DOMAIN NAME OF SENDING EMAIL ADDRESS');
                EXIT;
            END IF;

            /* trigger the deployment using Githib action */          
            l_json:=new JSON_OBJECT_T;
            l_json.put('event_type', 'trigger_build_infra');

            l_action:=new JSON_OBJECT_T;
            l_action.put('from_email', pSenderEmail||'@'||C.ses_domain_name); --'contact.form@adfreesites.com'
            l_action.put('terraform_token', C.terraform_token);
            l_json.put('client_payload', l_action);

            --l_clob := apex_web_service.make_rest_request(p_url=>'https://api.github.com/repos/'|| C.deploy_repo || '/dispatches' ,p_http_method=>'POST',p_body=>l_json.stringify);

            /* nb; Github API 'dispatches' endpoint does not send a response */
            l_json_clob:=l_json.stringify;
            pck_api.callGithubAPI(pUserId=>C.id, pEndpoint=>'dispatches', pMethod=>'POST', pBody=>l_json_clob, pData=>l_clob);

        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

/*
**  RUN this after deploying infrastructure for AWS enabling Amazon Simple Email Service
**  Updates the Admin user's "aws gateway url" and "api key" required for SES send mail service
*/
    PROCEDURE setTerraformApikey IS
        l_domain_name website.domain_name%type; 
        l_admin_id users.id%type;
        l_aws_gateway_url VARCHAR2(200);
        l_api_key varchar2(40);
        l_api_key_link VARCHAR2(100);
        l_clob CLOB;
    BEGIN
        SELECT u.id, SUBSTR(w.description,1,INSTR(w.description,'.')-1)
          INTO l_admin_id, l_domain_name
          FROM apex_workspace_apex_users w, users u 
         WHERE w.email=u.email
           AND w.is_admin='Yes'
         ORDER BY date_created
         FETCH FIRST ROW ONLY;

        pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>'api/v2/organizations/Florent/workspaces/Mark_CMS', pMethod=>'GET', pData=>l_clob);

        FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
            pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob);

            /* invoke_url */
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                l_aws_gateway_url:=C1.value || 'send/' || l_domain_name;
            END LOOP;

            /* ses_dkim_tokens */
            dbms_output.put_line('FETCHING DKIM TOKENS');
            FOR C1 IN (SELECT dkim FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', NESTED PATH '$.attributes.value[*]' COLUMNS (dkim VARCHAR2(40) PATH '$'))) WHERE name='ses_dkim_tokens') LOOP
                dbms_output.put_line('ses_dkim_tokens:'||C1.dkim);
            END LOOP;

            /* api_key */
            FOR C1 IN (SELECT api_key_link FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (api_key_link PATH '$.links.self', name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='api_key') LOOP
                l_api_key_link:=C1.api_key_link;
            END LOOP;
            pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>l_api_key_link, pMethod=>'GET', pData=>l_clob);
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob, '$.data' COLUMNS (value PATH '$.attributes.value'))) LOOP
                l_api_key:=C1.value;
            END LOOP;
        END LOOP;

        IF (l_aws_gateway_url IS NOT NULL AND l_api_key IS NOT NULL) THEN
            UPDATE users 
               SET terraform_aws_gateway_url=l_aws_gateway_url, 
                   terraform_api_key=l_api_key
             WHERE id=l_admin_id;

            dbms_output.put_line('TERRAFORM API_KEY UPDATED SUCESSFULLY');
            dbms_output.put_line('TERRAFORM AWS_GATEWAY_URL UPDATED SUCESSFULLY');
            RETURN;
        END IF;

        IF (l_api_key IS NULL) THEN
            dbms_output.put_line('FAILED TO UPDATE TERRAFORM API_KEY');
        END IF;

        IF (l_aws_gateway_url IS NULL) THEN
            dbms_output.put_line('FAILED TO UPDATE TERRAFORM AWS_GATEWAY_URL');
        END IF;
    END;
       
end;
/