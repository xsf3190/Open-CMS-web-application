CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_DEPLOY" as 
    --
    PROCEDURE deleteDirectory(pWebsiteId IN website.id%type, pUserId IN users.id%type);
    --
    PROCEDURE deployInfrastructure(pSenderEmail IN VARCHAR2 DEFAULT 'contact.form');
    --
    PROCEDURE deployWebsite(pBodyText IN CLOB);
    --
    PROCEDURE getDeploymentStatus(pId IN VARCHAR2);
    --
    PROCEDURE logDeployment(pWebsiteId IN website.id%type, pSiteId IN website_deploy.site_id%type, pMessage IN VARCHAR2, pStatus IN VARCHAR2 DEFAULT 'OK', pLogTime IN TIMESTAMP DEFAULT current_timestamp);
    --
    PROCEDURE runDelete(pUserId IN users.id%type, pWebsiteId IN website.id%type, pSiteId IN website.netlify_site_id%type);
    --
    PROCEDURE runDeployment(pWebsiteId IN website.id%type, pUserId IN website.user_id%type, pEnv IN VARCHAR2, pSiteId IN website.netlify_site_id%type, pResturl IN VARCHAR2, pApplicationId IN VARCHAR2) ;
    --
    PROCEDURE setTerraformApikey;
    --
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_DEPLOY" as 
    
    /*
    **  Insert row in website_deploy logging table
    */      
    PROCEDURE logDeployment(pWebsiteId IN website.id%type, pSiteId IN website_deploy.site_id%type, pMessage IN VARCHAR2, pStatus IN VARCHAR2 DEFAULT 'OK', pLogTime IN TIMESTAMP DEFAULT current_timestamp) IS 
    BEGIN
        INSERT INTO website_deploy(id, website_id, site_id, message, status, log_time) VALUES (seq_log.nextval, pWebsiteId, pSiteId, pMessage, pStatus, pLogTime);
        COMMIT;
    END; 

    /*
    ** Build and deploy website to Netlify by submitting Github action
    */    
    PROCEDURE deployWebsite(pBodyText IN CLOB) IS
        TYPE t_table_id IS RECORD(
            id NUMBER,
            display_order NUMBER);
        TYPE tt_table_id IS TABLE OF t_table_id;
        l_table_ids tt_table_id; 

        l_clob CLOB;
        l_job_name VARCHAR2(30);
        n PLS_INTEGER;
        l_body_text CLOB:=pBodyText;
        l_website_id website.id%type;
        l_env VARCHAR2(4);
        l_site_id website.netlify_site_id%type;
        l_list LONG;
        l_url VARCHAR2(100);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        WITH payload AS (SELECT websiteid, env, list FROM JSON_TABLE(l_body_text, '$' COLUMNS (websiteid, env, list)))
        SELECT p.websiteid, p.env, CASE WHEN p.env='TEST' THEN w.netlify_site_id ELSE w.netlify_site_id_custom END, p.list 
          INTO l_website_id, l_env, l_site_id, l_list
          FROM website w, payload p
         WHERE w.user_id=l_session_data.user_id
           AND w.id=p.websiteid;

        /* Reorder pages */
        SELECT column_value, rownum 
          BULK COLLECT INTO l_table_ids
          FROM TABLE(apex_string.split(l_list,':'));

        FORALL i IN l_table_ids.first .. l_table_ids.last
            UPDATE website_article 
               SET display_order=l_table_ids(i).display_order 
             WHERE website_id = l_website_id
               AND article_id=l_table_ids(i).id;

        /* Check no other session currently deploying - simultaneous deployments not allowed on Netlify free plan */
        FOR C IN (SELECT job_name FROM user_scheduler_running_jobs WHERE job_name LIKE 'DEPLOY_%') LOOP
            apex_json.open_object;
            apex_json.write('content', '<h2>Someone else is deploying ... try again later</h2>');
            apex_json.write('stop', TRUE);
            apex_json.write('success', TRUE);
            apex_json.close_object;
            RETURN;
        END LOOP;

        DELETE website_deploy WHERE website_id=l_website_id;
        UPDATE website SET netlify_deploy_id=NULL WHERE id=l_website_id;

        l_job_name:=dbms_scheduler.generate_job_name('DEPLOY_');
        dbms_scheduler.create_job(
            job_name   => l_job_name,
            job_type   =>'STORED_PROCEDURE',
            job_action =>'pck_deploy.runDeployment',
            number_of_arguments=>6,
            start_date=>systimestamp
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 1,
            argument_value => l_website_id
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 2,
            argument_value => l_session_data.user_id
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 3,
            argument_value => l_env
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 4,
            argument_value => l_site_id
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 5,
            argument_value => pck_core.getRestUrl()
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 6,
            argument_value => l_session_data.app_id
        );
        dbms_scheduler.enable(l_job_name);

        SELECT CASE 
                WHEN netlify_site_id=l_site_id THEN REPLACE(domain_name,'.','-') || '.netlify.app'  
                WHEN netlify_site_id_custom=l_site_id THEN domain_name
               END
        INTO l_url 
        FROM website 
        WHERE id=l_website_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', '<ol class="deploy"><li><span>' || TO_CHAR(current_timestamp,'hh24:mi:ss') || '</span><span>Starting deployment of ' || l_url || '</span></li></ol>');
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** MINIFY CSS FILE USING TOPTAL UTILITY API
    */

    FUNCTION minifyCss(pWebsiteId IN website.id%type, pSiteId IN website.netlify_site_id%type, pFilename IN VARCHAR2) RETURN CLOB IS
        l_url VARCHAR2(200):='https://www.toptal.com/developers/cssminifier/api/raw';
        l_clob clob;
        l_parm_names   apex_application_global.VC_ARR2; 
        l_parm_values  apex_application_global.VC_ARR2;
    BEGIN
        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/x-www-form-urlencoded';

        FOR C IN (SELECT apex_util.blob_to_clob(file_content) file_content
                  FROM apex_application_static_files 
                 WHERE application_id=101
                   AND file_name=pFilename)
        LOOP
            l_parm_names(1):='input';
            l_parm_values(1):=C.file_content;
            l_clob:=apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'POST', p_parm_name=>l_parm_names, p_parm_value=>l_parm_values);

            logDeployment(pWebsiteId, pSiteId,pFilename || ' minimized from ' || 
                apex_string_util.to_display_filesize(dbms_lob.getlength(C.file_content)) || ' to ' || 
                apex_string_util.to_display_filesize(dbms_lob.getlength(l_clob)));
        END LOOP;
        IF (l_clob IS NULL) THEN
            logDeployment(pWebsiteId, pSiteId,'CSS file not found or empty:' || pFilename,'NOK');
        END IF;

        RETURN (l_clob);
    end;

    /* 
    **  STATIC FONT REQUEST USES SYNTAX LIKE THIS IN THE GOOGLE API CALL -  E.G. FOR ALL FLAVOURS OF ROBOTO:
    **  css/Roboto:400normal,400italic,700normal,700italic
    **
    **  VARIABLE FONT REQUESTS USE DIFFERENT SYNTAX
    **  css2/Roboto:ital,wght@0,400;0,700;1,400;1,700
     */
    PROCEDURE getFontfaces(pWebsiteid IN website.id%type, pEnv IN VARCHAR2, pSiteId IN website.netlify_site_id%type, pCharsNormalHeadings IN VARCHAR2, pCharsItalicHeadings IN VARCHAR2, pCharsNormal IN VARCHAR2, pCharsItalic IN VARCHAR2, pCharsBoldNormal IN VARCHAR2, pCharsBoldItalic IN VARCHAR2, pFontface IN OUT NOCOPY VARCHAR2) IS
        l_api_url VARCHAR2(50);
        l_font_css LONG;
        l_axes VARCHAR2(30);
        l_tuples VARCHAR2(100);

        /* Return distict characters sorted */
        FUNCTION chars_used (pCharacters IN VARCHAR2) RETURN VARCHAR2 IS
            l_chars VARCHAR2(500);
        BEGIN
            SELECT LISTAGG(DISTINCT SUBSTR(pCharacters, LEVEL, 1), NULL) WITHIN GROUP (
                      ORDER BY SUBSTR(pCharacters, LEVEL, 1))
            INTO l_chars
            FROM dual
            CONNECT BY LEVEL <= LENGTH(pCharacters);
            RETURN(l_chars);
        END;

    BEGIN
        IF (pCharsNormalHeadings IS NOT NULL) THEN
            logDeployment(pWebsiteid, pSiteId, ' - Headings normal characters: '||LENGTH(pCharsNormalHeadings));
        END IF;
        IF (pCharsItalicHeadings IS NOT NULL) THEN
            logDeployment(pWebsiteid, pSiteId, ' - Headings italic characters: '||LENGTH(pCharsItalicHeadings));
        END IF;
        IF (pCharsNormal IS NOT NULL) THEN
            logDeployment(pWebsiteid, pSiteId, ' - Text normal characters: '||LENGTH(pCharsNormal));
        END IF;
        IF (pCharsItalic IS NOT NULL) THEN
            logDeployment(pWebsiteid, pSiteId, ' - Text italic characters: '||LENGTH(pCharsItalic));
        END IF;
        IF (pCharsBoldNormal IS NOT NULL) THEN
            logDeployment(pWebsiteid, pSiteId, ' - Text bold characters: '||LENGTH(pCharsBoldNormal));
        END IF;
        IF (pCharsBoldItalic IS NOT NULL) THEN
            logDeployment(pWebsiteid, pSiteId, ' - Text bold italic characters: '||LENGTH(pCharsBoldItalic));
        END IF;

        FOR C IN (
            SELECT f.family, f.variable, wf.context, wf.ital, wf.opsz, wf.slnt, wf.wdth, wf.wght, f.opsz_default, f.slnt_default, f.wdth_default, f.wght_default,
                f.ital_start, f.ital_end, f.opsz_start, f.opsz_end, f.slnt_start, f.slnt_end, f.wdth_start, f.wdth_end, f.wght_start, f.wght_end,
                DECODE(wf.context,'TITLE',w.title,w.subtitle) text
            FROM font f, website_font wf, website w
            WHERE wf.website_id=w.id
            AND f.id=wf.font_id
            AND w.id=pWebsiteId
            ORDER BY DECODE(wf.context,'TITLE',1,2) )
        LOOP
            /* FOR STATIC FONTS ONLY NEED DISTINCT CHARACTERS FOR TITLE AND SUBTITLE */
            IF (C.variable=0) THEN
                l_api_url:='https://fonts.googleapis.com/css?family=';
                CASE C.context
                    WHEN 'TITLE' THEN /* Heading elements h1,h2,h3,h4 */
                        IF (pCharsNormalHeadings IS NOT NULL) THEN
                            pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':700' || '&text=' || chars_used(pCharsNormalHeadings) || '&display=swap',l_font_css);
                            pFontface:=pFontface || l_font_css;
                        END IF;
                        IF (pCharsItalicHeadings IS NOT NULL) THEN
                            pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':700italic' || '&text=' || chars_used(pCharsItalicHeadings) || '&display=swap',l_font_css);
                            pFontface:=pFontface || l_font_css;
                        END IF;
                        IF (C.text IS NOT NULL) THEN
                            pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':' || C.wght || CASE WHEN C.ital=1 THEN 'italic' END || '&text=' || chars_used(C.text) || '&display=swap',l_font_css);
                            pFontface:=pFontface || l_font_css;
                        END IF;

                    WHEN 'SUBTITLE' THEN /* Non-heading elements */
                        IF (pCharsNormal IS NOT NULL) THEN
                            pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':400' || '&text=' || chars_used(pCharsNormal) || '&display=swap',l_font_css);
                            pFontface:=pFontface || l_font_css;
                        END IF;
                        IF (pCharsBoldNormal IS NOT NULL) THEN
                            pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':700' || '&text=' || chars_used(pCharsBoldNormal) || '&display=swap',l_font_css);
                            pFontface:=pFontface || l_font_css;
                        END IF;
                        IF (pCharsItalic IS NOT NULL) THEN
                            pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':400italic' || '&text=' || chars_used(pCharsItalic) || '&display=swap',l_font_css);
                            pFontface:=pFontface || l_font_css;
                        END IF;
                        IF (pCharsBoldItalic IS NOT NULL) THEN
                            pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':700italic' || '&text=' || chars_used(pCharsBoldItalic) || '&display=swap',l_font_css);
                            pFontface:=pFontface || l_font_css;
                        END IF;
                END CASE;
                CONTINUE;
            END IF;


            /* *************************** */
            /* VARIABLE FONTS USE CSS2 API */
            /* *************************** */

            l_api_url:='https://fonts.googleapis.com/css2?family=';

            l_axes:=null;
            l_tuples:=null;
            
            IF (C.ital_start IS NOT NULL) THEN
                l_axes:=l_axes || 'ital,';
            ELSE 
                IF (C.slnt_start IS NOT NULL) THEN
                    l_axes:=l_axes || 'slnt,';
                    CASE pEnv
                        WHEN 'TEST' THEN l_tuples:=l_tuples || C.slnt_start || '..' || C.slnt_end || ',';
                        WHEN 'LIVE' THEN l_tuples:=l_tuples || C.slnt || ',';
                    END CASE;
                END IF;
            END IF;
            IF (C.opsz_start IS NOT NULL) THEN
                l_axes:=l_axes || 'opsz,';
                CASE pEnv
                    WHEN 'TEST' THEN l_tuples:=l_tuples || C.opsz_start || '..' || C.opsz_end || ',';
                    WHEN 'LIVE' THEN l_tuples:=l_tuples || C.opsz || ',';
                END CASE;
            END IF;
            IF (C.wdth_start IS NOT NULL) THEN
                l_axes:=l_axes || 'wdth,';
                CASE pEnv
                    WHEN 'TEST' THEN l_tuples:=l_tuples || C.wdth_start || '..' || C.wdth_end || ',';
                    WHEN 'LIVE' THEN l_tuples:=l_tuples || C.wdth || ',';
                END CASE;
            END IF;
            IF (C.wght_start IS NOT NULL) THEN
                l_axes:=l_axes || 'wght,';
                CASE pEnv
                    WHEN 'TEST' THEN l_tuples:=l_tuples || C.wght_start || '..' || C.wght_end || ',';
                    WHEN 'LIVE' THEN l_tuples:=l_tuples || C.wght || ',';
                END CASE;
            END IF;

            l_axes:=RTRIM(l_axes,',');
            l_tuples:=RTRIM(l_tuples,',');

            pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':' || l_axes || '@' || 
                CASE 
                    WHEN INSTR(l_axes,'ital')>0 THEN C.ital_start || ',' || l_tuples || ';' || C.ital_end || ',' || l_tuples 
                    ELSE l_tuples 
                END || 
                '&text=' || chars_used(C.text) || '&display=swap',l_font_css);

            pFontface:=pFontface || l_font_css;
            
            /*
            ** AT THIS STAGE WE NEED VARIABLE FONTS FOR wght:400 (text) and wght:700 (headings)
            ** IF FONT HAS NO ITAL AXIS, USE SLNT INSTEAD IF TEXT CONTAINS ANY ITALICS
            */
            CASE C.context
                WHEN 'TITLE' THEN
                    IF (pCharsNormalHeadings IS NOT NULL) THEN
                        pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':ital,wght@0,700&text=' || chars_used(pCharsNormalHeadings) || '&display=swap',l_font_css);
                        pFontface:=pFontface || l_font_css;
                    END IF;
                    IF (pCharsItalicHeadings IS NOT NULL) THEN
                        pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':ital,wght@1,700&text=' || chars_used(pCharsItalicHeadings) || '&display=swap',l_font_css);
                        pFontface:=pFontface || l_font_css;
                    END IF;

                WHEN 'SUBTITLE' THEN
                    IF (pCharsNormal IS NOT NULL) THEN
                        pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':ital,wght@0,400&text=' || chars_used(pCharsNormal) || '&display=swap',l_font_css);
                        pFontface:=pFontface || l_font_css;
                    END IF;
                    
                    IF (pCharsBoldNormal IS NOT NULL) THEN
                        pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':ital,wght@0,700&text=' || chars_used(pCharsBoldNormal) || '&display=swap',l_font_css);
                        pFontface:=pFontface || l_font_css;
                    END IF;
                    
                    IF (pCharsItalic IS NOT NULL) THEN
                        pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':ital,wght@1,400&text=' || chars_used(pCharsItalic) || '&display=swap',l_font_css);
                        pFontface:=pFontface || l_font_css;
                    END IF;
                    
                    IF (pCharsBoldItalic IS NOT NULL) THEN
                        pck_api.callGoogleAPI(l_api_url || REPLACE(C.family,' ','+') || ':ital,wght@1,700&text=' || chars_used(pCharsBoldItalic) || '&display=swap',l_font_css);
                        pFontface:=pFontface || l_font_css;
                    END IF;
            END CASE;
        END LOOP;
    END;

    /* 
    ** EXTRACT DISTINCT ITALIC / NORMAL / BOLD CHARACTERS IN TEXT
    */
    PROCEDURE extract_styles(pText IN VARCHAR2, pBoldItalic IN OUT VARCHAR2, pBoldNormal IN OUT VARCHAR2, pItalic IN OUT VARCHAR2, pNormal IN OUT VARCHAR2) IS
        l_text LONG:=pText;
        l_italics_regex varchar2(12):='<i>(.+?)</i>';
        l_italics_substr LONG;
        l_italics_bold_regex varchar2(30):='<i><strong>(.+?)</strong></i>';
        l_italics_bold_substr LONG;
        l_bold_regex varchar2(30):='<strong>(.+?)</strong>';
        l_bold_substr LONG;
        l_char VARCHAR2(4);
        n PLS_INTEGER;
        len PLS_INTEGER;
    BEGIN
        IF (pText IS NULL) THEN
            RETURN;
        END IF;
        n:=REGEXP_COUNT(l_text,l_italics_bold_regex);
        FOR i IN 1..n LOOP
            l_italics_bold_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_italics_bold_regex,1,i)));
            len:=LENGTH(l_italics_bold_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_italics_bold_substr,k,1);
                    IF (pBoldItalic IS NULL OR INSTR(pBoldItalic,l_char)=0) THEN
                        pBoldItalic:=pBoldItalic || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_italics_bold_regex,null);

        n:=REGEXP_COUNT(l_text,l_italics_regex);
        FOR i IN 1..n LOOP
            l_italics_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_italics_regex,1,i)));
            len:=LENGTH(l_italics_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_italics_substr,k,1);
                    IF (pItalic IS NULL OR INSTR(pItalic,l_char)=0) THEN
                        pItalic:=pItalic || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_italics_regex,null);

        n:=REGEXP_COUNT(l_text,l_bold_regex);
        FOR i IN 1..n LOOP
            l_bold_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_bold_regex,1,i)));
            len:=LENGTH(l_bold_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_bold_substr,k,1);
                    IF (pBoldNormal IS NULL OR INSTR(pBoldNormal,l_char)=0) THEN
                        pBoldNormal:=pBoldNormal || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_bold_regex,null);

        l_text:=utl_i18n.unescape_reference(apex_escape.striphtml(l_text));
        len:=LENGTH(l_text);
        
        IF (len>0) THEN
            FOR i IN 1..len LOOP
                l_char:=SUBSTR(l_text,i,1);
                IF (pNormal IS NULL OR INSTR(pNormal,l_char)=0) THEN
                    pNormal:=pNormal || l_char;
                END IF;
            END LOOP;
        END IF;
    END;


    /*
    **  DEPLOY BY UPLOADING HTML FILE CONTENT DIRECTLY TO NETLIFY
    */
    PROCEDURE runDeployment(pWebsiteId IN website.id%type, pUserId IN website.user_id%type, pEnv IN VARCHAR2, pSiteId IN website.netlify_site_id%type, pRestUrl IN VARCHAR2, pApplicationId IN VARCHAR2) IS
        l_clob CLOB;
        l_json JSON_OBJECT_T;
        l_files JSON_OBJECT_T;
        l_head CLOB;
        l_page CLOB;
        
        l_title website.title%type;
        l_subtitle website.subtitle%type;
        l_contact_email website.contact_email%type;
        l_telephone_number website.telephone_number%type;
        l_mobile_number website.mobile_number%type;
        l_linkedin_name website.linkedin_name%type;
        l_instagram_name website.instagram_name%type;
        l_color_primary website.color_primary%type;
        l_favicon_asset_id website.favicon_asset_id%type;
        l_body_html article.body_html%type;
        l_favicon_url VARCHAR2(250);
        l_favicon_download BLOB;
        l_content CLOB;
        l_text VARCHAR2(4000);
        
        l_char VARCHAR2(4);
        l_deploy_css CLOB;
        l_file_name VARCHAR2(200);
        l_sha1 VARCHAR2(40);

        
        l_chars_normal VARCHAR2(500);
        l_chars_italic VARCHAR2(500);
        l_chars_normal_headings VARCHAR2(500);
        l_chars_italic_headings VARCHAR2(500);
        l_chars_bold_normal VARCHAR2(500);
        l_chars_bold_italic VARCHAR2(500);
        
        
        l_dummy VARCHAR2(500);
        
        l_headings_regex varchar2(20):='<h.+?>(.+?)<\/h.+?>';
        
        l_heading LONG;

        TYPE tt_files IS RECORD (
            lastmod article.updated_date%type,
            url VARCHAR2(200),
            file_name VARCHAR2(200),
            file_content CLOB,
            file_content_b BLOB
        );
        TYPE t_files IS TABLE OF tt_files INDEX BY VARCHAR2(40);
        l_deploy_files t_files;

        TYPE tt_labels IS RECORD (
            parent_article_id website_article.article_id%type,
            article_id website_article.article_id%type,
            navigation_label article.title%type,  -- largest that can fit here
            path_name VARCHAR2(200),
            collection_type website_article.collection_type%type,
            page_title website_article.page_title%type,
            page_description website_article.page_description%type,
            contact_form website_article.contact_form%type,
            lastmod article.updated_date%type,
            word_count article.word_count%type, 
            title website.title%type,
            subtitle website.subtitle%type,
            header_effect website.header_effect%type,
            hero_asset_id website.hero_asset_id%type,
            contact_email website.contact_email%type,
            telephone_number website.telephone_number%type,
            mobile_number website.mobile_number%type,
            linkedin_name website.linkedin_name%type,
            instagram_name website.instagram_name%type,
            promotion website.promotion%type,
            body_html article.body_html%type,
            modules apex_t_varchar2
        );
        TYPE t_labels IS TABLE OF tt_labels INDEX BY PLS_INTEGER;
        l_labels t_labels;

        l_is_media BOOLEAN:=FALSE;
        l_is_blog BOOLEAN:=FALSE;
        l_is_product BOOLEAN:=FALSE;

        l_modules apex_t_varchar2;
        l_module_html LONG;
        l_script_html LONG;

        l_thumbnails CLOB;

        TYPE t_jscode IS TABLE OF VARCHAR2(30);
        l_jscode t_jscode:=t_jscode();

        l_message VARCHAR2(100);
        l_styles CLOB;
        l_styles_edit CLOB;
        
        l_sitemap CLOB;
        l_robots CLOB;
        l_headers CLOB;
        l_ssl_url VARCHAR2(200);
        l_url VARCHAR2(200);
        l_total_pages PLS_INTEGER;
        n PLS_INTEGER;
        n2 PLS_INTEGER;

    BEGIN
        /* For logging when running in scheduler */
        pck_sec.g_session_user_id:=pUserId;
        pck_sec.g_website_id:=pWebsiteId;

        SELECT title, subtitle, contact_email, telephone_number, mobile_number, linkedin_name, instagram_name, SUBSTR(color_primary,2), favicon_asset_id
          INTO l_title, l_subtitle, l_contact_email, l_telephone_number, l_mobile_number, l_linkedin_name, l_instagram_name, l_color_primary, l_favicon_asset_id
          FROM website
         WHERE id=pWebsiteId;

        /*
        ** Get all website content into collection
        */
        SELECT parent_article_id, article_id, navigation_label, path_name, collection_type, page_title, page_description, contact_form, lastmod, word_count, title, subtitle, header_effect, hero_asset_id, contact_email, telephone_number, mobile_number, linkedin_name, instagram_name, promotion, body_html, apex_t_varchar2()
          BULK COLLECT INTO l_labels
          FROM
          (
        SELECT wa.article_id parent_article_id, wa.article_id, wa.navigation_label, apex_string_util.get_slug(wa.navigation_label) path_name, wa.collection_type, wa.page_title, wa.page_description, wa.contact_form, 
            wa.display_order, NVL(a.updated_date,a.created_date) lastmod, a.word_count, w.title, w.subtitle, w.header_effect, w.hero_asset_id, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name, w.instagram_name, w.promotion, a.body_html body_html
          FROM website w, website_article wa, article a
         WHERE w.id=pWebsiteId
           AND wa.website_id=w.id 
           AND wa.article_id=a.id
         UNION ALL
        SELECT wa.article_id, a.id, a.title, apex_string_util.get_slug(wa.navigation_label) || '/' || apex_string_util.get_slug(a.title),  NULL, NULL, NULL, NULL, 
            wa.display_order+NVL(a.display_order/100,0.001),  NVL(a.updated_date,a.created_date) lastmod, a.word_count, w.title, w.subtitle, w.header_effect, w.hero_asset_id, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name, w.instagram_name, w.promotion, a.body_html
          FROM website w, website_article wa, article a 
         WHERE w.id=pWebsiteId
           AND wa.website_id=w.id 
           AND a.parent_id=wa.article_id 
           AND wa.collection_type IN ('BLOG','MEDIA')
          )
         ORDER BY display_order, lastmod DESC;
        
        l_json:= new JSON_OBJECT_T;
        l_files:= new JSON_OBJECT_T;

        pck_sec.refreshOrdsEndpoints(pWebsiteId);

        /* Get URL of site to be deployed */
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/' || pSiteId, pMethod=>'GET', pData=>l_clob);
        SELECT ssl_url INTO l_ssl_url FROM JSON_TABLE(l_clob, '$' COLUMNS(ssl_url));
        
        FOR i IN 1..l_labels.COUNT LOOP

            /* For each context collect distinct set of italic and normal characters in order to optimise font */
            l_body_html:=l_labels(i).body_html;           
            n:=REGEXP_COUNT(l_body_html,l_headings_regex);
            IF (n>0) THEN
                FOR j IN 1..n 
                LOOP
                    extract_styles(REGEXP_SUBSTR(l_body_html,l_headings_regex,1,j), l_dummy, l_dummy, l_chars_italic_headings, l_chars_normal_headings);
                END LOOP;
                l_body_html:=REGEXP_REPLACE(l_body_html,l_headings_regex,null);
            END IF;
            extract_styles(l_body_html, l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal);

            apex_string.push(l_labels(i).modules,'deploy_main.min.js');

            IF (l_labels(i).collection_type='BLOG') THEN
                l_is_blog:=TRUE;
                l_is_media:=FALSE;
                apex_string.push(l_labels(i).modules,'deploy_blog.min.js');
            ELSIF (l_labels(i).collection_type='MEDIA') THEN
                l_is_media:=TRUE;
                l_is_blog:=FALSE;
            ELSIF (l_labels(i).collection_type='PRODUCT') THEN
                apex_string.push(l_labels(i).modules,'deploy_cart.js');
            ELSIF (l_labels(i).collection_type IS NULL AND l_is_media) THEN
                apex_string.push(l_labels(i).modules,'deploy_gallery.min.js');
            END IF;

            IF (l_labels(i).contact_form='YES') THEN
                apex_string.push(l_labels(i).modules,'deploy_contact.min.js');
            END IF;

            pck_codepen.buildBodyHtml(
                pUserId, 
                pWebsiteId, 
                pEnv,
                pRestUrl,
                l_labels(i).article_id, 
                l_labels(i).collection_type, 
                l_is_media, 
                l_labels(i).contact_form, 
                l_title,
                l_subtitle,
                l_labels(i).header_effect,
                l_labels(i).hero_asset_id,
                l_labels(i).contact_email,
                l_labels(i).telephone_number,
                l_labels(i).mobile_number,
                l_labels(i).linkedin_name,
                l_labels(i).instagram_name,
                l_labels(i).promotion,
                l_labels(i).body_html
            );

            IF (INSTR(l_labels(i).body_html,'class="featured')>0) THEN
                apex_string.push(l_labels(i).modules,'deploy_blog.min.js');
            END IF;

        END LOOP;

        /* 
        ** The site favicon is an SVG format image file uploaded through the CMS to the Asset table.
        */
        FOR C IN (SELECT cld_cloud_name, resource_type, public_id, format FROM asset WHERE id=l_favicon_asset_id) LOOP
           l_favicon_url:=pck_media.getCloudinaryUrl(C.cld_cloud_name,C.resource_type,C.public_id,C.format, 96) || '.svg';
           l_favicon_url:=REPLACE(l_favicon_url,'q_auto,f_auto','f_auto,w_96,h_96');
        END LOOP;
        IF (l_favicon_url IS NULL) THEN
            logDeployment(pWebsiteId, pSiteId,'Website favicon missing','NOK');
        END IF;

        l_robots:='User-agent: *' || chr(10) || 'Allow: /' || chr(10) || chr(10) || 'Sitemap: ' || l_ssl_url || '/sitemap.xml';
        l_headers:=
        '/*' || chr(10) || 
            q'[Content-Security-Policy: default-src 'none';]' ||
            q'[ img-src 'self' res.cloudinary.com;]' ||
            q'[ font-src 'self' fonts.gstatic.com;]' ||
            q'[ style-src 'self' 'unsafe-inline' cdn.ckeditor.com;]' ||
            q'[ script-src 'self' cdn.ckeditor.com upload-widget.cloudinary.com;]' ||
            q'[ frame-src upload-widget.cloudinary.com  www.youtube.com;]' ||
            q'[ frame-ancestors 'none';]' ||
            q'[ connect-src ]' || pRestUrl || ';' || chr(10) ||
            q'[X-Content-Type-Options: nosniff]' || chr(10) ||
            q'[X-Frame-Options: SAMEORIGIN]' || chr(10) ||
            q'[Referrer-Policy: no-referrer-when-downgrade]' || chr(10) ||
            q'[Permissions-Policy: microphone=(), geolocation=()]';

        /* 
        ** Build individual website pages
        */
        FOR i IN 1..l_labels.COUNT
        LOOP
            IF (i=1) THEN
                logDeployment(pWebsiteId, pSiteId, 'Building ' || l_labels.COUNT || ' website page' || CASE WHEN l_labels.COUNT>1 THEN 's' END);
                l_sitemap:=
                '<?xml version="1.0" encoding="UTF-8"?>' || 
                '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
            END IF;

            l_sitemap:=l_sitemap ||
                '<url><loc>' || l_ssl_url || CASE WHEN i>1 THEN '/' || l_labels(i).path_name END || '</loc><lastmod>' || TO_CHAR(l_labels(i).lastmod,'YYYY-MM-DD') || '</lastmod></url>';
            IF (i=l_labels.COUNT) THEN
                l_sitemap:=l_sitemap || 
                '</urlset>';
            END IF;

            l_module_html:=NULL;
            l_script_html:=NULL;

            FOR C IN (SELECT column_value FROM TABLE(l_labels(i).modules)) LOOP
                l_module_html:=l_module_html || '<link rel="modulepreload" href="/' || C.column_value || '">' || chr(10);
                l_script_html:=l_script_html || '<script src="/' || C.column_value || '" type="module"></script>' || chr(10);
                IF (C.column_value NOT MEMBER OF l_jscode) THEN
                    l_jscode.EXTEND();
                    l_jscode(l_jscode.LAST):=C.column_value;
                END IF;
            END LOOP;
            
            l_page:=
                '<!DOCTYPE HTML>' ||
                '<html lang="en">' ||
                '<head>' ||
                    '<meta charset="UTF-8">' ||
                    '<meta name="viewport" content="width=device-width, initial-scale=1.0">' ||
                    '<title>' || l_labels(i).page_title || '</title>' ||
                    '<meta name="description" content="' || l_labels(i).page_description || '">' ||
                    '<meta name="author" content="mark.russellbrown@gmail.com">' ||
                    --'<link rel="preload" as="font" href="/' || l_font_filename || '" crossorigin>' ||
                    l_module_html ||
                    l_script_html ||
                    '<link rel="icon" type="image/svg+xml" sizes="any" href="' || l_favicon_url || '">' ||
                    '<link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin>' ||
                    '<link rel="stylesheet" href="/website.css">'  ||
                '</head>' ||
                
                l_labels(i).body_html ||
            '</html>';

            l_sha1:=LOWER(dbms_crypto.hash(src=>l_page, typ=>dbms_crypto.hash_sh1));

            IF (i=1) THEN
                l_file_name:='index.html';
            ELSE
                l_file_name:=l_labels(i).path_name || '.html';
            END IF;

            l_deploy_files(l_sha1).url:=l_ssl_url || CASE WHEN i>1 THEN '/' || l_labels(i).path_name END;
            l_deploy_files(l_sha1).lastmod:=l_labels(i).lastmod;
            l_deploy_files(l_sha1).file_name:=l_file_name;
            l_deploy_files(l_sha1).file_content:=l_page;
            l_files.put(l_file_name, l_sha1);
        END LOOP;

        /* Build website assets */

        logDeployment(pWebsiteId, pSiteId, 'Building sitemap.xml for SEO');
        l_sha1:=LOWER(dbms_crypto.hash(src => l_sitemap, typ => dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='sitemap.xml';
        l_deploy_files(l_sha1).file_content:=l_sitemap;
        l_files.put('sitemap.xml', l_sha1);

        logDeployment(pWebsiteId, pSiteId, 'Building robots.txt for SEO');
        l_sha1:=LOWER(dbms_crypto.hash(src => l_robots, typ => dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='robots.txt';
        l_deploy_files(l_sha1).file_content:=l_robots;
        l_files.put('robots.txt', l_sha1);

        logDeployment(pWebsiteId, pSiteId, 'Building Content Security Policy');
        l_sha1:=LOWER(dbms_crypto.hash(src => l_headers, typ => dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='_headers';
        l_deploy_files(l_sha1).file_content:=l_headers;
        l_files.put('_headers', l_sha1);

        FOR C IN (
            SELECT o.uri_template
              FROM api_endpoint a, role r, ords_endpoints o
             WHERE a.website_id=pWebsiteId 
               AND a.role_id=r.id 
               AND r.name='admin'
               AND a.template_id=o.template_id
        ) LOOP
            l_jscode.EXTEND();
            l_jscode(l_jscode.LAST):='deploy_' || SUBSTR(C.uri_template,1,INSTR(C.uri_template,'/')-1) || '.min.js';
        END LOOP;

        /* Utility javascript modules */
        l_jscode.EXTEND();
        l_jscode(l_jscode.LAST):='deploy_web_vitals.min.js';
        l_jscode.EXTEND();
        l_jscode(l_jscode.LAST):='deploy_metric.min.js';
        l_jscode.EXTEND();
        l_jscode(l_jscode.LAST):='deploy_elements.min.js';
        l_jscode.EXTEND();
        l_jscode(l_jscode.LAST):='deploy_callAPI.min.js';
        l_jscode.EXTEND();
        l_jscode(l_jscode.LAST):='deploy_menulist.min.js';


        logDeployment(pWebsiteId, pSiteId, 'Building JS modules');
        FOR i IN 1..l_jscode.COUNT LOOP
            FOR C IN (SELECT apex_util.blob_to_clob(file_content) file_content
                        FROM apex_application_static_files 
                       WHERE application_id=pApplicationId
                         AND file_name=l_jscode(i)) 
            LOOP
                l_sha1:=LOWER(dbms_crypto.hash(src=>C.file_content, typ=>dbms_crypto.hash_sh1));
                l_deploy_files(l_sha1).file_name:=l_jscode(i);
                l_deploy_files(l_sha1).file_content:=C.file_content;
                l_files.put(l_jscode(i), l_sha1);
            END LOOP;
        END LOOP;
        
        logDeployment(pWebsiteId, pSiteId, 'Configuring FONTS for distinct characters used');

        /* For now, set footer elements as normal style characters */
        l_chars_normal:=l_chars_normal || l_contact_email || l_telephone_number || l_mobile_number || l_linkedin_name;
        
        getFontfaces(pWebsiteid, pEnv, pSiteId, l_chars_normal_headings, l_chars_italic_headings, l_chars_normal, l_chars_italic, l_chars_bold_normal, l_chars_bold_italic, l_styles);
        
        l_styles:=l_styles || pck_codepen.buildCssRoot(pWebsiteId);

        logDeployment(pWebsiteId, pSiteId, 'Building CSS');
        l_styles:=l_styles || minifyCSS(pWebsiteId, pSiteId, 'deploy.css');
        l_sha1:=LOWER(dbms_crypto.hash(src => l_styles, typ => dbms_crypto.hash_sh1));
        l_deploy_files(l_sha1).file_name:='website.css';
        l_deploy_files(l_sha1).file_content:=l_styles;
        l_files.put('website.css', l_sha1);

        IF (pEnv='TEST') THEN
            l_styles_edit:=l_styles_edit || minifyCSS(pWebsiteId, pSiteId, 'deploy_edit.css');
            logDeployment(pWebsiteId, pSiteId, 'Building CSS edit styles');
            l_sha1:=LOWER(dbms_crypto.hash(src => l_styles_edit, typ => dbms_crypto.hash_sh1));
            l_deploy_files(l_sha1).file_name:='website_edit.min.css';
            l_deploy_files(l_sha1).file_content:=l_styles_edit;
            l_files.put('website_edit.min.css', l_sha1);
        END IF;

        l_json.put('files',l_files);

        logDeployment(pWebsiteId, pSiteId, 'Sending digest of ' || l_deploy_files.COUNT || ' files to Netlify');
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/' || pSiteId || '/deploys', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);
        UPDATE website SET netlify_deploy_id=(SELECT id FROM JSON_TABLE(l_clob, '$' COLUMNS (id))) WHERE id=pWebsiteId;
        COMMIT;

        /* upload to Netlify if required - i.e. file content has changed since last deployment  */
        n:=0;
        FOR C IN (SELECT id, sha1 FROM JSON_TABLE(l_clob, '$' COLUMNS (id, NESTED '$.required[*]' COLUMNS (sha1 PATH '$'))) WHERE sha1 IS NOT NULL) LOOP
            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'deploys/' || C.id || '/files/' || l_deploy_files(C.sha1).file_name, pMethod=>'PUT', 
                pBody=>l_deploy_files(C.sha1).file_content, 
                pBodyBlob=>l_deploy_files(C.sha1).file_content_b, 
                pData=>l_clob
            );
            logDeployment(pWebsiteId, pSiteId, 'Successfully uploaded ' || l_deploy_files(C.sha1).file_name);
            n:=n+1;
        END LOOP;

        IF (n>0) THEN
            logDeployment(pWebsiteId, pSiteId, 'Uploaded files: ' || n || ' Unchanged files: ' || TO_CHAR(l_deploy_files.COUNT-n));
        ELSE
            logDeployment(pWebsiteId, pSiteId, 'All files unchanged since last deployment');
        END IF;

        /* Update deployed_date if null */
        CASE pEnv
            WHEN 'TEST' THEN
                UPDATE article SET deployed_date=current_timestamp WHERE deployed_date IS NULL AND parent_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteId AND collection_type<>'N/A');
            WHEN 'LIVE' THEN
                UPDATE article SET deployed_date_custom=current_timestamp WHERE deployed_date_custom IS NULL AND parent_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteId AND collection_type<>'N/A');
        END CASE;

        EXCEPTION
            WHEN OTHERS THEN
                logDeployment(pWebsiteId, pSiteId, SUBSTR(SQLERRM,1,100),'NOK');
                pck_core.log_error;
    END;

    /*
     **  Get deployment status from website_deploy logging table - called from Javascript every 3 seconds
     */
    PROCEDURE getDeploymentStatus(pId IN VARCHAR2) IS 
        l_website_id website_deploy.website_id%type;
        l_site_id website_deploy.site_id%type;
        l_content CLOB;
        l_clob CLOB;
        l_ssl_url VARCHAR2(100);
        l_deployment_complete BOOLEAN:=FALSE;
        l_netlify_status website_deploy.status%type;
        l_netlify_deploy_id website.netlify_deploy_id%type;
        l_state VARCHAR2(200);
        l_updated_at website.netlify_last_published%type;
        l_job_name VARCHAR2(30);
        l_session_data pck_core.session_data_rt;
        TYPE t_deploy_log IS RECORD(
            id website_deploy.id%type,
            log_time VARCHAR2(8),
            message website_deploy.message%type,
            status website_deploy.status%type);
        TYPE tt_deploy_log IS TABLE OF t_deploy_log;
        l_deploy_log tt_deploy_log;          
        l_env VARCHAR2(4);
        l_is_live BOOLEAN;
        cert_not_ready exception;
        pragma exception_init( cert_not_ready, -29273 );
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_env:=SUBSTR(pId,INSTR(pId,',')+1);

        SELECT netlify_deploy_id, CASE WHEN l_env='TEST' THEN netlify_site_id ELSE netlify_site_id_custom END
          INTO l_netlify_deploy_id, l_site_id
          FROM website
         WHERE id=l_website_id;

        l_is_live:=l_env='LIVE';

        /* Get latest deployment status if started */
        IF (l_netlify_deploy_id IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites/'|| l_site_id || '/deploys/' || l_netlify_deploy_id, pMethod=>'GET', pData=>l_clob);
            FOR C IN (SELECT state, ssl_url, TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') updated_at
                        FROM JSON_TABLE(l_clob, '$' COLUMNS (state, ssl_url, updated_at)) 
                       WHERE state='ready') 
            LOOP
                logDeployment(l_website_id, l_site_id, C.state, pLogTime=>C.updated_at);
                l_ssl_url:=C.ssl_url;
            END LOOP;
        END IF;

        SELECT id, TO_CHAR(log_time,'hh24:mi:ss') log_time, message, status
          BULK COLLECT INTO l_deploy_log
          FROM website_deploy 
         WHERE website_id=l_website_id
           AND site_id=l_site_id
           AND sent_ind='N'
         ORDER BY id;

        /* Now return list of all deployment status messages to client */
        FOR i IN 1..l_deploy_log.COUNT
        LOOP
            IF (l_deploy_log(i).message='ready') THEN 
                l_content:=l_content ||'<li><span>' || l_deploy_log(i).log_time || '</span><span>Successful deployment</span></li>'; 
                l_content:=l_content ||'<li class="ready"><span></span><span><a target="_blank" href="' || l_ssl_url || '">' || l_ssl_url || '</a></span></li>';
                IF (l_is_live) THEN
                    BEGIN
                        l_clob:=apex_web_service.make_rest_request(p_url=>l_ssl_url, p_http_method=>'GET');
                        EXCEPTION WHEN cert_not_ready THEN
                            l_content:=l_content ||'<li><span></span><span style="color:red">Certificate in process of being issued</span></li>'; 
                    END;
                END If;
                l_deployment_complete:=TRUE;
                EXIT;
            END IF;

            IF (l_deploy_log(i).status='OK') THEN 
                l_content:=l_content ||'<li><span>' || l_deploy_log(i).log_time || '</span><span>' || l_deploy_log(i).message || '</span></li>'; 
            ELSE
                l_content:=l_content ||'<li style="color:red"><span>' || l_deploy_log(i).log_time || '</span><span>' || l_deploy_log(i).message || '</span></li>'; 
                l_deployment_complete:=TRUE;
            END IF;
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('completed', l_deployment_complete);
        apex_json.write('content', l_content);
        apex_json.close_object;

        FORALL i IN 1..l_deploy_log.COUNT
            UPDATE website_deploy SET sent_ind='Y' WHERE id=l_deploy_log(i).id;

        IF (l_deployment_complete) THEN
            IF (l_is_live) THEN
                UPDATE website 
                   SET netlify_last_published_custom = current_timestamp
                 WHERE id=l_website_id;
            ELSE
                UPDATE website 
                   SET netlify_last_published = current_timestamp
                 WHERE id=l_website_id;
            END IF;

            l_job_name:=dbms_scheduler.generate_job_name('DELETE_');
            dbms_scheduler.create_job(
                job_name   => l_job_name,
                job_type   =>'STORED_PROCEDURE',
                job_action =>'pck_deploy.runDelete',
                number_of_arguments=>3,
                start_date=>systimestamp
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 1,
                argument_value => l_session_data.user_id
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 2,
                argument_value => l_website_id
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 3,
                argument_value => l_site_id
            );
            dbms_scheduler.enable(l_job_name);    
        END IF;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;   

    PROCEDURE runDelete(pUserId IN users.id%type, pWebsiteId IN website.id%type, pSiteId IN website.netlify_site_id%type) IS
        l_clob CLOB;
    BEGIN
        pck_sec.g_session_user_id:=pUserId;
        pck_sec.g_website_id:=pWebsiteId;
        
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/'|| pSiteId || '/deploys', pMethod=>'GET', pData=>l_clob);
        FOR C IN (
            SELECT id, published_at, MAX(published_at) OVER() last_published_at 
            FROM
                (
                SELECT id, TO_TIMESTAMP_TZ(published_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') published_at FROM JSON_TABLE(l_clob, '$[*]' COLUMNS (id, published_at))
                )
        )
        LOOP
            IF (C.published_at<C.last_published_at) THEN
                pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/'|| pSiteId || '/deploys/' || C.id, pMethod=>'DELETE', pData=>l_clob);
            END IF;
        END LOOP;
    END;

    /*
    ** Delete Github build directory - have to delete files individually before Github removes directory
    */    
    PROCEDURE deleteDirectory(pWebsiteId IN website.id%type, pUserId IN users.id%type) IS
        l_clob CLOB;
        l_domain_name website.domain_name%type;
        l_github CLOB;
        l_json JSON_OBJECT_T;
    BEGIN
        SELECT domain_name INTO l_domain_name FROM website WHERE id=pWebsiteId;
        pck_api.callGithubAPI(pUserId=>pUserId, pEndpoint=>'contents/'||l_domain_name, pMethod=>'GET', pData=>l_clob);
        FOR C IN (SELECT name, sha, message FROM  JSON_TABLE(l_clob FORMAT JSON, '$[*]' COLUMNS (name, sha, message))) LOOP
            IF (C.message IS NOT NULL) THEN 
                pck_core.log(C.message);
                RAISE_APPLICATION_ERROR(-20050,'Error in deleteDirectory - '|| C.message);
            ELSE
                l_json:=JSON_OBJECT_T.parse('{"message":"Commit by PLSQL"}');
                l_json.put('sha',C.sha);
                l_github:=l_json.to_clob; 
                pck_api.callGithubAPI(pUserId=>pUserId, pEndpoint=>'contents/' || l_domain_name || '/'||C.name, pMethod=>'DELETE', pBody=>l_github, pData=>l_clob);
            END IF;
        END LOOP;
        pck_api.resetGithubCurrentBuild(pUserId);
    END;

    /*
    ** Build and deploy AWS SES infrastructure through Terraform by submitting Github action. 
    ** Contact form sending email address must be stored in Apex Administrator description field!
    */
    PROCEDURE deployInfrastructure(pSenderEmail IN VARCHAR2) IS
        l_clob CLOB;
        l_json_clob CLOB;
        l_json JSON_OBJECT_T;
        l_action JSON_OBJECT_T;
    BEGIN
        -- Apex admin user description must hold valid domain name of sending email address
        FOR C IN (SELECT u.id, u.terraform_token, w.description ses_domain_name
                    FROM apex_workspace_apex_users w, users u 
                   WHERE w.email=u.email
                     AND w.is_admin='Yes'
                   ORDER BY date_created
                   FETCH FIRST ROW ONLY) 
        LOOP
            IF (C.ses_domain_name IS NULL) THEN
                dbms_output.put_line('APEX ADMIN USER MUST HAVE DESCRIPTION SET TO DOMAIN NAME OF SENDING EMAIL ADDRESS');
                EXIT;
            END IF;

            /* trigger the deployment using Githib action */          
            l_json:=new JSON_OBJECT_T;
            l_json.put('event_type', 'trigger_build_infra');

            l_action:=new JSON_OBJECT_T;
            l_action.put('from_email', pSenderEmail||'@'||C.ses_domain_name); --'contact.form@adfreesites.com'
            l_action.put('terraform_token', C.terraform_token);
            l_json.put('client_payload', l_action);

            --l_clob := apex_web_service.make_rest_request(p_url=>'https://api.github.com/repos/'|| C.deploy_repo || '/dispatches' ,p_http_method=>'POST',p_body=>l_json.stringify);

            /* nb; Github API 'dispatches' endpoint does not send a response */
            l_json_clob:=l_json.stringify;
            pck_api.callGithubAPI(pUserId=>C.id, pEndpoint=>'dispatches', pMethod=>'POST', pBody=>l_json_clob, pData=>l_clob);

        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

/*
**  RUN this after deploying infrastructure for AWS enabling Amazon Simple Email Service
**  Updates the Admin user's "aws gateway url" and "api key" required for SES send mail service
*/
    PROCEDURE setTerraformApikey IS
        l_domain_name website.domain_name%type; 
        l_admin_id users.id%type;
        l_aws_gateway_url VARCHAR2(200);
        l_api_key varchar2(40);
        l_api_key_link VARCHAR2(100);
        l_clob CLOB;
    BEGIN
        SELECT u.id, SUBSTR(w.description,1,INSTR(w.description,'.')-1)
          INTO l_admin_id, l_domain_name
          FROM apex_workspace_apex_users w, users u 
         WHERE w.email=u.email
           AND w.is_admin='Yes'
         ORDER BY date_created
         FETCH FIRST ROW ONLY;

        pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>'api/v2/organizations/Florent/workspaces/Mark_CMS', pMethod=>'GET', pData=>l_clob);

        FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
            pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob);

            /* invoke_url */
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                l_aws_gateway_url:=C1.value || 'send/' || l_domain_name;
            END LOOP;

            /* ses_dkim_tokens */
            dbms_output.put_line('FETCHING DKIM TOKENS');
            FOR C1 IN (SELECT dkim FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', NESTED PATH '$.attributes.value[*]' COLUMNS (dkim VARCHAR2(40) PATH '$'))) WHERE name='ses_dkim_tokens') LOOP
                dbms_output.put_line('ses_dkim_tokens:'||C1.dkim);
            END LOOP;

            /* api_key */
            FOR C1 IN (SELECT api_key_link FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (api_key_link PATH '$.links.self', name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='api_key') LOOP
                l_api_key_link:=C1.api_key_link;
            END LOOP;
            pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>l_api_key_link, pMethod=>'GET', pData=>l_clob);
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob, '$.data' COLUMNS (value PATH '$.attributes.value'))) LOOP
                l_api_key:=C1.value;
            END LOOP;
        END LOOP;

        IF (l_aws_gateway_url IS NOT NULL AND l_api_key IS NOT NULL) THEN
            UPDATE users 
               SET terraform_aws_gateway_url=l_aws_gateway_url, 
                   terraform_api_key=l_api_key
             WHERE id=l_admin_id;

            dbms_output.put_line('TERRAFORM API_KEY UPDATED SUCESSFULLY');
            dbms_output.put_line('TERRAFORM AWS_GATEWAY_URL UPDATED SUCESSFULLY');
            RETURN;
        END IF;

        IF (l_api_key IS NULL) THEN
            dbms_output.put_line('FAILED TO UPDATE TERRAFORM API_KEY');
        END IF;

        IF (l_aws_gateway_url IS NULL) THEN
            dbms_output.put_line('FAILED TO UPDATE TERRAFORM AWS_GATEWAY_URL');
        END IF;
    END;
       
end;
/