CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_DEPLOY" as 
    --
    PROCEDURE buildESModules(pEsmLibrary IN VARCHAR2 DEFAULT 'test');
    --
    PROCEDURE deleteDirectory(pWebsiteId IN website.id%type, pUserId IN users.id%type);
    --
    PROCEDURE deployInfrastructure(pSenderEmail IN VARCHAR2 DEFAULT 'contact.form');
    --
    PROCEDURE logDeployment(pWebsiteId IN website.id%type, pSiteId IN website_deploy.site_id%type, pMessage IN VARCHAR2, pStatus IN VARCHAR2 DEFAULT 'OK', pLogTime IN TIMESTAMP DEFAULT current_timestamp);
    --
    PROCEDURE runDelete(pUserId IN users.id%type, pWebsiteId IN website.id%type, pSiteId IN website.netlify_site_id%type);
    --
    PROCEDURE runDeployment(pWebsiteId IN website.id%type, pUserId IN website.user_id%type, pEnv IN VARCHAR2, pSiteId IN website.netlify_site_id%type, pRestUrl IN VARCHAR2, pEsmLibrary IN VARCHAR2);
    --
    PROCEDURE setTerraformApikey;
    --
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_DEPLOY" as 

    FUNCTION getSha256(pContent IN CLOB) RETURN VARCHAR2 IS
        l_sha256 RAW(92);
    BEGIN
        l_sha256:=dbms_crypto.hash(src=>pContent, typ=>dbms_crypto.hash_sh256);
        RETURN ('sha256-' || utl_raw.cast_to_varchar2(utl_encode.base64_encode(l_sha256)));
    END;


    
    
    /*
    ** SERVE JS AND CSS MODULES FROM NETLIFY SITE
    ** "TEST" - FOR TESTING BY ADMIN USERS AND WEBSITES SUBSCRIBING TO TEST ESM LIBRARY
    ** "LIVE" - ALL DEPLOYED WEBSITES LOAD THESE
    **
    ** TO CREATE NEW ES MODULE:
    **  insert into es_modules(module_name,host_name) values 
    **     ('deploy_edited-content.min.js',
    **      'https://es-modules.netlify.app/live/javascript/deploy_edited-content.min.js');
    */



    PROCEDURE buildESModules(pEsmLibrary IN VARCHAR2) IS 
        l_json JSON_OBJECT_T;
        l_files JSON_OBJECT_T;
        l_keys JSON_KEY_LIST;

        TYPE tt_files IS RECORD (
            file_name apex_application_static_files.file_name%type,
            file_content CLOB
        );
        TYPE t_files IS TABLE OF tt_files INDEX BY VARCHAR2(40);
        l_deploy_files t_files;

        l_headers CLOB;
        
        l_sha1_test es_modules.sha1_test%type;
        l_sha256_test es_modules.sha256_test%type;
        
        l_page CLOB;
        l_table CLOB;
        
        l_clob CLOB;
        l_website_id website.id%type;
        l_netlify_site_id website.netlify_site_id%type;
        l_user_id website.user_id%type;
        l_ssl_url VARCHAR2(50);
        l_job_name VARCHAR2(30);
        l_netlify_deploy_id website.netlify_deploy_id%type;

        l_file_content CLOB;
        l_filename VARCHAR2(250);
        l_sha1 VARCHAR2(40);
        n PLS_INTEGER:=0;

        PROCEDURE addDeploy(pFilename IN VARCHAR2, pFileContent IN OUT NOCOPY CLOB) IS
            l_sha1 website_files.sha1%type;
        BEGIN
            dbms_output.put_line('Adding new or changed file to deployment - '|| pFilename);
            l_sha1:=LOWER(dbms_crypto.hash(src => pFileContent, typ => dbms_crypto.hash_sh1));
            l_deploy_files(l_sha1).file_name:=pFilename;
            l_deploy_files(l_sha1).file_content:=pFileContent;
            l_files.put(pFilename, l_sha1);
        END;

        PROCEDURE buildImportmaps(pSslUrl IN VARCHAR2) IS
            TYPE t_name_type IS VARRAY(2) OF VARCHAR2(4);
            TYPE t_number_type IS VARRAY(2) OF pls_integer;
            l_versions t_name_type:=t_name_type('test','live');
            l_deploy_envs t_number_type:=t_number_type(1,3);
            l_importmap CLOB;
            l_sha256 es_modules_importmap.sha256%type;
        BEGIN
            DELETE es_modules_importmap;
            FOR i IN 1..l_versions.COUNT LOOP
                FOR j IN 1..l_deploy_envs.COUNT LOOP
                    WITH data AS
                    (
                        SELECT 
                            SUBSTR(module_name,1,INSTR(module_name,'.')-1) module_name, 
                            pSslUrl || '/' || l_versions(i) || '/javascript/' || module_name host_name,
                            CASE WHEN l_versions(i)='live' THEN sha256_live ELSE sha256_test END sha256
                        FROM es_modules
                        WHERE BITAND(deploy_envs,l_deploy_envs(j))=l_deploy_envs(j)
                    )
                    SELECT json_object(
                        'imports' VALUE json_objectagg(module_name VALUE host_name),
                        'integrity' VALUE json_objectagg(host_name VALUE sha256)
                        returning clob) 
                    INTO l_importmap 
                    FROM data;
                    l_sha256:=getSha256(l_importmap);

                    INSERT INTO es_modules_importmap(version, deploy_env, sha256, content)
                    VALUES (l_versions(i), l_deploy_envs(j), l_sha256, l_importmap);

                    addDeploy(l_versions(i) || '/json/importmap.' || l_deploy_envs(j) || '.json', l_importmap);

                END LOOP;
            END LOOP;
        END;

    BEGIN
        IF (pEsmLibrary NOT IN ('test','live')) THEN
            RAISE_APPLICATION_ERROR(-20100,'Environment must be "live" or "test"');
            RETURN;
        END IF;

        SELECT id, netlify_site_id, user_id INTO l_website_id, l_netlify_site_id, l_user_id FROM website WHERE domain_name='es-modules';

        pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'sites/' || l_netlify_site_id, pMethod=>'GET', pData=>l_clob);
        SELECT ssl_url INTO l_ssl_url FROM JSON_TABLE(l_clob, '$' COLUMNS(ssl_url));

        l_json:= new JSON_OBJECT_T;
        l_files:= new JSON_OBJECT_T;

        FOR C IN (
            WITH last_deploy AS
            (
                SELECT file_name, deployed_date,  MAX(DECODE(env,'/test/',sha1)) sha1_test, MAX(DECODE(env,'/live/',sha1)) sha1_live
                FROM
                (
                    SELECT deployed_date, 
                            SUBSTR(path,1,INSTR(path,'/',1,2)) env,
                            SUBSTR(path,INSTR(path,'/',-1)+1) file_name,
                            sha1
                    FROM website_files 
                    WHERE website_id=l_website_id
                    AND mime_type='application/javascript'
                )
                GROUP BY file_name, deployed_date
            )
            SELECT e.module_name, d.deployed_date, CAST(s.last_updated_on AS TIMESTAMP WITH TIME ZONE) updated_source, d.sha1_test, d.sha1_live, e.sha256_test, e.sha256_live,
                    CASE WHEN CAST(s.last_updated_on AS TIMESTAMP WITH TIME ZONE)>NVL(d.deployed_date,CAST(s.last_updated_on AS TIMESTAMP WITH TIME ZONE)) THEN 1 ELSE 0 END build
              FROM last_deploy d, apex_application_static_files s, es_modules e
             WHERE s.file_name=e.module_name
               AND s.application_id=101
               AND d.file_name(+)=LOWER(e.module_name)
             ORDER BY 1
        ) LOOP
            IF (pEsmLibrary='live') THEN
                UPDATE es_modules
                   SET sha1_live=C.sha1_test,
                       sha256_live=C.sha256_test,
                       updated_live=current_timestamp
                 WHERE module_name=C.module_name;
                l_files.put('test/javascript/' || C.module_name, C.sha1_test);
                l_files.put('live/javascript/' || C.module_name, C.sha1_test);
                CONTINUE;
            END IF;

            IF (C.build=0) THEN
                dbms_output.put_line('No change - ' || C.module_name);
                l_files.put('test/javascript/' || C.module_name, C.sha1_test);
                l_files.put('live/javascript/' || C.module_name, C.sha1_live);
                CONTINUE;
            END IF;

            /*
            **  SOURCE TIMESTAMP CHANGE IS MORE RECENT THAN LAST DEPLOYMENT
            */
            SELECT apex_util.blob_to_clob(file_content) 
              INTO l_file_content 
              FROM apex_application_static_files 
             WHERE application_id=101 
               AND file_name=C.module_name;
            
            l_sha1_test:=LOWER(dbms_crypto.hash(src=>l_file_content, typ=>dbms_crypto.hash_sh1));

            /* CHECK THERE REALLY WAS A CONTENT CHANGE */
            IF (l_sha1_test=C.sha1_test) THEN
                l_files.put('test/javascript/' || C.module_name, C.sha1_test);
                l_files.put('live/javascript/' || C.module_name, C.sha1_live);
                CONTINUE;
            END IF;

            /* CONTENT HAS MATERIALLY CHANGED. UPDATE TEST ONLY */
            n:=n+1;
            l_sha256_test:=getSha256(l_file_content);
            
            UPDATE es_modules
               SET updated_source=C.updated_source,
                   sha1_test=l_sha1_test, 
                   sha256_test=l_sha256_test,
                   updated_test=current_timestamp
             WHERE module_name=C.module_name;

            addDeploy('test/javascript/' || C.module_name, l_file_content);

            l_files.put('live/javascript/' ||  C.module_name, C.sha1_live);
        END LOOP;

        IF (n=0 AND pEsmLibrary='test') THEN
            dbms_output.put_line('No source code changes since last deployment');
            -- RETURN;
        END IF;

        /*
        ** BUILD IMPORTMAPS FOR SUCCESSFUL DEPlOY
        */
        buildImportmaps(l_ssl_url);

        l_headers:='/*' || chr(10) || 'Access-Control-Allow-Origin: *' || chr(10) || 'Timing-Allow-Origin: *';

        addDeploy('_headers', l_headers);

        l_page:=
        '<!DOCTYPE HTML>' ||
        '<html lang="en">' ||
        '<head>' ||
            '<meta charset="UTF-8">' ||
            '<meta name="viewport" content="width=device-width, initial-scale=1.0">' ||
        '</head>' ||
        '<body>' ||
        '<h1>ES Module deployment status</h1>';

        l_page:=l_page ||
        '<table>' ||
        '<tr><th>Module Name</th><th>Source updated</th><th>Test Library Updated</th><th>Live Library Updated</th></tr>';
        FOR C IN (
            SELECT module_name, updated_source, updated_test, updated_live
              FROM es_modules
             ORDER BY module_name    
        ) LOOP
            l_page:=l_page ||
            '<tr><td>' || C.module_name || '</td><td>' || TO_CHAR(C.updated_source, 'dd.mm.yy hh24:mi') || '</td><td>' || TO_CHAR(C.updated_test, 'dd.mm.yy hh24:mi') ||  '</td><td>' || TO_CHAR(C.updated_live, 'dd.mm.yy hh24:mi') || '</td></tr>';
        END LOOP;

        l_page:=l_page ||
        '<table>' ||
        '</body>' ||
        '</html>';

        addDeploy('index.html', l_page);

        l_json.put('files',l_files);

        /*
        ** POST ALL FILE NAMES AND THEIR SHA1 VALUES TO THE NETLIFY DEPLOYS ENDPOINT
        ** - RETURNS ARRAY OF SHA1 TO BE UPLOADED 
        */

        pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'sites/' || l_netlify_site_id || '/deploys', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);
        
        /*
        ** UPLOAD TO NETLIFY ALL FILES WITH UNIQUE CONTENT
        */
        FOR C IN (SELECT id, sha1 FROM JSON_TABLE(l_clob, '$' COLUMNS (id, NESTED '$.required[*]' COLUMNS (sha1 PATH '$'))) WHERE sha1 IS NOT NULL) LOOP
            l_netlify_deploy_id:=C.id;
            pck_core.log('... uploading ESM ' || l_deploy_files(C.sha1).file_name);

            IF (l_deploy_files(C.sha1).file_content IS NOT NULL) THEN
                pck_api.callNetlifyAPI(pUserId=>l_user_id, pEndpoint=>'deploys/' || C.id || '/files/' || l_deploy_files(C.sha1).file_name, pMethod=>'PUT', pBody=>l_deploy_files(C.sha1).file_content,pData=>l_clob);
            ELSE
                RAISE_APPLICATION_ERROR(-20090,'Logic error - file_content requested but is null');
            END IF;
        END LOOP;

        UPDATE website SET netlify_deploy_id=l_netlify_deploy_id WHERE id=l_website_id;

        /* 
        ** UPDATE WEBSITE_FILES WITH THIS SITE DEPLOYMENT 
        */
        DELETE website_files WHERE website_id=l_website_id AND site_id=l_netlify_site_id;
        l_keys:=l_files.get_keys;
        FOR i in 1..l_keys.COUNT LOOP
            l_filename:=l_keys(i);
            l_sha1:=l_files.get_string(l_keys(i));
            INSERT INTO website_files(website_id, site_id, path, sha1)
            VALUES (l_website_id, l_netlify_site_id, l_filename, l_sha1);
        END LOOP;

        /*
        ** DELETE ANY MODULES FOR WHICH SOURCE NO LONGER EXISTS
        */
        DELETE es_modules WHERE module_name NOT IN (SELECT file_name FROM apex_application_static_files WHERE application_id=101);
        COMMIT;

        /*
        ** WAIT FOR DEPLOYMENT OF ES-MODULES TO COMPLETE
        */
        pck_hosting.waitDeployment(pWebsiteid=>l_website_id, pUserid=>l_user_id, pWaitSeconds=>10);

        /*
        ** DELETE OLD DEPLOYMENTS OF ES-MODULES.NETLIFY.APP
        */
        pck_deploy.runDelete(pUserId=>l_user_id, pWebsiteId=>l_website_id, pSiteId=>l_netlify_site_id);

        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    **  Insert row in website_deploy logging table
    */      
    PROCEDURE logDeployment(pWebsiteId IN website.id%type, pSiteId IN website_deploy.site_id%type, pMessage IN VARCHAR2, pStatus IN VARCHAR2 DEFAULT 'OK', pLogTime IN TIMESTAMP DEFAULT current_timestamp) IS 
    BEGIN
        INSERT INTO website_deploy(id, website_id, site_id, message, status, log_time) VALUES (seq_log.nextval, pWebsiteId, pSiteId, pMessage, pStatus, pLogTime);
        COMMIT;
    END; 

    /*
     **  Build Login Form
     */
    FUNCTION buildLoginForm RETURN VARCHAR2 IS
    BEGIN
        RETURN(
            '<dialog class="login-email" style="--max-width:40rem">' ||
                '<form>' ||
                    '<input type="hidden" name="url" value="">' ||
                    '<input type="hidden" name="request_type" value="">' ||
                    '<input type="hidden" name="domain" value="">' ||
                    '<header class="flex-items space-between">' ||
                        '<h2>Log in</h2>' ||
                        '<button type="button" class="button close no-focus" data-button-variant="round-icon">' ||
                            '<svg class="icon" aria-hidden="true" focusable="false">' ||
                                '<use href="#cross"></use>' ||
                            '</svg>' ||
                        '</button>' ||
                    '</header>' ||
                    '<article class="flow">' ||
                        '<div>' ||
                            '<label for="emailInput">Email</label>' ||
                            '<input type="email" id="emailInput" name="email" required maxlength="50" autocapitalize="none" autocorrect="off" autocomplete="on">' ||
                            '<output for="email" class="sendmail-result"></output>' ||
                        '</div>' ||
                        '<div class="visually-hidden">' ||
                            '<label for="passcodeInput">Enter Passcode</label>' ||
                            '<input type="text" id="passcodeInput" name="passcode" pattern="\d{6}" inputmode="numeric" maxlength="6" autocomplete="one-time-code">' ||
                            '<output for="passcode" class="passcode-result"></output>' ||
                        '</div>' ||
                        '<div class="loader visually-hidden"></div>' ||
                    '</article>' ||
                    '<footer class="flex-items space-apart no-wrap">' ||
                        '<button class="button sendmail-magic" type="button">Send Link</button>' ||
                        '<div><hr><span>OR</span><hr></div>' ||
                        '<button class="button sendmail-passcode" type="button">Send Code</button>' ||
                        '<button class="button validate-passcode visually-hidden" type="button">Submit Passcode</button>' ||
                    '</footer>' ||
                '</form>' ||
             '</dialog>');
    END;

    /*
     **  Build Content Dialog - include pagination button
     */
    FUNCTION buildContentDialog RETURN VARCHAR2 IS
    BEGIN
        RETURN(
            '<dialog class="output">' ||
                '<form method="dialog">' ||
                    '<header class="flex-items space-between no-wrap">' ||
                        '<div></div>' ||
                        '<button type="button" class="button close no-focus" data-button-variant="round-icon">' ||
                            '<svg class="icon" aria-hidden="true" focusable="false">' ||
                                '<use href="#cross"></use>' ||
                            '</svg>' ||
                        '</button>' ||
                    '</header>' ||
                    '<article class="flow"></article>' ||
                    '<footer class="flex-items space-between">' ||
                    '</footer>' ||
                '</form>' ||
             '</dialog>');
    END;

    /*
    **  Build Dropdown Component with "Log In" button
    */
    FUNCTION buildDropdown(pWebsiteId IN website.id%type) RETURN VARCHAR2 IS
        l_html LONG;
        l_uri_template ords_endpoints.uri_template%type;
    BEGIN
        pck_sec.refreshOrdsEndpoints(pWebsiteId);
        
        FOR C IN (
            SELECT o.uri_template
              FROM api_endpoint a, role r, ords_endpoints o
             WHERE a.website_id=pWebsiteId 
               AND a.role_id=r.id 
               AND r.name='visitor'
               AND o.label='Log In'
               AND a.template_id=o.template_id
        ) LOOP
            l_html:=
            '<div>' ||
                '<button type="button" popovertarget="metrics" id="metrics-btn" style="anchor-name:--metrics-btn" aria-label="Page loading details">' ||
                '00KB' ||
                '</button>' ||
                '<div popover id="metrics" style="position-anchor:--metrics-btn">' ||
                    '<table>' ||
                        '<thead><tr><th>Resource</th><th>Start</th><th>End</th><th>Redirect</th><th>Cache</th><th>DNS</th><th>TCP</th><th>Request</th><th>Response</th><th>Duration</th><th>Transfer</th></tr></thead>' ||
                        '<tbody></tbody>' ||
                    '</table>' ||
                '</div>' ||
                '<button type="button" popovertarget="menulist" id="menulist-btn" style="anchor-name:--menulist-btn" aria-label="dropdown menu">' ||
                    '<svg height="1rem" viewBox="0 0 32 32" preserveAspectRatio="none" aria-hidden="true" focusable="false">' ||
                      '<rect class="top" x="0" y="0" width="32" height="6" fill="currentColor" />' ||
                      '<rect class="middle" x="0" y="13" width="32" height="6" fill="currentColor" />' ||
                      '<rect class="bottom" x="0" y="26" width="32" height="6" fill="currentColor" />' ||
                    '</svg>' ||
                '</button>' ||
                '<ul popover id="menulist" class="dropdown scrollable" role="list"  style="position-anchor:--menulist-btn">' ||
                    '<li class="align-center"><small class="email"></small></li>' ||
                    '<li class="align-center">' ||
                        '<table>' ||
                            '<thead><tr><th>TTFB</th><th>FCP</th><th>LCP</th><th>CLS</th><th>INP</th><th>WGT</th></tr></thead>' || 
                            '<tbody><tr><td class="TTFB"></td><td class="FCP"></td><td class="LCP"></td><td class="CLS"></td><td class="INP"></td><td class="page-weight"></td></tr></tbody>' ||
                        '</table></li>' ||
                    '<li><button type="button" class="button login-btn" data-endpoint="' || C.uri_template || '">Log In</button></li>' ||
                '</ul>' ||
            '</div>';
        END LOOP;
            
        RETURN(l_html);
    END;


    FUNCTION buildLogo(pWebsiteId IN website.id%type) RETURN VARCHAR2 IS
        l_logo website.logo%type;
        l_viewbox VARCHAR2(50);
        l_width PLS_INTEGER;
        l_height PLS_INTEGER;
        l_logo_styles VARCHAR2(100);
    BEGIN
        SELECT logo, regexp_substr(logo,'viewBox="(.+?)"',1,1,null,1) 
          INTO l_logo, l_viewbox 
          FROM website 
         WHERE id=pWebsiteId;
       
        IF (l_logo IS NOT NULL) THEN
            l_width:=regexp_substr(l_viewbox,'[^ ]+',1) + regexp_substr(l_viewbox,'[^ ]+',1,3);
            l_height:=regexp_substr(l_viewbox,'[^ ]+',1,2) + regexp_substr(l_viewbox,'[^ ]+',1,4);
            l_logo_styles:='style="margin-block-start:1rem;margin-inline-start:1rem;height:3rem;aspect-ratio:' || l_width || '/' || l_height || '"';
        END IF;

        RETURN ('<span class="logo"' || l_logo_styles || '>' || l_logo || '</span>');
    END;

    FUNCTION buildNav(pWebsiteId IN website.id%type, pEnv IN VARCHAR2) RETURN VARCHAR2 IS
        l_nav VARCHAR2(4000);
        l_nav_length PLS_INTEGER:=0;
        l_article_id article.id%type;
    BEGIN
        l_nav:=
        '<nav aria-label="Main">' ||
            '<ul role="list" class="flex-items" style="--flex-wrap:wrap">';
        FOR C IN (
            SELECT navigation_label, collection_type, article_id, ROW_NUMBER() OVER (ORDER BY display_order) rn
              FROM website_article 
             WHERE website_id=pWebsiteId
             ORDER BY display_order
        ) LOOP
            l_nav:=l_nav ||
            '<li>' ||
                '<a href="/' || CASE WHEN C.rn>1 THEN apex_string_util.get_slug(C.navigation_label) END || '"' ||
                ' data-id="' || C.article_id || '" data-collection="' || C.collection_type || '">' ||
                C.navigation_label || 
                '</a>' ||
            '</li>';
        END LOOP;
        l_nav:=l_nav || 
            '<ul>' ||
        '</nav>';

        RETURN (l_nav);
    END;

    /*
    ** SET "loading="lazy" ON ALL <img> ELEMENTS EXCEPT FIRST, ASSUMING ONLY FIRST IMAGE WILL BE IN VIEWPORT
    */
    PROCEDURE setImgSrcset(pArticleid IN article.id%type, pImgCount IN OUT PLS_INTEGER, pBodyHtml IN OUT NOCOPY article.body_html%type) IS
        l_img_regex varchar2(15):='<img[^>]+>';
        l_img_html VARCHAR2(2000);
        l_img_alt VARCHAR2(500);
        l_img_err VARCHAR2(100);
        l_img_style VARCHAR2(100);
        l_public_id asset.public_id%type;
        l_loading VARCHAR2(50);
        l_dimensions VARCHAR2(30);
        l_srcset VARCHAR2(4000);
        l_src VARCHAR2(200);
        n PLS_INTEGER;
    BEGIN
        n:=NVL(regexp_count(pBodyHtml,l_img_regex),0);
        FOR i IN 1..n LOOP
            l_img_html:=regexp_substr(pBodyHtml,l_img_regex,1,i);
            l_public_id:=SUBSTR(l_img_html,INSTR(l_img_html,'/',-1)+1);
            l_public_id:=SUBSTR(l_public_id,1,INSTR(l_public_id,'"')-1);

            /* Get alt text*/
            l_img_alt:=regexp_substr(l_img_html,'alt="(.+?)"');
            l_img_style:=regexp_substr(l_img_html,'style="(.+?)"');
            -- IF (l_img_alt IS NULL) THEN
            --     l_img_err:=' data-error="ALT TEXT HELPS PEOPLE WITH POOR VISION"';
            -- ELSE
            --     l_img_err:='';
            -- END IF;

            

            /* 
            ** Assume first image will be in viewport on page load. Can only be optimised with heuristics
            */
            IF (i>1) THEN
                l_loading:=' loading="lazy" sizes="auto"';
            ELSE
                l_loading:=' loading="eager" sizes="50%"';
            END IF;

            l_srcset:='';
            l_src:='';
            l_dimensions:='';
            FOR C IN (
                SELECT cld_cloud_name, breakpoints, height, width FROM asset WHERE article_id=pArticleid AND public_id=l_public_id
            ) LOOP
                l_dimensions:=' width="' || C.width || '" height="' || C.height || '"';
                FOR C1 IN (
                    SELECT breakpoint, ROW_NUMBER() OVER (ORDER BY breakpoint) rn FROM (SELECT TO_NUMBER(column_value) AS breakpoint FROM TABLE(apex_string.split(C.breakpoints,','))) ORDER BY 1 DESC
                    ) LOOP
                    l_srcset:=l_srcset || CASE WHEN l_srcset IS NULL THEN ' srcset="' END || 'https://res.cloudinary.com/' || C.cld_cloud_name || '/w_' || C1.breakpoint || '/' || l_public_id || ' ' || C1.breakpoint || 'w,' || chr(10);
                    IF (C1.rn=1) THEN
                        l_src:=' src="https://res.cloudinary.com/' || C.cld_cloud_name || '/w_' || C1.breakpoint || '/' || l_public_id || '"' || chr(10);
                    END IF;
                END LOOP;
                IF (l_srcset IS NOT NULL) THEN
                    l_srcset:=RTRIM(l_srcset,','||chr(10)) || '"';
                ELSE
                    l_src:=' src="https://res.cloudinary.com/' || C.cld_cloud_name || '/w_200/' || l_public_id || '"' || chr(10);
                END IF;
            END LOOP;
            
            l_img_html:='<img' || l_loading || l_img_style || l_dimensions || l_srcset || l_src || l_img_alt || l_img_err || '>';
            
            pBodyHtml:=regexp_replace(pBodyHtml,l_img_regex,l_img_html,1,i);
            
        END LOOP;
        pImgCount:=n;
    END;

    /*
    **  <nav>
    **  <header>
    **  <main>
    **  <footer>
    */
    PROCEDURE buildPageBody(pWebsiteId IN website.id%type, pArticleid IN article.id%type, pLogo IN VARCHAR2, pNav IN VARCHAR2, pDropdown in VARCHAR2, pEnv IN VARCHAR2, pRestUrl IN VARCHAR2, pIntegrity IN VARCHAR2, pBody IN OUT NOCOPY CLOB) IS
        l_title article_chars.first_heading%type;
        l_nav VARCHAR2(4000);
        l_header website_article.header_html%type;
        l_main article.body_html%type;
        l_footer website_article.footer_html%type;
        l_clob CLOB;

        l_nav_id VARCHAR2(20);
        
        l_icon_id icon.id%type;
        l_icons apex_t_varchar2:=apex_t_varchar2();

        n PLS_INTEGER;
    BEGIN
        pBody:=null;
        FOR C IN (
            SELECT wa.header_html, a.body_html, wa.footer_html, NVL(a.parent_id,pArticleId) nav_id
              FROM website_article wa, article a
             WHERE wa.website_id=pWebsiteId
               AND wa.article_id=NVL(a.parent_id,pArticleId)
               AND a.id=pArticleId
        ) LOOP
            l_nav_id:='data-id="' || C.nav_id || '"';
            n:=INSTR(pNav,l_nav_id);
            l_nav:=SUBSTR(pNav,1,n-1) || 'aria-current="page" ' || SUBSTR(pNav,n+LENGTH(l_nav_id));

            l_header:='<header id="header" class="ck-content"' || CASE WHEN C.header_html IS NULL THEN ' nocontent' END || '>' || C.header_html || '</header>';
            l_footer:='<footer id="footer" class="ck-content"' || CASE WHEN C.footer_html IS NULL THEN ' nocontent' END || '>' || C.footer_html || '</footer>';
            
            l_clob:=C.header_html || C.body_html || C.footer_html;
            pck_fonts.getCharsUsed(pArticleId, l_clob);
            
            l_main:='<main id="main" class="ck-content flow"' || CASE WHEN C.body_html IS NULL THEN ' nocontent' END || '>' || C.body_html || '</main>' ||
            CASE WHEN pEnv='TEST' THEN '<div style="opacity:0.5;text-align:center"><small class="wordcount"></small></div>' END;
            
            setImgSrcset(pArticleId, n, l_main);

            FOR C1 IN (
                SELECT first_heading FROM article_chars WHERE article_id=pArticleid AND context='heading'
            ) LOOP
                l_title:=C1.first_heading;
            END LOOP;

            pBody:=
            '<!DOCTYPE HTML>' ||
            '<html lang="en">' ||
                '<head>' ||
                    '<meta charset="UTF-8">' ||
                    '<meta name="viewport" content="width=device-width, initial-scale=1">' ||
                    '<title>' || l_title || '</title>' ||
                    '<meta name="author" content="restartnet.com">' ||
                    '<meta name="mobile-web-app-capable" content="yes">' ||

                    '<link rel="stylesheet" href="/css/website-styles.min.css">'; /* TO CHANGE */
                    FOR C1 IN (SELECT deploy_filename FROM css ORDER BY link_order) LOOP
                        pBody:=pBody ||
                        '<link rel="stylesheet" href="' || C1.deploy_filename || '">';
                    END LOOP;

                    pBody:=pBody ||
                    
                    '<script src="/javascript/deploy_start.min.js" integrity="' || pIntegrity || '" defer></script>' ||
                    '<link rel="icon" type="image/svg+xml" sizes="any" href="">' || /* TODO */
                '</head>' ||
                '<body class="flow" data-websiteid="' || pWebsiteId || '" data-articleid="' || pArticleid || '" data-resturl="' || pRestUrl || '">' || 
                    '<div class="topnav flex-items space-between">' ||
                        pLogo || l_nav || pDropdown || 
                    '</div>' ||    
                   l_header || l_main || l_footer || buildLoginForm || buildContentDialog ||
                '</body>' ||
            '</html>';
        END LOOP;
        
        /* 
        ** Append any referenced svg as symbols 
        */
        n:=regexp_count(pBody,'<use href="#([^"]+)');
        FOR i IN 1..n 
        LOOP
            l_icon_id:=REGEXP_SUBSTR(pBody,'<use href="#([^"]+)',1,i,null,1);
            apex_string.push(l_icons,l_icon_id);
        END LOOP;

        IF (n>0) THEN
            pBody:=pBody || '<svg width="0" height="0">';
            FOR C IN (SELECT id, title, viewbox, preserveaspectratio, svg FROM icon WHERE id IN (SELECT DISTINCT column_value FROM TABLE(l_icons)) ORDER BY id)
            LOOP
                pBody:=pBody || '<symbol id="' || C.id|| '" viewBox="' || C.viewbox|| '" preserveAspectRatio="' || C.preserveaspectratio || '">' || C.svg || '</symbol>';
            END LOOP;
            pBody:=pBody || '</svg>';
        END IF;

        /*  Include dummy form for CODEPEN if TEST env */
        pBody:=pBody || '<form action="https://codepen.io/pen/define" method="POST" target="_blank"><input type="hidden" name="data" value=""></form>';
    END;

    /*
    **  DEPLOY BY UPLOADING HTML FILE CONTENT DIRECTLY TO NETLIFY
    */
    PROCEDURE runDeployment(pWebsiteId IN website.id%type, pUserId IN website.user_id%type, pEnv IN VARCHAR2, pSiteId IN website.netlify_site_id%type, pRestUrl IN VARCHAR2, pEsmLibrary IN VARCHAR2) IS
        
        l_clob CLOB;
        -- l_json JSON_OBJECT_T;
        l_files JSON_OBJECT_T;
        l_keys JSON_KEY_LIST;

        l_favicon_asset_id website.favicon_asset_id%type;
        l_favicon_url VARCHAR2(250);
        l_favicon_download BLOB;
        
        TYPE tt_files IS RECORD (
            file_name VARCHAR2(200),
            file_content CLOB,
            file_content_b BLOB,
            md5 VARCHAR2(32),
            content_length NUMBER
        );
        TYPE t_files IS TABLE OF tt_files INDEX BY VARCHAR2(40);
        l_deploy_files t_files;

        TYPE tt_labels IS RECORD (
            parent_article_id website_article.article_id%type,
            article_id website_article.article_id%type,
            --navigation_label article.title%type,  -- largest that can fit here
            path_name VARCHAR2(200),
            collection_type website_article.collection_type%type,
            page_title website_article.page_title%type,
            page_description website_article.page_description%type,
            lastmod article.updated_date%type,
            word_count article.word_count%type, 
            header_effect website.header_effect%type,
            hero_asset_id website.hero_asset_id%type,
            contact_email website.contact_email%type,
            telephone_number website.telephone_number%type,
            mobile_number website.mobile_number%type,
            linkedin_name website.linkedin_name%type,
            instagram_name website.instagram_name%type,
            promotion website.promotion%type,
            img_count PLS_INTEGER,
            font_preload VARCHAR2(1000),
            body_html article.body_html%type
        );
        TYPE t_labels IS TABLE OF tt_labels INDEX BY PLS_INTEGER;
        l_labels t_labels;

        l_is_media BOOLEAN:=FALSE;
        l_is_blog BOOLEAN:=FALSE;
        l_is_product BOOLEAN:=FALSE;
        l_script_sha256 VARCHAR2(500);
        l_font_download BLOB;

        l_sitemap CLOB;
        l_robots CLOB;
        l_headers CLOB;
        l_ssl_url VARCHAR2(200);
        -- l_url VARCHAR2(200);
        n PLS_INTEGER;

        l_dogface_requested CLOB;
        l_dogface_required CLOB;
        l_dogface_endpoint VARCHAR2(200);
        l_dogface_empty_clob CLOB:=EMPTY_CLOB();
        l_dogface_empty_blob BLOB:=EMPTY_BLOB();

        /* START OF NEW */

        l_nav VARCHAR2(4000);
        l_logo website.logo%type;
        l_dropdown VARCHAR2(4000);

        /* END NEW */

        /* CLOB SIGNATURE */
        PROCEDURE addDeploy(pFilename IN VARCHAR2, pFileContent IN OUT NOCOPY CLOB) IS
            l_sha1 website_files.sha1%type;
        BEGIN
            dbms_output.put_line('new version : '||pFilename);
            l_sha1:=LOWER(dbms_crypto.hash(src => pFileContent, typ => dbms_crypto.hash_sh1));
            l_deploy_files(l_sha1).file_name:=pFilename;
            l_deploy_files(l_sha1).file_content:=pFileContent;
            l_files.put(pFilename, l_sha1);
            -- IF (pEsmLibrary='test') THEN
            --     l_deploy_files(l_sha1).md5:=LOWER(dbms_crypto.hash(src => pFileContent, typ => dbms_crypto.hash_md5));
            --     l_deploy_files(l_sha1).content_length:=dbms_lob.getlength(pFileContent);
            -- END IF;
        END;

        /* BLOB SIGNATURE */
        PROCEDURE addDeploy(pFilename IN VARCHAR2, pFileContent IN OUT NOCOPY BLOB) IS
            l_sha1 website_files.sha1%type;
        BEGIN
            dbms_output.put_line('new version: '||pFilename);
            l_sha1:=LOWER(dbms_crypto.hash(src => pFileContent, typ => dbms_crypto.hash_sh1));
            l_deploy_files(l_sha1).file_name:=pFilename;
            l_deploy_files(l_sha1).file_content_b:=pFileContent;
            l_files.put(pFilename, l_sha1);
            -- IF (pEsmLibrary='test') THEN
            --     l_deploy_files(l_sha1).md5:=LOWER(dbms_crypto.hash(src => pFileContent, typ => dbms_crypto.hash_md5));
            --     l_deploy_files(l_sha1).content_length:=dbms_lob.getlength(pFileContent);
            -- END IF;
        END;

        /* 
        ** SEND TO NETLIFY LIST OF SHA1 OF EACH FILE IN THE DEPLOYMENT 
        */
        PROCEDURE sendNetlifyDeploy IS
            l_json JSON_OBJECT_T;
            l_keys JSON_KEY_LIST;
            l_filename VARCHAR2(200);
            l_sha1 VARCHAR2(40);
            l_clob CLOB;
        BEGIN
            l_json:= new JSON_OBJECT_T;
            l_json.put('files',l_files);

            pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites/' || pSiteId || '/deploys', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);

            /* NEED THIS FOR ASYNC DEPLOYMENT STATUS MONITORING */
            UPDATE website SET netlify_deploy_id=(SELECT id FROM JSON_TABLE(l_clob, '$' COLUMNS (id))) WHERE id=pWebsiteId;
            COMMIT;

            FOR C IN (SELECT id, sha1 FROM JSON_TABLE(l_clob, '$' COLUMNS (id, NESTED '$.required[*]' COLUMNS (sha1 PATH '$'))) WHERE sha1 IS NOT NULL) LOOP
                dbms_output.put_line('Uploading ' || l_deploy_files(C.sha1).file_name);
                logDeployment(pWebsiteId, pSiteId, 'Uploading ' || l_deploy_files(C.sha1).file_name);
                IF (l_deploy_files(C.sha1).file_content IS NOT NULL) THEN
                    pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'deploys/' || C.id || '/files/' || l_deploy_files(C.sha1).file_name, pMethod=>'PUT', pBody=>l_deploy_files(C.sha1).file_content,pData=>l_clob);
                ELSIF (l_deploy_files(C.sha1).file_content_b IS NOT NULL) THEN
                    pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'deploys/' || C.id || '/files/' || l_deploy_files(C.sha1).file_name, pMethod=>'PUT', pBody=>l_deploy_files(C.sha1).file_content_b,pData=>l_clob);
                ELSE
                    RAISE_APPLICATION_ERROR(-20090,'Logic error - file_content clob and blob both null');
                END IF;
            END LOOP;

            /* 
            ** UPDATE WEBSITE_FILES WITH THIS SITE DEPLOYMENT 
            */
            DELETE website_files WHERE website_id=pWebsiteId AND site_id=pSiteId;
            l_keys:=l_files.get_keys;
            FOR i in 1..l_keys.COUNT LOOP
                l_filename:=l_keys(i);
                l_sha1:=l_files.get_string(l_keys(i));
                INSERT INTO website_files(website_id, site_id, path, sha1, mime_type)
                VALUES (pWebsiteId, pSiteId, l_filename, l_sha1, SUBSTR(l_filename,INSTR(l_filename,'.',-1)+1));
            END LOOP;
        END;

    BEGIN
        /* For logging when called by scheduler */
        pck_sec.g_session_user_id:=pUserId;
        pck_sec.g_website_id:=pWebsiteId;

        /*
        ** WEBSITE SHOULD ALWAYS HAVE ENTRIES IN TABLE WEBSITE_FILES FROM PREVIOUS DEPLOYMENT
        **
        ** 1. submit all asset paths and their sha1 to hosting service
        ** 2. receive array of assets to upload - i.e new path or sha1
        ** 3. upload required assets
        **
        **  Website comprises following asset types:
        **
        **  1. text/html - website pages
        **  2. font/woff2 - fonts
        **  3. text/css - css stylesheets
        **  4. application/javascript - page javascript
        **  5. application/json - importmap for running javascript modules 
        **  6. text/plain - "_headers" file, includes strict Content Security Policy
        **  7. application/xml - sitemap.xml
        **
        */

        -- l_json:= new JSON_OBJECT_T;
        l_files:= new JSON_OBJECT_T;

        /*
        **  0. Build JAVASCRIPT FILES FIRST TO GET SHA256 INTEGRITY VALUE OF THE STARTER SCRIPT WHICH WE INCLUDE IN HEAD OF  HTML FILES
        */
        FOR C IN (
            WITH source AS
            (
             SELECT '/javascript/' || file_name AS deploy_filename, apex_util.blob_to_clob(file_content) file_content, CAST(last_updated_on AS TIMESTAMP WITH TIME ZONE) updated_date
               FROM apex_application_static_files 
              WHERE application_id=101
                AND file_name IN ('deploy_start.min.js', 'deploy_main.min.js', 'deploy_web_vitals5.min.js')
            )
            SELECT s.deploy_filename, s.file_content, s.updated_date, wf.sha1,
                    CASE WHEN wf.deployed_date IS NULL OR s.updated_date>wf.deployed_date THEN 1 ELSE 0 END build
              FROM source s, website_files wf
             WHERE wf.website_id(+)=pWebsiteid
               AND wf.path(+)=s.deploy_filename
        ) LOOP
            IF (INSTR(C.deploy_filename,'deploy_start.min.js')>0) THEN
                l_script_sha256:=getSha256(C.file_content);
            END IF;
            IF (C.build=0) THEN
                l_files.put(C.deploy_filename, C.sha1);
                CONTINUE;
            END IF;

            logDeployment(pWebsiteId, pSiteId, 'Download JAVASCRIPT - '|| C.deploy_filename);
            addDeploy(pFilename=>C.deploy_filename, pFileContent=>C.file_content);
        END LOOP;
        
        /*
        **  1. Build HTML files
        */
        n:=0;
        FOR C IN (
            WITH content AS
            (
                SELECT wa.article_id, '/' || CASE WHEN wa.display_order=1 THEN 'index' ELSE apex_string_util.get_slug(wa.navigation_label) END || '.html' path, GREATEST(w.nav_updated_date,a.updated_date,wa.updated_date) content_updated
                  FROM article a, website_article wa, website w
                 WHERE w.id=pWebsiteId
                   AND wa.website_id=w.id
                   AND a.id=wa.article_id
                UNION ALL 
                SELECT a.id, '/' || apex_string_util.get_slug(wa.navigation_label) || '/' || apex_string_util.get_slug(utl_i18n.unescape_reference(apex_escape.striphtml(regexp_substr(a.body_html,'<h[2-4]>(.+?)<\/h[2-4]>',1,1)))) path, NVL(a.updated_date,a.created_date) last_updated 
                  FROM article a, website_article wa
                 WHERE a.parent_id=wa.article_id
                   AND wa.website_id=pWebsiteId
            )
            SELECT c.article_id, c.path, f.sha1, 
                CASE WHEN f.deployed_date IS NULL OR c.content_updated > f.deployed_date THEN 1 ELSE 0 END build
              FROM content c, website_files f
             WHERE f.website_id(+)=pWebsiteId
               AND f.path(+)=c.path
               AND f.mime_type(+)='html'
        ) LOOP
            IF (C.build=0) THEN
                l_files.put(C.path, C.sha1);
                CONTINUE;
            END IF;
            n:=n+1;
            IF (n=1) THEN
                l_nav:=buildNav(pWebsiteId, pEnv);
                l_logo:=buildLogo(pWebsiteId);
                l_dropdown:=buildDropdown(pWebsiteId);
            END IF;
            buildPageBody(pWebsiteId, C.article_id, l_logo, l_nav, l_dropdown, pEnv, pRestUrl, l_script_sha256, l_clob);
            addDeploy(pFilename=>C.path, pFileContent=>l_clob);
        END LOOP;

        /*
        **  2. Build FONT files
        */
        logDeployment(pWebsiteId, pSiteId, 'Optimizing FONTS');

        pck_fonts.getFontFiles(pWebsiteid, pSiteId);  /* Sets website_fontfaces.created_date */
        
        FOR C IN (
            SELECT ff.deploy_filename, ff.src_url, wf.sha1,
                    CASE WHEN wf.deployed_date IS NULL OR ff.created_date>wf.deployed_date THEN 1 ELSE 0 END build
              FROM website_fontface ff, website_files wf
             WHERE ff.website_id=pWebsiteid
               AND wf.website_id(+)=pWebsiteid
               AND wf.path(+)=ff.deploy_filename
               AND wf.mime_type(+)='woff2'
        ) LOOP
            IF (C.build=0) THEN
                l_files.put(C.deploy_filename, C.sha1);
                CONTINUE;
            END IF;

            /* 
            **  DEPLOY FONT FILE FROM GOOGLE
            */
            logDeployment(pWebsiteId, pSiteId, 'Download Google - '|| C.deploy_filename);
            l_font_download:=apex_web_service.make_rest_request_b(p_url=>C.src_url, p_http_method=>'GET');
            addDeploy(pFilename=>C.deploy_filename, pFileContent=>l_font_download);
        
        END LOOP;
        
        /*
        **  3. Build CSS files
        */
        FOR C IN (
            WITH source AS
            (
                SELECT deploy_filename, content_minified, updated_date
                  FROM css
                 UNION ALL
                SELECT '/css/website-styles.min.css', css, css_updated_date
                  FROM website
                 WHERE id=pWebsiteid
            )
            SELECT s.deploy_filename, s.content_minified, s.updated_date, wf.sha1,
                    CASE WHEN wf.deployed_date IS NULL OR s.updated_date>wf.deployed_date THEN 1 ELSE 0 END build
              FROM source s, website_files wf
             WHERE wf.website_id(+)=pWebsiteid
               AND wf.path(+)=s.deploy_filename
               AND wf.mime_type(+)='css'
        ) LOOP
            IF (C.build=0) THEN
                l_files.put(C.deploy_filename, C.sha1);
                CONTINUE;
            END IF;

            logDeployment(pWebsiteId, pSiteId, 'Download CSS - '|| C.deploy_filename);
            addDeploy(pFilename=>C.deploy_filename, pFileContent=>C.content_minified);
        END LOOP;

        /*
        **  4. BUILD _headers INCLUDING CONTENT SECURITY POLICY
        */
        l_script_sha256:='''' || l_script_sha256 || '''';
        FOR C IN (
            WITH source AS
            (
             SELECT '/' || REPLACE(file_name,'.txt') AS deploy_filename, apex_util.blob_to_clob(file_content) file_content, CAST(last_updated_on AS TIMESTAMP WITH TIME ZONE) updated_date
               FROM apex_application_static_files 
              WHERE application_id=101
                AND file_name IN ('_headers.txt')
            )
            SELECT s.deploy_filename, REPLACE(REPLACE(s.file_content,'#RESTURL#',pRestURL),'#SHA256#',l_script_sha256) file_content, s.updated_date, wf.sha1,
                    CASE WHEN wf.deployed_date IS NULL OR s.updated_date>wf.deployed_date THEN 1 ELSE 0 END build
              FROM source s, website_files wf
             WHERE wf.website_id(+)=pWebsiteid
               AND wf.path(+)=s.deploy_filename
        ) LOOP
            IF (C.build=0) THEN
                IF (getSha256(C.file_content)=C.sha1) THEN
                    l_files.put(C.deploy_filename, C.sha1);
                    CONTINUE;
                END IF;
            END IF;

            logDeployment(pWebsiteId, pSiteId, 'Download CONTENT SECURITY HEADERS - '|| C.deploy_filename);
            addDeploy(pFilename=>C.deploy_filename, pFileContent=>C.file_content);
        END LOOP;
            
        -- dbms_output.put_line(l_files.to_string);
        sendNetlifyDeploy;
        RETURN;

        /* 
        ** The site favicon is an SVG format image file uploaded through the CMS to the Asset table.
        */
        FOR C IN (SELECT cld_cloud_name, resource_type, public_id, format FROM asset WHERE id=l_favicon_asset_id) LOOP
           l_favicon_url:=pck_media.getCloudinaryUrl(C.cld_cloud_name,C.resource_type,C.public_id,C.format, 96) || '.svg';
           l_favicon_url:=REPLACE(l_favicon_url,'q_auto,f_auto','f_auto,w_96,h_96');
        END LOOP;
        /* 
        ** Alternatively use emoji as favicon
        */
        IF (l_favicon_url IS NULL) THEN
            l_favicon_url:=
            'data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>&#128516;</text></svg>';
        END IF;

        l_robots:='User-agent: *' || chr(10) || 'Allow: /' || chr(10) || chr(10) || 'Sitemap: ' || l_ssl_url || '/sitemap.xml';

        /* 
        ** Build individual website pages
        */
        FOR i IN 1..l_labels.COUNT
        LOOP
            IF (i=1) THEN
                logDeployment(pWebsiteId, pSiteId, 'Building ' || l_labels.COUNT || ' website page' || CASE WHEN l_labels.COUNT>1 THEN 's' END);
                l_sitemap:=
                '<?xml version="1.0" encoding="UTF-8"?>' || 
                '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
            END IF;

            l_sitemap:=l_sitemap ||
                '<url><loc>' || l_ssl_url || CASE WHEN i>1 THEN '/' || l_labels(i).path_name END || '</loc><lastmod>' || TO_CHAR(l_labels(i).lastmod,'YYYY-MM-DD') || '</lastmod></url>';
            IF (i=l_labels.COUNT) THEN
                l_sitemap:=l_sitemap || 
                '</urlset>';
            END IF;


        END LOOP;

        /* Build website assets */

        logDeployment(pWebsiteId, pSiteId, 'Building sitemap.xml');
        addDeploy('sitemap.xml', l_sitemap);
        addDeploy('robots.txt', l_robots);
        /*
        **  DOGFACE DEPLOYMENT IF USER HAS DOGFACE API KEY AND ESMLIBRARY = 'TEST'
        */
        /*
        SELECT COUNT(*) INTO n FROM dual WHERE EXISTS (SELECT null FROM users WHERE id=pUserid AND dogface_api_key IS NOT NULL);
        n:=0;
        IF (n=1 AND pEsmLibrary='test') THEN
            SELECT json_arrayagg(
                    json_object(KEY 'path' VALUE '/henk.florentmeijer.com/' || file_name, KEY 'hash' VALUE md5)
                returning clob) 
            INTO l_dogface_requested
            FROM website_files
            WHERE website_id=pWebsiteid;

            pck_api.callDogfaceAPI(pUserId=>pUserId, pEndpoint=>'need-for-upload', pMethod=>'POST', pBody=>l_dogface_requested, pBodyBlob=>l_dogface_empty_blob, pData=>l_dogface_required);

            FOR C IN (
                SELECT df.md5, wf.sha1, wf.file_name 
                  FROM website_files wf, 
                        JSON_TABLE(l_dogface_required, '$[*]' 
                        COLUMNS (md5 varchar2 path '$')) df
                 WHERE df.md5=wf.md5
                   AND instr(wf.file_name,'font')=0
            ) LOOP
                --IF (C.file_name<>'_headers') THEN
                    l_dogface_endpoint:=C.md5 || '/henk.florentmeijer.com/' || C.file_name;
                    IF (l_deploy_files(C.sha1).file_content IS NOT NULL) THEN
                        pck_api.callDogfaceAPI(pUserId=>pUserId, pMethod=>'PUT', pEndpoint=>l_dogface_endpoint, pBody=>l_deploy_files(C.sha1).file_content, pBodyBlob=>l_dogface_empty_blob, pData=>l_clob);
                    ELSE
                        pck_api.callDogfaceAPI(pUserId=>pUserId, pMethod=>'PUT', pEndpoint=>l_dogface_endpoint, pBody=>l_dogface_empty_clob, pBodyBlob=>l_deploy_files(C.sha1).file_content_b, pData=>l_clob);
                    END IF;
                --END IF;
            END LOOP;
        END IF;
        */

        EXCEPTION
            WHEN OTHERS THEN
                logDeployment(pWebsiteId, pSiteId, SUBSTR(SQLERRM,1,100),'NOK');
                pck_core.log_error;
    END;

    /*
    **  DELETE OLD DEPLOYMENTS FROM NETLIFY SYSTEM
    */
    PROCEDURE runDelete(pUserId IN users.id%type, pWebsiteId IN website.id%type, pSiteId IN website.netlify_site_id%type) IS
        l_clob CLOB;
    BEGIN
        pck_sec.g_session_user_id:=pUserId;
        pck_sec.g_website_id:=pWebsiteId;
        
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/'|| pSiteId || '/deploys', pMethod=>'GET', pData=>l_clob);
        FOR C IN (
            SELECT id, published_at, MAX(published_at) OVER() last_published_at 
            FROM
                (
                SELECT id, TO_TIMESTAMP_TZ(published_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') published_at FROM JSON_TABLE(l_clob, '$[*]' COLUMNS (id, published_at))
                )
        )
        LOOP
            IF (C.published_at<C.last_published_at) THEN
                pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/'|| pSiteId || '/deploys/' || C.id, pMethod=>'DELETE', pData=>l_clob);
            END IF;
        END LOOP;
    END;

    /*
    ** Delete Github build directory - have to delete files individually before Github removes directory
    */    
    PROCEDURE deleteDirectory(pWebsiteId IN website.id%type, pUserId IN users.id%type) IS
        l_clob CLOB;
        l_domain_name website.domain_name%type;
        l_github CLOB;
        l_json JSON_OBJECT_T;
    BEGIN
        SELECT domain_name INTO l_domain_name FROM website WHERE id=pWebsiteId;
        pck_api.callGithubAPI(pUserId=>pUserId, pEndpoint=>'contents/'||l_domain_name, pMethod=>'GET', pData=>l_clob);
        FOR C IN (SELECT name, sha, message FROM  JSON_TABLE(l_clob FORMAT JSON, '$[*]' COLUMNS (name, sha, message))) LOOP
            IF (C.message IS NOT NULL) THEN 
                pck_core.log(C.message);
                RAISE_APPLICATION_ERROR(-20050,'Error in deleteDirectory - '|| C.message);
            ELSE
                l_json:=JSON_OBJECT_T.parse('{"message":"Commit by PLSQL"}');
                l_json.put('sha',C.sha);
                l_github:=l_json.to_clob; 
                pck_api.callGithubAPI(pUserId=>pUserId, pEndpoint=>'contents/' || l_domain_name || '/'||C.name, pMethod=>'DELETE', pBody=>l_github, pData=>l_clob);
            END IF;
        END LOOP;
        pck_api.resetGithubCurrentBuild(pUserId);
    END;

    /*
    ** Build and deploy AWS SES infrastructure through Terraform by submitting Github action. 
    ** Contact form sending email address must be stored in Apex Administrator description field!
    */
    PROCEDURE deployInfrastructure(pSenderEmail IN VARCHAR2) IS
        l_clob CLOB;
        l_json_clob CLOB;
        l_json JSON_OBJECT_T;
        l_action JSON_OBJECT_T;
    BEGIN
        -- Apex admin user description must hold valid domain name of sending email address
        FOR C IN (SELECT u.id, u.terraform_token, w.description ses_domain_name
                    FROM apex_workspace_apex_users w, users u 
                   WHERE w.email=u.email
                     AND w.is_admin='Yes'
                   ORDER BY date_created
                   FETCH FIRST ROW ONLY) 
        LOOP
            IF (C.ses_domain_name IS NULL) THEN
                dbms_output.put_line('APEX ADMIN USER MUST HAVE DESCRIPTION SET TO DOMAIN NAME OF SENDING EMAIL ADDRESS');
                EXIT;
            END IF;

            /* trigger the deployment using Githib action */          
            l_json:=new JSON_OBJECT_T;
            l_json.put('event_type', 'trigger_build_infra');

            l_action:=new JSON_OBJECT_T;
            l_action.put('from_email', pSenderEmail||'@'||C.ses_domain_name); --'contact.form@adfreesites.com'
            l_action.put('terraform_token', C.terraform_token);
            l_json.put('client_payload', l_action);

            --l_clob := apex_web_service.make_rest_request(p_url=>'https://api.github.com/repos/'|| C.deploy_repo || '/dispatches' ,p_http_method=>'POST',p_body=>l_json.stringify);

            /* nb; Github API 'dispatches' endpoint does not send a response */
            l_json_clob:=l_json.stringify;
            pck_api.callGithubAPI(pUserId=>C.id, pEndpoint=>'dispatches', pMethod=>'POST', pBody=>l_json_clob, pData=>l_clob);

        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

/*
**  RUN this after deploying infrastructure for AWS enabling Amazon Simple Email Service
**  Updates the Admin user's "aws gateway url" and "api key" required for SES send mail service
*/
    PROCEDURE setTerraformApikey IS
        l_domain_name website.domain_name%type; 
        l_admin_id users.id%type;
        l_aws_gateway_url VARCHAR2(200);
        l_api_key varchar2(40);
        l_api_key_link VARCHAR2(100);
        l_clob CLOB;
    BEGIN
        SELECT u.id, SUBSTR(w.description,1,INSTR(w.description,'.')-1)
          INTO l_admin_id, l_domain_name
          FROM apex_workspace_apex_users w, users u 
         WHERE w.email=u.email
           AND w.is_admin='Yes'
         ORDER BY date_created
         FETCH FIRST ROW ONLY;

        pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>'api/v2/organizations/Florent/workspaces/Mark_CMS', pMethod=>'GET', pData=>l_clob);

        FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
            pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob);

            /* invoke_url */
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                l_aws_gateway_url:=C1.value || 'send/' || l_domain_name;
            END LOOP;

            /* ses_dkim_tokens */
            dbms_output.put_line('FETCHING DKIM TOKENS');
            FOR C1 IN (SELECT dkim FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', NESTED PATH '$.attributes.value[*]' COLUMNS (dkim VARCHAR2(40) PATH '$'))) WHERE name='ses_dkim_tokens') LOOP
                dbms_output.put_line('ses_dkim_tokens:'||C1.dkim);
            END LOOP;

            /* api_key */
            FOR C1 IN (SELECT api_key_link FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (api_key_link PATH '$.links.self', name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='api_key') LOOP
                l_api_key_link:=C1.api_key_link;
            END LOOP;
            pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>l_api_key_link, pMethod=>'GET', pData=>l_clob);
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob, '$.data' COLUMNS (value PATH '$.attributes.value'))) LOOP
                l_api_key:=C1.value;
            END LOOP;
        END LOOP;

        IF (l_aws_gateway_url IS NOT NULL AND l_api_key IS NOT NULL) THEN
            UPDATE users 
               SET terraform_aws_gateway_url=l_aws_gateway_url, 
                   terraform_api_key=l_api_key
             WHERE id=l_admin_id;

            dbms_output.put_line('TERRAFORM API_KEY UPDATED SUCESSFULLY');
            dbms_output.put_line('TERRAFORM AWS_GATEWAY_URL UPDATED SUCESSFULLY');
            RETURN;
        END IF;

        IF (l_api_key IS NULL) THEN
            dbms_output.put_line('FAILED TO UPDATE TERRAFORM API_KEY');
        END IF;

        IF (l_aws_gateway_url IS NULL) THEN
            dbms_output.put_line('FAILED TO UPDATE TERRAFORM AWS_GATEWAY_URL');
        END IF;
    END;
       
end;
/