CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_SEC" AS 
    --
    TYPE t_JWT_data IS RECORD (
        iss VARCHAR2(10),
        sub VARCHAR2(100),
        aud VARCHAR2(7),
        iat NUMBER,
        exp NUMBER,
        jti NUMBER,
        client_secret user_ords_clients.client_secret%type
    );
    TYPE t_session_data IS RECORD (
        url VARCHAR2(100),
        timezone VARCHAR2(30),
        canuse_popover BOOLEAN,
        canuse_eyedropper BOOLEAN,
        user_id NUMBER,
        valid BOOLEAN
    );
    --
    PROCEDURE createAuthRequest(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE verifyAuthRequest(pWebsiteId IN website.id%type, pRequestType IN VARCHAR2, pUserId IN NUMBER, pVerifyData IN VARCHAR2, pStatus OUT NUMBER);
    --
    PROCEDURE checkAuthStatus(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE refreshAuthToken(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE refreshOrdsEndpoints;
    --
    FUNCTION getSessionData(pWebsiteId IN website.id%type) RETURN t_session_data;
    --
    PROCEDURE post_auth_facebook;
    --
    PROCEDURE post_auth_google;
    --
END PCK_SEC;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_SEC" AS

    REFRESH_TOKEN_EXP CONSTANT PLS_INTEGER:=(24*60*60)*90; --90 DAYS
    ACCESS_TOKEN_EXP CONSTANT PLS_INTEGER:=60*5; -- 5 MINUTES

    FUNCTION emailTemplate(pAuthMethod IN VARCHAR2, pWebsite IN VARCHAR2, pFavicon IN VARCHAR2, pAuthData IN VARCHAR2) RETURN VARCHAR2 IS
        l_html LONG;
    BEGIN
    l_html:=
'<!doctype html>
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Simple Transactional Email</title>
    <style media="all" type="text/css">
@media all {
  .btn-primary table td:hover {
    background-color: #ec0867 !important;
  }

  .btn-primary a:hover {
    background-color: #ec0867 !important;
    border-color: #ec0867 !important;
  }
}
@media only screen and (max-width: 640px) {
  .main p,
.main td,
.main span {
    font-size: 16px !important;
  }

  .wrapper {
    padding: 8px !important;
  }

  .content {
    padding: 0 !important;
  }

  .container {
    padding: 0 !important;
    padding-top: 8px !important;
    width: 100% !important;
  }

  .main {
    border-left-width: 0 !important;
    border-radius: 0 !important;
    border-right-width: 0 !important;
  }

  .btn table {
    max-width: 100% !important;
    width: 100% !important;
  }

  .btn a {
    font-size: 16px !important;
    max-width: 100% !important;
    width: 100% !important;
  }
}
@media all {
  .ExternalClass {
    width: 100%;
  }

  .ExternalClass,
.ExternalClass p,
.ExternalClass span,
.ExternalClass font,
.ExternalClass td,
.ExternalClass div {
    line-height: 100%;
  }

  .apple-link a {
    color: inherit !important;
    font-family: inherit !important;
    font-size: inherit !important;
    font-weight: inherit !important;
    line-height: inherit !important;
    text-decoration: none !important;
  }

  #MessageViewBody a {
    color: inherit;
    text-decoration: none;
    font-size: inherit;
    font-family: inherit;
    font-weight: inherit;
    line-height: inherit;
  }
}
</style>
  </head>
  <body style="font-family: Helvetica, sans-serif; -webkit-font-smoothing: antialiased; font-size: 16px; line-height: 1.3; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; background-color: #f4f5f6; margin: 0; padding: 0;">
    <table role="presentation" border="0" cellpadding="0" cellspacing="0" class="body" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; background-color: #f4f5f6; width: 100%;" width="100%" bgcolor="#f4f5f6">
      <tr>
        <td style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top;" valign="top">&nbsp;</td>
        <td class="container" style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; max-width: 600px; padding: 0; padding-top: 24px; width: 600px; margin: 0 auto;" width="600" valign="top">
          <div class="content" style="box-sizing: border-box; display: block; margin: 0 auto; max-width: 600px; padding: 0;">

            <!-- START CENTERED WHITE CONTAINER -->
            <span class="preheader" style="color: transparent; display: none; height: 0; max-height: 0; max-width: 0; opacity: 0; overflow: hidden; mso-hide: all; visibility: hidden; width: 0;">Your Login request to ' || pWebsite || '</span>
            <table role="presentation" border="0" cellpadding="0" cellspacing="0" class="main" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; background: #ffffff; border: 1px solid #eaebed; border-radius: 16px; width: 100%;" width="100%">

              <!-- START MAIN CONTENT AREA -->
              <tr>
                <td class="wrapper" style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; box-sizing: border-box; padding: 24px;" valign="top">
                  <img src="' || pFavicon || '" alt="Website favicon" width="96" height="96" border="0" style="border:0; outline:none; text-decoration:none; display:block;">
                  <p style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: bold; margin: 0; margin-bottom: 16px;">Your Login request to ' || pWebsite || '</p>
                  <p style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;">';
                  CASE pAuthMethod 
                    WHEN 'magic' THEN l_html:=l_html || 'Click the button below to log in. Your link expires in 5 minutes.';
                    WHEN 'passcode' THEN l_html:=l_html || 'Enter this passcode to log in. Expires in 5 minutes.';
                  END CASE;
                  l_html:=l_html ||
                  '</p>
                  <table role="presentation" border="0" cellpadding="0" cellspacing="0" class="btn btn-primary" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; box-sizing: border-box; width: 100%; min-width: 100%;" width="100%">
                    <tbody>
                      <tr>
                        <td align="left" style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; padding-bottom: 16px;" valign="top">
                          <table role="presentation" border="0" cellpadding="0" cellspacing="0" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; width: auto;">
                            <tbody>
                              <tr>
                                <td style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top; border-radius: 4px; text-align: center; background-color: #0867ec;" valign="top" align="center" bgcolor="#0867ec">';
                                CASE pAuthMethod 
                                    WHEN 'magic' THEN l_html:=l_html || 
                                        '<a href="' || pAuthData || '" target="_blank" style="border: solid 2px #0867ec; border-radius: 4px; box-sizing: border-box; cursor: pointer; display: inline-block; font-size: 16px; font-weight: bold; margin: 0; padding: 12px 24px; text-decoration: none; text-transform: capitalize; background-color: #0867ec; border-color: #0867ec; color: #ffffff;">Login</a>';
                                    WHEN 'passcode' THEN l_html:=l_html || 
                                        '<span style="border: solid 2px #0867ec; border-radius: 4px; box-sizing: border-box; display: inline-block; font-size: 24px; letter-spacing: 8px; font-weight: bold; margin: 0; padding: 12px 24px; text-transform: capitalize; background-color: #0867ec; border-color: #0867ec; color: #ffffff;">' || pAuthData || '</span>';
                                END CASE;
                                l_html:=l_html ||
                                '</td>
                              </tr>
                            </tbody>
                          </table>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                  <p style="font-family: Helvetica, sans-serif; font-size: 16px; font-weight: normal; margin: 0; margin-bottom: 16px;">Thank you.</p>
                </td>
              </tr>

              <!-- END MAIN CONTENT AREA -->
              </table>

            <!-- START FOOTER -->
            <div class="footer" style="clear: both; padding-top: 24px; text-align: center; width: 100%;">
              <table role="presentation" border="0" cellpadding="0" cellspacing="0" style="border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; width: 100%;" width="100%">
                <tr>
                  <td class="content-block" style="font-family: Helvetica, sans-serif; vertical-align: top; color: #9a9ea6; font-size: 16px; text-align: center;" valign="top" align="center">
                    <span class="apple-link" style="color: #9a9ea6; font-size: 16px; text-align: center;">Email sent through adfreesites.com</span>
                  </td>
                </tr>
                <tr>
                  <td class="content-block powered-by" style="font-family: Helvetica, sans-serif; vertical-align: top; color: #9a9ea6; font-size: 16px; text-align: center;" valign="top" align="center">
                    Powered by <a href="https://docs.aws.amazon.com/ses/latest/dg/Welcome.html" style="color: #9a9ea6; font-size: 16px; text-align: center; text-decoration: none;">Amazon Simple Email Service(SES)</a>
                  </td>
                </tr>
              </table>
            </div>

            <!-- END FOOTER -->
            
<!-- END CENTERED WHITE CONTAINER --></div>
        </td>
        <td style="font-family: Helvetica, sans-serif; font-size: 16px; vertical-align: top;" valign="top">&nbsp;</td>
      </tr>
    </table>
  </body>
</html>';
        RETURN (l_html);
    END;

    PROCEDURE sendMessage(pSuccess IN BOOLEAN, pMessage IN VARCHAR2) IS
    BEGIN
        APEX_JSON.open_object;
        APEX_JSON.write ('success', pSuccess);
        APEX_JSON.write ('message', pMessage);
        APEX_JSON.close_object;
    END;

    /* 
    ** TEMPORARY SOLUTION TO POPULATE ENDPOINT TABLES
    */
    PROCEDURE refreshOrdsEndpoints IS 
    BEGIN
        DELETE api_endpoint;
        DELETE ords_endpoints;

        INSERT INTO ords_endpoints (template_id, uri_template, method, label)
        SELECT t.id template_id, t.uri_template, MIN(h.method) as method, NVL(t.comments,h.comments) as label
          FROM user_ords_modules m, user_ords_templates t, user_ords_handlers h, user_ords_parameters p
         WHERE m.name='public'
           AND m.id=t.module_id
           AND t.id=h.template_id
           AND h.id=p.handler_id
           AND NVL(t.comments,h.comments) IS NOT NULL
           AND p.name='X-ORDS-STATUS-CODE'
          GROUP BY t.id, t.uri_template, NVL(t.comments,h.comments);

        delete website_role;
        
        
        insert into website_role(website_id, role_id)
        select w.id, r.id
        from website w, role r
        where r.name in ('admin','owner');

        insert into api_endpoint(website_id, role_id, template_id)
        select w.id, r.id, o.template_id 
        from website w, role r, ords_endpoints o
        where r.name in ('admin','owner');

        insert into website_role(website_id, role_id)
        select w.id, r.id
        from website w, role r
        where r.name='visitor';

        insert into api_endpoint(website_id, role_id, template_id)
        select w.id, r.id, o.template_id 
        from website w, role r, ords_endpoints o
        where r.name='visitor'
         and (INSTR(o.uri_template,'message')>0 or INSTR(o.uri_template,'authenticate')>0);
    END;

    /*
    ** RETURN DECODED JWT PAYLOAD AND SIGNING SECRET
    */
    FUNCTION decodeJWT(pToken IN VARCHAR2) RETURN t_JWT_data IS
        l_payload varchar2(500);
        l_decoded varchar2(500);
        pos1 PLS_INTEGER;
        pos2 PLS_INTEGER;
        l_JWT_data t_JWT_data;
    BEGIN
        pos1:=INSTR(pToken,'.',1);
        pos2:=INSTR(pToken,'.',-1);
        l_payload:=SUBSTR(pToken,pos1+1,pos2-pos1-1);
        l_decoded:=utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw(l_payload)));

        SELECT j.iss, j.sub, j.aud, j.iat, j.exp, j.jti, o.client_secret 
          INTO l_JWT_data.iss, l_JWT_data.sub, l_JWT_data.aud, l_JWT_data.iat, l_JWT_data.exp, l_JWT_data.jti,  l_JWT_data.client_secret
          FROM JSON_TABLE(l_decoded, '$' COLUMNS(iss, sub, aud, iat, exp, jti)) j, user_ords_clients o
         WHERE o.name=j.sub;

        RETURN (l_JWT_data);
    END;

    /*
    ** GET SESSION DETAILS OF JWT RESOURCE ACCESS REQUEST
    */
    FUNCTION getSessionData(pWebsiteId IN website.id%type) RETURN t_session_data IS
        l_bearer_token VARCHAR2(1000);
        l_token APEX_JWT.T_TOKEN;
        l_token_hash access_token.token%type;
        l_email users.email%type;
        
        l_JWT_data t_JWT_data;
        l_session_data t_session_data;
        n PLS_INTEGER;

    BEGIN
        l_bearer_token := SUBSTR(OWA_UTIL.get_cgi_env('Authorization'), 8);
        l_JWT_data:=decodeJWT(l_bearer_token);

        /* Check expiry and signature are ok */
        l_token:=apex_jwt.DECODE(p_value => l_bearer_token, p_signature_key => UTL_RAW.cast_to_raw (l_JWT_data.client_secret));
        BEGIN
            apex_jwt.VALIDATE (p_token => l_token, p_iss => 'ORDS.'||pWebsiteId);
            EXCEPTION WHEN VALUE_ERROR THEN
                pck_core.log('token invalid');
                RAISE_APPLICATION_ERROR(-20000,'token invalid');
        END;

        /* Check that bearer token is an issued access token */
        IF (l_session_data.valid) THEN
            l_token_hash:=dbms_crypto.hash(src=>UTL_I18N.STRING_TO_RAW(l_bearer_token,'AL32UTF8'), typ=>dbms_crypto.hash_sh256);
            SELECT COUNT(*) INTO n FROM access_token WHERE token=l_token_hash;
            IF (n=0) THEN
                pck_core.log('token not an access token');
                RAISE_APPLICATION_ERROR(-20000,'token not an access token');
            END IF;
        END IF;

        l_session_data.user_id:=l_JWT_data.jti;
        l_session_data.timezone:=OWA_UTIL.get_cgi_env('timezone');
        l_session_data.url:=OWA_UTIL.get_cgi_env('url');

        RETURN l_session_data;
    END;

    /*
    ** USER SUBMITS EMAIL ADDRESS TO BE AUTHENTICATED
    ** - CREATE RANDOM PASSCODE OR MAGIC LINK AND SEND TO EMAIL ADDRESS
    */

    PROCEDURE createAuthRequest(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_email users.email%type;
        l_url varchar2(100);
        l_request_type VARCHAR2(10);
        l_user_id users.id%type;
        l_ords_user_id user_ords_clients.id%type;
        l_jwt_enc_key user_ords_clients.client_secret%type;
        l_token VARCHAR2(4000);
        l_digits   CONSTANT VARCHAR2(10) := '0123456789';
        l_passcode VARCHAR2(6);
        l_passcode_hash raw(32);
        l_token_hash raw(32);
        l_json JSON_OBJECT_T;
        l_email_payload CLOB;
        l_sendmail_subject VARCHAR2(200);
        l_sendmail_body LONG;
        l_sendmail_link VARCHAR2(500);
        l_clob CLOB;
    BEGIN
        FOR C IN (SELECT o.client_secret, j.email, j.url, j.request_type, NVL(u.id,0) user_id, NVL(o.id,0) ords_user_id
                    FROM user_ords_clients o, users u, JSON_TABLE(pBodyText, '$' COLUMNS email, url, request_type) j
                   WHERE o.name(+)=j.email
                     AND u.email(+)=j.email)
        LOOP
            l_email:=C.email;
            l_url:=C.url;
            l_request_type:=C.request_type;
            l_user_id:=C.user_id;
            l_ords_user_id:=C.ords_user_id;
            l_jwt_enc_key:=C.client_secret;
        END LOOP;

        IF (l_ords_user_id=0) THEN
            OAUTH.create_client(
                p_name            => l_email,
                p_grant_type      => 'client_credentials',
                p_owner           => 'mark.russellbrown@gmail.com',
                p_support_email   => 'mark.russellbrown@gmail.com',
                p_description     => 'Provide secure secret in order to encrypt JWT tokens',
                p_privilege_names => 'api_priv'
            );
            SELECT client_secret INTO l_jwt_enc_key FROM user_ords_clients WHERE name=l_email;
        END IF;
        

        CASE l_request_type
            WHEN 'magic' THEN
                l_token:=apex_jwt.ENCODE (
                    p_iss       => 'ORDS.'||pWebsiteId,
                    p_sub       => l_email,
                    p_aud       => 'xxx',
                    p_iat_ts    => current_timestamp,
                    p_exp_sec   => ACCESS_TOKEN_EXP,
                    p_signature_key => UTL_RAW.cast_to_raw (l_jwt_enc_key)
                );
                l_token_hash:=dbms_crypto.hash(src=>UTL_I18N.STRING_TO_RAW(l_token,'AL32UTF8'), typ=>dbms_crypto.hash_sh256);

                IF (l_user_id=0) THEN
                    INSERT INTO users (email, login_status, token) VALUES (l_email, 'AUTH WAITING', l_token_hash) RETURNING id INTO l_user_id;
                ELSE
                    UPDATE users SET login_status='AUTH WAITING', token=l_token_hash, updated_date=current_timestamp WHERE id=l_user_id;
                END IF;
                
                l_sendmail_link:=pck_core.getRestUrl || 'authenticate/' || pWebsiteId || '?request=magic&user='||l_user_id||'&verify=' ||l_token;
                l_sendmail_body:=emailTemplate(l_request_type, l_url, 'https://adfreesites.com/favicon.' || pWebsiteId || '.png', l_sendmail_link);

            WHEN 'passcode' THEN
                FOR i IN 1..6 LOOP
                    l_passcode:=l_passcode || SUBSTR(l_digits,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(l_digits) + 1)),1);
                END LOOP;

                /* Store passcode as hash for later comparison with user-entered value */
                l_passcode_hash:=dbms_crypto.hash(src=>UTL_I18N.STRING_TO_RAW(l_passcode,'AL32UTF8'), typ=>dbms_crypto.hash_sh256);

                IF (l_user_id=0) THEN
                    INSERT INTO users (email, login_status, passcode) VALUES (l_email, 'AUTH WAITING', l_passcode_hash);
                ELSE
                    UPDATE users SET login_status='AUTH WAITING', passcode=l_passcode_hash WHERE id=l_user_id;
                END IF;

                l_sendmail_body:=emailTemplate(l_request_type, l_url, 'https://adfreesites.com/favicon.' || pWebsiteId || '.png', l_passcode);
        END CASE;

        l_json:=new JSON_OBJECT_T;
        l_json.put('contactEmail',l_email);
        l_json.put('subject','Login to ' || l_url);
        l_json.put('body', l_sendmail_body);
        l_json.put('sourceEmail','login@adfreesites.com');
        l_email_payload:=l_json.stringify;
        pck_api.callAWSemailAPI(pMethod=>'POST', pBody=>l_email_payload, pData=>l_clob);
        
        APEX_JSON.open_object;
        APEX_JSON.write ('success', TRUE);
        APEX_JSON.write ('message', CASE l_request_type WHEN 'magic' THEN 'Magic link sent to your inbox' WHEN 'passcode' THEN 'Passcode sent to your inbox' END);
        APEX_JSON.write ('userid', l_user_id);
        APEX_JSON.close_object;

        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;


    FUNCTION getScope(pWebsiteId IN website.id%type, pEmail IN VARCHAR2) RETURN VARCHAR2
    IS
        l_scope VARCHAR2(7);
    BEGIN
        FOR C IN (
            SELECT 'owner' as scope
              FROM website w
             WHERE w.id=pWebsiteId
               AND w.contact_email=pEmail) LOOP
            l_scope:=C.scope;
        END LOOP;
            
        IF (l_scope IS NULL) THEN
            FOR C IN (SELECT 'admin' as scope FROM website w, users u WHERE w.id=pWebsiteId AND u.id=w.user_id AND u.email=pEmail) LOOP
                l_scope:=C.scope;
            END LOOP;
        END IF;
        
        RETURN (NVL(l_scope,'visitor'));
    END;

    /*
    ** USER AUTHENTICATED SUCCESSFULLY. ISSUE NEW PAIR OF TOKENS AND RETURN TO CLIENT
    */
    PROCEDURE issueJWTTokens(pWebsiteId IN website.id%type, pEmail IN users.email%type, pUserId IN users.id%type) IS 
        l_new_token VARCHAR2 (4000);
        l_new_refresh VARCHAR2 (4000);
        l_jwt_enc_key user_ords_clients.client_secret%type;
        l_user_id users.id%type;
        l_issuer VARCHAR2(15);
        l_scope VARCHAR2(7);
        l_menulist LONG;
        l_reports LONG;
        n PLS_INTEGER;
    BEGIN
        SELECT client_secret 
          INTO l_jwt_enc_key
          FROM user_ords_clients
         WHERE name=pEmail;

        l_issuer:='ORDS.'||pWebsiteId;
        l_scope:=getScope(pWebsiteId,pEmail);

        l_new_token:=apex_jwt.ENCODE (
            p_iss       =>l_issuer,
            p_sub       => pEmail,
            p_aud       => l_scope,
            p_jti       => pUserId,
            p_iat_ts    => current_timestamp,
            p_exp_sec   => ACCESS_TOKEN_EXP,
            p_signature_key => UTL_RAW.cast_to_raw (l_jwt_enc_key)
        );

        INSERT INTO access_token(user_id, token) VALUES (l_user_id, dbms_crypto.hash(src=>UTL_I18N.STRING_TO_RAW(l_new_token,'AL32UTF8'), typ=>dbms_crypto.hash_sh256));

        l_new_refresh:=apex_jwt.ENCODE (
            p_iss       => l_issuer,
            p_sub       => pEmail,
            p_aud       => l_scope,
            p_jti       => pUserId,
            p_iat_ts    => current_timestamp,
            p_exp_sec   => REFRESH_TOKEN_EXP,
            p_signature_key => UTL_RAW.cast_to_raw (l_jwt_enc_key)
        );

        APEX_JSON.open_object;
        APEX_JSON.write ('success', TRUE);
        APEX_JSON.write ('token', l_new_token);
        APEX_JSON.write ('refresh', l_new_refresh);
        
        refreshOrdsEndpoints;

        FOR C IN (
            SELECT o.label, o.uri_template, o.method
              FROM api_endpoint a, role r, ords_endpoints o
             WHERE a.website_id=pWebsiteId 
               AND a.role_id=r.id 
               AND r.name=l_scope
               AND a.template_id=o.template_id
               AND INSTR(o.uri_template,'authenticate')=0
        )
        LOOP
            l_reports:=NULL;
            IF (INSTR(C.uri_template,'visits/')>0) THEN
                l_reports:='graph|Graphs;website|Visits;location|Locations';
                SELECT COUNT(*) INTO n FROM website_article WHERE website_id=pWebsiteId;
                IF (n>1) THEN
                    l_reports:=l_reports || ';page|Pages';
                    SELECT COUNT(*) INTO n FROM website_article WHERE website_id=pWebsiteId AND collection_type='BLOG';
                    IF (n>0) THEN
                        l_reports:=l_reports || ';blog|Blogs';
                    END IF;
                END IF;
            END IF;
            l_menulist:=l_menulist || '<li><button type="button" data-endpoint="' || C.uri_template || '" data-method="' || C.method || '" data-reports="' || l_reports || '" class="button">' || C.label || '</button></li>';
        END LOOP;
        APEX_JSON.write ('menulist', l_menulist);
        APEX_JSON.close_object;
    END;

    /*
    ** VERIFY PASSCODE OR TOKEN ENTERED BY USER MATCHES DATA ORIGINALLY SENT BY EMAIL
    ** SET STATUS IN USERS TABLE TO "AUTH OK"
    **  - FOR VERIFIED PASSCODE, RETURN JWT ACCESS AND REFRESH TOKENS
    **  - FOR VERIFIED TOKEN, SEND MESSAGE IN NEW WINDOWS TAB
    */
    PROCEDURE verifyAuthRequest(pWebsiteId IN website.id%type, pRequestType IN VARCHAR2, pUserId IN NUMBER, pVerifyData IN VARCHAR2, pStatus OUT NUMBER) IS
        l_email users.email%type;
        l_user_id users.id%type;
        l_jwt_enc_key user_ords_clients.client_secret%type;
        l_verify_data_hash RAW(32);
        l_token APEX_JWT.T_TOKEN;
        l_token_issued refresh_token.token_issued%type;
        l_scope VARCHAR2 (7);
    BEGIN
        /* 
        ** Check issued and received tokens are the same 
        */
        FOR C IN (SELECT email, DECODE(pRequestType,'magic',token,'passcode',passcode) original_data_hash FROM users WHERE id=pUserId) 
        LOOP
            l_email:=C.email;
            l_verify_data_hash:=dbms_crypto.hash(src=>UTL_I18N.STRING_TO_RAW(pVerifyData,'AL32UTF8'), typ=>dbms_crypto.hash_sh256);
            IF (l_verify_data_hash<>C.original_data_hash) THEN
                IF (pRequestType='passcode') THEN
                    sendMessage(FALSE,'Passcode does not match.');
                END IF;
                IF (pRequestType='magic') THEN
                    htp.p('<h1>Token expired. Login again.</h1>');
                END IF;
                RETURN;
            END IF;
        END LOOP;

        /* 
        ** Decode and Validate token has not expired etc.
        */
        CASE pRequestType
            WHEN 'magic' THEN
                SELECT o.client_secret INTO l_jwt_enc_key FROM user_ords_clients o, users u WHERE o.name=u.email AND u.id=pUserId;

                l_token:=apex_jwt.DECODE (
                    p_value   => pVerifyData,
                    p_signature_key   => UTL_RAW.cast_to_raw (l_jwt_enc_key)
                );

                BEGIN
                    apex_jwt.VALIDATE (p_token => l_token, p_iss => 'ORDS.'||pWebsiteId);
                    EXCEPTION 
                        WHEN VALUE_ERROR THEN
                            htp.p('<h1>Token expired or not current. Check you sent from most recent message received. Login again</h1>');
                            --sendMessage(FALSE,pRequestType || ' token expired. Login again.');
                            RETURN;
                        WHEN OTHERS THEN 
                            pck_core.log(sqlerrm);
                            htp.p('<h1>' || sqlerrm || '</h1>');
                            RETURN;
                END;

                htp.p('<h1>Authenticated Successfully</h1>');
            
            WHEN 'passcode' THEN
                issueJWTTokens(pWebsiteId, l_email, pUserId);
        END CASE;

        UPDATE users SET login_status='AUTH OK' WHERE id=pUserId;

        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /* 
    ** CLIENT HAS SUBMITTED EMAIL ADDRESS AND WAITING TO BE LOGGED IN 
    ** IF LOGIN_STATUS FOR USER IS "AUTH OK" ISSUE NEW PAIR OF TOKENS
    */
    PROCEDURE checkAuthStatus(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_email users.email%type;
        l_user_id users.id%type;
        l_time_since_sent number;
        l_token_issued refresh_token.token_issued%type;
    BEGIN
        SELECT u.id, u.email, extract (minute from (current_timestamp - coalesce(u.updated_date, u.created_date)))
          INTO l_user_id, l_email, l_time_since_sent
          FROM users u, JSON_TABLE(pBodyText, '$' COLUMNS email) j
         WHERE u.email=j.email
           AND u.login_status='AUTH OK';

        issueJWTTokens(pWebsiteId, l_email, l_user_id);

        pStatus:=200;

        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                APEX_JSON.open_object;
                APEX_JSON.write ('success', TRUE);
                IF (l_time_since_sent * 60 >= ACCESS_TOKEN_EXP) THEN
                    APEX_JSON.write ('expired', TRUE);
                END IF;
                APEX_JSON.close_object;

            WHEN OTHERS THEN
                pck_core.log_error(pStatus);
    END;

    /*
    ** CREATE AND RETURN NEW ACCESS / REFRESH TOKEN PAIR
    ** CALLED WHEN CLIENT'S ACCESS TOKEN HAS EXPIRED
    ** CHECK REFRESH TOKEN HAS NOT PREVIOUSLY BEEN USED
    */
    PROCEDURE refreshAuthToken(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS
        l_refresh_token VARCHAR2(4000);
        l_token_used refresh_token.token_used%type;
        l_token_issued refresh_token.token_issued%type;
        l_token APEX_JWT.T_TOKEN;
        l_new_token VARCHAR2 (4000);
        l_new_refresh VARCHAR2 (4000);

        n PLS_INTEGER;
        l_JWT_data t_JWT_data;
    BEGIN
        l_refresh_token:=SUBSTR(OWA_UTIL.get_cgi_env('Authorization'), 8);
        l_JWT_data:=decodeJWT(l_refresh_token);

        l_token:=apex_jwt.DECODE (p_value => l_refresh_token, p_signature_key => UTL_RAW.cast_to_raw(l_JWT_data.client_secret));

        apex_jwt.VALIDATE (p_token => l_token, p_iss => l_JWT_data.iss);

        -- Check refresh token has not previously been used 
        l_token_used:=dbms_crypto.hash(src=>UTL_I18N.STRING_TO_RAW(l_refresh_token,'AL32UTF8'), typ=>dbms_crypto.hash_sh256);
        
        SELECT COUNT(*)
          INTO n
          FROM refresh_token
         WHERE token_used=l_token_used;

        -- Refresh token has already been used - return access denied - disable use of the refresh token issued with compromised token
        IF (n=1) THEN
            pck_core.log('Attempted refresh token reuse in ' || pWebsiteId);
            BEGIN 
                INSERT INTO refresh_token(user_id, token_used, token_issued)
                SELECT l_JWT_data.jti, token_issued, 'COMPROMISED'
                  FROM refresh_token
                 WHERE token_used=l_token_used
                   AND token_issued<>'COMPROMISED';
                
                EXCEPTION WHEN dup_val_on_index THEN NULL;
            END;
            RAISE_APPLICATION_ERROR(-20000,'Attempt to reuse refresh token');
        END IF;

        l_new_token:=apex_jwt.ENCODE (
            p_iss       => l_JWT_data.iss,
            p_sub       => l_JWT_data.sub,
            p_aud       => l_JWT_data.aud,
            p_jti       => l_JWT_data.jti,
            p_iat_ts    => current_timestamp,
            p_exp_sec   => ACCESS_TOKEN_EXP,
            p_signature_key => UTL_RAW.cast_to_raw (l_JWT_data.client_secret)
        );

        INSERT INTO access_token(user_id, token) 
            VALUES (l_JWT_data.jti, dbms_crypto.hash(src=>UTL_I18N.STRING_TO_RAW(l_new_token,'AL32UTF8'), typ=>dbms_crypto.hash_sh256));

        l_new_refresh:=apex_jwt.ENCODE (
            p_iss       => l_JWT_data.iss,
            p_sub       => l_JWT_data.sub,
            p_aud       => l_JWT_data.aud,
            p_jti       => l_JWT_data.jti,
            p_iat_ts    => current_timestamp,
            p_exp_sec   => REFRESH_TOKEN_EXP,
            p_signature_key => UTL_RAW.cast_to_raw (l_JWT_data.client_secret)
        );

        INSERT INTO refresh_token(user_id, token_used, token_issued)
            VALUES (l_JWT_data.jti, l_token_used, dbms_crypto.hash(src=>UTL_I18N.STRING_TO_RAW(l_new_refresh,'AL32UTF8'), typ=>dbms_crypto.hash_sh256));

        APEX_JSON.open_object;
        APEX_JSON.write ('success', TRUE);
        APEX_JSON.write ('token', l_new_token);
        APEX_JSON.write ('refresh', l_new_refresh);
        APEX_JSON.close_object;

        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

  
    /*
    ** This procedure is called in the Post-authentication of Social Sign-in processing.
    ** First-time authenticated users are inserted into the USERS table
    */
    PROCEDURE insert_user_login(p_auth_provider IN VARCHAR2, p_email IN VARCHAR2, p_name IN VARCHAR2) IS
        l_user_id users.id%type;
        --l_user_name users.name%type;
        --l_client_tz users.client_tz%type;
        --l_client_tz_session users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
        l_workspace_id apex_workspaces.workspace_id%type;
    BEGIN
        SELECT workspace_id
          INTO l_workspace_id
          FROM apex_workspaces
         WHERE workspace = (
                SELECT workspace
                FROM apex_applications
                WHERE application_id = APEX_APPLICATION.G_FLOW_ID
                );
        /*
        FOR C IN (
            SELECT apex_session_id
              FROM apex_workspace_sessions
             WHERE workspace_id = l_workspace_id
               AND user_name = APEX_APPLICATION.G_USER
               AND apex_session_id != APEX_APPLICATION.G_INSTANCE
        )
        LOOP
            apex_session.delete_session(p_session_id => C.apex_session_id);
            DELETE session_data WHERE session_id=C.apex_session_id;
        END LOOP;
        */

        INSERT INTO user_login(auth_provider,email,name,apex_session_id) VALUES (p_auth_provider, p_email, p_name, APEX_APPLICATION.G_INSTANCE);

        BEGIN
            SELECT id
              INTO l_user_id
              FROM users 
             WHERE email=p_email;

            UPDATE users 
               SET name=p_name, last_login_date=current_timestamp, last_login_provider=p_auth_provider 
             WHERE id=l_user_id;

            EXCEPTION WHEN NO_DATA_FOUND 
            THEN
                INSERT INTO users(email, name, last_login_date, last_login_provider) 
                VALUES (p_email, p_name, current_timestamp, p_auth_provider);
        END;
        COMMIT;
    END;    

    PROCEDURE post_auth_facebook IS
    BEGIN
        insert_user_login('Facebook', apex_json.get_varchar2('email'), apex_json.get_varchar2('name'));
        EXCEPTION WHEN OTHERS THEN pck_core.log_error; RAISE;
    END;

    PROCEDURE post_auth_google IS
    BEGIN
        insert_user_login('Google', apex_json.get_varchar2('email'), apex_json.get_varchar2('name'));
        EXCEPTION WHEN OTHERS THEN pck_core.log_error; RAISE;
    END; 

    /* 
    ** Linked-In API has separate entry points for profile name and email addres.
    ** Support very rude. API is bollocks. Gave up on Linkedin but keep the code just in case
    */
    /*
    PROCEDURE post_auth_linkedin IS
        l_name users.name%type;
        l_email users.email%type;
        l_clob CLOB;
        l_names owa_cookie.vc_arr;
        l_vals owa_cookie.vc_arr;
        l_num_vals INTEGER;
    BEGIN
        pck_cms.log('starting'); 
        l_name:=apex_json.get_varchar2('localizedFirstName') || ' ' || apex_json.get_varchar2('localizedLastName');

        apex_web_service.g_request_headers.delete();
        pck_cms.log('Before make_rest_request');
        l_clob := apex_web_service.make_rest_request(
            p_url => 'https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))',
            p_http_method => 'GET',
            p_credential_static_id => 'Linkedin',
            p_token_url => 'https://www.linkedin.com/oauth/v2/accessToken');
        pck_cms.log(l_clob);

        SELECT emailAddress INTO l_email 
          FROM JSON_TABLE(l_clob format json, '$'
            COLUMNS emailAddress VARCHAR2(100)  PATH '$.elements[0]."handle~".emailAddress');    

        apex_application.g_user:=l_email;

        insert_user_login('Linkedin', l_email, l_name);        
    END;   
    */

    /*
    **  Gave up on Azure too - can't remember why though.
    */
    /*
    PROCEDURE post_auth_azure IS
    BEGIN
        insert_user_login('Azure', apex_json.get_varchar2('userPrincipalName'), apex_json.get_varchar2('givenName') || ' ' || apex_json.get_varchar2('surname'));
    END; 
    */

END PCK_SEC;
/