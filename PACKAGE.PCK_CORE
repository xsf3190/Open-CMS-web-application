CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CORE" AS
    --
    gWidthThumbnail CONSTANT INTEGER:=360;
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error;
    --
    TYPE session_data_rt IS RECORD (
        app_id NUMBER, 
        session_id NUMBER,
        page_id NUMBER,
        maxtouchpoints NUMBER,
        timezone VARCHAR2(30),
        canuse_popover BOOLEAN,
        user_id NUMBER
    );
    --
    FUNCTION getSessionData RETURN session_data_rt;
    --
    FUNCTION getRestUrl RETURN VARCHAR2;
    --
    FUNCTION getPageContent RETURN CLOB;
    --
    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2;
    --
    FUNCTION getCloudinaryUrl(
        pCloudname IN VARCHAR2, 
        pResourceType IN VARCHAR2, 
        pPublicId IN VARCHAR2, 
        pFormat IN VARCHAR2, 
        pWidth IN INTEGER, 
        pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION buildDeployButtons(pDomainName IN website.domain_name%type, pNetlifySiteId IN website.netlify_site_id%type, pNetlifySiteIdCustom IN website.netlify_site_id_custom%type DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION buildTextareaWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN CLOB, pCanUsePopover IN BOOLEAN, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN CLOB;
    --
    FUNCTION buildInputWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN CLOB;
    --
    FUNCTION buildWebsiteArticles(pWebsiteId IN website.id%type, pCanUsePopover IN BOOLEAN, pTimezone IN session_data.timezone%type, pViewOption IN VARCHAR2 DEFAULT NULL, pArticleId IN article.id%type DEFAULT NULL) RETURN CLOB;
    --
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type);
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CORE" AS

    FUNCTION getSessionData RETURN session_data_rt IS
        l_apex_session VARCHAR2(50);
        l_parts apex_t_varchar2;
        l_session_data session_data_rt;
    BEGIN
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');
        IF (l_apex_session IS NULL) THEN
            l_session_data.app_id:=apex_application.g_flow_id;
            l_session_data.session_id:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
            l_session_data.page_id:=apex_application.g_flow_step_id;
        ELSE        
            l_parts:=apex_string.split(l_apex_session,',');
            l_session_data.app_id:=l_parts(1);
            l_session_data.session_id:=l_parts(2);
            l_session_data.page_id:=l_parts(3);
        END IF;

        FOR C IN (SELECT supports_popover, timezone FROM session_data WHERE session_id=l_session_data.session_id) LOOP
            l_session_data.timezone:=C.timezone;
            l_session_data.canuse_popover:=CASE WHEN C.supports_popover='true' THEN TRUE ELSe FALSE END;
        END LOOP;

        FOR C IN (
            SELECT u.id
              FROM apex_workspace_sessions s, users u
             WHERE s.apex_session_id=l_session_data.session_id
               AND s.user_name=u.email )
        LOOP
            l_session_data.user_id:=C.id;
        END LOOP;

        IF (l_session_data.user_id IS NULL AND l_session_data.page_id=2) THEN
            RAISE_APPLICATION_ERROR(-20000,'YOUR SESSION HAS EXPIRED');
        END IF;

        RETURN l_session_data;
        EXCEPTION WHEN VALUE_ERROR THEN RETURN l_session_data;
    END;

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg);
        COMMIT;
    END;

    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg);
        COMMIT;
    END;

    /*
    **  Log ORACLE exceptions.
    */
    PROCEDURE log_error IS
        l_depth PLS_INTEGER;
        l_stack LONG;
        l_apex_session VARCHAR2(50);
    BEGIN
        ROLLBACK;

        /* Format call stack which includes procedure names */
        l_depth:=UTL_CALL_STACK.dynamic_depth;
        l_stack:='CALL STACK'||chr(10);
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'Line: ' || UTL_CALL_STACK.unit_line(i) || ' ' || UTL_CALL_STACK.owner(i)||'.'||UTL_CALL_STACK.concatenate_subprogram(UTL_CALL_STACK.subprogram(i)) || chr(10);
        END LOOP;

        /* Format error backtrace */
        l_stack:=l_stack || 'ERROR BACKTRACE'||chr(10);
        l_depth := UTL_CALL_STACK.error_depth;
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'ORA-' || UTL_CALL_STACK.error_number(i) || ' - ' || UTL_CALL_STACK.error_msg(i) || chr(10);
        END LOOP;

        log(l_stack);

        /* If invoked in Apex session return sqlcode, sqlerrm in json payload */
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');   

        apex_json.open_object; 
        apex_json.write('success', FALSE); 
        apex_json.write('sqlcode', SQLCODE); 
        apex_json.write('sqlerrm', SQLERRM); 
        apex_json.close_object;

        EXCEPTION WHEN VALUE_ERROR THEN NULL;
    END;

    /*
    ** Return RESTful API url
    */
    FUNCTION getRestUrl RETURN VARCHAR2 IS
        l_rest_url VARCHAR2(200);
    BEGIN
        SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix
          INTO l_rest_url
          FROM user_ords_schemas s, user_ords_modules m
         WHERE s.parsing_schema=sys_context('userenv','current_schema')
           AND m.name='public';

        RETURN (l_rest_url);
    END;

    /*
     **  Build at most 2 deploy buttons same width as first.
     */
    FUNCTION buildDeployButtons(pDomainName IN website.domain_name%type, pNetlifySiteId IN website.netlify_site_id%type, pNetlifySiteIdCustom IN website.netlify_site_id_custom%type DEFAULT NULL) RETURN VARCHAR2 is
        l_html VARCHAR2(1000);
        l_text VARCHAR2(50);
        l_text_custom VARCHAR2(50);
        l_width VARCHAR2(50);
    BEGIN

        l_text:='https://' || REPLACE(pDomainName,'.','-') || '.netlify.app';
        l_width:='style="--width:' || LENGTH(l_text) || 'ch';

        IF (pNetlifySiteId IS NOT NULL) THEN 
            l_html:=
            '<button type="button" class="deploy-website cta" data-site_id="' || pNetlifySiteId || '" '|| l_width || '">
                <span style="--content:''\2192''">' || l_text || '</span>
             </button>';
            IF (pNetlifySiteIdCustom IS NOT NULL) THEN 
                l_html:=l_html || 
                '<button type="button" class="deploy-website cta" data-site_id="'|| pNetlifySiteIdCustom || '" ' || l_width || '">
                    <span style="--content:''\2192''">https://www.' || pDomainName || '</span>
                 </button>';
            END IF;
        END IF;
        RETURN(l_html);
    END;

    /*
     **  Create wrapper html for textarea element, optionally including dropdown
     */
    FUNCTION buildTextareaWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN CLOB, pCanUsePopover IN BOOLEAN, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN CLOB IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_data_type user_tab_columns.data_type%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT c.data_length, NVL(i.comments,'Info not defined yet'), c.data_type
          INTO l_data_length, l_comments, l_data_type
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="textarea-wrapper">' ||
            CASE WHEN pDropdown IS NOT NULL THEN '<div class="button-container">' END || '
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || 
                CASE WHEN pCanUsePopover 
                        THEN '<button type="button" popovertarget="' || l_column_name || '_popover"><svg class="icon"><use href="#info"></use></svg></button>
                              <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' END ||'
            </label>' || pDropdown || 
            CASE WHEN pDropdown IS NOT NULL THEN '</div>' END || '
            <textarea placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                CASE WHEN l_data_type='CLOB' THEN '" rows="5" cols="60"' ELSE '" maxlength="' || l_data_length || '" rows="1"' END || ' data-column="' || pColumn || '" data-id="' || pId || '">' || pValue || '</textarea>        
            <div class="button-container">
                <span class="result"></span>
                <span class="charcounter">' || NVL(LENGTH(pValue),0) || CASE WHEN l_data_type<>'CLOB' THEN '/' || l_data_length END || '</span>
            </div>
        </div>');
    END;

    /*
     **  Create wrapper html for textarea element, optionally including dropdown
     */
    FUNCTION buildInputWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN CLOB IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_data_type user_tab_columns.data_type%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT c.data_length, NVL(i.comments,'Info not defined yet'), c.data_type
          INTO l_data_length, l_comments, l_data_type
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="input-wrapper">' ||
            CASE WHEN pDropdown IS NOT NULL THEN '<div class="button-container">' END || '
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || 
                CASE WHEN pCanUsePopover 
                        THEN '<button type="button" popovertarget="' || l_column_name || '_popover"><svg class="icon"><use href="#info"></use></svg></button>
                              <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' END ||'
            </label>' || pDropdown || 
            CASE WHEN pDropdown IS NOT NULL THEN '</div>' END || '
            <input placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                '" maxlength="' || l_data_length || '" value="' || pValue || '" data-column="' || pColumn || '" data-id="' || pId || '">
            <div class="button-container">
                <span class="result"></span>
                <span class="charcounter">' || NVL(LENGTH(pValue),0) ||  '/' || l_data_length || '</span>
            </div>
        </div>');
    END;

    /*
     **  Create wrapper html for radio elements
     */
    FUNCTION buildRadioWrapper(pColumn IN VARCHAR2, pRadioButtons IN VARCHAR2, pCanUsePopover IN BOOLEAN) RETURN VARCHAR2 IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_comments user_col_comments.comments%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT NVL(i.comments,'Info not defined yet') 
          INTO l_comments
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="radio-wrapper">
                <fieldset>
                    <legend>' || INITCAP(l_column_name) || 
                    CASE WHEN pCanUsePopover 
                        THEN '<button type="button" popovertarget="' || l_column_name || '_popover"><svg class="icon"><use href="#info"></use></svg></button>
                              <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' END || '
                    </legend>
                    <div class="cluster">' || pRadioButtons || '
                    </div>
                </fieldset>
                <div class="button-container">
                    <span class="result"></span><span>&nbsp;</span>
                </div>
            </div>');
    END;

    FUNCTION buildNavLabels(pWebsiteId IN website.id%type) RETURN VARCHAR2 IS
        l_nav_labels LONG;
    BEGIN
        l_nav_labels:='<ul>';
        FOR C IN (SELECT article_id, navigation_label FROM website_article WHERE website_id=pWebsiteId ORDER BY display_order) LOOP
            l_nav_labels:=l_nav_labels || '<li><a href="#" class="nav-label" data-id="' || C.article_id || '">' || C.navigation_label || '</a></li>';
        END LOOP;
        l_nav_labels:=l_nav_labels || '</ul>';
        RETURN l_nav_labels;
    END;

    /*
    ** the miserable privacy policy - Faceook insists that it can be accessed by an application url
    */
    FUNCTION buildPrivacyPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT body_html FROM article WHERE id=19124)   
        LOOP
            RETURN C.body_html;
        END LOOP;
    END;

    /*
     **  Login page
     */
    FUNCTION buildLoginPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT id FROM article WHERE id=19124)  -- the miserable privacy policy
        LOOP
            RETURN TO_CLOB('
                <ul class="container">
                    <li class="red">' || pck_icons.g_oracle_svg || '</li>
                    <li class="grey login">
                        <a class="button" href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Facebook&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_facebook_svg ||'Login w/ Facebook</a>
                        <a class="button" href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Google&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_google_svg ||'Login w/ Google</a>
                        <button data-id="' || C.id || '">Priv</button>
                    </li>
                    <li class="grey">' || pck_icons.g_github_svg || '</li>
                    <li class="grey">' || pck_icons.g_cloudinary_svg || '</li>
                    <li class="yellow">ALWAYS FREE</li>
                    <li class="grey">' || pck_icons.g_netlify_svg ||'</li>
                    <li class="blue"></li>
                    <li class="grey"></li>
                    <li class="grey"></li>
                </ul>
                <dialog>
                    <div>
                        <div></div> <!-- empty div to make grid -->
                        <div class="content"></div>
                        <button type="button" class="close">&times;</button>
                    </div>
                </dialog>');
        END LOOP;
    END;

    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RETURN (NULL);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5);

        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);
            l_width INTEGER:=pWidth; 
        BEGIN
            IF (pWidth=0) THEN
                RETURN NULL;
            END IF;
            IF (pDimension IS NOT NULL) THEN
                IF (pDimension=1) THEN
                    RETURN NULL;
                ELSE
                    RETURN ',w_' || ROUND(pWidth*pDimension);
                END IF;
            END IF;
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            IF (l_arr(1)>gWidthThumbnail) THEN
                l_arr(1):=gWidthThumbnail;
                l_arr(2):=(pWidth-gWidthThumbnail)/2;
            END IF;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-gWidthThumbnail) <= ABS(l_arr(l_right)-gWidthThumbnail)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;
            IF (l_arr(l_left)=pWidth) THEN
                RETURN NULL;
            END IF;
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        IF (pResourceType IS NOT NULL) THEN
            l_media_type:=getMediaType(pResourceType, pFormat);
            l_url:='https://res.cloudinary.com/' || pCloudname ||
                    CASE l_media_type
                        WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                        WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                        WHEN 'audio' THEN '/video/upload/q_auto,f_auto,w_' || gWidthThumbnail || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                    END;
        END IF;        
        RETURN (l_url);
    END;    

    FUNCTION buildWebsiteArticles(pWebsiteId IN website.id%type, pCanUsePopover IN BOOLEAN, pTimezone IN session_data.timezone%type, pViewOption IN VARCHAR2 DEFAULT NULL, pArticleId IN article.id%type DEFAULT NULL) RETURN CLOB IS
        l_clob CLOB;
        TYPE t_publish IS VARRAY(2) OF VARCHAR2(3);
        l_publish t_publish:=t_publish('YES','NO');
        l_publish_html LONG;
        nb PLS_INTEGER:=0;
    BEGIN
        FOR C IN (SELECT a.id,
                   c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                   a.nb_assets,
                   a.title, 
                   a.excerpt,
                   wa.publish,
                   wa.navigation_label,
                   wa.page_title,
                   wa.page_description,
                   a.word_count,
                   a.editor,
                   NVL(a.updated_date, a.created_date) updated_date,
                   wa.display_order display_order
              FROM article a, website_article wa, asset c
             WHERE wa.website_id=pWebsiteId
               AND a.id=wa.article_id
               AND a.id=NVL(pArticleId,a.id)
               AND a.cover_asset_id=c.id(+)
             ORDER BY display_order)
        LOOP
            nb:=nb+1;
            l_publish_html:=NULL;
            FOR i IN 1..l_publish.COUNT LOOP
            l_publish_html:=l_publish_html ||
                '<div>
                    <input type="radio" data-column="website_article.publish" data-id="' || pWebsiteId || ',' || C.id || '" id="publish-' || C.id || '" name="publish-' || C.id || '" value="' || l_publish(i) || '"' ||
                    CASE WHEN l_publish(i)=C.publish THEN ' checked' END || '>
                    </input> <label for="publish-' || C.id || '">' || l_publish(i) || '</label>
                </div>';
            END LOOP;

            l_clob:=l_clob || TO_CLOB('
            <li class="card" tabindex="0" data-id="' || C.id || '">
                <div class="button-container">
                    <div class="dropdown">
                        <button type="button" class="show-dropdown">&blacktriangledown;</button>
                        <ul class="dropdown-items">
                            <li>
                                <button type="button" class="with-icon upload-media">
                                    <svg class="icon"><use href="#cloud-arrow-up"></use></svg>
                                Upload Media
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon show-gallery">
                                    <svg class="icon"><use href="#photo-film"></use></svg>
                                Media Gallery
                                </button>
                            </li>' || 
                            CASE WHEN C.editor IS NULL THEN '
                                <button type="button" class="with-icon edit-text">
                                    <svg class="icon"><use href="#pen-to-square"></use></svg>
                                Edit Text
                                </button>
                            </li>' ELSE '
                            <li>
                                <button type="button" class="with-icon edit-codepen" data-column="article.body_html">
                                    <svg class="icon"><use href="#codepen"></use></svg>
                                Edit in Codepen
                                </button>
                            </li>'
                            END || '
                            <li>
                                <button type="button" class="with-icon upload-codepen" data-column="article.body_html">
                                    <svg class="icon"><use href="#upload"></use></svg>
                                Upload Codepen Zip
                                </button>
                            </li>' ||
                            CASE WHEN nb>1 THEN '
                            <li>
                                <button type="button" class="with-icon edit-field" data-column="website_article.navigation_label">
                                    <svg class="icon"><use href="#list"></use></svg>
                                Navigation Label
                                </button>
                            </li>'
                            END || '
                            <li>
                                <button type="button" class="with-icon edit-field" data-column="website_article.page_title">
                                    <svg class="icon"><use href="#searchengin"></use></svg>
                                Page Title (SEO)
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon edit-field" data-column="website_article.page_description">
                                    <svg class="icon"><use href="#searchengin"></use></svg>
                                Page Description (SEO)
                                </button>
                            </li>
                            <li>
                                <hr>
                            </li>
                            <li>
                                <button type="button" class="with-icon delete" data-table="website_article">
                                    <svg class="icon"><use href="#delete"></use></svg>
                                Delete
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>' ||
                CASE WHEN NVL(C.nb_assets,0)=0
                    THEN '<button type="button" class="no-media upload-media">UPLOAD MEDIA</button>' 
                    ELSE '<img' || CASE WHEN C.format='svg' THEN ' style="object-fit:scale-down"' END || ' data-src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">' 
                END ||
                CASE WHEN COALESCE(C.title, C.excerpt) IS NULL 
                    THEN '<button type="button" class="no-media edit-text">CREATE TEXT</button>'
                    ELSE '<p class="title edit-text">' || NVL(C.title, C.excerpt) || '</p> ' 
                END
                || buildRadioWrapper('website_article.publish',l_publish_html, pCanUsePopover)
                || '   
                <footer class="button-container"><div><span class="word-count">' || NVL(C.word_count,0) || ' words' || '</span> | <span class="nb-assets">' || NVL(C.nb_assets,0) 
                || ' media</span></div><span class="updated-date">' || TO_CHAR(C.updated_date AT TIME ZONE pTimezone, 'fmdd Mon yyyy, hh24:fmmi')  || '</span></footer>
            </li>');
        END LOOP;
        RETURN l_clob;
    END;

    /*
     **  Build authenticated page
     */
    FUNCTION buildAuthPage RETURN CLOB IS
        l_clob CLOB;
        l_user_name users.name%type;
        l_templates CLOB;
        l_template_html LONG;
        l_font_html LONG;
        l_edit_websites CLOB;
        l_dns_zones CLOB;
        l_domain_dropdown LONG;
        l_printed_separator BOOLEAN:=FALSE;

        TYPE t_domain IS RECORD (
            id                      website.id%type,
            domain_name             website.domain_name%type,
            template                website.template%type,
            font                    website.font%type,
            favicon_url             website.favicon_url%type,
            contact_email           website.contact_email%type,
            css                     website.css%type,
            javascript              website.javascript%type,
            netlify_site_id         website.netlify_site_id%type,
            netlify_site_id_custom  website.netlify_site_id%type
        );
        TYPE tt_domain IS TABLE OF t_domain;
        l_domains tt_domain;  
        l_session_data session_data_rt;
    BEGIN
        l_session_data:=getSessionData();

        l_clob:= TO_CLOB(pck_icons.g_icons_svg);

        /* Construct the navigation header section */
        l_clob:=l_clob || TO_CLOB('
        <nav>
            <div class="dropdown">
                <span>' || apex_application.g_user || '</span>
                <button type="button" class="show-dropdown">&blacktriangledown;</button>
                <ul class="dropdown-items">                    
                    <li class="api-keys">
                        <button type="button" class="with-icon">
                            <svg class="icon">
                                <use href="#keys"></use>
                            </svg>
                            API Keys
                        </button>
                    </li>
                    <li class="session-log">
                        <button type="button" class="with-icon session-log">
                            <svg class="icon">
                                <use href="#list"></use>
                            </svg>
                            Session Log
                        </button>
                    </li>
                    <li class="signout">
                        <button type="button" class="with-icon">
                            <svg class="icon">
                                <use href="#signout"></use>
                            </svg>
                            Log Out
                        </button>
                    </li>      
                </ul>
            </div>
        </nav>
        <div class="editor" aria-hidden="true" tabindex="-1">
            <div>
                <button type="button" class="close-editor">&times;</button>
            </div>
            <div id="editor"></div>
            <div>
                <span id="word-count"></span>
                <span id="editor-status"></span>
            </div>
        </div>');

        -- should use this to show users available custom domains
        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_dns_zones);

        /* Get templates from Administrator's github DEPLOY repository. Do it now so we can print at least the <nav> in case templates are not defined.
        ** Data returned in variable l_temmplates which we use to build the radio controls later in the code
         */
        --pck_api.callGithubAPI(pUserId=>l_session_data.user_id, pEndpoint=>'contents/TEMPLATES', pMethod=>'GET', pData=>l_templates);

        SELECT w.id, w.domain_name, w.template, w.font, w.favicon_url, w.contact_email, w.css, w.javascript, w.netlify_site_id, w.netlify_site_id_custom
          BULK COLLECT INTO l_domains
          FROM website w
         WHERE w.user_id=l_session_data.user_id
         ORDER BY COALESCE(w.updated_date, w.created_date) DESC;

        IF (l_domains.COUNT=0) THEN
            l_domains.EXTEND(1);
        END IF;

        l_domain_dropdown:='
        <div class="dropdown">
            <button type="button" class="show-dropdown">&blacktriangledown;</button>
            <ul class="dropdown-items">
                <li>
                    <button type="button" class="with-icon new-website">
                        <svg class="icon">
                            <use href="#plus"></use>
                        </svg>
                        NEW WEBSITE
                    </button>
                </li>
                <!--
                <li>
                    <button type="button" class="with-icon copy-website"' || CASE WHEN l_domains(1).id IS NULL THEN ' disabled' END || '>
                        <svg class="icon">
                            <use href="#copy"></use>
                        </svg>
                        COPY WEBSITE
                    </button>
                </li>
                -->';

        FOR i IN 1..l_domains.COUNT LOOP
            IF (l_domains(i).id IS NULL) THEN
                l_domain_dropdown:=l_domain_dropdown ||'<li class="separator"></li>';
                CONTINUE;
            END IF;
            IF NOT (l_printed_separator) THEN
                l_domain_dropdown:=l_domain_dropdown ||'<li class="separator"></li>';
                l_printed_separator:=TRUE;
            END IF;
            l_domain_dropdown:=l_domain_dropdown ||'
                <li>
                    <button type="button" class="with-icon edit-website" data-id="' || l_domains(i).id || '">
                            <svg class="icon">
                                <use href="#pen-to-square"></use>
                            </svg>' ||          
                    l_domains(i).domain_name || '
                    </button>
                </li>';
            IF (i=l_domains.COUNT) THEN
                l_domain_dropdown:=l_domain_dropdown ||'<li class="separator"></li>';
            END IF;
        END LOOP;

        l_domain_dropdown:=l_domain_dropdown ||'
                <li>
                    <button type="button" class="with-icon delete" data-table="website" data-id=' || l_domains(1).id || '>
                        <svg class="icon">
                            <use href="#delete">
                        </svg>
                        DELETE WEBSITE
                    </button>
                </li>
            </ul>
        </div>';

        /* TEMPLATES are directory names and returned as array in alphabetic order */
        /*
        FOR C IN (SELECT name FROM JSON_TABLE(l_templates, '$[*]' COLUMNS (name))) LOOP
            l_template_html:=l_template_html || 
            '<div>
                <input type="radio" data-column="website.template" data-id="' || l_domains(1).id || '" id="template-' || LOWER(C.name) || '" name="template" value="' || C.name || '"' ||
                CASE WHEN l_domains(1).template=C.name THEN ' checked' END || '>
                </input> <label for="template-' || LOWER(C.name) || '">' || C.name || '</label>
            </div>';
        END LOOP;
        */

        /* FONTS are Google font family names */
        /*
        FOR C IN (SELECT name FROM website_font ORDER BY name) LOOP
            l_font_html:=l_font_html || 
            '<div>
                <input type="radio" data-column="website.font" data-id="' || l_domains(1).id || '" id="font-' || LOWER(C.name) || '" name="font" value="' || C.name || '"' ||
                CASE WHEN l_domains(1).font=C.name THEN ' checked' END || '>
                </input> <label for="font-' || LOWER(C.name) || '">' || C.name || '</label>
            </div>';
        END LOOP;
        */

        l_clob:=l_clob || TO_CLOB('
        <form class="website" data-id="' || l_domains(1).id || '">' ||
            buildInputWrapper(l_domains(1).id, 'website.domain_name', l_domains(1).domain_name, l_session_data.canuse_popover, l_domain_dropdown) ||
            --buildRadioWrapper('website.template',l_template_html, l_session_data.canuse_popover) ||
            --buildRadioWrapper('website.font',l_font_html, l_session_data.canuse_popover) ||
            --buildTextareaWrapper(l_domains(1).id, 'website.contact_email', l_domains(1).contact_email, l_session_data.canuse_popover) || 
            '<fieldset class="deploy-buttons">
                <legend>Build & Deploy Website</legend>
                <div>' ||
                buildDeployButtons(l_domains(1).domain_name, l_domains(1).netlify_site_id, l_domains(1).netlify_site_id_custom) ||
                '</div>
            </fieldset>
        </form>
        <form action="https://codepen.io/pen/define" method="POST" target="_blank">
            <input type="hidden" name="data" value="">
        </form>
        <hr>
        <fieldset>
            <legend>CREATE NEW</legend>
            <button type="button" class="cta new-content"' || CASE WHEN l_domains(1).id IS NULL THEN ' disabled' END || '>
                <span style="--content:''\2192''">PAGE</span>
            </button>
            <button type="button" class="cta new-blog"' || CASE WHEN l_domains(1).id IS NULL THEN ' disabled' END || '>
                <span style="--content:''\2192''">BLOG</span>
            </button>
            <button type="button" class="cta new-portfolio"' || CASE WHEN l_domains(1).id IS NULL THEN ' disabled' END || '>
                <span style="--content:''\2192''">PORTFOLIO</span>
            </button>
        </fieldset>
        <nav class="website-nav-menu">' || buildNavLabels(l_domains(1).id) || '
        </nav>
        <div class="cards">
            <div>
                <fieldset>
                    <legend>Codepen Editor</legend>
                    <button type="button" class="cta edit-codepen" data-column="article.body_html">
                        <svg class="icon"><use href="#codepen"></use></svg>
                        Open Editor
                    </button>
                    <button type="button" class="cta upload-codepen" data-column="article.body_html">
                        <svg class="icon"><use href="#upload"></use></svg>
                        Upload Exported Zip
                    </button>
                </fieldset>' 
            || buildTextareaWrapper(l_domains(1).id, 'website_article.page_title', '', l_session_data.canuse_popover) 
            || buildTextareaWrapper(l_domains(1).id, 'website_article.page_description', '', l_session_data.canuse_popover) 
            || '
            </div>
            <div class="page-content">
            </div>
        </div>');
        -- ' || buildWebsiteArticles(l_domains(1).id, l_session_data.canuse_popover, l_session_data.timezone) || '
        l_clob:=l_clob || TO_CLOB('
        <dialog class="popup">
            <div>
                <button type="button" class="close">&times;</button>
                <h2></h2>
                <p></p>
            </div>
        </dialog>
        <dialog class="edit-field">
            <div>
                <button type="button" class="close">&times;</button>
                <div class="content"></div>
                <form method="dialog">
                    <button type="button" class="saveBtn">SAVE</button>
                </form>
            </div>
        </dialog>
        <dialog class="delete-confirm">
            <div>
                <button type="button" class="close">&times;</button>
                <h2></h2>
                <div class="content">
                    <img>
                    <p></p>
                </div>
                <form method="dialog">
                    <button class="confirmBtn">CONFIRM</button>
                </form>
            </div>
        </dialog>
        <dialog class="log">
            <div>
                <div class="content"></div>
                <button type="button" class="close">&times;</button>
            </div>
        </dialog>            
        <dialog class="gallery">
            <div>
                <button type="button" class="close">&times;</button>
                <div class="gallery-container" role="region" aria-label="gallery">
                    <p class="instruction"></p>
                    <ul></ul>
                </div>
                <div class="gallery-overlay">
                    <img src="">
                    <fieldset>
                        <legend><span></span><button class="close-fieldset" type="button">&times;</button></legend>
                        <button type="button" class="dimensions"></button>
                        <button type="button" class="copy-url" disabled>&boxbox;</button>
                        <button type="button" class="dimensions"></button>
                        <button type="button" class="copy-url" disabled>&boxbox;</button>
                        <button type="button" class="dimensions"></button>
                        <button type="button" class="copy-url" disabled>&boxbox;</button>
                    </fieldset>
                    <span class="counter"></span>
                    <button type="button" class="close-fullscreen">&times;</button>
                    <button type="button" class="prev">&lt;</button>
                    <button type="button" class="next">&gt;</button>
                </div>
            </div>
        </dialog>');

        RETURN l_clob;
    END;

    /*
     **  All pages initiated by APEX "Dynamic Content" component.
     **  After that it's Javascript fetch and ORDS all the way
     */
    FUNCTION getPageContent RETURN CLOB IS
        l_clob CLOB;
        l_css_file_urls APEX_APPLICATION_PAGES.css_file_urls%type;
        l_javascript_file_urls APEX_APPLICATION_PAGES.javascript_file_urls%type;
        l_page_css APEX_APPLICATION_STATIC_FILES.file_name%type;
        l_page_js APEX_APPLICATION_STATIC_FILES.file_name%type;
    BEGIN
        SELECT NVL(css_file_urls,' '), NVL(javascript_file_urls,' ')
          INTO l_css_file_urls, l_javascript_file_urls
          FROM APEX_APPLICATION_PAGES 
         WHERE application_id=apex_application.g_flow_id
           AND page_id=apex_application.g_flow_step_id;

        l_page_css:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.css';

        IF (INSTR(l_css_file_urls,l_page_css)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_css,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<style>' || apex_util.blob_to_clob(C.file_content) || '</style>';
            END LOOP;
        END IF;

        CASE apex_application.g_flow_step_id
            WHEN 1 THEN l_clob:=l_clob || buildLoginPage;
            WHEN 2 THEN l_clob:=l_clob || buildAuthPage;
            WHEN 3 THEN l_clob:=l_clob || buildPrivacyPage;
        END CASE;

        l_clob:=l_clob || TO_CLOB('
            <input type="hidden" name="p_flow_id" value="' || apex_application.g_flow_id ||'" id="pFlowId">
            <input type="hidden" name="p_flow_step_id" value="' || apex_application.g_flow_step_id ||'" id="pFlowStepId">
            <input type="hidden" name="p_instance" value="' || APEX_CUSTOM_AUTH.GET_SESSION_ID ||'" id="pInstance">');            

        l_clob:=l_clob || chr(10) || TO_CLOB('
        <script>
            const gRestUrl = "' || getRestUrl() || '";' || CASE WHEN apex_application.g_flow_step_id=2 THEN '
            const gHomeUrl = "' || apex_util.host_url('SCRIPT') || 'home";' END || '
        </script>');

        l_page_js:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.js';

        IF (INSTR(l_javascript_file_urls,l_page_js)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_js,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
            END LOOP;
        END IF;

        l_clob:=l_clob || TO_CLOB('
            <script type="module">
              import {onCLS, onFID, onLCP} from ''https://unpkg.com/web-vitals?module'';
              onCLS(addToVitalsQueue);
              onFID(addToVitalsQueue);
              onLCP(addToVitalsQueue);
            </script>');

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error;
                RAISE;
    END;

    /*
    **  Administrator function to transfer ownership of a specified website and all dependent table rows to a different User 
    */
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type) IS
        l_transfer_from_user_id users.id%type;
        l_transfer_to_user_id users.id%type;
    BEGIN
        SELECT user_id INTO l_transfer_from_user_id FROM website WHERE id=pWebsiteId;
        SELECT id INTO l_transfer_to_user_id FROM users WHERE id=pUserId;

        /* Don't let this happen of any article in the website has been copied to another website */

        UPDATE website 
           SET user_id=l_transfer_to_user_id 
         WHERE id=pWebsiteId AND user_id=l_transfer_from_user_id;

        UPDATE article 
           SET author_user_id=l_transfer_to_user_id 
         WHERE id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE asset 
           SET user_id=l_transfer_to_user_id 
         WHERE article_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE website_article SET user_id=l_transfer_to_user_id 
         WHERE website_id=pWebsiteId AND user_id=l_transfer_from_user_id;

        COMMIT;
    END;

END;
/