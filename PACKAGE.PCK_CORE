CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CORE" AS
    --
    TYPE session_data_rt IS RECORD (
        app_id NUMBER, 
        session_id NUMBER,
        page_id NUMBER,
        maxtouchpoints NUMBER,
        url VARCHAR2(100),
        timezone VARCHAR2(30),
        canuse_popover BOOLEAN,
        canuse_eyedropper BOOLEAN,
        user_id NUMBER,
        valid BOOLEAN
    );
    --
    TYPE fluid_type_rt IS RECORD(
        property VARCHAR2(30),
        value VARCHAR2(200)
    );
    TYPE fluid_type_t IS TABLE OF fluid_type_rt;
    --
    FUNCTION buildBlogList( pEnv IN VARCHAR2, pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pClasses IN VARCHAR2 DEFAULT NULL) RETURN CLOB;
    --
    FUNCTION buildCssRoot(pWebsiteId IN website.id%type, pApplicationId IN NUMBER, pDeploy IN BOOLEAN DEFAULT FALSE) RETURN VARCHAR2;
    --
    FUNCTION buildMediaList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pIncludeLinks  IN BOOLEAN DEFAULT TRUE) RETURN CLOB;
    --
    FUNCTION buildProductList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type) RETURN CLOB;
    --
    FUNCTION getFluidTypes(pMinFontSize IN NUMBER, pMinWidthPx IN NUMBER, pMinScale IN NUMBER, pMaxFontSize IN NUMBER, pMaxWidthPx IN NUMBER, pMaxScale IN NUMBER) RETURN fluid_type_t;
    --
    FUNCTION buildNavLabel(pId IN INTEGER, pLabel IN VARCHAR2, pClassName IN VARCHAR2, pAttrName IN VARCHAR2 DEFAULT NULL, pAttrValue IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION buildPageNav(pWebsiteId IN website.id%type) RETURN CLOB;
    --
    FUNCTION buildPushableButton(pClassName IN VARCHAR2, pHTMLSymbol IN VARCHAR2 DEFAULT NULL, pButtonText IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION getPageContent RETURN CLOB;
    --
    FUNCTION getRestUrl RETURN VARCHAR2;
    --
    FUNCTION getSessionData(pWebsiteId IN website.id%type DEFAULT NULL) RETURN session_data_rt;
    --
    PROCEDURE loadGoogleFonts;
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error;
    --
    PROCEDURE log_error(pStatus OUT NUMBER);
    --
    FUNCTION makeWebsiteListItem(pId IN website.id%type, pDomainName IN website.domain_name%type, pEnv IN VARCHAR2) RETURN VARCHAR2;
    --
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type);
    --
    FUNCTION password RETURN VARCHAR2;
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CORE" AS

    FUNCTION getFluidTypes(pMinFontSize IN NUMBER, pMinWidthPx IN NUMBER, pMinScale IN NUMBER, pMaxFontSize IN NUMBER, pMaxWidthPx IN NUMBER, pMaxScale IN NUMBER) RETURN fluid_type_t IS
        l_fluid_type fluid_type_t:=fluid_type_t();
        l_min_font NUMBER;
        l_max_font NUMBER;
        l_min_width NUMBER;
        l_max_width NUMBER;
        l_slope NUMBER;
        l_intersect NUMBER;
        l_clamp VARCHAR2(200);

        TYPE tt_spaces IS RECORD(dimension VARCHAR2(3), multiplier NUMBER);
        TYPE t_spaces IS TABLE OF tt_spaces INDEX BY PLS_INTEGER;
        l_spaces t_spaces:=t_spaces(
            1=>tt_spaces('3xs',0.25), 
            2=>tt_spaces('2xs',0.5), 
            3=>tt_spaces('xs',0.75), 
            4=>tt_spaces('s',1), 
            5=>tt_spaces('m',1.5), 
            6=>tt_spaces('l',2), 
            7=>tt_spaces('xl',3), 
            8=>tt_spaces('2xl',4), 
            9=>tt_spaces('3xl',6)
        );

        FUNCTION round4dp(pNumber IN NUMBER) RETURN VARCHAR2 IS
            l_number NUMBER;
        BEGIN
            l_number:=ROUND(pNumber,4);
            IF (MOD(l_number,1)=0) THEN /* integer */
                RETURN (TO_CHAR(l_number));
            ELSE
                RETURN(LTRIM(RTRIM(TO_CHAR(ROUND(pNumber,4),'fm90.0000'),'0')));
            END IF;
        END;

        PROCEDURE addFluidType(pProperty IN VARCHAR2) IS 
        BEGIN
            l_fluid_type.EXTEND;
            l_fluid_type(l_fluid_type.LAST).property:=pProperty;
            l_clamp:='clamp(' || round4dp(l_min_font) || 'rem,' || round4dp(l_intersect) || 'rem + ' || round4dp(l_slope * 100) || 'cqi,' || round4dp(l_max_font) || 'rem)';
            l_fluid_type(l_fluid_type.LAST).value:=l_clamp;
        END;

    BEGIN
        l_min_width:=pMinWidthPx/16; 
        l_max_width:=pMaxWidthPx/16;
        FOR i IN -2 .. 6 LOOP
            IF (i<0) THEN
                l_min_font:=pMinFontSize/(pMinScale**ABS(i));
                l_max_font:=pMaxFontSize/(pMaxScale**ABS(i));
            ELSE
                l_min_font:=pMinFontSize*(pMinScale**i);
                l_max_font:=pMaxFontSize*(pMaxScale**i);
            END IF;
            l_slope:=(l_max_font - l_min_font) / (l_max_width - l_min_width);
            l_intersect:= -l_min_width * l_slope + l_min_font;
            addFluidType('--step-' || i);
        END LOOP;

        FOR i IN 1..l_spaces.COUNT LOOP
            l_min_font:=pMinFontSize*l_spaces(i).multiplier;
            l_max_font:=pMaxFontSize*l_spaces(i).multiplier;
            l_slope:=(l_max_font - l_min_font) / (l_max_width - l_min_width);
            l_intersect:= -l_min_width * l_slope + l_min_font;
            addFluidType('--space-' || l_spaces(i).dimension);
        END LOOP;

        RETURN l_fluid_type;
    END;

    /*
    ** GET EMAIL (SUB) FROM JWT
    */
    FUNCTION getEmailFromToken(pToken IN VARCHAR2) RETURN VARCHAR2 IS
        l_payload varchar2(500);
        l_decoded varchar2(500);
        pos1 PLS_INTEGER;
        pos2 PLS_INTEGER;
        l_email users.email%type;
    BEGIN
        /* Get subscriber, i.e. email, from payload portion of the bearer token */
        pos1:=INSTR(pToken,'.',1);
        pos2:=INSTR(pToken,'.',-1);
        l_payload:=SUBSTR(pToken,pos1+1,pos2-pos1-1);
        l_decoded:=utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw(l_payload)));
        SELECT sub INTO l_email FROM JSON_TABLE(l_decoded, '$' COLUMNS(sub));
        RETURN (l_email);
    END;

    /*
    ** MIGRATING API FROM APEX SESSION TO CONVENTIONAL OAUTH2 USING JWT
    */
    FUNCTION getSessionData(pWebsiteId IN website.id%type) RETURN session_data_rt IS
        l_apex_session VARCHAR2(50);
        l_parts apex_t_varchar2;
        l_session_data session_data_rt;
        l_token APEX_JWT.T_TOKEN;
        l_token_object APEX_JSON.T_VALUES;
        l_email users.email%type;
        l_jwt_enc_key user_ords_clients.client_secret%type;
        n PLS_INTEGER;
    BEGIN
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');
        IF (l_apex_session IS NULL) THEN
            l_session_data.app_id:=apex_application.g_flow_id;
            l_session_data.session_id:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
            l_session_data.page_id:=apex_application.g_flow_step_id;
        ELSE        
            l_parts:=apex_string.split(l_apex_session,',');
            l_session_data.app_id:=l_parts(1);
            l_session_data.session_id:=l_parts(2);
            l_session_data.page_id:=l_parts(3);
        END IF;

        FOR C IN (SELECT timezone, supports_popover, supports_eyedropper FROM session_data WHERE session_id=l_session_data.session_id) LOOP
            l_session_data.timezone:=C.timezone;
            l_session_data.canuse_popover:=CASE WHEN C.supports_popover='true' THEN TRUE ELSE FALSE END;
            l_session_data.canuse_eyedropper:=CASE WHEN C.supports_eyedropper='true' THEN TRUE ELSE FALSE END;
        END LOOP;

        FOR C IN (
            SELECT u.id
              FROM apex_workspace_sessions s, users u
             WHERE s.apex_session_id=l_session_data.session_id
               AND s.user_name=u.email )
        LOOP
            l_session_data.user_id:=C.id;
        END LOOP;

        IF (l_session_data.user_id IS NULL AND l_session_data.page_id=2) THEN
            RAISE_APPLICATION_ERROR(-20000,'YOUR SESSION HAS EXPIRED');
        END IF;

        RETURN l_session_data;

        EXCEPTION WHEN VALUE_ERROR THEN RETURN l_session_data;
    END;

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg);
        COMMIT;
    END;

    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg);
        COMMIT;
    END;

    /*
    **  Log ORACLE exceptions.
    */
    PROCEDURE log_error IS
        l_depth PLS_INTEGER;
        l_stack LONG;
        l_apex_session VARCHAR2(50);
    BEGIN
        ROLLBACK;

        /* Format call stack which includes procedure names */
        
        l_depth:=UTL_CALL_STACK.backtrace_depth;
        l_stack:='CALL STACK'||chr(10);
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'Line: ' || UTL_CALL_STACK.backtrace_line(i) || ' ' || UTL_CALL_STACK.backtrace_unit(i) || chr(10); --UTL_CALL_STACK.owner(i)||'.'||UTL_CALL_STACK.concatenate_subprogram(UTL_CALL_STACK.subprogram(i)) || chr(10);
        END LOOP;
        

        /* Format error backtrace */
        l_stack:=l_stack || 'ERROR BACKTRACE'||chr(10);
        l_depth := UTL_CALL_STACK.error_depth;
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'ORA-' || UTL_CALL_STACK.error_number(i) || ' - ' || UTL_CALL_STACK.error_msg(i) || chr(10);
        END LOOP;

        log(l_stack);

        /* If invoked in Apex session return sqlcode, sqlerrm in json payload */
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');   

        apex_json.open_object; 
        apex_json.write('success', FALSE); 
        apex_json.write('sqlcode', SQLCODE); 
        apex_json.write('sqlerrm', SQLERRM); 
        apex_json.close_object;

        EXCEPTION WHEN VALUE_ERROR THEN NULL;
    END;

    /*
    **  LOG EXCEPTION RETURNING HTTP STATUS CODE
    */
    PROCEDURE log_error(pStatus OUT NUMBER) IS
        l_depth PLS_INTEGER;
        l_stack LONG;
    BEGIN
        ROLLBACK;

        /* Format call stack which includes procedure names */
        l_depth:=UTL_CALL_STACK.backtrace_depth;
        l_stack:='CALL STACK'||chr(10);
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'Line: ' || UTL_CALL_STACK.backtrace_line(i) || ' ' || UTL_CALL_STACK.backtrace_unit(i) || chr(10); --UTL_CALL_STACK.owner(i)||'.'||UTL_CALL_STACK.concatenate_subprogram(UTL_CALL_STACK.subprogram(i)) || chr(10);
        END LOOP;

        /* Format error backtrace */
        l_stack:=l_stack || 'ERROR BACKTRACE'||chr(10);
        l_depth := UTL_CALL_STACK.error_depth;
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'ORA-' || UTL_CALL_STACK.error_number(i) || ' - ' || UTL_CALL_STACK.error_msg(i) || chr(10);
        END LOOP;

        log(l_stack);

        apex_json.open_object; 
        apex_json.write('success', FALSE); 
        apex_json.write('sqlcode', SQLCODE); 
        apex_json.write('sqlerrm', SQLERRM); 
        apex_json.close_object;

        pStatus:=CASE WHEN SQLCODE=-20000 THEN 401 ELSE 400 END;
    END;

    /*
    ** Return RESTful API url
    */
    FUNCTION getRestUrl RETURN VARCHAR2 IS
        l_rest_url VARCHAR2(200);
    BEGIN
        SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix
          INTO l_rest_url
          FROM user_ords_schemas s, user_ords_modules m
         WHERE s.parsing_schema=sys_context('userenv','current_schema')
           AND m.name='public';

        RETURN (l_rest_url);
    END;

    /* 
    ** Copy "adfreesites.edu" for new users
    */ 
    PROCEDURE createStarterWebsite(pUserId IN users.id%type) IS
        l_domain_name website.domain_name%type;
        l_username users.name%type;
        l_email users.email%type;
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_netlify_site_id website.netlify_site_id%type;
        l_website_id website.id%type;
        l_parent_id article.id%type;
        l_site_created BOOLEAN:=FALSE;
        n PLS_INTEGER:=0;
    BEGIN
        SELECT REPLACE(SUBSTR(email,1,INSTR(email,'@')-1),'.','-'), name, email INTO l_domain_name, l_username, l_email FROM users WHERE id=pUserId;

        l_json:=new JSON_OBJECT_T;
        WHILE TRUE LOOP
            EXIT WHEN n>2;
            l_json.put('name', l_domain_name);
            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites', pMethod=>'POST', pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
            EXIT WHEN apex_web_service.g_status_code<>422;
            n:=n+1;
            l_domain_name:=l_domain_name||TO_CHAR(n);
        END LOOP;
        SELECT site_id INTO l_netlify_site_id FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));

        SELECT id INTO l_website_id FROM website WHERE domain_name='jordanbyrne.com';
 
        INSERT INTO website(id, domain_name, user_id, contact_email, netlify_site_id,  updated_date, font, max_width, color_text, color_background, color_primary, min_font_size, min_width_px, min_scale, max_font_size, max_width_px, max_scale)
        SELECT seq_website.nextval, l_domain_name, pUserId, l_email, l_netlify_site_id, current_timestamp, font, max_width, color_text, color_background, color_primary, min_font_size, min_width_px, min_scale, max_font_size, max_width_px, max_scale
          FROM website 
         WHERE id=l_website_id;

        FOR C IN (
            SELECT article_id, display_order, created_date, navigation_label, updated_date, user_id, contact_form, collection_type, collection_date_format, page_title, page_description
              FROM website_article 
             WHERE website_id=l_website_id) 
        LOOP
            INSERT INTO article(id, title, excerpt, author_user_id, word_count, updated_date, body_html, nb_assets, display_order)
            SELECT seq_article.nextval, title, excerpt, pUserId, word_count, current_timestamp, body_html, nb_assets, display_order
              FROM article
             WHERE id=C.article_id;
            
            INSERT INTO website_article(website_id, article_id, display_order, navigation_label, updated_date, user_id, contact_form, collection_type, collection_date_format, page_title, page_description)
            VALUES (seq_website.currval, seq_article.currval, C.display_order, C.navigation_label, current_timestamp, pUserid, C.contact_form, C.collection_type, C.collection_date_format, C.page_title, C.page_description);

            IF (C.collection_type<>'N/A') THEN
                l_parent_id:=seq_article.currval;
                FOR C1 IN (SELECT title, excerpt, word_count, updated_date, body_html, nb_assets, display_order
                             FROM article
                            WHERE parent_id=C.article_id)
                LOOP
                    INSERT INTO article(id, parent_id, title, author_user_id, excerpt, word_count, updated_date, body_html, nb_assets, display_order)
                    VALUES (seq_article.nextval, l_parent_id, C1.title, pUserId, C1.excerpt, C1.word_count, current_timestamp, C1.body_html, C1.nb_assets, C1.display_order);
                END LOOP;
            END IF;
        END LOOP;
    END;

    /* 
    ** Build page CSS
    */ 
    FUNCTION buildCssRoot(pWebsiteId IN website.id%type, pApplicationId IN NUMBER, pDeploy IN BOOLEAN DEFAULT FALSE) RETURN VARCHAR2 IS
        l_fluid_types fluid_type_t;

        TYPE t_rgb_arr IS VARRAY(3) OF PLS_INTEGER;
        l_rgb_arr t_rgb_arr:=t_rgb_arr();

        TYPE t_rgb_tint_arr IS VARRAY(3) OF VARCHAR2(6);
        l_rgb_light VARCHAR2(6);
        l_rgb_lighter VARCHAR2(6);
        l_rgb_lightest VARCHAR2(6);
        
        l_css_file apex_application_static_files.file_name%type;
        l_root_css LONG;
        l_deploy_css CLOB;
    BEGIN
        FOR C IN (SELECT w.font, w.max_width, w.color_text, w.color_background, w.color_primary, w.css,
                         w.min_font_size, w.min_width_px, w.min_scale, w.max_font_size, w.max_width_px, w.max_scale, w.img_border_radius, g.category
                    FROM website w, google_font g
                   WHERE w.id=pWebsiteId
                     AND w.font=g.family)
        LOOP
            /* Build design tokens */

            l_fluid_types:=getFluidTypes(C.min_font_size, C.min_width_px, C.min_scale, C.max_font_size, C.max_width_px, C.max_scale);
            
            l_root_css:=
            ':root {';
            FOR i IN 1..l_fluid_types.COUNT LOOP
                l_root_css:=l_root_css || l_fluid_types(i).property || ': ' || l_fluid_types(i).value || ';';
            END LOOP;
            l_root_css:=l_root_css ||
            '--font-family: "' || C.font || '", ' || CASE WHEN C.category='handwriting' THEN 'cursive' ELSE C.category END || ';'||
            '--max-width: ' || C.max_width || ';' || 
            '--img-border-radius: ' || C.img_border_radius || ';' || 
            '--color-text: ' || C.color_text || ';' || 
            '--color-background: ' || C.color_background || ';' || 
            '--color-primary: ' || C.color_primary || ';';

            FOR i IN 1..3 LOOP
                l_rgb_arr.EXTEND;
                l_rgb_arr(l_rgb_arr.LAST):=TO_NUMBER(SUBSTR(SUBSTR(C.color_primary,2),i+(i-1),2),'xx');
            END LOOP;

            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_light:=l_rgb_light|| TO_CHAR(l_rgb_arr(i) + (0.25 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;
            
            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_lighter:=l_rgb_lighter|| TO_CHAR(l_rgb_arr(i) + (0.5 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;

            FOR i IN l_rgb_arr.FIRST .. l_rgb_arr.LAST LOOP
                l_rgb_lightest:=l_rgb_lightest|| TO_CHAR(l_rgb_arr(i) + (0.75 * (255 - l_rgb_arr(i))),'fmxx');
            END LOOP;

            l_root_css:=l_root_css || 
            '--color-primary-light: #' || l_rgb_light || ';' ||
            '--color-primary-lighter: #' || l_rgb_lighter || ';' ||
            '--color-primary-lightest: #' || l_rgb_lightest || ';' || 
            '}';

            IF (C.css IS NULL) THEN
                 IF (pDeploy) THEN
                    l_css_file:='deploy.min.css'; -- deploy minimised css 
                ELSE
                    l_css_file:='deploy.css'; -- retain format and comments
                END IF;
                SELECT apex_util.blob_to_clob(file_content)
                  INTO l_deploy_css
                  FROM apex_application_static_files 
                 WHERE application_id=pApplicationId
                   AND file_name=l_css_file;
            ELSE
                l_deploy_css:=C.css;
            END IF;
        END LOOP;

        RETURN (l_root_css || l_deploy_css);
    END;

    /*
    ** Construct index of Blog entries
    */
    FUNCTION buildBlogList(pEnv IN VARCHAR2, pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pClasses IN VARCHAR2) RETURN CLOB IS
        l_html CLOB;
        l_html_list CLOB;
        l_featured article.featured%type;
        l_classes VARCHAR2(100);
        l_path website_article.navigation_label%type;
        l_href VARCHAR2(200);
        pos PLS_INTEGER;
        MAX_BLOGS CONSTANT PLS_INTEGER:=12;
    BEGIN
        IF (INSTR(pClasses,'featured')>0) THEN
            l_featured:='YES';
            l_classes:='featured ';
        END IF;

        SELECT apex_string_util.get_slug(navigation_label) INTO l_path FROM website_article WHERE website_id=pWebsiteId AND article_id=pArticleId;

        /* Build list of all title in title order */
        IF (l_featured is NULL) THEN
            FOR C IN (
                WITH ph AS (
                  SELECT a.id, COUNT(DISTINCT p.ip_address) nb_distinct_visitors
                    FROM article a, page_hit p
                   WHERE a.parent_id=pArticleId
                     AND a.id=p.article_id
                     AND p.url='spiritresilience.com'
                   GROUP BY a.id
                )
                SELECT COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY ph.nb_distinct_visitors DESC NULLS LAST) rn,
                             a.title, DECODE(pEnv,'TEST',a.deployed_date,'LIVE',a.deployed_date_custom) deployed_date
                        FROM article a, ph
                       WHERE a.parent_id=pArticleId
                         AND a.id=ph.id(+)
                       ORDER BY 2, a.title ) 
            LOOP
                IF (C.nb<MAX_BLOGS) THEN
                    EXIT;
                END IF;
                IF (C.rn=1) THEN
                    l_html_list:=
                    '<details>' ||
                        '<summary>Show titles in order of popularity</summary>' ||
                        '<article class="grid" data-grid-variant="1">';
                END IF;
                l_html_list:=l_html_list || 
                            '<span>' || TO_CHAR(NVL(C.deployed_date,current_timestamp),'fmMon dd, yyyy') || '</span>';
                l_href:='/' || l_path || '/' || apex_string_util.get_slug(C.title);
                l_html_list:=l_html_list || 
                                '<a href="' || l_href || '">' || C.title || '</a>';
                IF (C.rn=C.nb) THEN
                    l_html:=l_html || 
                        '</article>' ||
                    '</details>';
                END IF;    
            END LOOP;
        END IF;

        FOR C IN (SELECT COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY null) rn,
                            wa.collection_date_format, art.body_html, art.title, art.excerpt, DECODE(pEnv,'TEST',art.deployed_date,'LIVE',art.deployed_date_custom) deployed_date, art.word_count, art.cover_icon_id, ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width, ass.height, ass.alt_text
                    FROM website_article wa, article art, asset ass
                   WHERE wa.article_id=pArticleId
                     AND art.parent_id=wa.article_id
                     AND art.featured=NVL(l_featured,art.featured)
                     AND ass.id(+)=art.cover_asset_id
                   ORDER BY deployed_date DESC ) 
        LOOP
            IF (C.rn=1) THEN
                l_html:=l_html || '<ol class="' || l_classes || ' grid grid__auto_fit' || '" role="list" >';
            END IF;
            l_html:=l_html || 
            '<li class="card">';
            IF (C.cld_cloud_name IS NOT NULL) THEN
                l_html:=l_html || 
                '<img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '" width="'|| C.width || '" height="' || C.height || '" alt="' || C.alt_text || '">';
            ELSIF (C.cover_icon_id IS NOT NULL) THEN
                l_html:=l_html || 
                '<svg class="icon" aria-hidden="true" focusable="false"><use href="#' || C.cover_icon_id || '"></use></svg>';
            END IF;
            l_href:='/' || l_path || '/' || apex_string_util.get_slug(C.title);
            l_html:=l_html || 
                '<div class="flow">' ||
                    '<h2>' ||
                        '<a href="' || l_href || '">' || C.title || '</a>' ||
                    '</h2>' ||
                    '<p>' || CASE WHEN LENGTH(C.excerpt)<160 THEN C.excerpt ELSE SUBSTR(C.excerpt,1,INSTR(C.excerpt,' ',-1)) || '...' END  || '</p>' ||
                '</div>' ||
                '<small>' ||
                    CASE WHEN NVL(C.collection_date_format,'NONE')<>'NONE' THEN
                    '<span>' || TO_CHAR(NVL(C.deployed_date,current_timestamp),'fm'||C.collection_date_format) || '</span>'
                    END ||
                    '<span>' || C.word_count || ' words</span>' ||
                '</small>' ||
            '</li>';
            IF (C.rn=LEAST(MAX_BLOGS,C.nb)) THEN
                l_html:=l_html || '</ol>';
                EXIT;
            END IF;
        END LOOP;
        RETURN (l_html_list || l_html);
    END;

    /*
    ** Construct index of Media entries
    ** pIncludeLinks = FALSE for building MEDIA collection type landing page without links (Codepen)
    */
    FUNCTION buildMediaList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pIncludeLinks IN BOOLEAN) RETURN CLOB IS
        l_html CLOB;
        l_path website_article.navigation_label%type;
        l_href VARCHAR2(200);
    BEGIN
        IF (pIncludeLinks) THEN
            SELECT apex_string_util.get_slug(navigation_label) INTO l_path FROM website_article WHERE website_id=pWebsiteId AND article_id=pArticleId;
        ELSE
            l_href:='#';
        END IF;
        l_html:=l_html || '<ol role="list" class="gallery-list">';
        FOR C IN (SELECT art.title, ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width
                    FROM article art, asset ass
                   WHERE art.parent_id=pArticleId
                     AND ass.id=art.cover_asset_id
                   ORDER BY art.display_order NULLS FIRST, art.updated_date DESC ) 
        LOOP
            IF (pIncludeLinks) THEN
                l_href:='/' || l_path || '/' || apex_string_util.get_slug(C.title);
            END IF;
            l_html:=l_html ||
            '<li>
                <a href="' || l_href || '"><img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '"></a>
            </li>';
        END LOOP;
        l_html:=l_html || '</ol>';

        RETURN (l_html);
    END;

    /*
    ** Construct list of Products including image
    */
    FUNCTION buildProductList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type) RETURN CLOB IS
        l_html CLOB;
        l_description VARCHAR2(250);
        pos PLS_INTEGER;
    BEGIN
        l_html:='<!--CMS START-->';
        l_html:=l_html || '<ol class="product">';

        FOR C IN (SELECT w.price_currency, art.id, art.body_html, art.title, ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width, art.product_price
                    FROM article art, asset ass, website w
                   WHERE art.parent_id=pArticleId
                     AND ass.id=art.cover_asset_id
                     AND w.id=pWebsiteId
                     ORDER BY art.display_order) 
        LOOP
            pos:=dbms_lob.instr(C.body_html,'</h1>',1,1)+5;
            l_description:=SUBSTR(dbms_lob.substr(C.body_html,dbms_lob.getlength(C.body_html) - pos, pos), 1, 250);
            l_description:=REPLACE(RTRIM(LTRIM(l_description,'<p>'),'</p>'),'&nbsp;',null);
            l_html:=l_html || 
            '<li>
                <img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
                <h4>' || C.title || '</h4>
                <p>' ||  l_description || '</p>
                <button type="button" class="buy" data-name="' || C.title|| '" data-price="' || C.product_price || '" data-currency="' || C.price_currency|| '">' || 
                    TO_CHAR(C.product_price,'fm99999.90') || ' ' ||  C.price_currency || '<span></span></button>
            </li>';
        END LOOP;
        l_html:=l_html || '</ol>';
        l_html:=l_html || '<!--CMS END-->';
        RETURN (l_html);
    END;

    /*
    ** the miserable privacy policy - Faceook insists that it can be accessed by an application url
    */
    FUNCTION buildPrivacyPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT body_html FROM article WHERE id=19124)   
        LOOP
            RETURN C.body_html;
        END LOOP;
    END;

    /*
     **  Login page
     */
    FUNCTION buildLoginPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT id FROM article WHERE id=19124)  -- the miserable privacy policy
        LOOP
            RETURN TO_CLOB('
                <ul class="container">
                    <li class="red">' || pck_icons.g_oracle_svg || '</li>
                    <li class="grey login">
                        <a class="button" href="' || apex_util.host_url('SCRIPT') || 'f?p=101:2:' || APEX_CUSTOM_AUTH.GET_SESSION_ID || ':APEX_AUTHENTICATION=Google">' || pck_icons.g_google_svg ||'Login w/ Google</a>
                        <!--<button data-id="' || C.id || '">Priv</button>-->
                    </li>
                    <li class="grey">' || pck_icons.g_netlify_svg || '</li>
                    <li class="grey">' || pck_icons.g_cloudinary_svg || '</li>
                    <li class="yellow">ALWAYS FREE</li>
                    <li class="grey"></li>
                    <li class="blue"></li>
                    <li class="grey"></li>
                    <li class="grey"></li>
                </ul>
                <dialog>
                    <div>
                        <div></div> <!-- empty div to make grid -->
                        <div class="content"></div>
                        <button type="button" class="close">&times;</button>
                    </div>
                </dialog>');
        END LOOP;
    END;

    FUNCTION buildTopNav(pIsAdmin IN INTEGER) RETURN VARCHAR2 IS
    BEGIN
        RETURN (
        '<nav class="top-nav">
            <div class="dropdown">
                <span>' || apex_application.g_user || '</span>
                <button type="button" class="show-dropdown" aria-haspopup="true" aria-expanded="false" aria-controls="topnav-menu">&blacktriangledown;</button>
                <ul class="dropdown-items" id="topnav-menu" role="menu" aria-hidden="true">                    
                    <li class="api-keys" role="menuitem">
                        <button type="button" class="with-icon api-keys">
                            &#128273;
                            API Keys
                        </button>
                    </li>
                    <li class="account-usage" role="menuitem">
                        <button type="button" class="with-icon account-usage">
                           %
                            Account Usage
                        </button>
                    </li>
                    <li class="session-log" role="menuitem">
                        <button type="button" class="with-icon session-log">
                            &#9776;
                            Technical Log
                        </button>
                    </li>
                    <li class="github-repo" role="menuitem">
                        <a class="with-icon github-repo" href="https://github.com/xsf3190/oracle-to-github-backup" target="a_blank">
                           &#9733; Github Backup
                        </a>
                    </li>' || 
                    CASE WHEN pIsAdmin<>1 THEN
                    '<li class="delete-user" role="menuitem">
                        <button type="button" class="with-icon delete-user">
                            &#128686;
                            Delete My Data
                        </button>
                    </li>'
                    END ||
                    '<li class="signout" role="menuitem">
                        <button type="button" class="with-icon">
                            &#8676;
                            Log Out
                        </button>
                    </li>  
                </ul>
            </div>
        </nav>');
    END;

    /*
    **  Vuild Website Page navigation label with supporting elements
    */
    FUNCTION buildNavLabel(pId IN INTEGER, pLabel IN VARCHAR2, pClassName IN VARCHAR2, pAttrName IN VARCHAR2 DEFAULT NULL, pAttrValue IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
        l_html LONG;
    BEGIN
        l_html:=
        '<div data-id="' || pId || '">
            <button type="button" class="' || pClassName || '" title="Page options">
                &#128397;
            </button>
            <a href="" class="nav-label">' || pLabel || '</a>
            <div class="dropdown">' || CASE WHEN pAttrName IS NOT NULL THEN '<button type="button" class="show-dropdown show-subpages" data-'|| pAttrName || '="' || pAttrValue || '">&blacktriangledown;</button>' END ||
                '<ol class="dropdown-items"></li></ol>
            </div>
        </div>';

        RETURN(l_html);
    END;

    FUNCTION makeWebsiteListItem(pId IN website.id%type, pDomainName IN website.domain_name%type, pEnv IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        RETURN(
        '<li role="menuitem">
            <button type="button" class="edit-website with-icon" data-id="' || pId || '" data-env="' || pEnv || '" data-domain="' || pDomainName || '">' || pDomainName || '<span class="env">' || pEnv || '</span></button>
        </li>');
    END;

    FUNCTION buildWebsiteNav(pUserId IN users.id%type, pSelectedWebsiteId IN OUT website.id%type) RETURN VARCHAR2 IS
        TYPE tt_websites IS RECORD(
            id website.id%type,
            domain_name website.domain_name%type,
            netlify_site_id website.netlify_site_id%type,
            netlify_site_id_custom website.netlify_site_id_custom%type,
            url VARCHAR2(60),
            url_custom VARCHAR2(45));
        TYPE t_websites IS TABLE OF tt_websites INDEX BY pls_integer;
        l_websites t_websites;
        l_website_list LONG;
        l_html LONG;
    BEGIN
        SELECT id, domain_name, netlify_site_id, netlify_site_id_custom, 
                CASE WHEN netlify_last_published IS NOT NULL THEN 'href="https://' || REPLACE(domain_name,'.','-') || '.netlify.app"' END,
                CASE WHEN netlify_last_published_custom IS NOT NULL THEN 'href="https://' || domain_name || '"' END
          BULK COLLECT INTO l_websites
          FROM website
         WHERE user_id=pUserId
         ORDER BY COALESCE(updated_date,created_date) DESC;

        pSelectedWebsiteId:=l_websites(1).id;

        FOR i IN 1..l_websites.COUNT
        LOOP
            l_website_list:=l_website_list || makeWebsiteListItem(l_websites(i).id, l_websites(i).domain_name, 'TEST');
            IF (l_websites(i).netlify_site_id_custom IS NOT NULL) THEN
                l_website_list:=l_website_list || makeWebsiteListItem(l_websites(i).id, l_websites(i).domain_name, 'LIVE');
            END IF;
            IF (i<l_websites.COUNT) THEN
                l_website_list:=l_website_list || '<hr>';
            END IF;
        END LOOP;

        l_html:=
        '<div class="website-nav" data-id="' || l_websites(1).id || '" data-env="TEST">
            <div>
                <button type="button" class="website-options" title="Website options">&#128397;</button>
                <a ' || l_websites(1).url || '" target="a_blank" class="selected">' || l_websites(1).domain_name || '</a>
                <section class="dropdown">
                    <button type="button" class="show-dropdown" aria-haspopup="true" aria-expanded="false" aria-controls="website-dropdown"' || CASE WHEN l_websites.COUNT<2 THEN ' style="display:none"' END || '>&blacktriangledown;</button>
                    <ul id="website-dropdown" class="dropdown-items" role="menu" aria-hidden="true">' || l_website_list || '</ul>
                </section>
            </div>
            <button type="button" class="action deploy-website">DEPLOY<span class="env">TEST</span></button>
            <div>
                <button type="button" class="action visits">VISITS<span class="env">TEST</span></button>
                <button type="button" class="action performance">METRICS<span class="env">TEST</span></button>
            </div>';

        RETURN (l_html);
    END;

    FUNCTION buildPageNav(pWebsiteId IN website.id%type) RETURN CLOB IS
        l_html CLOB;
        n PLS_INTEGER;
    BEGIN
        FOR C IN (SELECT navigation_label, article_id, collection_type
                    FROM website_article
                   WHERE website_id=pWebsiteId
                   ORDER BY display_order) 
        LOOP
            IF (C.collection_type='N/A') THEN
                l_html:=l_html || TO_CLOB(buildNavLabel(C.article_id, C.navigation_label, 'page-options'));
            ELSE
                l_html:=l_html || TO_CLOB(buildNavLabel(C.article_id, C.navigation_label, 'page-options','collection',C.collection_type));
            END IF;
        END LOOP;
        RETURN(l_html);
    END;

    FUNCTION buildPushableButton(pClassName IN VARCHAR2, pHTMLSymbol IN VARCHAR2 DEFAULT NULL, pButtonText IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS 
        l_html VARCHAR2(200);
    BEGIN
        RETURN(
        '<button type="button" class="' || pClassName || ' pushable">
            <span class="shadow"></span>
            <span class="edge"></span>
            <span class="front">' || 
                CASE WHEN pHTMLSymbol IS NOT NULL THEN pHTMLSymbol || '&nbsp;' END || 
                CASE WHEN pButtonText IS NOT NULL THEN pButtonText ELSE UPPER(REPLACE(pClassName,'-',' ')) END || 
            '</span>
        </button>');
    END;

    FUNCTION buildMediaCard RETURN CLOB IS
    BEGIN
        RETURN(
        buildPushableButton('upload-media') ||
        '<ul class="gallery-list"></ul>
        <div class="gallery-overlay">
            <img src="">
            <span class="counter"></span>
            <button type="button" class="close-fullscreen">&times;</button>
            <button type="button" class="prev">&lt;</button>
            <button type="button" class="next">&gt;</button>
        </div>');
    END;

    FUNCTION buildDialogs RETURN VARCHAR2 IS
    BEGIN
        RETURN(
        '<dialog class="popup">
            <div>
                <button type="button" class="close">&times;</button>
                <h2></h2>
                <p></p>
            </div>
        </dialog>
        <dialog class="log">
            <div>
                <div class="content"></div>
                <button type="button" class="close">&times;</button>
            </div>
        </dialog>');
    END;

    /*
     **  Build authenticated page
     */
    FUNCTION buildAuthPage RETURN CLOB IS
        l_session_data session_data_rt;
        l_nb_websites PLS_INTEGER;
        l_is_admin PLS_INTEGER;
        l_clob CLOB;
        l_selected_website_id website.id%type;
    BEGIN
        l_session_data:=getSessionData();

        SELECT COUNT(*)
          INTO l_nb_websites
          FROM website
         WHERE user_id=l_session_data.user_id;

        IF (l_nb_websites=0) THEN
            createStarterWebsite(l_session_data.user_id);
        END IF;

        SELECT COUNT(*)
          INTO l_is_admin
          FROM apex_workspace_apex_users w, users u 
         WHERE u.id=l_session_data.user_id
           AND w.email=u.email
           AND w.is_admin='Yes'
         FETCH FIRST ROW ONLY;

        l_clob:= 
        '<div class="wrapper">' ||
            buildTopNav(l_is_admin) ||
            '<div>
                <div>' ||
                    buildPushableButton('new-website', '&plus;') ||
                '</div>' ||
                buildWebsiteNav(l_session_data.user_id, l_selected_website_id) ||
            '</div>
            <div class="page-content">
                <div>' ||
                    buildMediaCard() ||
                '</div>
                <div>
                    <div class="button-container">' ||
                    buildPushableButton('new-page','&plus;') ||
                    '</div>
                    <nav class="page-nav">' ||
                    buildPageNav(l_selected_website_id) ||
                    '</nav>
                    <div id="editor"></div>
                </div>
            </div><!-- END page-content-->
            <form action="https://codepen.io/pen/define" method="POST" target="_blank">
                <input type="hidden" name="data" value="">
            </form>' ||
            buildDialogs() ||
        '</div><!-- END wrapper-->
         <input type="hidden" name="nb_websites" value="' || l_nb_websites ||'" id="nb-websites">' || 
         '<script type="importmap">
            {
                "imports": {
                    "ckeditor5": "https://cdn.ckeditor.com/ckeditor5/43.2.0/ckeditor5.js",
                    "ckeditor5/": "https://cdn.ckeditor.com/ckeditor5/43.2.0/"
                }
            }
        </script>' ||
        q'@<script type="module">
            import {
                ClassicEditor,
                Essentials,
                Alignment,
                Autosave,
                BlockQuote,
                Bold,
                Clipboard,
                Code,
                CodeBlock,
                GeneralHtmlSupport,
                Heading,
                HorizontalLine,
                Image,
                ImageCaption,
                ImageResize,
                ImageStyle,
                ImageToolbar,
                ImageInsert,
                ImageInsertViaUrl,
                Italic,
                Link,
                List,
                Paragraph,
                SelectAll,
                SourceEditing,
                Underline,
                WordCount
            } from 'ckeditor5';

            ClassicEditor
                .create( document.querySelector( '#editor' ), {
                    plugins: [ Essentials,  Alignment, Autosave, BlockQuote, Bold, Clipboard, Code, CodeBlock, GeneralHtmlSupport, Heading, HorizontalLine, Image, ImageToolbar, ImageCaption, ImageStyle, ImageResize, ImageInsert, ImageInsertViaUrl, Italic, Link, List, Paragraph, SelectAll, SourceEditing, Underline, WordCount ],
                    toolbar: ['heading', '|', 'undo', 'redo', 'selectAll', '|', 'horizontalLine', 'bold', 'italic', 'underline', 'code', 'alignment', 'link', 'bulletedList', 'numberedList', 'blockQuote','codeBlock','insertImage', 'sourceEditing'],
                    alignment: {
                        options: [
                            {name:'left', className: 'align-left'},
                            {name:'right', className: 'align-right'},
                            {name:'center', className: 'align-center'},
                            {name:'justify', className: 'align-justify'}
                        ]
                    },
                    autosave: {
                        waitingTime: 2000,
                        save( editor ) {
                            return saveData( editor.getData() );
                        }
                    },
                    codeBlock: {
                        languages: [
                            { language: 'css', label: 'CSS' },
                            { language: 'html', label: 'HTML' },
                            { language: 'javascript', label: 'Javascript' },
                            { language: 'sql', label: 'SQL' },
                            { language: 'plsql', label: 'PL/SQL' },
                            { language: 'shell', label: 'shell' }
                        ]
                    },
                    htmlSupport: {
                        allow: [
                            {
                                name: /.*/,
                                attributes: true,
                                classes: true,
                                styles: false
                            }
                        ]
                    },
                    image: {
                        insert: {
                            type: 'auto',
                            integrations: ['url']
                        },
                        toolbar: [
                            'imageStyle:inline',
                            'imageStyle:block',
                            '|',
                            'imageStyle:wrapText',
                            '|',
                            'toggleImageCaption',
                            'imageTextAlternative',
                        ]
                    },
                    list: {
                        properties: {
                            styles: true,
                            startIndex: true,
                            reversed: true
                        }
                    },
                    placeholder: 'Enter content',
                    title: {
                        placeholder: 'New title'
                    },
                    ui: {
                        viewportOffset: {
                            top: 0
                        }
                    },
                    wordCount: {
                            displayCharacters: true
                    },
                } )
                .then( newEditor => {
                    editor = newEditor;
                    const wordCountPlugin = editor.plugins.get( 'WordCount' );
                    const wordCountWrapper = wrapper.querySelector( '.ck-editor__main' );
                    wordCountWrapper.appendChild(wordCountPlugin.wordCountContainer );
                    /*
                    editor.editing.view.document.on( 'drop', ( evt, data ) => {
            			// Stop execute next callbacks.
            			evt.stop();
            	
            			// Stop the default event action.
            			data.preventDefault();
            		}, { priority: 'high' } );
            	
            		editor.editing.view.document.on( 'dragover', ( evt, data ) => {
            			evt.stop();
            			data.preventDefault();
            		}, { priority: 'high' } );
                    */
                    const toolbar = wrapper.querySelector(".ck-toolbar__items");
                    toolbar.insertAdjacentHTML('afterend','<span id="editor-status"></span>');
                    editor_status = "init";
                    editor_status_text = wrapper.querySelector("#editor-status");
                    editor.enableReadOnlyMode( 'lock-id' );
                })
                .catch( error => {
                    console.error(error);
                });
        </script>@';

        RETURN l_clob;
    END;

    /*
     **  All pages initiated by APEX "Dynamic Content" component.
     **  After that it's Javascript fetch and ORDS all the way
     */
    FUNCTION getPageContent RETURN CLOB IS
        l_clob CLOB;
        l_css_file_urls APEX_APPLICATION_PAGES.css_file_urls%type;
        l_javascript_file_urls APEX_APPLICATION_PAGES.javascript_file_urls%type;
        l_page_css APEX_APPLICATION_STATIC_FILES.file_name%type;
        l_page_js APEX_APPLICATION_STATIC_FILES.file_name%type;
        l_metric_js APEX_APPLICATION_STATIC_FILES.file_name%type;
    BEGIN
        SELECT NVL(css_file_urls,' '), NVL(javascript_file_urls,' ')
          INTO l_css_file_urls, l_javascript_file_urls
          FROM APEX_APPLICATION_PAGES 
         WHERE application_id=apex_application.g_flow_id
           AND page_id=apex_application.g_flow_step_id;

        l_page_css:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.css';

        IF (INSTR(l_css_file_urls,l_page_css)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_css,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<style>' || apex_util.blob_to_clob(C.file_content) || '</style>';
            END LOOP;
        END IF;

        CASE apex_application.g_flow_step_id
            WHEN 1 THEN l_clob:=l_clob || buildLoginPage;
            WHEN 2 THEN l_clob:=l_clob || buildAuthPage;
            WHEN 3 THEN l_clob:=l_clob || buildPrivacyPage;
        END CASE;

        l_clob:=l_clob || TO_CLOB('
            <input type="hidden" name="p_flow_id" value="' || apex_application.g_flow_id ||'" id="pFlowId">
            <input type="hidden" name="p_flow_step_id" value="' || apex_application.g_flow_step_id ||'" id="pFlowStepId">
            <input type="hidden" name="p_instance" value="' || APEX_CUSTOM_AUTH.GET_SESSION_ID ||'" id="pInstance">');            

        l_clob:=l_clob || chr(10) || TO_CLOB('
        <script>
            const gRestUrl = "' || getRestUrl() || '";' || 
            CASE WHEN apex_application.g_flow_step_id=2 THEN '
            const gHomeUrl = "' || apex_util.host_url('SCRIPT') || 'f?p=101:1:0";' END || 
        '</script>');

        l_page_js:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.js';

        IF (INSTR(l_javascript_file_urls,l_page_js)=0) THEN
            FOR C IN (SELECT file_content 
                        FROM APEX_APPLICATION_STATIC_FILES 
                       WHERE application_id=apex_application.g_flow_id 
                         AND file_name=REPLACE(l_page_js,'.min') )
            LOOP
                l_clob:=l_clob || chr(10) || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
            END LOOP;
        END IF;

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error;
                RAISE;
    END;

    /*
    **  load Google font definitions into google_font table. wolf3 format only. Colummn url_regular used for dynamic font loading. Websites deployed with optimized foont.r 
    */
    PROCEDURE loadGoogleFonts IS 
        l_google_api_key users.google_api_key%type;
        l_google_url VARCHAR2(250);
        l_clob CLOB;
    BEGIN
        SELECT u.google_api_key 
          INTO l_google_api_key
          FROM apex_workspace_apex_users w, users u 
         WHERE w.email=u.email
           AND w.is_admin='Yes'
           FETCH FIRST ROW ONLY;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';
        --l_google_url:='https://www.googleapis.com/webfonts/v1/webfonts?key=' || l_google_api_key||'&capability=WOFF2&sort=popularity';
        l_google_url:='https://www.googleapis.com/webfonts/v1/webfonts?key=' || l_google_api_key||'&capability=VF';
        l_clob := apex_web_service.make_rest_request(p_url=>l_google_url, p_http_method=>'GET');
        /*DELETE google_font;
        INSERT INTO google_font (seq, family, category, url_regular)
        SELECT ROWNUM, family, category, url_regular FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, category, url_regular PATH '$.files.regular'));*/
        DELETE google_font_variable;

        INSERT INTO google_font_variable(family,category,menu,wght_start,wght_end,wdth_start,wdth_end,opsz_start,opsz_end,slnt_start,slnt_end)
        with data as (
            select family, category, menu, tag,"start" as tag_start, "end" as tag_end
            FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, category, menu, NESTED '$.axes[*]' COLUMNS(tag varchar2(4) PATH '$.tag', "start" number PATH '$.start', "end" number PATH '$.end'))) 
            WHERE tag is not null and tag in ('wdth','wght','slnt','opsz')
        )
        SELECT family,category,menu, 
            max(decode(tag,'wght',tag_start)) as wght_start, max(decode(tag,'wght',tag_end)) as wght_end,
            max(decode(tag,'wdth',tag_start)) as wdth_start, max(decode(tag,'wdth',tag_end)) as wdth_end,
            max(decode(tag,'opsz',tag_start)) as opsz_start, max(decode(tag,'opsz',tag_end)) as opsz_end,
            max(decode(tag,'slnt',tag_start)) as slnt_start, max(decode(tag,'slnt',tag_end)) as slnt_end
        FROM data
        GROUP BY family,category,menu;
    END;







    /*
    **  Administrator function to transfer ownership of a specified website and all dependent table rows to a different User 
    */
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type) IS
        l_transfer_from_user_id users.id%type;
        l_transfer_to_user_id users.id%type;
    BEGIN
        SELECT user_id INTO l_transfer_from_user_id FROM website WHERE id=pWebsiteId;
        SELECT id INTO l_transfer_to_user_id FROM users WHERE id=pUserId;

        /* Don't let this happen of any article in the website has been copied to another website */

        UPDATE website 
           SET user_id=l_transfer_to_user_id 
         WHERE id=pWebsiteId AND user_id=l_transfer_from_user_id;

        UPDATE article 
           SET author_user_id=l_transfer_to_user_id 
         WHERE id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE article 
           SET author_user_id=l_transfer_to_user_id 
         WHERE parent_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE asset 
           SET user_id=l_transfer_to_user_id 
         WHERE article_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE asset 
           SET user_id=l_transfer_to_user_id 
         WHERE article_id IN (SELECT parent_id FROM article WHERE id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND collection_type<>'NA' AND user_id=l_transfer_from_user_id));

        UPDATE website_article SET user_id=l_transfer_to_user_id 
         WHERE website_id=pWebsiteId AND user_id=l_transfer_from_user_id;

        COMMIT;
    END;

    /*
    ** Generate random 20 character password string. All characters must be Ascii.
    */
    FUNCTION password RETURN VARCHAR2
    IS
        l_password VARCHAR2(20);
        digits   CONSTANT VARCHAR2(10) := '0123456789';
        lower    CONSTANT VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';
        upper    CONSTANT VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        special  CONSTANT VARCHAR2(26) := '!"$%^*()-_=+{}[]<>,|/?;:@#';
        l_password_return VARCHAR2(20);
    BEGIN
        FOR i IN 1..5 LOOP
            l_password:=l_password || SUBSTR(digits,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(digits) + 1)),1) ;
            l_password:=l_password || SUBSTR(lower,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(lower) + 1)),1) ;
            l_password:=l_password || SUBSTR(upper,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(upper) + 1)),1) ;
            l_password:=l_password || SUBSTR(special,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(special) + 1)),1) ;
        END LOOP;

        FOR i IN 1..20 LOOP
            l_password_return:=l_password_return || SUBSTR(l_password,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(l_password) + 1)),1) ;
        END LOOP;

        RETURN l_password_return;
        
    END;

END;
/