CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CORE" AS
    --
    TYPE fluid_type_rt IS RECORD(
        property VARCHAR2(30),
        value VARCHAR2(200)
    );
    TYPE fluid_type_t IS TABLE OF fluid_type_rt;
    --
    FUNCTION buildBlogList( pEnv IN VARCHAR2, pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pClasses IN VARCHAR2 DEFAULT NULL) RETURN CLOB;
    --
    FUNCTION buildMediaList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pIncludeLinks  IN BOOLEAN DEFAULT TRUE) RETURN CLOB;
    --
    FUNCTION buildProductList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type) RETURN CLOB;
    --
    FUNCTION getRestUrl RETURN VARCHAR2;
    --
    PROCEDURE loadGoogleFonts;
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error;
    --
    PROCEDURE log_error(pStatus OUT NUMBER);
    --
    FUNCTION password RETURN VARCHAR2;
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CORE" AS

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message, user_id, website_id) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg, pck_sec.g_session_user_id, pck_sec.g_website_id);
        COMMIT;
    END;

    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message, user_id, website_id) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg, pck_sec.g_session_user_id, pck_sec.g_website_id);
        COMMIT;
    END;

    /*
    **  Log ORACLE exceptions.
    */
    PROCEDURE log_error IS
        l_depth PLS_INTEGER;
        l_stack LONG;
        l_apex_session VARCHAR2(50);
    BEGIN
        ROLLBACK;

        /* Format call stack which includes procedure names */
        
        l_depth:=UTL_CALL_STACK.backtrace_depth;
        l_stack:='CALL STACK'||chr(10);
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'Line: ' || UTL_CALL_STACK.backtrace_line(i) || ' ' || UTL_CALL_STACK.backtrace_unit(i) || chr(10); --UTL_CALL_STACK.owner(i)||'.'||UTL_CALL_STACK.concatenate_subprogram(UTL_CALL_STACK.subprogram(i)) || chr(10);
        END LOOP;
        

        /* Format error backtrace */
        l_stack:=l_stack || 'ERROR BACKTRACE'||chr(10);
        l_depth := UTL_CALL_STACK.error_depth;
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'ORA-' || UTL_CALL_STACK.error_number(i) || ' - ' || UTL_CALL_STACK.error_msg(i) || chr(10);
        END LOOP;

        log(l_stack);

        /* If invoked in Apex session return sqlcode, sqlerrm in json payload */
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');   

        apex_json.open_object; 
        apex_json.write('success', FALSE); 
        apex_json.write('sqlcode', SQLCODE); 
        apex_json.write('sqlerrm', SQLERRM); 
        apex_json.close_object;

        EXCEPTION WHEN VALUE_ERROR THEN NULL;
    END;

    /*
    **  LOG EXCEPTION RETURNING HTTP STATUS CODE
    */
    PROCEDURE log_error(pStatus OUT NUMBER) IS
        l_depth PLS_INTEGER;
        l_stack LONG;
    BEGIN
        ROLLBACK;

        /* Format call stack which includes procedure names */
        l_depth:=UTL_CALL_STACK.backtrace_depth;
        l_stack:='CALL STACK'||chr(10);
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'Line: ' || UTL_CALL_STACK.backtrace_line(i) || ' ' || UTL_CALL_STACK.backtrace_unit(i) || chr(10); --UTL_CALL_STACK.owner(i)||'.'||UTL_CALL_STACK.concatenate_subprogram(UTL_CALL_STACK.subprogram(i)) || chr(10);
        END LOOP;

        /* Format error backtrace */
        l_stack:=l_stack || 'ERROR BACKTRACE'||chr(10);
        l_depth := UTL_CALL_STACK.error_depth;
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'ORA-' || UTL_CALL_STACK.error_number(i) || ' - ' || UTL_CALL_STACK.error_msg(i) || chr(10);
        END LOOP;

        log(l_stack);

        apex_json.open_object; 
        apex_json.write('success', FALSE); 
        apex_json.write('sqlcode', SQLCODE); 
        apex_json.write('sqlerrm', SQLERRM); 
        apex_json.close_object;

        pStatus:=CASE WHEN SQLCODE=-20000 THEN 401 ELSE 400 END;
    END;

    /*
    ** Return RESTful API url
    */
    FUNCTION getRestUrl RETURN VARCHAR2 IS
        l_rest_url VARCHAR2(200);
    BEGIN
        SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix
          INTO l_rest_url
          FROM user_ords_schemas s, user_ords_modules m
         WHERE s.parsing_schema=sys_context('userenv','current_schema')
           AND m.name='public';

        RETURN (l_rest_url);
    END;

    /*
    ** Construct index of Blog entries
    */
    FUNCTION buildBlogList(pEnv IN VARCHAR2, pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pClasses IN VARCHAR2) RETURN CLOB IS
        l_html CLOB;
        l_html_list CLOB;
        l_featured article.featured%type;
        l_classes VARCHAR2(100);
        l_path website_article.navigation_label%type;
        l_href VARCHAR2(200);
        pos PLS_INTEGER;
        MAX_BLOGS CONSTANT PLS_INTEGER:=12;
    BEGIN
        IF (INSTR(pClasses,'featured')>0) THEN
            l_featured:='YES';
            l_classes:='featured ';
        END IF;

        SELECT apex_string_util.get_slug(navigation_label) INTO l_path FROM website_article WHERE website_id=pWebsiteId AND article_id=pArticleId;

        /* Build list of all title in title order */
        IF (l_featured is NULL) THEN
            FOR C IN (
                WITH ph AS (
                  SELECT a.id, COUNT(DISTINCT p.ip_address) nb_distinct_visitors
                    FROM article a, page_hit p
                   WHERE a.parent_id=pArticleId
                     AND a.id=p.article_id
                     AND p.url='spiritresilience.com'
                   GROUP BY a.id
                )
                SELECT COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY ph.nb_distinct_visitors DESC NULLS LAST) rn,
                             a.title, DECODE(pEnv,'TEST',a.deployed_date,'LIVE',a.deployed_date_custom) deployed_date
                        FROM article a, ph
                       WHERE a.parent_id=pArticleId
                         AND a.id=ph.id(+)
                       ORDER BY 2, a.title ) 
            LOOP
                IF (C.nb<MAX_BLOGS) THEN
                    EXIT;
                END IF;
                IF (C.rn=1) THEN
                    l_html_list:=
                    '<details>' ||
                        '<summary>Show titles in order of popularity</summary>' ||
                        '<article class="grid" data-grid-variant="1">';
                END IF;
                l_html_list:=l_html_list || 
                            '<span>' || TO_CHAR(NVL(C.deployed_date,current_timestamp),'fmMon dd, yyyy') || '</span>';
                l_href:='/' || l_path || '/' || apex_string_util.get_slug(C.title);
                l_html_list:=l_html_list || 
                                '<a href="' || l_href || '">' || C.title || '</a>';
                IF (C.rn=C.nb) THEN
                    l_html:=l_html || 
                        '</article>' ||
                    '</details>';
                END IF;    
            END LOOP;
        END IF;

        FOR C IN (SELECT COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY null) rn,
                            wa.collection_date_format, art.body_html, art.title, art.excerpt, DECODE(pEnv,'TEST',art.deployed_date,'LIVE',art.deployed_date_custom) deployed_date, art.word_count, art.cover_icon_id, ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width, ass.height, ass.alt_text
                    FROM website_article wa, article art, asset ass
                   WHERE wa.article_id=pArticleId
                     AND art.parent_id=wa.article_id
                     AND art.featured=NVL(l_featured,art.featured)
                     AND ass.id(+)=art.cover_asset_id
                   ORDER BY deployed_date DESC ) 
        LOOP
            IF (C.rn=1) THEN
                l_html:=l_html || '<ol class="' || l_classes || ' grid grid__auto_fit' || '" role="list" >';
            END IF;
            l_html:=l_html || 
            '<li class="card">';
            IF (C.cld_cloud_name IS NOT NULL) THEN
                l_html:=l_html || 
                '<img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '" width="'|| C.width || '" height="' || C.height || '" alt="' || C.alt_text || '">';
            ELSIF (C.cover_icon_id IS NOT NULL) THEN
                l_html:=l_html || 
                '<svg class="icon" aria-hidden="true" focusable="false"><use href="#' || C.cover_icon_id || '"></use></svg>';
            END IF;
            l_href:='/' || l_path || '/' || apex_string_util.get_slug(C.title);
            l_html:=l_html || 
                '<div class="flow">' ||
                    '<h2>' ||
                        '<a href="' || l_href || '">' || C.title || '</a>' ||
                    '</h2>' ||
                    '<p>' || CASE WHEN LENGTH(C.excerpt)<160 THEN C.excerpt ELSE SUBSTR(C.excerpt,1,INSTR(C.excerpt,' ',-1)) || '...' END  || '</p>' ||
                '</div>' ||
                '<small>' ||
                    CASE WHEN NVL(C.collection_date_format,'NONE')<>'NONE' THEN
                    '<span>' || TO_CHAR(NVL(C.deployed_date,current_timestamp),'fm'||C.collection_date_format) || '</span>'
                    END ||
                    '<span>' || C.word_count || ' words</span>' ||
                '</small>' ||
            '</li>';
            IF (C.rn=LEAST(MAX_BLOGS,C.nb)) THEN
                l_html:=l_html || '</ol>';
                EXIT;
            END IF;
        END LOOP;
        RETURN (l_html_list || l_html);
    END;

    /*
    ** Construct index of Media entries
    ** pIncludeLinks = FALSE for building MEDIA collection type landing page without links (Codepen)
    */
    FUNCTION buildMediaList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pIncludeLinks IN BOOLEAN) RETURN CLOB IS
        l_html CLOB;
        l_path website_article.navigation_label%type;
        l_href VARCHAR2(200);
    BEGIN
        IF (pIncludeLinks) THEN
            SELECT apex_string_util.get_slug(navigation_label) INTO l_path FROM website_article WHERE website_id=pWebsiteId AND article_id=pArticleId;
        ELSE
            l_href:='#';
        END IF;
        l_html:=l_html || '<ol role="list" class="gallery-list">';
        FOR C IN (SELECT art.title, ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width
                    FROM article art, asset ass
                   WHERE art.parent_id=pArticleId
                     AND ass.id=art.cover_asset_id
                   ORDER BY art.display_order NULLS FIRST, art.updated_date DESC ) 
        LOOP
            IF (pIncludeLinks) THEN
                l_href:='/' || l_path || '/' || apex_string_util.get_slug(C.title);
            END IF;
            l_html:=l_html ||
            '<li>
                <a href="' || l_href || '"><img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '"></a>
            </li>';
        END LOOP;
        l_html:=l_html || '</ol>';

        RETURN (l_html);
    END;

    /*
    ** Construct list of Products including image
    */
    FUNCTION buildProductList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type) RETURN CLOB IS
        l_html CLOB;
        l_description VARCHAR2(250);
        pos PLS_INTEGER;
    BEGIN
        l_html:='<!--CMS START-->';
        l_html:=l_html || '<ol class="product">';

        FOR C IN (SELECT w.price_currency, art.id, art.body_html, art.title, ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width, art.product_price
                    FROM article art, asset ass, website w
                   WHERE art.parent_id=pArticleId
                     AND ass.id=art.cover_asset_id
                     AND w.id=pWebsiteId
                     ORDER BY art.display_order) 
        LOOP
            pos:=dbms_lob.instr(C.body_html,'</h1>',1,1)+5;
            l_description:=SUBSTR(dbms_lob.substr(C.body_html,dbms_lob.getlength(C.body_html) - pos, pos), 1, 250);
            l_description:=REPLACE(RTRIM(LTRIM(l_description,'<p>'),'</p>'),'&nbsp;',null);
            l_html:=l_html || 
            '<li>
                <img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
                <h4>' || C.title || '</h4>
                <p>' ||  l_description || '</p>
                <button type="button" class="buy" data-name="' || C.title|| '" data-price="' || C.product_price || '" data-currency="' || C.price_currency|| '">' || 
                    TO_CHAR(C.product_price,'fm99999.90') || ' ' ||  C.price_currency || '<span></span></button>
            </li>';
        END LOOP;
        l_html:=l_html || '</ol>';
        l_html:=l_html || '<!--CMS END-->';
        RETURN (l_html);
    END;
    
    /*
    **  load Google font definitions into google_font table. wolf3 format only. Websites deployed with optimized foont.r 
    */
    PROCEDURE loadGoogleFonts IS 
        l_clob CLOB;
        l_nb_fonts PLS_INTEGER;
        l_lastModified google_font.lastModified%type;
    BEGIN
        
        --pck_api.callGoogleAPI('https://fonts.google.com/metadata/fonts',l_clob);
        --INSERT INTO google_font_metadata(family, axis, min_value, max_value, default_value)
        --SELECT family, tag, min, max, defaultValue FROM JSON_TABLE(l_clob, '$.familyMetadataList[*]' COLUMNS (family, NESTED '$.axes[*]' COLUMNS(tag, min, max, defaultValue)))
        -- WHERE tag IS NOT NULL;
        
        /* STATIC FONTS */
        execute immediate('truncate table google_font_static');

        pck_api.callGoogleAPI('https://www.googleapis.com/webfonts/v1/webfonts?capability=WOFF2',pData=>l_clob);
        
        INSERT INTO google_font_static(family, category, wght_start, wght_end, wght_start_italic, wght_end_italic) 
        WITH data AS
        (       
        SELECT family, category, 
            TO_NUMBER(
            CASE 
                WHEN variant='regular' THEN '400'
                WHEN variant='italic' THEN '-400'
                WHEN INSTR(variant,'italic')>0 THEN '-' || SUBSTR(variant,1,INSTR(variant,'italic')-1)
                ELSE variant
            END
            ) variant
          FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, category, NESTED PATH '$.variants[*]' COLUMNS (variant VARCHAR2(50) PATH '$')))
        )
        SELECT family, category, MIN(DECODE(SIGN(variant),1,variant)), MAX(DECODE(SIGN(variant),1,variant)),MIN(DECODE(SIGN(variant),-1,variant*-1)), MAX(DECODE(SIGN(variant),-1,variant*-1))
        FROM data
        GROUP BY family, category;

        
        execute immediate('truncate table google_font_variable');

        pck_api.callGoogleAPI('https://www.googleapis.com/webfonts/v1/webfonts?capability=VF',pData=>l_clob);
        INSERT INTO google_font_variable(family, category, lastModified, 
            ital_start,ital_end,
            wght_start,wght_end,
            wdth_start,wdth_end,
            opsz_start,opsz_end,
            slnt_start,slnt_end)
        WITH 
        data AS (
            SELECT family, category, lastModified, CASE WHEN tag='italic' THEN 0 END ital_start, CASE WHEN tag='italic' THEN 1 END ital_end, tag,"start" as tag_start, "end" as tag_end
              FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, category, lastModified, NESTED '$.variants[*]' COLUMNS (variant PATH '$'), NESTED '$.axes[*]' COLUMNS(tag varchar2(4) PATH '$.tag', "start" number PATH '$.start', "end" number PATH '$.end')))
        ),
        data2 AS (
            SELECT family, category, lastModified, tag, tag_start, tag_end, 
                NVL2(ital_start,0,NULL) ital_start, NVL2(ital_end,1,NULL) ital_end
            FROM data
        )
        SELECT family,category,TO_DATE(lastModified,'YYYY-MM-DD'),
            max(ital_start), max(ital_end),
            max(decode(tag,'wght',tag_start)) as wght_start, max(decode(tag,'wght',tag_end)) as wght_end, 
            max(decode(tag,'wdth',tag_start)) as wdth_start, max(decode(tag,'wdth',tag_end)) as wdth_end, 
            max(decode(tag,'opsz',tag_start)) as opsz_start, max(decode(tag,'opsz',tag_end)) as opsz_end, 
            max(decode(tag,'slnt',tag_start)) as slnt_start, max(decode(tag,'slnt',tag_end)) as slnt_end
        FROM data2
        WHERE tag IS NOT NULL
        GROUP BY family,category,lastModified;
        

        SELECT COUNT(*), MAX(lastModified) INTO l_nb_fonts, l_lastModified FROM google_font;
        pck_core.log('Successfully loaded '|| l_nb_fonts || ' Google fonts  - last modified is ' || TO_CHAR(l_lastModified,'DD-MM-YYYY'));

        /* Update font table from staging table */
        MERGE INTO font t
        USING
        (
            SELECT family, category, wght_start, wght_end, NVL2(wght_start_italic,0,NULL) ital_start, NVL2(wght_end_italic,1,NULL) ital_end
            FROM google_font_static
        ) s
        ON (t.family=s.family)
        WHEN MATCHED THEN UPDATE SET
            t.category=s.category,
            t.wght_start=s.wght_start,
            t.wght_end=s.wght_end,
            t.ital_start=s.ital_start,
            t.ital_end=s.ital_end,
            t.variable=0,
            t.updated_date=current_timestamp
        WHEN NOT MATCHED THEN 
            INSERT (id, family, category, wght_start, wght_end, ital_start, ital_end, variable, created_date) 
            VALUES (seq_font.nextval, s.family, s.category, s.wght_start, s.wght_end, s.ital_start, s.ital_end, 0, current_timestamp);
    END;

    /*
    **  Administrator function to transfer ownership of a specified website and all dependent table rows to a different User 
    */
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type) IS
        l_transfer_from_user_id users.id%type;
        l_transfer_to_user_id users.id%type;
    BEGIN
        SELECT user_id INTO l_transfer_from_user_id FROM website WHERE id=pWebsiteId;
        SELECT id INTO l_transfer_to_user_id FROM users WHERE id=pUserId;

        /* Don't let this happen of any article in the website has been copied to another website */

        UPDATE website 
           SET user_id=l_transfer_to_user_id 
         WHERE id=pWebsiteId AND user_id=l_transfer_from_user_id;

        UPDATE article 
           SET author_user_id=l_transfer_to_user_id 
         WHERE id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE article 
           SET author_user_id=l_transfer_to_user_id 
         WHERE parent_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE asset 
           SET user_id=l_transfer_to_user_id 
         WHERE article_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE asset 
           SET user_id=l_transfer_to_user_id 
         WHERE article_id IN (SELECT parent_id FROM article WHERE id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND collection_type<>'NA' AND user_id=l_transfer_from_user_id));

        UPDATE website_article SET user_id=l_transfer_to_user_id 
         WHERE website_id=pWebsiteId AND user_id=l_transfer_from_user_id;

        COMMIT;
    END;

    /*
    ** Generate random 20 character password string. All characters must be Ascii.
    */
    FUNCTION password RETURN VARCHAR2
    IS
        l_password VARCHAR2(20);
        digits   CONSTANT VARCHAR2(10) := '0123456789';
        lower    CONSTANT VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';
        upper    CONSTANT VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        special  CONSTANT VARCHAR2(26) := '!"$%^*()-_=+{}[]<>,|/?;:@#';
        l_password_return VARCHAR2(20);
    BEGIN
        FOR i IN 1..5 LOOP
            l_password:=l_password || SUBSTR(digits,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(digits) + 1)),1) ;
            l_password:=l_password || SUBSTR(lower,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(lower) + 1)),1) ;
            l_password:=l_password || SUBSTR(upper,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(upper) + 1)),1) ;
            l_password:=l_password || SUBSTR(special,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(special) + 1)),1) ;
        END LOOP;

        FOR i IN 1..20 LOOP
            l_password_return:=l_password_return || SUBSTR(l_password,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(l_password) + 1)),1) ;
        END LOOP;

        RETURN l_password_return;
        
    END;

END;
/