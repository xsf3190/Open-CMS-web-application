CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CORE" AS
    --
    gWidthThumbnail CONSTANT INTEGER:=360;
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2);
    --
    FUNCTION getPageContent RETURN CLOB;
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CORE" AS

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        k_calling_package constant varchar2(128) := utl_call_stack.subprogram(2)(1);
        k_calling_subprog constant varchar2(128) := utl_call_stack.subprogram(2)(2);
    BEGIN
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, k_calling_package || '.' || k_calling_subprog, pMsg);
        COMMIT;
    END;

    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        k_calling_package constant varchar2(128) := utl_call_stack.subprogram(2)(1);
        k_calling_subprog constant varchar2(128) := utl_call_stack.subprogram(2)(2);    
    BEGIN
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, k_calling_package || '.' || k_calling_subprog, pMsg);
        COMMIT;
    END;

    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2) IS
    BEGIN
        ROLLBACK;
        log(pCode || '-' || pErrMsg || '-' || dbms_utility.format_error_stack||dbms_utility.format_error_backtrace);
    END;

    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2, pAjax IN BOOLEAN) IS
    BEGIN
        log_error(pCode, pErrMsg);
        IF (pAjax) THEN
            apex_json.open_object; 
            apex_json.write('success', FALSE); 
            apex_json.write('sqlcode', sqlcode); 
            apex_json.write('sqlerrm', sqlerrm); 
            apex_json.close_object;
        END IF;
    END;


    PROCEDURE getApexSession(pAppId IN OUT NUMBER, pSessionId IN OUT NUMBER, pPageId IN OUT NUMBER) IS
        l_parts apex_t_varchar2;
    BEGIN
        l_parts:=apex_string.split(OWA_UTIL.get_cgi_env('Apex-Session'),',');
        pAppId:=l_parts(1);
        pSessionId:=l_parts(2);
        pPageId:=l_parts(3);
    END;

    /*
    ** Return id of authenticated user for the session as 
    */
    FUNCTION getUserId(pSaveCookie BOOLEAN DEFAULT FALSE) RETURN users.id%type IS
        l_names owa_cookie.vc_arr;
        l_vals owa_cookie.vc_arr;
        l_num_vals INTEGER;

        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_apex_cookie_value users.apex_cookie_value%type;
        l_user_id users.id%type;
    BEGIN
        l_user_id:=NULL;

        getApexSession(l_app_id, l_session_id, l_page_id);

        FOR C IN (
            SELECT u.id, apex_cookie_value
              FROM apex_workspace_sessions s, users u
             WHERE s.apex_session_id=l_session_id
               AND s.user_name=u.email )
        LOOP
            /* We have an authenticated session */
            l_user_id:=C.id;

            /* Additional check that session cookie is valid */
            owa_cookie.get_all(names => l_names, vals => l_vals, num_vals => l_num_vals);
            FOR i IN 1..l_names.COUNT LOOP
                IF (l_names(i)='ORA_WWV_APP_' || l_app_id) THEN
                    IF (pSaveCookie) THEN
                        UPDATE users SET apex_cookie_value=l_vals(i) WHERE id=l_user_id;
                    ELSIF (C.apex_cookie_value<>l_vals(i)) THEN
                        RAISE_APPLICATION_ERROR(-20000,'SESSION COOKIE VALUE HAS CHANGED');
                    END IF;
                END IF;
            END LOOP;            
        END LOOP;

        IF (l_user_id IS NULL AND l_page_id=2) THEN
            RAISE_APPLICATION_ERROR(-20000,'YOUR SESSION HAS EXPIRED');
        END IF;

        RETURN (l_user_id);
    END;

    /*
    ** Return RESTful API url
    */
    FUNCTION getRestUrl RETURN VARCHAR2 IS
        l_rest_url VARCHAR2(200);
    BEGIN
        SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix
          INTO l_rest_url
          FROM user_ords_schemas s, user_ords_modules m
         WHERE s.parsing_schema=sys_context('userenv','current_schema')
           AND m.name='public';

        RETURN (l_rest_url);
    END;


    /*
    ** Logout authenticated session
    */
    PROCEDURE signout IS
        l_app_id NUMBER;
        l_session_id NUMBER;
        l_page_id NUMBER;
    BEGIN
        getApexSession(l_app_id, l_session_id, l_page_id);

        apex_session.delete_session(p_session_id=>l_session_id);
        /*
        owa_cookie.send(
            name => 'ORA_WWV_APP_101',
            value => null,
            expires => sysdate -1, 
            path =>'ords' );
        */
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Format timestamp according to user's current time zone
     */
    FUNCTION fmtUpdatedDate(pTimestamp IN article.updated_date%type) RETURN VARCHAR2
    IS
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
    BEGIN
        IF (l_timezone IS NOT NULL) THEN
            RETURN ( TO_CHAR(pTimestamp AT TIME ZONE l_timezone, 'dd Mon yyyy fmhh:fmmi PM') );
        ELSE
            RETURN ( TO_CHAR(pTimestamp, 'dd Mon yyyy'));
        END IF;
    END;    

    FUNCTION buildArticle(pAppPageNo IN NUMBER, 
                            pId IN article.id%type, 
                            pNbAssets IN article.nb_assets%type, 
                            pIsPublic IN article.is_public%type, 
                            pTitle IN article.title%type, 
                            pExcerpt IN article.excerpt%type, 
                            pWordCount IN VARCHAR2, 
                            pUpdatedDate IN article.updated_date%type,
                            pCloudinaryUrl IN VARCHAR2, 
                            pName IN users.name%type) RETURN VARCHAR2 
   IS
        l_element LONG;
    BEGIN
        l_element:=
        '<li class="card" tabindex="0" data-id="' || pId || '">
            <div class="button-container">
                <button type="button" class="fa show-gallery"' || CASE WHEN pNbAssets=0 THEN ' disabled' END || '>&blacktriangleright;' || 
                                                                  CASE WHEN pNbAssets=0 THEN '0' ELSE '1' END || '/' || pNbAssets || '</button>' ||
                CASE WHEN pAppPageNo=2 THEN
                '<div class="dropdown">
                  <button type="button" class="fa fa-caret-down show-dropdown">&blacktriangledown;</button>
                  <ul class="dropdown-items">
                    <li><button type="button" class="fa fa-cloud-upload upload-media">Upload</button></li>
                    <li><button type="button" class="fa fa-edit edit-text">Edit</button></li>
                    <li><button type="button" class="fa fa-newspaper-o preview"' || CASE WHEN pId<0 OR COALESCE(pTitle,pExcerpt) IS NULL THEN ' disabled' END || '>Preview</button></li>' ||
                    CASE 
                      WHEN pIsPublic='Y' THEN 
                        '<li><button type="button" class="fa fa-share2 unpublish">Unpublish</button></li>'
                      ELSE 
                        '<li><button type="button" class="fa fa-share2 publish"' || CASE WHEN pId<0 THEN ' disabled' END || '>Publish</button></li>'
                    END 
                    || '
                    <li><button type="button" class="fa fa-trash delete"' || CASE WHEN pId=1 THEN ' disabled' END || '>Delete</button></li>
                    <li><button type="button" class="fa fa-id-card">' || pId || '</button></li>
                </div>'
                END ||'
            </div>' ||
            CASE WHEN pNbAssets=0 
                THEN '<button type="button" class="no-media upload-media">UPLOAD MEDIA</button>' 
                ELSE '<img class="show-gallery" src="' || pCloudinaryUrl || '">' 
            END ||
            CASE WHEN COALESCE(pTitle,pExcerpt) IS NULL 
                THEN '<br>
                      <button type="button" class="no-media edit-text">CREATE TEXT</button>'
                ELSE '<h4 class="title ' || CASE WHEN pAppPageNo=2 THEN 'edit-text' ELSE 'preview' END || '">' || pTitle || '</h4>
                      <p class="excerpt">' || pExcerpt || '<span class="word-count">' || pWordCount || '</span></p>'
            END || '   
            <footer class="button-container"><span>' || pName || '</span><span class="updated-date">' || fmtUpdatedDate(pUpdatedDate)  || '</span></footer>
        </li>';

        RETURN (l_element);
    END;

    FUNCTION buildTemplates RETURN VARCHAR2 IS
        l_clob CLOB;
        l_cluster CLOB;
        l_url VARCHAR2(200);
    BEGIN
        FOR C IN (SELECT github_repos_owner, github_deploy_repos, github_token FROM github) LOOP
            apex_web_service.g_request_headers(1).name := 'Accept';
            apex_web_service.g_request_headers(1).value := 'application/vnd.github+json';
            apex_web_service.g_request_headers(2).name := 'Authorization';
            apex_web_service.g_request_headers(2).value := 'Bearer ' || C.github_token;
            apex_web_service.g_request_headers(3).name := 'User-Agent';
            apex_web_service.g_request_headers(3).value := C.github_repos_owner;

            l_url:='https://api.github.com/repos/'|| C.github_repos_owner || '/' || C.github_deploy_repos || '/contents/TEMPLATES';
            l_clob := apex_web_service.make_rest_request(p_url=>l_url,p_http_method=>'GET');

            FOR C1 IN (SELECT message FROM JSON_TABLE(l_clob, '$' COLUMNS (message))) LOOP
                IF (C1.message IS NOT NULL) THEN
                    RETURN('<p>ERROR calling ' || l_url || ' - ' || C1.message || '</p>');
                END IF;
            END LOOP;

            FOR C1 IN (SELECT name FROM JSON_TABLE(l_clob, '$[*]' COLUMNS (name))) LOOP
                l_cluster:=l_cluster || 
                '<input type="radio" id="template-' || LOWER(C1.name) || '" name="template" value="' || C1.name || '"></input>
                 <label for="template-' || LOWER(C1.name) || '">' || C1.name || '</label>';
            END LOOP;
        END LOOP;
        RETURN (l_cluster);
    END;

    /*
     **  Login page
     */
    FUNCTION buildLoginPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT id FROM article WHERE id=19124)  -- the miserable privacy policy
        LOOP
            RETURN TO_CLOB('
                <ul class="login">
                    <li class="red"></li>
                    <li class="grey">
                        <p>Login</p>
                        <a href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Facebook&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_facebook_svg ||'</a>
                        <a href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Google&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_google_svg ||'</a>
                    </li>
                    <li class="grey">' || pck_icons.g_oracle_svg || pck_icons.g_github_svg || '</li>
                    <li class="grey">' || pck_icons.g_cloudinary_svg || pck_icons.g_netlify_svg || '</li>
                    <li class="yellow">ALWAYS FREE</li>
                    <li class="grey"></li>
                    <li class="blue"></li>
                    <li class="grey">
                        <button type="button" data-id="' || C.id || '" id="privacy-policy">' || pck_icons.g_privacy_svg ||'</button>
                    </li>
                    <li class="grey"></li>
                </ul>
                <dialog>
                    <div>
                        <div></div> <!-- empty div to make grid -->
                        <div class="content"></div>
                        <button type="button" class="close">&times;</button>
                    </div>
                </dialog>');
        END LOOP;
    END;

    /*
     **  Build authenticated page
     */
    FUNCTION buildAuthPage RETURN CLOB IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_user_name users.name%type;
        l_current_website website.id%type;    
    BEGIN
       SELECT id, name 
          INTO l_user_id, l_user_name
          FROM users
         WHERE email=apex_application.g_user;

        l_clob:=l_clob || TO_CLOB(
            '<nav>
                <button type="button" class="add-website">NEW WEBSITE</button>');


        FOR C IN (SELECT id, domain_name, rn, nb 
                    FROM
                    ( SELECT id, domain_name, ROW_NUMBER() OVER (ORDER BY COALESCE(updated_date, created_date) DESC) rn, COUNT(*) OVER () nb
                        FROM website
                       WHERE user_id=l_user_id
                    ) 
                    ORDER BY rn)
        LOOP
            IF (C.rn=1) THEN
                l_current_website:=C.id;
                l_clob:=l_clob || TO_CLOB(
                '<div class="dropdown">
                    <button type="button" class="show-dropdown" disabled data-websiteid="' || C.id || '">' || C.domain_name || '</button>
                    <button type="button" class="show-dropdown">&blacktriangledown;</button>
                    <ul class="dropdown-items">
                        <li><button type="button" class="deploy-website" data-websiteid="' || C.id || '">DEPLOY WEBSITE</button></li>
                        <li><button type="button" class="edit-website" data-websiteid="' || C.id || '">EDIT WEBSITE</button></li>
                        <li><button type="button" class="delete-website" data-websiteid="' || C.id || '">DELETE WEBSITE</button></li>');
            END IF;
            IF (C.rn>1) THEN
                l_clob:=l_clob || TO_CLOB(
                        '<li><button type="button" class="edit-website" data-websiteid="' || C.id || '">' || C.domain_name || '</button></li>');
            END IF;
            IF (C.rn=C.nb) THEN
                l_clob:=l_clob || TO_CLOB(
                    '</ul>
                </div>');
            END IF;
        END LOOP;

        l_clob:=l_clob || TO_CLOB(
                '<div class="dropdown">
                    <button type="button" class="show-dropdown" disabled>' || apex_application.g_user || '</button>
                    <button type="button" class="show-dropdown">&blacktriangledown;</button>
                    <ul class="dropdown-items">
                        <li><button type="button" class="fa signout">Sign out</button></li>
                        <li><button type="button" class="fa delete-me">Delete all content</button></li>
                    </ul>
                </div>
             </nav>');

        RETURN l_clob;
    END;

    /*
     **  Unauthenticated user - login page
     **
     **  Authenticated user - websites and articles authored by user
     */
    FUNCTION getPageContent RETURN CLOB IS
        l_clob CLOB;
        l_css_file_urls APEX_APPLICATION_PAGES.css_file_urls%type;
        l_javascript_file_urls APEX_APPLICATION_PAGES.javascript_file_urls%type;
        l_user_id users.id%type;
        l_user_name users.name%type;
        l_current_website website.id%type;
        l_page_css APEX_APPLICATION_STATIC_FILES.file_name%type;
        l_page_js APEX_APPLICATION_STATIC_FILES.file_name%type;
    BEGIN
        SELECT NVL(css_file_urls,' '), NVL(javascript_file_urls,' ')
          INTO l_css_file_urls, l_javascript_file_urls
          FROM APEX_APPLICATION_PAGES 
         WHERE application_id=apex_application.g_flow_id
           AND page_id=apex_application.g_flow_step_id;

        l_page_css:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.css';

        IF (INSTR(l_css_file_urls,l_page_css)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_css,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<style>' || apex_util.blob_to_clob(C.file_content) || '</style>';
            END LOOP;
        END IF;

        CASE apex_application.g_flow_step_id
            WHEN 1 THEN l_clob:=l_clob || buildLoginPage;
            WHEN 2 THEN l_clob:=l_clob || buildAuthPage;
        END CASE;

        /*
            l_clob:=l_clob || TO_CLOB('<ul class="cards" data-websiteid="' || l_current_website || '" role="list">');

            IF (l_current_website IS NOT NULL) THEN
                FOR C IN (
                    SELECT a.id,
                           a.is_public,
                           c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                           c.alt_text,
                           NVL2(a.nb_assets,1,0) first_asset,
                           NVL(a.nb_assets,0) nb_assets,
                           a.title, 
                           a.excerpt,
                           CASE WHEN a.excerpt IS NOT NULL AND a.word_count>0 THEN a.word_count || ' word' || CASE WHEN a.word_count>1 THEN 's' END END word_count,
                           NVL(a.updated_date, a.created_date) updated_date
                      FROM article a, asset c, website_article wa
                     WHERE a.author_user_id=l_user_id
                       AND a.cover_asset_id=c.id(+)
                       AND a.id=wa.article_id
                       AND wa.website_id=l_current_website
                     UNION ALL
                     SELECT -1, null, null, null, null,null,null,null,0,0,null,null,null,systimestamp from dual
                     ORDER BY updated_date DESC) 
                LOOP
                    l_clob:=l_clob || TO_CLOB(
                        buildArticle(
                            apex_application.g_flow_step_id, 
                            C.id, C.nb_assets, C.is_public, C.title, C.excerpt, C.word_count, C.updated_date, getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width), l_user_name));
                END LOOP;
            ELSE
                FOR C IN (
                    SELECT a.id,
                           a.is_public,
                           c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                           c.alt_text,
                           NVL2(a.nb_assets,1,0) first_asset,
                           NVL(a.nb_assets,0) nb_assets,
                           a.title, 
                           a.excerpt,
                           CASE WHEN a.excerpt IS NOT NULL AND a.word_count>0 THEN a.word_count || ' word' || CASE WHEN a.word_count>1 THEN 's' END END word_count,
                           NVL(a.updated_date, a.created_date) updated_date
                      FROM article a, asset c
                     WHERE a.author_user_id=l_user_id
                       AND a.cover_asset_id=c.id(+)
                       AND NOT EXISTS (SELECT null FROM website_article WHERE article_id=a.id)
                     UNION ALL
                     SELECT -1, null, null, null, null,null,null,null,0,0,null,null,null,systimestamp from dual
                     ORDER BY updated_date DESC) 
                LOOP
                    l_clob:=l_clob || TO_CLOB(
                        buildArticle(
                            apex_application.g_flow_step_id, 
                            C.id, C.nb_assets, C.is_public, C.title, C.excerpt, C.word_count, C.updated_date, getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width), l_user_name));
                END LOOP;            

        l_clob:=l_clob || TO_CLOB('</ul>');

        l_clob:=l_clob || TO_CLOB(
            '<dialog class="popup">
                <div>
                    <button type="button" class="close">&times;</button>
                    <h2></h2>
                    <p></p>
                    <button type="button" class="confirm">CONFIRM</button>
                </div>
            </dialog>
            <dialog class="website">
                <div>
                    <div></div> <!-- empty div for grid -->
                    <form>
                        <div>
                            <label for="domain-name">Domain name</label>
                            <input type="text" id="domain-name" maxlength="30" required style="inline-size:30ch"></input><span></span>
                        </div>
                        <div>
                            <label for="contact-email">Contact Email Address</label>
                            <input type="text" id="contact-email" maxlength="50" style="inline-size:50ch"></input><span></span>
                        </div>
                        <fieldset>
                            <legend>Default Image Dimension</legend>
                            <div class="cluster">
                                <input type="radio" id="image-dimension-s" name="image-dimension" value="0.25" checked></input>
                                <label for="image-dimension-s">Small</label>
                                <input type="radio" id="image-dimension-m" name="image-dimension" value="0.625"></input>
                                <label for="image-dimension-m">Medium</label>
                                <input type="radio" id="image-dimension-l" name="image-dimension" value="1"></input>
                                <label for="image-dimension-l">Large</label>
                            </div>
                        </fieldset>
                        <fieldset>
                            <legend>Website Template</legend>
                            <div class="cluster">' || buildTemplates() || '
                            </div>
                        </fieldset>
                        <input type="submit" value="APPLY CHANGES">
                    </form>
                    <button type="button" class="close">&times;</button>
                </div>
            </dialog>            
            <dialog class="preview">
                <div>
                    <div></div> <!-- empty div for preview grid -->
                    <div class="content ck-content"></div>
                    <button type="button" class="close" autofocus>&times;</button>
                </div>
            </dialog>
            <dialog class="editor">
                <div>
                    <div></div>
                    <div>
                        <div id="editor"></div>
                        <div class="button-container">
                            <div id="editor-status"></div>
                            <div id="word-count"></div>
                        </div>
                    </div>
                    <button type="button" class="close">&times;</button>
                </div>
            </dialog>            
            <dialog class="gallery">
                <div>
                    <button type="button" class="close" autofocus>&times;</button>
                    <nav>
                        <div>
                            <button type="button" class="thumbs-minus fa">&minus;</button>
                            <button type="button" class="thumbs-plus fa">&plus;</button>
                        </div>
                        <button type="button" class="list-performance">PERFORMANCE</button>
                    </nav>
                    <div class="gallery-container" role="region" aria-label="gallery">
                        <p class="instruction"></p>
                        <ul></ul>
                    </div>
                    <div class="gallery-overlay">
                        <img src="">
                        <fieldset>
                            <legend><span></span><button class="close-fieldset" type="button">&times;</button></legend>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                        </fieldset>
                        <span class="counter"></span>
                        <button type="button" class="close-fullscreen">&times;</button>
                        <button type="button" class="prev">&lt;</button>
                        <button type="button" class="next">&gt;</button>
                    </div>
                </div>
            </dialog>            
            <dialog class="perftable">
                <div>
                    <button type="button" class="close">&times;</button>
                    <div class="content"></div>
                </div>
            </dialog>
            <dialog class="cldapikey">
                <div>
                    <button type="button" class="close">&times;</button>
                    <p>Subscribe to a free <a href="https://cloudinary.com/users/register_free">Cloudinary plan</a> and enter your API key in the field below</p>
                    <p>Alternatively click "Continue as guest" for limited access</p>
                    <fieldset>
                        <legend>Cloudinary API Environment variable</legend>
                        <input type="text" id="cldapikey">
                    </fieldset>
                    <div class="button-container">
                        <button type="button" class="save">Save Changes</button>
                        <button type="button" class="guest">Continue as guest</button>
                    </div>
                </div>
            </dialog> 
            ');
        */

        l_clob:=l_clob || TO_CLOB('
            <input type="hidden" name="p_flow_id" value="' || apex_application.g_flow_id ||'" id="pFlowId">
            <input type="hidden" name="p_flow_step_id" value="' || apex_application.g_flow_step_id ||'" id="pFlowStepId">
            <input type="hidden" name="p_instance" value="' || APEX_CUSTOM_AUTH.GET_SESSION_ID ||'" id="pInstance">');            

        l_page_js:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.js';

        IF (INSTR(l_javascript_file_urls,l_page_js)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_js,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
            END LOOP;
        END IF;

        l_clob:=l_clob || chr(10) || TO_CLOB('
        <script>
            gRestUrl = "' || getRestUrl() || '";');
        IF (apex_application.g_flow_step_id=2) THEN
            l_clob:=l_clob || chr(10) || TO_CLOB('
            gHomeUrl = "' || apex_util.host_url('SCRIPT') || 'home";');
        END IF;
        l_clob:=l_clob || chr(10) || TO_CLOB('
        </script>');

        l_clob:=l_clob || TO_CLOB('
            <script type="module">
              import {onCLS, onFID, onLCP} from ''https://unpkg.com/web-vitals?module'';
              onCLS(addToVitalsQueue);
              onFID(addToVitalsQueue);
              onLCP(addToVitalsQueue);
            </script>');

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;

    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RETURN (NULL);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5);

        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);
            l_width INTEGER:=pWidth; 
        BEGIN
            IF (pWidth=0) THEN
                RETURN NULL;
            END IF;
            IF (pDimension IS NOT NULL) THEN
                IF (pDimension=1) THEN
                    RETURN NULL;
                ELSE
                    RETURN ',w_' || ROUND(pWidth*pDimension);
                END IF;
            END IF;
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-gWidthThumbnail) <= ABS(l_arr(l_right)-gWidthThumbnail)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;
            IF (l_arr(l_left)=pWidth) THEN
                RETURN NULL;
            END IF;
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        IF (pResourceType IS NOT NULL) THEN
            l_media_type:=getMediaType(pResourceType, pFormat);
            l_url:='https://res.cloudinary.com/' || pCloudname ||
                    CASE l_media_type
                        WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                        WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                        WHEN 'audio' THEN '/video/upload/q_auto,f_auto,w_' || gWidthThumbnail || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                    END;
        END IF;        
        RETURN (l_url);
    END;

    /*
    ** GET ARTICLE (PAGE) CONTENT FOR WEBSITE
    */
    PROCEDURE getWebsite(pWebsiteId IN website.id%type) IS
        l_user_id users.id%type;
    BEGIN
        l_user_id:=getUserId();

        apex_json.open_object;

        FOR C IN (
            SELECT domain_name, contact_email, DECODE(image_dimension,0.25,'s',0.625,'m',1,'l') image_dimension, template, favicon_url, trade_name,affiliation_link_img,affiliation_link_url
              FROM website 
             WHERE id=pWebsiteId
               AND user_id=l_user_id) 
        LOOP
            apex_json.write('domain_name', C.domain_name);
            apex_json.write('contact_email', C.contact_email);
            apex_json.write('image_dimension', 'image-dimension-' || C.image_dimension);
            apex_json.write('template', 'template-' || LOWER(C.template));
        END LOOP;

        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
    ** GET ARTICLE (PAGE) CONTENT FOR WEBSITE
    */
    PROCEDURE getWebsiteArticles(pWebsiteId IN website.id%type) IS
        l_user_id users.id%type;
        l_user_name users.name%type;
        l_clob CLOB;
    BEGIN
        l_user_id:=getUserId();
        SELECT name INTO l_user_name FROM users WHERE id=l_user_id;

        FOR C IN (
            SELECT a.id,
                   a.is_public,
                   c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                   NVL(a.nb_assets,0) nb_assets,
                   a.title, 
                   a.excerpt,
                   CASE WHEN a.excerpt IS NOT NULL AND a.word_count>0 THEN a.word_count || ' word' || CASE WHEN a.word_count>1 THEN 's' END END word_count,
                   NVL(a.updated_date, a.created_date) updated_date,
                   wa.display_order display_order
              FROM article a, website_article wa, asset c
             WHERE wa.website_id=pWebsiteId
               AND a.id=wa.article_id
               AND a.cover_asset_id=c.id(+)
             UNION ALL
             SELECT -1, null, null, null, null,null,null,0,null,null,null,systimestamp,-1 from dual
             ORDER BY display_order) 
        LOOP
            l_clob:=l_clob || TO_CLOB(
                buildArticle(
                    2, 
                    C.id, C.nb_assets, C.is_public, C.title, C.excerpt, C.word_count, C.updated_date, getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width), 
                    l_user_name));
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    PROCEDURE getThumbnailContent(pArticleId IN article.id%type, pUserId IN users.id%type, pNbAssets IN OUT article.nb_assets%type, pInstruction IN OUT NOCOPY VARCHAR2, pContent IN OUT NOCOPY CLOB) 
    IS
        l_url_image VARCHAR2(300);
        l_media_type VARCHAR2(5);   
    BEGIN
        FOR C IN (
            SELECT a.id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(a.created_date,'dd-Mon-yyyy') uploaded, 
                   DECODE(a.width,0,gWidthThumbnail,a.width) width, DECODE(a.height,0,gWidthThumbnail,a.height) height, REPLACE(a.alt_text,'"','&quot;') alt_text, a.description, a.bytes, a.format,
                   COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY a.display_order) rn,
                   t.nb_assets, NVL(u.maxtouchpoints,0) maxtouchpoints
              FROM asset a, article t, users u
             WHERE t.id=pArticleId
               AND a.article_id=t.id
               AND t.author_user_id=NVL(pUserId, t.author_user_id)
               AND u.id=t.author_user_id
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            IF (C.rn=1) THEN
                pNbAssets:=C.nb_assets;
                pInstruction:=CASE WHEN C.maxtouchpoints > 1 THEN 'Tap' ELSE 'Click' END || ' Image to view in full screen' || 
                       CASE WHEN pUserId IS NOT NULL AND C.nb_assets > 1 THEN 
                            '<span>|</span>Drag and drop images to reorder<span>|</span>First image is article cover' END;
            END IF;

            pContent:=pContent || TO_CLOB('
                <li class="card" tabindex="0"' || CASE WHEN pUserId IS NOT NULL THEN ' data-id="' || C.id || '"' END || '>
                    <div class="button-container">
                        <span>' || C.rn || '/' || C.nb || '</span>' || 
                        CASE WHEN pUserId IS NOT NULL THEN
                        '<div class="dropdown">
                            <button type="button" class="fa fa-caret-down show-dropdown">&blacktriangledown;</button>
                            <ul class="dropdown-items">
                                <li><button type="button" class="fa fa-refresh update-asset">Update Text</button></li>
                                <li><button type="button" class="fa fa-id-card view-performance">Performance</button></li>
                                <li><button type="button" class="fa fa-trash delete-asset">Delete</button></li>
                            </ul>
                        </div>' END || '
                    </div>');

            l_url_image:=getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);
            l_media_type:=getMediaType(C.resource_type, C.format);

            pContent:=pContent || TO_CLOB('<img data-dimensions="'  || 
                                            ROUND(C.width*.25) || 'x' || ROUND(C.height*.25) || ':' || 
                                            ROUND(C.width*.625) || 'x' || ROUND(C.height*.625) || ':' || 
                                            C.width || 'x' || C.height || '" src="' || l_url_image || '"' || CASE WHEN l_media_type='video' THEN ' style="display:none"' END || '>');

            CASE l_media_type

                WHEN 'video' THEN
                    pContent:=pContent || TO_CLOB(
                    '<video controls preload="metadata" poster="' || l_url_image || '">
                        <source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>
                    </video>');

                WHEN 'audio' THEN
                    l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                    pContent:=pContent || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>
                    </audio>');

                ELSE NULL;

            END CASE;

            pContent:=pContent || TO_CLOB('
                <div>
                    <label for="alt-text">Alt text<span></span></label>
                    <textarea id="alt-text" maxlength="50"' || CASE WHEN pUserId IS NULL THEN ' readonly' END || '>' || C.alt_text || '</textarea>
                </div>
                <div>
                    <label for="description">Description<span></span></label>
                    <textarea id="description" maxlength="500"' || CASE WHEN pUserId IS NULL THEN ' readonly' END || '>' || C.description || '</textarea>                    
                </div>');

            pContent:=pContent || TO_CLOB('</li>');

        END LOOP;

    END;

    /*
     **  Build gallery of thumbnail images from ASSET table 
     **  Executed in response to user requesting gallery of media assets for a given article
     */
    PROCEDURE getThumbnails(pArticleId IN article.id%type) IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_instruction VARCHAR2(300);
        n PLS_INTEGER;
    BEGIN
        l_user_id:=getUserId();

        getThumbnailContent(pArticleId, l_user_id, n, l_instruction, l_clob);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.write('instruction', l_instruction);

        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

END;
/