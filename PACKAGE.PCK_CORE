CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CORE" AS
    --
    TYPE session_data_rt IS RECORD (
        app_id NUMBER, 
        session_id NUMBER,
        page_id NUMBER,
        maxtouchpoints NUMBER,
        timezone VARCHAR2(30),
        canuse_popover BOOLEAN,
        canuse_eyedropper BOOLEAN,
        user_id NUMBER
    );
    --
    TYPE fluid_type_rt IS RECORD(
        property VARCHAR2(30),
        value VARCHAR2(200)
    );
    TYPE fluid_type_t IS TABLE OF fluid_type_rt;
    --
    FUNCTION buildBlogList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pIncludeLinks IN BOOLEAN DEFAULT TRUE) RETURN CLOB;
    --
    FUNCTION buildCssRoot(pWebsiteId IN website.id%type, pApplicationId IN NUMBER, pIncludeFontLink IN BOOLEAN DEFAULT FALSE) RETURN VARCHAR2;
    --
    FUNCTION buildMediaList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pIncludeLinks  IN BOOLEAN DEFAULT TRUE) RETURN CLOB;
    --
    FUNCTION getFluidTypes(pMinFontSize IN NUMBER, pMinWidthPx IN NUMBER, pMinScale IN NUMBER, pMaxFontSize IN NUMBER, pMaxWidthPx IN NUMBER, pMaxScale IN NUMBER) RETURN fluid_type_t;
    --
    FUNCTION buildContactForm(pContactEmail IN website.contact_email%type DEFAULT NULL, pUrl IN VARCHAR2) RETURN VARCHAR2;
    --
    FUNCTION buildNavLabel(pId IN INTEGER, pLabel IN VARCHAR2, pClassName IN VARCHAR2, pAttrName IN VARCHAR2 DEFAULT NULL, pAttrValue IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION buildPageNav(pWebsiteId IN website.id%type) RETURN CLOB;
    --
    FUNCTION buildPushableButton(pClassName IN VARCHAR2, pHTMLSymbol IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION getPageContent RETURN CLOB;
    --
    FUNCTION getRestUrl RETURN VARCHAR2;
    --
    FUNCTION getSessionData RETURN session_data_rt;
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error;
    --
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type);
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CORE" AS

    FUNCTION getFluidTypes(pMinFontSize IN NUMBER, pMinWidthPx IN NUMBER, pMinScale IN NUMBER, pMaxFontSize IN NUMBER, pMaxWidthPx IN NUMBER, pMaxScale IN NUMBER) RETURN fluid_type_t IS
        l_fluid_type fluid_type_t:=fluid_type_t();
        l_min_font NUMBER;
        l_max_font NUMBER;
        l_min_width NUMBER;
        l_max_width NUMBER;
        l_slope NUMBER;
        l_intersect NUMBER;
        l_clamp VARCHAR2(200);

        TYPE tt_spaces IS RECORD(dimension VARCHAR2(3), multiplier NUMBER);
        TYPE t_spaces IS TABLE OF tt_spaces INDEX BY PLS_INTEGER;
        l_spaces t_spaces:=t_spaces(
            1=>tt_spaces('3xs',0.25), 
            2=>tt_spaces('2xs',0.5), 
            3=>tt_spaces('xs',0.75), 
            4=>tt_spaces('s',1), 
            5=>tt_spaces('m',1.5), 
            6=>tt_spaces('l',2), 
            7=>tt_spaces('xl',3), 
            8=>tt_spaces('2xl',4), 
            9=>tt_spaces('3xl',6)
        );

        FUNCTION round4dp(pNumber IN NUMBER) RETURN VARCHAR2 IS
            l_number NUMBER;
        BEGIN
            l_number:=ROUND(pNumber,4);
            IF (MOD(l_number,1)=0) THEN /* integer */
                RETURN (TO_CHAR(l_number));
            ELSE
                RETURN(LTRIM(RTRIM(TO_CHAR(ROUND(pNumber,4),'fm90.0000'),'0')));
            END IF;
        END;

        PROCEDURE addFluidType(pProperty IN VARCHAR2) IS 
        BEGIN
            l_fluid_type.EXTEND;
            l_fluid_type(l_fluid_type.LAST).property:=pProperty;
            l_clamp:='clamp(' || round4dp(l_min_font) || 'rem,' || round4dp(l_intersect) || 'rem + ' || round4dp(l_slope * 100) || 'cqi,' || round4dp(l_max_font) || 'rem)';
            l_fluid_type(l_fluid_type.LAST).value:=l_clamp;
        END;

    BEGIN
        l_min_width:=pMinWidthPx/16; 
        l_max_width:=pMaxWidthPx/16;
        FOR i IN -2 .. 6 LOOP
            IF (i<0) THEN
                l_min_font:=pMinFontSize/(pMinScale**ABS(i));
                l_max_font:=pMaxFontSize/(pMaxScale**ABS(i));
            ELSE
                l_min_font:=pMinFontSize*(pMinScale**i);
                l_max_font:=pMaxFontSize*(pMaxScale**i);
            END IF;
            l_slope:=(l_max_font - l_min_font) / (l_max_width - l_min_width);
            l_intersect:= -l_min_width * l_slope + l_min_font;
            addFluidType('--step-' || i);
        END LOOP;

        FOR i IN 1..l_spaces.COUNT LOOP
            l_min_font:=pMinFontSize*l_spaces(i).multiplier;
            l_max_font:=pMaxFontSize*l_spaces(i).multiplier;
            l_slope:=(l_max_font - l_min_font) / (l_max_width - l_min_width);
            l_intersect:= -l_min_width * l_slope + l_min_font;
            addFluidType('--space-' || l_spaces(i).dimension);
        END LOOP;

        RETURN l_fluid_type;
    END;

    FUNCTION getSessionData RETURN session_data_rt IS
        l_apex_session VARCHAR2(50);
        l_parts apex_t_varchar2;
        l_session_data session_data_rt;
    BEGIN
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');
        IF (l_apex_session IS NULL) THEN
            l_session_data.app_id:=apex_application.g_flow_id;
            l_session_data.session_id:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
            l_session_data.page_id:=apex_application.g_flow_step_id;
        ELSE        
            l_parts:=apex_string.split(l_apex_session,',');
            l_session_data.app_id:=l_parts(1);
            l_session_data.session_id:=l_parts(2);
            l_session_data.page_id:=l_parts(3);
        END IF;

        FOR C IN (SELECT timezone, supports_popover, supports_eyedropper FROM session_data WHERE session_id=l_session_data.session_id) LOOP
            l_session_data.timezone:=C.timezone;
            l_session_data.canuse_popover:=CASE WHEN C.supports_popover='true' THEN TRUE ELSE FALSE END;
            l_session_data.canuse_eyedropper:=CASE WHEN C.supports_eyedropper='true' THEN TRUE ELSE FALSE END;
        END LOOP;

        FOR C IN (
            SELECT u.id
              FROM apex_workspace_sessions s, users u
             WHERE s.apex_session_id=l_session_data.session_id
               AND s.user_name=u.email )
        LOOP
            l_session_data.user_id:=C.id;
        END LOOP;

        IF (l_session_data.user_id IS NULL AND l_session_data.page_id=2) THEN
            RAISE_APPLICATION_ERROR(-20000,'YOUR SESSION HAS EXPIRED');
        END IF;

        RETURN l_session_data;
        EXCEPTION WHEN VALUE_ERROR THEN RETURN l_session_data;
    END;

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg);
        COMMIT;
    END;

    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg);
        COMMIT;
    END;

    /*
    **  Log ORACLE exceptions.
    */
    PROCEDURE log_error IS
        l_depth PLS_INTEGER;
        l_stack LONG;
        l_apex_session VARCHAR2(50);
    BEGIN
        ROLLBACK;

        /* Format call stack which includes procedure names */
        l_depth:=UTL_CALL_STACK.dynamic_depth;
        l_stack:='CALL STACK'||chr(10);
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'Line: ' || UTL_CALL_STACK.unit_line(i) || ' ' || UTL_CALL_STACK.owner(i)||'.'||UTL_CALL_STACK.concatenate_subprogram(UTL_CALL_STACK.subprogram(i)) || chr(10);
        END LOOP;

        /* Format error backtrace */
        l_stack:=l_stack || 'ERROR BACKTRACE'||chr(10);
        l_depth := UTL_CALL_STACK.error_depth;
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'ORA-' || UTL_CALL_STACK.error_number(i) || ' - ' || UTL_CALL_STACK.error_msg(i) || chr(10);
        END LOOP;

        log(l_stack);

        /* If invoked in Apex session return sqlcode, sqlerrm in json payload */
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');   

        apex_json.open_object; 
        apex_json.write('success', FALSE); 
        apex_json.write('sqlcode', SQLCODE); 
        apex_json.write('sqlerrm', SQLERRM); 
        apex_json.close_object;

        EXCEPTION WHEN VALUE_ERROR THEN NULL;
    END;

    /*
    ** Return RESTful API url
    */
    FUNCTION getRestUrl RETURN VARCHAR2 IS
        l_rest_url VARCHAR2(200);
    BEGIN
        SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix
          INTO l_rest_url
          FROM user_ords_schemas s, user_ords_modules m
         WHERE s.parsing_schema=sys_context('userenv','current_schema')
           AND m.name='public';

        RETURN (l_rest_url);
    END;

    /* 
    ** Copy "adfreesites.edu" for new users
    */ 
    PROCEDURE createStarterWebsite(pUserId IN users.id%type) IS
        l_domain_name website.domain_name%type;
        l_username users.name%type;
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_netlify_site_id website.netlify_site_id%type;
        l_website_id website.id%type;
        l_parent_id article.id%type;
        l_site_created BOOLEAN:=FALSE;
        n PLS_INTEGER:=0;
    BEGIN
        SELECT REPLACE(SUBSTR(email,1,INSTR(email,'@')-1),'.','-'), name INTO l_domain_name, l_username FROM users WHERE id=pUserId;

        l_json:=new JSON_OBJECT_T;
        WHILE TRUE LOOP
            EXIT WHEN n>2;
            l_json.put('name', l_domain_name);
            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites', pMethod=>'POST', pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
            EXIT WHEN apex_web_service.g_status_code<>422;
            n:=n+1;
            l_domain_name:=l_domain_name||TO_CHAR(n);
        END LOOP;
        SELECT site_id INTO l_netlify_site_id FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));

        SELECT id INTO l_website_id FROM website WHERE domain_name='adfreesites.edu';
 
        INSERT INTO website(id, domain_name, user_id, netlify_site_id,  updated_date, favicon_url,font, max_width, color_text, color_background, color_primary, min_font_size, min_width_px, min_scale, max_font_size, max_width_px, max_scale)
        SELECT seq_website.nextval, l_domain_name, pUserId, l_netlify_site_id, current_timestamp, favicon_url,font, max_width, color_text, color_background, color_primary, min_font_size, min_width_px, min_scale, max_font_size, max_width_px, max_scale
          FROM website 
         WHERE id=l_website_id;

        FOR C IN (
            SELECT article_id, display_order, created_date, navigation_label, updated_date, user_id, contact_form, collection_type, page_title, page_description
              FROM website_article 
             WHERE website_id=l_website_id) 
        LOOP
            INSERT INTO article(id, title, author_user_id, word_count, updated_date, body_html, nb_assets, display_order)
            SELECT seq_article.nextval, title, pUserId, word_count, current_timestamp, CASE WHEN C.display_order=1 THEN REPLACE(body_html,'<h1>&nbsp;</h1>','<h1>Welcome ' || INITCAP(l_username) || '</h1>') ELSE body_html END, nb_assets, display_order
              FROM article
             WHERE id=C.article_id;
            
            INSERT INTO website_article(website_id, article_id, display_order, navigation_label, updated_date, user_id, contact_form, collection_type, page_title, page_description)
            VALUES (seq_website.currval, seq_article.currval, C.display_order, C.navigation_label, current_timestamp, pUserid, C.contact_form, C.collection_type, C.page_title, C.page_description);

            IF (C.collection_type<>'N/A') THEN
                l_parent_id:=seq_article.currval;
                FOR C1 IN (SELECT title, excerpt, word_count, updated_date, body_html, nb_assets, display_order
                             FROM article
                            WHERE parent_id=C.article_id)
                LOOP
                    INSERT INTO article(id, parent_id, title, author_user_id, excerpt, word_count, updated_date, body_html, nb_assets, display_order)
                    VALUES (seq_article.nextval, l_parent_id, C1.title, pUserId, C1.excerpt, C1.word_count, current_timestamp, C1.body_html, C1.nb_assets, C1.display_order);
                END LOOP;
            END IF;
        END LOOP;
    END;

    /* 
    ** Build page CSS
    */ 
    FUNCTION buildCssRoot(pWebsiteId IN website.id%type, pApplicationId IN NUMBER, pIncludeFontLink IN BOOLEAN DEFAULT FALSE) RETURN VARCHAR2 IS
        l_fluid_types fluid_type_t;
        l_deploy_css LONG;
    BEGIN
        FOR C IN (SELECT font, max_width, color_text, color_background, color_primary, css,
                         min_font_size, min_width_px, min_scale, max_font_size, max_width_px, max_scale
                    FROM website
                   WHERE id=pWebsiteId)
        LOOP
            IF (C.css IS NOT NULL) THEN
                l_deploy_css:=C.css;
                CONTINUE;
            END IF;

            l_fluid_types:=getFluidTypes(C.min_font_size, C.min_width_px, C.min_scale, C.max_font_size, C.max_width_px, C.max_scale);
            
            l_deploy_css:=
            ':root {' || chr(10) || 
            chr(9) || '/* Custom properties for Fluid typography and spacing */' || chr(10);

            FOR i IN 1..l_fluid_types.COUNT LOOP
                l_deploy_css:=l_deploy_css || chr(9) || l_fluid_types(i).property || ': ' || l_fluid_types(i).value || ';' || chr(10);
            END LOOP;
            l_deploy_css:=l_deploy_css || chr(10) ||
            chr(9) || '--font-family: "' || C.font || '";' || chr(10) ||
            chr(9) || '--max-width: ' || C.max_width || ';' || chr(10) ||
            chr(9) || '--color-text: ' || C.color_text || ';' || chr(10) ||
            chr(9) || '--color-background: ' || C.color_background || ';' || chr(10) ||
            chr(9) || '--color-primary: ' || C.color_primary || ';' || chr(10) ||
            '}';

            IF (pIncludeFontLink) THEN
                l_deploy_css:=l_deploy_css ||chr(10) ||
                '<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=' || REPLACE(C.font,' ','+') || '&display=swap">' || chr(10);
            END IF;

            FOR C1 IN (SELECT apex_util.blob_to_clob(file_content) css
                         FROM apex_application_static_files 
                        WHERE application_id=pApplicationId
                          AND file_name='deploy.css')  /* Can't use min file because stupid Apex editor removes nested css */
            LOOP
                l_deploy_css:=l_deploy_css || chr(10) || C1.css;
                IF (pIncludeFontLink) THEN
                    l_deploy_css:=l_deploy_css ||chr(10) ||
'pre:has(.language-html) {
  position: relative;
  &::before {
    background: #000;
    color: #fff;
    content: "HTML code block not shown in Codepen";
    position: absolute;
    padding:0.5em;
    left: 1em;
    top: 0;
  }
}
code.language-html {
  display:none;
}';
                END IF;
            END LOOP;
        END LOOP;

        RETURN (l_deploy_css);
    END;

    /*
     **  Build Contact Form
     */
    FUNCTION buildContactForm(pContactEmail IN website.contact_email%type, pUrl IN VARCHAR2) RETURN VARCHAR2 IS
        l_form LONG;
        l_terraform_organization_name users.terraform_organization_name%type;
        l_terraform_workspace_name users.terraform_workspace_name%type;
        l_terraform_private_key users.terraform_private_key%type;
        l_aws_gateway_url VARCHAR2(200);
        l_terraform_private_key_raw RAW(4000);
        l_signed_data RAW(4000);
        l_signature_contact_email VARCHAR2(500);
        l_clob CLOB;
    BEGIN
        /* 
        ** pUserId passed means we have to build form for deployment - use logged on user's email address unless website.contact_email is not null
        */
        IF (pContactEmail IS NOT NULL) THEN
            pck_api.getTerraformData(pUserId=>null, pTerraformOrganizationName=>l_terraform_organization_name, pTerraformWorkspaceName=>l_terraform_workspace_name, pTerraformPrivateKey=>l_terraform_private_key);
            pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>'api/v2/organizations/' || l_terraform_organization_name || '/workspaces/' || l_terraform_workspace_name, pMethod=>'GET', pData=>l_clob);

            FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
                pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob);
                FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                    l_aws_gateway_url:=C1.value || '/';
                END LOOP;
            END LOOP;

            l_terraform_private_key_raw:=utl_i18n.string_to_raw(regexp_replace(l_terraform_private_key,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\s?|\s)',''));

            l_signed_data:=DBMS_CRYPTO.SIGN(src =>utl_i18n.string_to_raw(pContactEmail||pUrl), prv_key =>l_terraform_private_key_raw, pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,sign_alg =>dbms_crypto.SIGN_SHA256_RSA);
            --l_signed_data:=DBMS_CRYPTO.SIGN(src =>utl_i18n.string_to_raw(pContactEmail), prv_key =>l_terraform_private_key_raw, pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,sign_alg =>dbms_crypto.SIGN_SHA256_RSA);

            l_signature_contact_email:=utl_i18n.raw_to_char(utl_encode.base64_encode(l_signed_data));
        END IF;

        l_form:=
'<div class="contact">
    <form>
        <p>Send your contact details securely to</p>
        <span class="copy-content">' || pContactEmail || '
            <svg class="icon">
                <use href="#copy"></use>
            </svg>
            <span class="result"></span>
        </span>
        <div>
            <label for="nameInput">Name</label>
            <input type="text" id="nameInput" name="name" required minlength="1" maxlength="50">
        </div>
        <div>
            <label for="emailInput">Email</label>
            <input type="email" id="emailInput" name="email" required maxlength="50">
        </div>
        <div>
            <label for="messageInput">Message</label>
            <textarea id="messageInput" name="message" required minlength="1" maxlength="400" rows="5" cols="40"></textarea>
        </div>
        <input type="hidden" name="contactEmail" value="' || pContactEmail || '">
        <input type="hidden" name="signatureContactEmail" value="' || l_signature_contact_email || '">
        <input type="hidden" name="url" value="' || pUrl || '">
        <div>
            <button type="submit" class="pushable" data-url="' || l_aws_gateway_url || '">
                <span class="shadow"></span>
                <span class="edge"></span>
                <span class="front">SEND</span>
            </button>
            <span class="result">Thank you</span>
        </div>
        <p>Sent digitally signed with end-to-end encryption</p>
    </form>
</div>
<svg style="display:none">
    <symbol id="copy" viewBox="0 0 448 512">
        <path d="M384 336H192c-8.8 0-16-7.2-16-16V64c0-8.8 7.2-16 16-16l140.1 0L400 115.9V320c0 8.8-7.2 16-16 16zM192 384H384c35.3 0 64-28.7 64-64V115.9c0-12.7-5.1-24.9-14.1-33.9L366.1 14.1c-9-9-21.2-14.1-33.9-14.1H192c-35.3 0-64 28.7-64 64V320c0 35.3 28.7 64 64 64zM64 128c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H256c35.3 0 64-28.7 64-64V416H272v32c0 8.8-7.2 16-16 16H64c-8.8 0-16-7.2-16-16V192c0-8.8 7.2-16 16-16H96V128H64z"></path>
    </symbol>
</svg>';

        RETURN (l_form);
    END;

    /*
    ** Create excerpt of complete words from the text up to approx. 160 characters.
    */
    FUNCTION getExcerpt(pLength IN INTEGER, pText IN VARCHAR2) RETURN VARCHAR2 IS
        l_words apex_t_varchar2;
        l_excerpt VARCHAR2(200);
        l_rem PLS_INTEGER;
    BEGIN
        l_words:=apex_string.split(REPLACE(pText,CHR(10),' '),' ');
        FOR i IN 1..l_words.COUNT LOOP
            IF (l_words(i) IS NULL) THEN
                CONTINUE;
            END IF;
            IF (LENGTHB(l_words(i))>25) THEN
                l_words(i):=SUBSTR(l_words(i),1,25);
            END IF;
            l_rem:=pLength - NVL(LENGTHB(l_excerpt),0);
            IF (LENGTHB(l_words(i)) <= l_rem) THEN
                l_excerpt:=l_excerpt || l_words(i) || ' ';
            ELSE
                l_excerpt:=RTRIM(l_excerpt) || '...';
                EXIT;
            END IF;
        END LOOP;
        RETURN (l_excerpt);
    END;

    /*
    ** Construct index of Blog entries
    */
    FUNCTION buildBlogList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pIncludeLinks  IN BOOLEAN) RETURN CLOB IS
        l_html CLOB;
        l_path website_article.navigation_label%type;
        l_href VARCHAR2(200);
        l_excerpt_length INTEGER;
        n PLS_INTEGER:=0;
    BEGIN
        SELECT apex_string_util.get_slug(navigation_label) INTO l_path FROM website_article WHERE website_id=pWebsiteId AND article_id=pArticleId;

        apex_escape.set_html_escaping_mode('E');
        l_html:=l_html || '<ol class="blog">';
        FOR C IN (SELECT art.body_html, art.title, art.excerpt, NVL(art.deployed_date,art.updated_date) deployed_date, art.word_count, ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width
                    FROM article art, asset ass
                   WHERE art.parent_id=pArticleId
                     AND ass.id(+)=art.cover_asset_id
                     ORDER BY art.display_order NULLS FIRST, art.updated_date DESC ) 
        LOOP
            
            l_html:=l_html || 
            '<li class="card">';
            IF (C.cld_cloud_name IS NOT NULL) THEN
                l_html:=l_html || 
                '<img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">';
            END IF;
            IF (pIncludeLinks) THEN
                l_href:='/' || l_path || '/' || apex_string_util.get_slug(C.title);
            ELSE
                l_href:='#';
            END IF;
            n:=n+1;
            IF (n=1) THEN
                l_excerpt_length:=160;
            ELSE
                l_excerpt_length:=160;
            END IF;
            l_html:=l_html || 
                '<div class="text">
                    <h2>
                        <a href="' || l_href || '">' || C.title || '</a>
                    </h2>
                    <span class="date">' || TO_CHAR(C.deployed_date,'dd Month YYYY') || '</span>
                    <p>' || getExcerpt(l_excerpt_length,dbms_lob.substr(utl_i18n.unescape_reference(apex_escape.striphtml(C.body_html)),200,NVL(LENGTHB(C.title),0)+1))  || '</p>
                    <span class="words">' || TO_CHAR(C.word_count) || ' words</span>
                </div>
            </li>';
        END LOOP;
        l_html:=l_html || '</ol>';
        RETURN (l_html);
    END;

    /*
    ** Construct index of Media entries
    ** pIncludeLinks = FALSE for building MEDIA collection type landing page without links (Codepen)
    */
    FUNCTION buildMediaList(pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pIncludeLinks IN BOOLEAN) RETURN CLOB IS
        l_html CLOB;
        l_path website_article.navigation_label%type;
        l_href VARCHAR2(200);
    BEGIN
        IF (pIncludeLinks) THEN
            SELECT apex_string_util.get_slug(navigation_label) INTO l_path FROM website_article WHERE website_id=pWebsiteId AND article_id=pArticleId;
        ELSE
            l_href:='#';
        END IF;

        l_html:=l_html || '<ol class="gallery-list">';
        FOR C IN (SELECT art.title, ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width
                    FROM article art, asset ass
                   WHERE art.parent_id=pArticleId
                     AND ass.id=art.cover_asset_id
                   ORDER BY art.display_order NULLS FIRST, art.updated_date DESC ) 
        LOOP
            IF (pIncludeLinks) THEN
                l_href:='/' || l_path || '/' || apex_string_util.get_slug(C.title);
            END IF;
            l_html:=l_html ||
            '<li>
                <a href="' || l_href || '"><img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
            </li>';
        END LOOP;
        l_html:=l_html || '</ol>';

        RETURN (l_html);
    END;

    /*
    ** the miserable privacy policy - Faceook insists that it can be accessed by an application url
    */
    FUNCTION buildPrivacyPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT body_html FROM article WHERE id=19124)   
        LOOP
            RETURN C.body_html;
        END LOOP;
    END;

    /*
     **  Login page
     */
    FUNCTION buildLoginPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT id FROM article WHERE id=19124)  -- the miserable privacy policy
        LOOP
            RETURN TO_CLOB('
                <ul class="container">
                    <li class="red">' || pck_icons.g_oracle_svg || '</li>
                    <li class="grey login">
                        <!--<a class="button" href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Facebook&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_facebook_svg ||'Login w/ Facebook</a>-->
                        <a class="button" href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Google&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_google_svg ||'Login w/ Google</a>
                        <!--<button data-id="' || C.id || '">Priv</button>-->
                    </li>
                    <li class="grey">' || pck_icons.g_netlify_svg || '</li>
                    <li class="grey">' || pck_icons.g_cloudinary_svg || '</li>
                    <li class="yellow">ALWAYS FREE</li>
                    <li class="grey"></li>
                    <li class="blue"></li>
                    <li class="grey"></li>
                    <li class="grey"></li>
                </ul>
                <dialog>
                    <div>
                        <div></div> <!-- empty div to make grid -->
                        <div class="content"></div>
                        <button type="button" class="close">&times;</button>
                    </div>
                </dialog>');
        END LOOP;
    END;

    FUNCTION buildTopNav(pIsAdmin IN INTEGER) RETURN VARCHAR2 IS
    BEGIN
        RETURN (
        '<nav class="top-nav">
            <div class="dropdown">
                <span>' || apex_application.g_user || '</span>
                <button type="button" class="show-dropdown">&blacktriangledown;</button>
                <ul class="dropdown-items">                    
                    <li class="api-keys">
                        <button type="button" class="with-icon api-keys">
                            &#128273;
                            API Keys
                        </button>
                    </li>
                    <li class="account-usage">
                        <button type="button" class="with-icon account-usage">
                           %
                            Account Usage
                        </button>
                    </li>
                    <li class="session-log">
                        <button type="button" class="with-icon session-log">
                            &#9776;
                            Technical Log
                        </button>
                    </li>' || 
                    CASE WHEN pIsAdmin<>1 THEN
                    '<li class="delete-user">
                        <button type="button" class="with-icon delete-user">
                            &#128686;
                            Delete My Data
                        </button>
                    </li>'
                    END ||
                    '<li class="signout">
                        <button type="button" class="with-icon">
                            &#x21e6;
                            Log Out
                        </button>
                    </li>  
                </ul>
            </div>
        </nav>');
    END;

    /*
    **  Vuild Website Page navigation label with supporting elements
    */
    FUNCTION buildNavLabel(pId IN INTEGER, pLabel IN VARCHAR2, pClassName IN VARCHAR2, pAttrName IN VARCHAR2 DEFAULT NULL, pAttrValue IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
        l_html LONG;
    BEGIN
        l_html:=
        '<div data-id="' || pId || '">
            <button type="button" class="' || pClassName || '">
                &#128397;
            </button>
            <a href="" class="nav-label">' || pLabel || '</a>';

        IF (pClassName='page-options' AND pAttrName IS NOT NULL) THEN
            l_html:=l_html || 
            '<div class="dropdown">
                <button type="button" class="show-dropdown show-subpages" data-'|| pAttrName || '="' || pAttrValue || '">&blacktriangledown;</button>
                <ol class="dropdown-items"></ol>
            </div>';
        END IF;
        l_html:=l_html || '</div>';

        RETURN(l_html);
    END;

    FUNCTION buildWebsiteNav(pUserId IN users.id%type, pSelectedWebsiteId IN OUT website.id%type, pNbWebsites IN NUMBER) RETURN VARCHAR2 IS
        l_html LONG;
        l_dropdown LONG;
        n PLS_INTEGER:=0;
    BEGIN
        l_dropdown:=
        '<section class="dropdown"' || CASE WHEN pNbWebsites=0 THEN ' style="display:none"' END ||'>
            <button type="button" class="show-dropdown">&blacktriangledown;</button>
            <ul class="dropdown-items">';
        FOR C IN (SELECT w.id, w.domain_name, REPLACE(w.domain_name,'.','-') || '.netlify.app' url, w.netlify_site_id, w.netlify_site_id_custom, ROW_NUMBER() OVER (ORDER BY COALESCE(w.updated_date,w.created_date) DESC) rn, COUNT(*) OVER() nb
                    FROM website w
                   WHERE w.user_id=pUserId
                   ORDER BY w.domain_name)
        LOOP
            n:=n+1;
            IF (C.rn=1) THEN
                pSelectedWebsiteId:=C.id;
                l_html:=l_html ||
                '<div class="website-nav" data-id="' || C.id || '">
                    <button type="button" class="website-options">
                        &#128397;
                    </button>
                    <a href="https://' || C.url || '" target="a_blank" class="selected">' || C.domain_name || '</a>
                    <button type="button" class="deploy-website" data-site_id="' || C.netlify_site_id || '">DEPLOY<span class="env">TEST</span></button>
                    <button type="button" class="visits" data-domain="'|| C.url || '">VISITS<span class="env">TEST</span></button>
                    <button type="button" class="performance" data-domain="'|| C.url || '">METRICS<span class="env">TEST</span></button>';
            END IF;
            l_dropdown:=l_dropdown ||
            '<li>
                <button type="button" class="edit-website with-icon" data-id="' || C.id || '" data-site_id="' || C.netlify_site_id || '" data-domain="' || C.domain_name || '">' || C.domain_name || '<span class="env">TEST</span></button>
            </li>';
            IF (C.netlify_site_id_custom IS NOT NULL) THEN
                l_dropdown:=l_dropdown ||
                '<li>
                     <button type="button" class="edit-website with-icon" data-id="' || C.id || '" data-site_id="' || C.netlify_site_id_custom || '" data-domain="' || C.domain_name || '">' || C.domain_name || '<span class="env">LIVE</span></button>
                </li>';
            END IF;
            IF (n<C.nb) THEN
                l_dropdown:=l_dropdown || '<hr>';
            END IF;
        END LOOP;
        l_dropdown:=l_dropdown || '</section>';
        l_html:=l_html || l_dropdown ||
        '</ul>';

        RETURN (l_html);
    END;

    FUNCTION buildPageNav(pWebsiteId IN website.id%type) RETURN CLOB IS
        l_html CLOB;
        n PLS_INTEGER;
    BEGIN
        FOR C IN (SELECT navigation_label, article_id, collection_type
                    FROM website_article
                   WHERE website_id=pWebsiteId
                   ORDER BY display_order) 
        LOOP
            IF (C.collection_type='N/A') THEN
                l_html:=l_html || TO_CLOB(buildNavLabel(C.article_id, C.navigation_label, 'page-options'));
            ELSE
                l_html:=l_html || TO_CLOB(buildNavLabel(C.article_id, C.navigation_label, 'page-options','collection',C.collection_type));
            END IF;
        END LOOP;
        RETURN(l_html);
    END;

    FUNCTION buildPushableButton(pClassName IN VARCHAR2, pHTMLSymbol IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS 
        l_html VARCHAR2(200);
    BEGIN
        RETURN(
        '<button type="button" class="' || pClassName || ' pushable">
            <span class="shadow"></span>
            <span class="edge"></span>
            <span class="front">' || 
                CASE WHEN pHTMLSymbol IS NOT NULL THEN 
                    pHTMLSymbol || '&nbsp;'
                END || 
                UPPER(REPLACE(pClassName,'-',' ')) || 
            '</span>
        </button>');
    END;

    FUNCTION buildMediaCard RETURN CLOB IS
    BEGIN
        RETURN(
        buildPushableButton('upload-media') ||
        '<ul class="gallery-list"></ul>
        <div class="gallery-overlay">
            <img src="">
            <span class="counter"></span>
            <button type="button" class="close-fullscreen">&times;</button>
            <button type="button" class="prev">&lt;</button>
            <button type="button" class="next">&gt;</button>
        </div>');
    END;

    FUNCTION buildDialogs RETURN VARCHAR2 IS
    BEGIN
        RETURN(
        '<dialog class="popup">
            <div>
                <button type="button" class="close">&times;</button>
                <h2></h2>
                <p></p>
            </div>
        </dialog>
        <dialog class="log">
            <div>
                <div class="content"></div>
                <button type="button" class="close">&times;</button>
            </div>
        </dialog>');
    END;

    /*
     **  Build authenticated page
     */
    FUNCTION buildAuthPage RETURN CLOB IS
        l_session_data session_data_rt;
        l_nb_websites PLS_INTEGER;
        l_is_admin PLS_INTEGER;
        l_clob CLOB;
        l_selected_website_id website.id%type;
    BEGIN
        l_session_data:=getSessionData();

        SELECT COUNT(*)
          INTO l_nb_websites
          FROM website
         WHERE user_id=l_session_data.user_id;

        IF (l_nb_websites=0) THEN
            createStarterWebsite(l_session_data.user_id);
        END IF;

        SELECT COUNT(*)
          INTO l_is_admin
          FROM apex_workspace_apex_users w, users u 
         WHERE u.id=l_session_data.user_id
           AND w.email=u.email
           AND w.is_admin='Yes'
         FETCH FIRST ROW ONLY;

        l_clob:= 
        '<div class="wrapper">' ||
            buildTopNav(l_is_admin) ||
            '<div>
                <div>' ||
                    buildPushableButton('new-website', '&plus;') ||
                '</div>' ||
                buildWebsiteNav(l_session_data.user_id, l_selected_website_id, l_nb_websites) ||
            '</div>
            <div class="page-content">
                <div>' ||
                    buildMediaCard() ||
                '</div>
                <div>
                    <div class="button-container">' ||
                    buildPushableButton('new-page','&plus;') ||
                    buildPushableButton('new-blog','&plus;') ||
                    buildPushableButton('new-media','&plus;') ||
                    '</div>
                    <nav class="page-nav">' ||
                    buildPageNav(l_selected_website_id) ||
                    '</nav>
                    <div id="editor"></div>
                </div>
            </div><!-- END page-content-->
            <form action="https://codepen.io/pen/define" method="POST" target="_blank">
                <input type="hidden" name="data" value="">
            </form>' ||
            buildDialogs() ||
        '</div><!-- END wrapper-->
         <input type="hidden" name="nb_websites" value="' || l_nb_websites ||'" id="nb-websites">';

        RETURN l_clob;
    END;

    /*
     **  All pages initiated by APEX "Dynamic Content" component.
     **  After that it's Javascript fetch and ORDS all the way
     */
    FUNCTION getPageContent RETURN CLOB IS
        l_clob CLOB;
        l_css_file_urls APEX_APPLICATION_PAGES.css_file_urls%type;
        l_javascript_file_urls APEX_APPLICATION_PAGES.javascript_file_urls%type;
        l_page_css APEX_APPLICATION_STATIC_FILES.file_name%type;
        l_page_js APEX_APPLICATION_STATIC_FILES.file_name%type;
        l_metric_js APEX_APPLICATION_STATIC_FILES.file_name%type;
    BEGIN
        SELECT NVL(css_file_urls,' '), NVL(javascript_file_urls,' ')
          INTO l_css_file_urls, l_javascript_file_urls
          FROM APEX_APPLICATION_PAGES 
         WHERE application_id=apex_application.g_flow_id
           AND page_id=apex_application.g_flow_step_id;

        l_page_css:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.css';

        IF (INSTR(l_css_file_urls,l_page_css)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_css,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<style>' || apex_util.blob_to_clob(C.file_content) || '</style>';
            END LOOP;
        END IF;

        CASE apex_application.g_flow_step_id
            WHEN 1 THEN l_clob:=l_clob || buildLoginPage;
            WHEN 2 THEN l_clob:=l_clob || buildAuthPage;
            WHEN 3 THEN l_clob:=l_clob || buildPrivacyPage;
        END CASE;

        l_clob:=l_clob || TO_CLOB('
            <input type="hidden" name="p_flow_id" value="' || apex_application.g_flow_id ||'" id="pFlowId">
            <input type="hidden" name="p_flow_step_id" value="' || apex_application.g_flow_step_id ||'" id="pFlowStepId">
            <input type="hidden" name="p_instance" value="' || APEX_CUSTOM_AUTH.GET_SESSION_ID ||'" id="pInstance">');            

        l_clob:=l_clob || chr(10) || TO_CLOB('
        <script>
            const gRestUrl = "' || getRestUrl() || '";' || 
            CASE WHEN apex_application.g_flow_step_id=2 THEN '
            const gHomeUrl = "' || apex_util.host_url('SCRIPT') || 'home";' END || 
        '</script>');

        l_page_js:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.js';

        IF (INSTR(l_javascript_file_urls,l_page_js)=0) THEN
            FOR C IN (SELECT file_content 
                        FROM APEX_APPLICATION_STATIC_FILES 
                       WHERE application_id=apex_application.g_flow_id 
                         AND file_name=REPLACE(l_page_js,'.min') )
            LOOP
                l_clob:=l_clob || chr(10) || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
            END LOOP;
        END IF;

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error;
                RAISE;
    END;

    /*
    **  Administrator function to transfer ownership of a specified website and all dependent table rows to a different User 
    */
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type) IS
        l_transfer_from_user_id users.id%type;
        l_transfer_to_user_id users.id%type;
    BEGIN
        SELECT user_id INTO l_transfer_from_user_id FROM website WHERE id=pWebsiteId;
        SELECT id INTO l_transfer_to_user_id FROM users WHERE id=pUserId;

        /* Don't let this happen of any article in the website has been copied to another website */

        UPDATE website 
           SET user_id=l_transfer_to_user_id 
         WHERE id=pWebsiteId AND user_id=l_transfer_from_user_id;

        UPDATE article 
           SET author_user_id=l_transfer_to_user_id 
         WHERE id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE asset 
           SET user_id=l_transfer_to_user_id 
         WHERE article_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE website_article SET user_id=l_transfer_to_user_id 
         WHERE website_id=pWebsiteId AND user_id=l_transfer_from_user_id;

        COMMIT;
    END;

END;
/