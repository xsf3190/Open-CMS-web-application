CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CORE" AS
    --
    gWidthThumbnail CONSTANT INTEGER:=360;
    --
    FUNCTION getGithubReposOwner(pUserId IN users.id%type) RETURN VARCHAR2;
    --
    FUNCTION getNetlifyIntallationId(pUserId IN users.id%type) RETURN VARCHAR2;
    --
    PROCEDURE getTerraformData(pUserId IN users.id%type, pTerraformOrganizationName IN OUT users.terraform_organization_name%type, pTerraformWorkspaceName IN OUT users.terraform_workspace_name%type, pTerraformPrivateKey IN OUT users.terraform_private_key%type);
    --
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callNetlifyAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE callTerraformAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pData IN OUT NOCOPY CLOB);
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error;
    --
    PROCEDURE getApexSession(pAppId IN OUT NUMBER, pSessionId IN OUT NUMBER, pPageId IN OUT NUMBER);
    --
    FUNCTION getUserId(pSaveCookie BOOLEAN DEFAULT FALSE) RETURN users.id%type;
    --
    FUNCTION getRestUrl RETURN VARCHAR2;
    --
    FUNCTION getPageContent RETURN CLOB;
    --
    FUNCTION fmtUpdatedDate(pTimestamp IN article.updated_date%type) RETURN VARCHAR2;
    --
    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2;
    --
    FUNCTION getCloudinaryUrl(
        pCloudname IN VARCHAR2, 
        pResourceType IN VARCHAR2, 
        pPublicId IN VARCHAR2, 
        pFormat IN VARCHAR2, 
        pWidth IN INTEGER, 
        pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION buildTextareaWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION buildWebsiteArticles(pWebsiteId IN website.id%type) RETURN CLOB;
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CORE" AS

    PROCEDURE getApexSession(pAppId IN OUT NUMBER, pSessionId IN OUT NUMBER, pPageId IN OUT NUMBER) IS
        l_apex_session VARCHAR2(50);
        l_parts apex_t_varchar2;
    BEGIN
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');
        IF (l_apex_session IS NULL) THEN
            pAppId:=apex_application.g_flow_id;
            pSessionId:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
            pPageId:=apex_application.g_flow_step_id;
        ELSE        
            l_parts:=apex_string.split(l_apex_session,',');
            pAppId:=l_parts(1);
            pSessionId:=l_parts(2);
            pPageId:=l_parts(3);
        END IF;
        EXCEPTION WHEN VALUE_ERROR THEN NULL;  /* Raised when procedure is not called in internet session */
    END;

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
        l_app_id NUMBER;
        l_session_id NUMBER;
        l_page_id NUMBER;
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        getApexSession(l_app_id, l_session_id, l_page_id);
        INSERT INTO log(id, procedure_name, message, session_id) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg, l_session_id);
        COMMIT;
    END;

    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
        l_app_id NUMBER;
        l_session_id NUMBER;
        l_page_id NUMBER;
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        getApexSession(l_app_id, l_session_id, l_page_id);
        INSERT INTO log(id, procedure_name, message, session_id) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg, l_session_id);
        COMMIT;
    END;

    /*
    **  Log ORACLE exceptions.
    */
    PROCEDURE log_error IS
        l_depth PLS_INTEGER;
        l_stack LONG;
        l_apex_session VARCHAR2(50);
    BEGIN
        ROLLBACK;

        /* Format call stack which includes procedure names */
        l_depth:=UTL_CALL_STACK.dynamic_depth;
        l_stack:='CALL STACK'||chr(10);
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'Line: ' || UTL_CALL_STACK.unit_line(i) || ' ' || UTL_CALL_STACK.owner(i)||'.'||UTL_CALL_STACK.concatenate_subprogram(UTL_CALL_STACK.subprogram(i)) || chr(10);
        END LOOP;

        /* Format error backtrace */
        l_stack:=l_stack || 'ERROR BACKTRACE'||chr(10);
        l_depth := UTL_CALL_STACK.error_depth;
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'ORA-' || UTL_CALL_STACK.error_number(i) || ' - ' || UTL_CALL_STACK.error_msg(i) || chr(10);
        END LOOP;

        log(l_stack);

        /* If invoked in Apex session return sqlcode, sqlerrm in json payload */
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');   

        apex_json.open_object; 
        apex_json.write('success', FALSE); 
        apex_json.write('sqlcode', SQLCODE); 
        apex_json.write('sqlerrm', SQLERRM); 
        apex_json.close_object;

        EXCEPTION WHEN VALUE_ERROR THEN NULL;
    END;

    /*
    ** Return id of authenticated user for the session as 
    */
    FUNCTION getUserId(pSaveCookie BOOLEAN DEFAULT FALSE) RETURN users.id%type IS
        l_names owa_cookie.vc_arr;
        l_vals owa_cookie.vc_arr;
        l_num_vals INTEGER;

        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_apex_cookie_value users.apex_cookie_value%type;
        l_user_id users.id%type;
    BEGIN
        l_user_id:=NULL;

        getApexSession(l_app_id, l_session_id, l_page_id);

        FOR C IN (
            SELECT u.id, apex_cookie_value
              FROM apex_workspace_sessions s, users u
             WHERE s.apex_session_id=l_session_id
               AND s.user_name=u.email )
        LOOP
            /* We have an authenticated session */
            l_user_id:=C.id;

            /* Additional check that session cookie is valid */
            owa_cookie.get_all(names => l_names, vals => l_vals, num_vals => l_num_vals);
            FOR i IN 1..l_names.COUNT LOOP
                IF (l_names(i)='ORA_WWV_APP_' || l_app_id) THEN
                    IF (pSaveCookie) THEN
                        UPDATE users SET apex_cookie_value=l_vals(i) WHERE id=l_user_id;
                    ELSIF (C.apex_cookie_value<>l_vals(i)) THEN
                        RAISE_APPLICATION_ERROR(-20000,'SESSION COOKIE VALUE HAS CHANGED');
                    END IF;
                END IF;
            END LOOP;            
        END LOOP;

        IF (l_user_id IS NULL AND l_page_id=2) THEN
            RAISE_APPLICATION_ERROR(-20000,'YOUR SESSION HAS EXPIRED');
        END IF;

        RETURN (l_user_id);
    END;

    /*
    ** Return RESTful API url
    */
    FUNCTION getRestUrl RETURN VARCHAR2 IS
        l_rest_url VARCHAR2(200);
    BEGIN
        SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix
          INTO l_rest_url
          FROM user_ords_schemas s, user_ords_modules m
         WHERE s.parsing_schema=sys_context('userenv','current_schema')
           AND m.name='public';

        RETURN (l_rest_url);
    END;

    FUNCTION getGithubReposOwner(pUserId IN users.id%type) RETURN VARCHAR2 IS
        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_github_repos_owner users.github_repos_owner%type;
    BEGIN
        /* Get user's github token and account name (repository owner) */
        FOR C IN (SELECT github_repos_owner FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
        END LOOP;

        /* Get Administrator value if user has not registered github repository */
        IF (l_github_repos_owner IS NULL) THEN
            getApexSession(l_app_id, l_session_id, l_page_id);
            SELECT u.github_repos_owner
              INTO l_github_repos_owner
              FROM apex_applications a, users u 
             WHERE a.application_id=l_app_id 
               AND a.email_from=u.email;
        END IF;

        RETURN (l_github_repos_owner);
    END;

    FUNCTION getNetlifyIntallationId(pUserId IN users.id%type) RETURN VARCHAR2 IS
        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_netlify_installation_id users.netlify_installation_id%type;
    BEGIN
        /* Get user's github token and account name (repository owner) */
        FOR C IN (SELECT netlify_installation_id FROM users WHERE id=pUserId) LOOP 
            l_netlify_installation_id:=C.netlify_installation_id;
        END LOOP;

        /* Get Administrator value if user has not registered github repository */
        IF (l_netlify_installation_id IS NULL) THEN
            getApexSession(l_app_id, l_session_id, l_page_id);
            SELECT u.netlify_installation_id
              INTO l_netlify_installation_id
              FROM apex_applications a, users u 
             WHERE a.application_id=l_app_id 
               AND a.email_from=u.email;
        END IF;

        RETURN (l_netlify_installation_id);
    END;

    PROCEDURE getTerraformData(pUserId IN users.id%type, pTerraformOrganizationName IN OUT users.terraform_organization_name%type, pTerraformWorkspaceName IN OUT users.terraform_workspace_name%type, pTerraformPrivateKey IN OUT users.terraform_private_key%type) IS
        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_terraform_organization_name users.terraform_organization_name%type;
        l_terraform_workspace_name users.terraform_workspace_name%type;
        l_terraform_private_key users.terraform_private_key%type;
    BEGIN
        /* Get user's github token and account name (repository owner) */
        FOR C IN (SELECT terraform_organization_name,terraform_workspace_name,terraform_private_key FROM users WHERE id=pUserId) LOOP 
            l_terraform_organization_name:=C.terraform_organization_name;
            l_terraform_workspace_name:=C.terraform_workspace_name;
            l_terraform_private_key:=C.terraform_private_key;
        END LOOP;

        /* Get Administrator value if user has not registered github repository */
        IF (l_terraform_organization_name IS NULL) THEN
            getApexSession(l_app_id, l_session_id, l_page_id);
            SELECT u.terraform_organization_name,u.terraform_workspace_name,u.terraform_private_key
              INTO l_terraform_organization_name,l_terraform_workspace_name,l_terraform_private_key
              FROM apex_applications a, users u 
             WHERE a.application_id=l_app_id 
               AND a.email_from=u.email;
        END IF;

        pTerraformOrganizationName:=l_terraform_organization_name;
        pTerraformWorkspaceName:=l_terraform_workspace_name;
        pTerraformPrivateKey:=l_terraform_private_key;

    END;

    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN OUT NOCOPY CLOB, pData IN OUT NOCOPY CLOB) IS
        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_github_repos_owner users.github_repos_owner%type;
        l_github_token users.github_token%type;
        l_github_url VARCHAR2(200):='https://api.github.com/repos/';
        l_error_message LONG;
    BEGIN
        /* Get user's github token and account name (repository owner) */
        FOR C IN (SELECT github_repos_owner, github_token FROM users WHERE id=pUserId) LOOP 
            l_github_repos_owner:=C.github_repos_owner;
            l_github_token:=C.github_token;
        END LOOP;

        /* Use Administrator's token if user does not have token */
        IF (l_github_token IS NULL) THEN
            getApexSession(l_app_id, l_session_id, l_page_id);
            SELECT u.github_repos_owner, u.github_token
              INTO l_github_repos_owner, l_github_token
              FROM apex_applications a, users u 
             WHERE a.application_id=l_app_id 
               AND a.email_from=u.email;
        END IF;

        apex_web_service.g_request_headers(1).name := 'Accept';
        apex_web_service.g_request_headers(1).value := 'application/vnd.github+json';
        apex_web_service.g_request_headers(2).name := 'Authorization';
        apex_web_service.g_request_headers(2).value := 'Bearer ' || l_github_token;
        apex_web_service.g_request_headers(3).name := 'User-Agent';
        apex_web_service.g_request_headers(3).value := l_github_repos_owner;

        l_github_url:=l_github_url || l_github_repos_owner || '/' || pRepository;

        IF (pEndpoint IS NOT NULL) THEN 
            l_github_url:=l_github_url || '/' || pEndpoint;
        END IF;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_github_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_github_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        IF (apex_web_service.g_status_code NOT BETWEEN 200 AND 299) AND (apex_web_service.g_status_code<>404) THEN
            l_error_message:=pMethod || ' ' || l_github_url || ' https status:' || apex_web_service.g_status_code;
            FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
                l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
            END LOOP;
            RAISE_APPLICATION_ERROR(-20020,l_error_message);
        END IF;
    END;

    PROCEDURE callGithubAPI(pUserId IN users.id%type, pRepository IN VARCHAR2 DEFAULT 'DEPLOY', pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pData IN OUT NOCOPY CLOB) IS
        l_clob CLOB;
    BEGIN
        callGithubAPI(pUserId,pRepository,pEndpoint,pMethod,l_clob,pData);
    END;

    PROCEDURE callNetlifyAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_netlify_token users.netlify_token%type;
        l_netlify_url VARCHAR2(100):='https://api.netlify.com/api/v1/';
        l_error_message LONG;
    BEGIN
        /* Get user's netlify token */
        FOR C IN (SELECT netlify_token FROM users WHERE id=pUserId) LOOP 
            l_netlify_token:=C.netlify_token;
        END LOOP;

        /* Use Administrator's token if user does not have token */
        IF (l_netlify_token IS NULL) THEN
            getApexSession(l_app_id, l_session_id, l_page_id);
            SELECT u.netlify_token INTO l_netlify_token FROM apex_applications a, users u WHERE a.application_id=l_app_id AND a.email_from=u.email;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Authorization';
        apex_web_service.g_request_headers(1).value := 'Bearer ' || l_netlify_token;   
        apex_web_service.g_request_headers(2).name := 'Content-Type';
        apex_web_service.g_request_headers(2).value := 'application/json';

        l_netlify_url:=l_netlify_url || pEndpoint;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_netlify_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_netlify_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        IF (apex_web_service.g_status_code NOT BETWEEN 200 AND 299) THEN
            l_error_message:=pMethod || ' ' || l_netlify_url || ' https status:' || apex_web_service.g_status_code;
            FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
                l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
            END LOOP;
            RAISE_APPLICATION_ERROR(-20030,l_error_message);
        END IF;
    END;

    PROCEDURE callTerraformAPI(pUserId IN users.id%type, pEndpoint IN VARCHAR2, pMethod IN VARCHAR2, pBody IN VARCHAR2 DEFAULT NULL, pData IN OUT NOCOPY CLOB) IS
        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_terraform_token users.terraform_token%type;
        l_terraform_url VARCHAR2(100):='https://app.terraform.io/';
        l_error_message LONG;
    BEGIN
        /* Get Terraform details either from website owner or Administrator */
        FOR C IN (SELECT terraform_token FROM users WHERE id=pUserId) LOOP
            l_terraform_token:=C.terraform_token;
        END LOOP;

        IF (l_terraform_token IS NULL) THEN
            getApexSession(l_app_id, l_session_id, l_page_id);
            SELECT u.terraform_token
              INTO l_terraform_token
              FROM apex_applications a, users u 
             WHERE a.application_id=l_app_id 
               AND a.email_from=u.email;
        END IF;

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Authorization';
        apex_web_service.g_request_headers(1).value := 'Bearer ' || l_terraform_token;   
        apex_web_service.g_request_headers(2).name := 'Content-Type';
        apex_web_service.g_request_headers(2).value := 'application/json';

        l_terraform_url:=l_terraform_url || pEndpoint;

        IF (pBody IS NULL) THEN
            pData := apex_web_service.make_rest_request(p_url=>l_terraform_url, p_http_method=>pMethod);
        ELSE
            pData := apex_web_service.make_rest_request(p_url=>l_terraform_url, p_http_method=>pMethod, p_body=>pBody);
        END IF;

        IF (apex_web_service.g_status_code NOT BETWEEN 200 AND 299) THEN
            l_error_message:=pMethod || ' ' || l_terraform_url || ' https status:' || apex_web_service.g_status_code;
            FOR C IN (SELECT message FROM JSON_TABLE(pData,'$' COLUMNS (message)) WHERE message IS NOT NULL) LOOP
                l_error_message:=l_error_message || chr(10) || 'API message: ' || C.message;
            END LOOP;
            RAISE_APPLICATION_ERROR(-20040,l_error_message);
        END IF;
    END;    

    /*
     **  Format timestamp according to user's current time zone
     */
    FUNCTION fmtUpdatedDate(pTimestamp IN article.updated_date%type) RETURN VARCHAR2
    IS
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
    BEGIN
        IF (l_timezone IS NOT NULL) THEN
            RETURN ( TO_CHAR(pTimestamp AT TIME ZONE l_timezone, 'dd Mon yyyy fmhh:fmmi PM') );
        ELSE
            RETURN ( TO_CHAR(pTimestamp, 'dd Mon yyyy'));
        END IF;
    END;

    /*
     **  Create wrapper html for textarea element, optionally including dropdown
     */
    FUNCTION buildTextareaWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT c.data_length, NVL(i.comments,'Info not defined yet') 
          INTO l_data_length, l_comments
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div style="min-width:min(' || l_data_length || 'ch,100%)" class="textarea-wrapper">' ||
            CASE WHEN pDropdown IS NOT NULL THEN '<div class="button-container">' END || '
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || 
                '<button type="button" popovertarget="' || l_column_name || '_popover"><svg class="icon"><use href="#info"></use></svg></button>
                 <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>
            </label>' || pDropdown || 
            CASE WHEN pDropdown IS NOT NULL THEN '</div>' END || '
            <textarea id="' || l_column_name || '" name="' || LOWER(l_column_name) || '" maxlength="' || l_data_length || '" rows="1" data-column="' || pColumn || '" data-id="' || pId || '">' || pValue || '</textarea>        
            <div class="button-container">
                <span class="result"></span>
                <span class="charcounter">' || NVL(LENGTH(pValue),0) || '/' || l_data_length || '</span>
            </div>
        </div>');
    END;

    /*
    ** the miserable privacy policy - Faceook insists that it can be accessed by an application url
    */
    FUNCTION buildPrivacyPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT body_html FROM article WHERE id=19124)   
        LOOP
            RETURN C.body_html;
        END LOOP;
    END;

    /*
     **  Login page
     */
    FUNCTION buildLoginPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT id FROM article WHERE id=19124)  -- the miserable privacy policy
        LOOP
            RETURN TO_CLOB('
                <ul class="container">
                    <li class="red">' || pck_icons.g_oracle_svg || '</li>
                    <li class="grey login">
                        <a class="button" href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Facebook&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_facebook_svg ||'Login w/ Facebook</a>
                        <a class="button" href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Google&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_google_svg ||'Login w/ Google</a>
                        <button data-id="' || C.id || '">Priv</button>
                    </li>
                    <li class="grey">' || pck_icons.g_github_svg || '</li>
                    <li class="grey">' || pck_icons.g_cloudinary_svg || '</li>
                    <li class="yellow">ALWAYS FREE</li>
                    <li class="grey">' || pck_icons.g_netlify_svg ||'</li>
                    <li class="blue"></li>
                    <li class="grey"></li>
                    <li class="grey"></li>
                </ul>
                <dialog>
                    <div>
                        <div></div> <!-- empty div to make grid -->
                        <div class="content"></div>
                        <button type="button" class="close">&times;</button>
                    </div>
                </dialog>');
        END LOOP;
    END;

    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RETURN (NULL);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5);

        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);
            l_width INTEGER:=pWidth; 
        BEGIN
            IF (pWidth=0) THEN
                RETURN NULL;
            END IF;
            IF (pDimension IS NOT NULL) THEN
                IF (pDimension=1) THEN
                    RETURN NULL;
                ELSE
                    RETURN ',w_' || ROUND(pWidth*pDimension);
                END IF;
            END IF;
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-gWidthThumbnail) <= ABS(l_arr(l_right)-gWidthThumbnail)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;
            IF (l_arr(l_left)=pWidth) THEN
                RETURN NULL;
            END IF;
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        IF (pResourceType IS NOT NULL) THEN
            l_media_type:=getMediaType(pResourceType, pFormat);
            l_url:='https://res.cloudinary.com/' || pCloudname ||
                    CASE l_media_type
                        WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                        WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                        WHEN 'audio' THEN '/video/upload/q_auto,f_auto,w_' || gWidthThumbnail || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                    END;
        END IF;        
        RETURN (l_url);
    END;    

    FUNCTION buildWebsiteArticles(pWebsiteId IN website.id%type) RETURN CLOB IS
        l_clob CLOB;
    BEGIN
        FOR C IN (SELECT a.id,
                   a.is_public,
                   c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                   a.nb_assets,
                   a.title, 
                   a.excerpt,
                   wa.nav_name,
                   wa.page_title,
                   wa.page_description,
                   a.word_count,
                   NVL(a.updated_date, a.created_date) updated_date,
                   wa.display_order display_order
              FROM article a, website_article wa, asset c
             WHERE wa.website_id=pWebsiteId
               AND a.id=wa.article_id
               AND a.cover_asset_id=c.id(+)
             UNION ALL
             SELECT -1, null,null,null,null,null,null,0,null,null,null,null,null,0,systimestamp,-1 from dual
             ORDER BY display_order)
        LOOP
            l_clob:=l_clob || TO_CLOB('
            <li class="card" tabindex="0" data-id="' || C.id || '">
                <div class="button-container">
                    <div>
                        <button type="button" class="new-before">
                            <svg class="icon"><use href="#left-long"></use></svg>
                        </button>
                        <span>NEW CONTENT</span>
                        <button type="button" class="new-after">
                            <svg class="icon"><use href="#right-long"></use></svg>
                        </button>
                    </div>
                    <div class="dropdown">
                        <button type="button" class="show-dropdown">&blacktriangledown;</button>
                        <ul class="dropdown-items">
                            <li>
                                <button type="button" class="with-icon upload-media">
                                    <svg class="icon"><use href="#cloud-arrow-up"></use></svg>
                                Upload Media
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon edit-text">
                                    <svg class="icon"><use href="#pen-to-square"></use></svg>
                                Edit Text
                                </button>
                            </li>
                            <li class="SEO">
                                <button type="button" class="with-icon">
                                    <svg class="icon"><use href="#search-engine"></use></svg>
                                Page Title (SEO)
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon delete" data-table="website_article">
                                    <svg class="icon"><use href="#delete"></use></svg>
                                Delete
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>' ||
                CASE WHEN NVL(C.nb_assets,0)=0
                    THEN '<button type="button" class="no-media upload-media">UPLOAD MEDIA</button>' 
                    ELSE '<img class="show-gallery"' || CASE WHEN C.format='svg' THEN ' style="object-fit:scale-down"' END || ' src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">' 
                END ||
                CASE WHEN COALESCE(C.title, C.excerpt) IS NULL 
                    THEN '<br>
                        <button type="button" class="no-media edit-text">CREATE TEXT</button>'
                    ELSE '<p class="title edit-text">' || NVL(C.title, C.excerpt) || '</p> ' 
                            || buildTextareaWrapper(pWebsiteId||','||C.id,'website_article.nav_name',C.nav_name)
                            || buildTextareaWrapper(pWebsiteId||','||C.id,'website_article.page_title',C.page_title) 
                            || buildTextareaWrapper(pWebsiteId||','||C.id,'website_article.page_description',C.page_description)  
                END || '   
                <footer class="button-container"><div><span class="word-count">' || NVL(C.word_count,0) || ' words' || '</span> | <span class="nb-assets">' || NVL(C.nb_assets,0) || ' media</span></div><span class="updated-date">' || fmtUpdatedDate(C.updated_date)  || '</span></footer>
            </li>');
        END LOOP;
        RETURN l_clob;
    END;

    /*
     **  Build authenticated page
     */
    FUNCTION buildAuthPage RETURN CLOB IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_user_name users.name%type;
        l_templates CLOB;
        l_template_html LONG;
        l_edit_websites CLOB;
        l_domain_dropdown LONG;
        l_printed_separator BOOLEAN:=FALSE;

        TYPE t_domain IS RECORD (
            id              website.id%type,
            domain_name     website.domain_name%type,
            template        website.template%type,
            favicon_url     website.favicon_url%type,
            contact_email   website.contact_email%type,
            nb_articles     NUMBER
        );
        TYPE tt_domain IS TABLE OF t_domain;
        l_domains tt_domain;  
    BEGIN
        SELECT id
          INTO l_user_id
          FROM users
         WHERE email=apex_application.g_user;

        l_clob:= TO_CLOB(pck_icons.g_icons_svg);

        /* Construct the navigation header section */
        l_clob:=l_clob || TO_CLOB('
        <nav>
            <div class="dropdown">
                <span>' || apex_application.g_user || '</span>
                <button type="button" class="show-dropdown">&blacktriangledown;</button>
                <ul class="dropdown-items">
                    <li class="signout">
                        <button type="button" class="with-icon">
                            <svg class="icon">
                                <use href="#signout"></use>
                            </svg>
                            Log Out
                        </button>
                    </li>                    
                    <li class="api-keys">
                        <button type="button" class="with-icon">
                            <svg class="icon">
                                <use href="#keys"></use>
                            </svg>
                            API Keys
                        </button>
                    </li>
                    <li class="session-log">
                        <button type="button" class="with-icon session-log">
                            <svg class="icon">
                                <use href="#list"></use>
                            </svg>
                            Session Log
                        </button>
                    </li>      
                </ul>
            </div>
        </nav>
        <div class="editor" aria-hidden="true" tabindex="-1">
            <div>
                <nav>
                    <button type="button" class="close-editor">&times;</button>
                </nav>
                <div id="editor"></div>
                <div class="button-container">
                    <div id="editor-status"></div>
                    <div id="word-count"></div>
                </div>
            </div>

        </div>');


        /* Get templates from Administrator's github DEPLOY repository. Do it now so we can print at least the <nav> in case templates are not defined.
        ** Data returned in variable l_temmplates which we use to build the radio controls later in the code
         */
        callGithubAPI(pUserId=>l_user_id, pEndpoint=>'contents/TEMPLATES', pMethod=>'GET', pData=>l_templates);

        SELECT w.id, w.domain_name, w.template, w.favicon_url, w.contact_email, (SELECT COUNT(*) FROM dual WHERE EXISTS (SELECT NULL FROM website_article WHERE website_id=w.id))
          BULK COLLECT INTO l_domains
          FROM website w
         WHERE w.user_id=l_user_id
         ORDER BY COALESCE(w.updated_date, w.created_date) DESC;

        IF (l_domains.COUNT=0) THEN
            l_domains.EXTEND(1);
        END IF;

        l_domain_dropdown:='
        <div class="dropdown">
            <button type="button" class="show-dropdown">&blacktriangledown;</button>
            <ul class="dropdown-items">
                <li>
                    <button type="button" class="with-icon new-website">
                        <svg class="icon">
                            <use href="#plus"></use>
                        </svg>
                        NEW WEBSITE
                    </button>
                </li>
                <li>
                    <button type="button" class="with-icon copy-website">
                        <svg class="icon">
                            <use href="#copy"></use>
                        </svg>
                        COPY WEBSITE
                    </button>
                </li>';

        FOR i IN 1..l_domains.COUNT LOOP
            IF (l_domains(i).id IS NULL) THEN
                CONTINUE;
            END IF;
            IF NOT (l_printed_separator) THEN
                l_domain_dropdown:=l_domain_dropdown ||'<li class="separator"></li>';
                l_printed_separator:=TRUE;
            END IF;
            l_domain_dropdown:=l_domain_dropdown ||'
                <li>
                    <button type="button" class="with-icon edit-website" data-id="' || l_domains(i).id || '">
                            <svg class="icon">
                                <use href="#pen-to-square"></use>
                            </svg>' ||          
                    l_domains(i).domain_name || '
                    </button>
                </li>';
            IF (i=l_domains.COUNT) THEN
                l_domain_dropdown:=l_domain_dropdown ||'<li class="separator"></li>';
            END IF;
        END LOOP;

        l_domain_dropdown:=l_domain_dropdown ||'
                <li>
                    <button type="button" class="with-icon delete" data-table="website" data-id=' || l_domains(1).id || '>
                        <svg class="icon">
                            <use href="#delete">
                        </svg>
                        DELETE WEBSITE
                    </button>
                </li>
            </ul>
        </div>';

        /* TEMPLATES are directory names and returned as array in alphabetic order */
        FOR C IN (SELECT name FROM JSON_TABLE(l_templates, '$[*]' COLUMNS (name))) LOOP
            l_template_html:=l_template_html || 
            '<div>
                <input type="radio" data-column="website.template" data-id="' || l_domains(1).id || '" id="template-' || LOWER(C.name) || '" name="template" value="' || C.name || '"' ||
                CASE WHEN l_domains(1).template=C.name THEN ' checked' END || '>
                </input> <label for="template-' || LOWER(C.name) || '">' || C.name || '</label>
            </div>';
        END LOOP;

        l_clob:=l_clob || TO_CLOB('
        <form class="card" data-id="' || l_domains(1).id || '">' ||
            buildTextareaWrapper(l_domains(1).id, 'website.domain_name', l_domains(1).domain_name, l_domain_dropdown) || '
            <div class="radio-wrapper">
                <fieldset>
                    <legend>Website Template</legend>
                    <div class="cluster">' || l_template_html || '
                    </div>
                </fieldset>
                <div class="button-container">
                    <span class="result"></span><span>&nbsp;</span>
                </div>
            </div>' ||
            buildTextareaWrapper(l_domains(1).id, 'website.contact_email', l_domains(1).contact_email) || '
            <button type="button" class="deploy-website cta">DEPLOY TEST WEBSITE</button>
            <button type="button" class="deploy-website-live cta">DEPLOY LIVE WEBSITE</button>
        </form>
        <hr>
        <div class="button-container full-width">
            <button type="button" class="list-view" title="Article thumbnails for drag and drop"' || CASE WHEN l_domains(1).id IS NULL THEN ' disabled style="opacity:0.2"' END || '>&#9783;</button>
        </div>
        <ul class="cards" style="display:grid">' || buildWebsiteArticles(l_domains(1).id) || '
        </ul>
        <ul class="article-list" style="display:none">
        </ul>');

        l_clob:=l_clob || TO_CLOB('
        <dialog class="popup">
            <div>
                <button type="button" class="close">&times;</button>
                <h2></h2>
                <p></p>
            </div>
        </dialog>
        <dialog class="list">
            <div>
                <div class="content"></div>
                <button type="button" class="close">&times;</button>
            </div>
        </dialog>            
        <dialog class="gallery">
            <div>
                <button type="button" class="close">&times;</button>
                <div class="gallery-container" role="region" aria-label="gallery">
                    <p class="instruction"></p>
                    <ul></ul>
                </div>
                <div class="gallery-overlay">
                    <img src="">
                    <fieldset>
                        <legend><span></span><button class="close-fieldset" type="button">&times;</button></legend>
                        <button type="button" class="dimensions"></button>
                        <button type="button" class="copy-url" disabled>&boxbox;</button>
                        <button type="button" class="dimensions"></button>
                        <button type="button" class="copy-url" disabled>&boxbox;</button>
                        <button type="button" class="dimensions"></button>
                        <button type="button" class="copy-url" disabled>&boxbox;</button>
                    </fieldset>
                    <span class="counter"></span>
                    <button type="button" class="close-fullscreen">&times;</button>
                    <button type="button" class="prev">&lt;</button>
                    <button type="button" class="next">&gt;</button>
                </div>
            </div>
        </dialog>');

        RETURN l_clob;
    END;

    /*
     **  All pages initiated by APEX "Dynamic Content" component.
     **  After that it's Javascript fetch and ORDS all the way
     */
    FUNCTION getPageContent RETURN CLOB IS
        l_clob CLOB;
        l_css_file_urls APEX_APPLICATION_PAGES.css_file_urls%type;
        l_javascript_file_urls APEX_APPLICATION_PAGES.javascript_file_urls%type;
        l_page_css APEX_APPLICATION_STATIC_FILES.file_name%type;
        l_page_js APEX_APPLICATION_STATIC_FILES.file_name%type;
    BEGIN
        SELECT NVL(css_file_urls,' '), NVL(javascript_file_urls,' ')
          INTO l_css_file_urls, l_javascript_file_urls
          FROM APEX_APPLICATION_PAGES 
         WHERE application_id=apex_application.g_flow_id
           AND page_id=apex_application.g_flow_step_id;

        l_page_css:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.css';

        IF (INSTR(l_css_file_urls,l_page_css)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_css,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<style>' || apex_util.blob_to_clob(C.file_content) || '</style>';
            END LOOP;
        END IF;

        CASE apex_application.g_flow_step_id
            WHEN 1 THEN l_clob:=l_clob || buildLoginPage;
            WHEN 2 THEN l_clob:=l_clob || buildAuthPage;
            WHEN 3 THEN l_clob:=l_clob || buildPrivacyPage;
        END CASE;

        l_clob:=l_clob || TO_CLOB('
            <input type="hidden" name="p_flow_id" value="' || apex_application.g_flow_id ||'" id="pFlowId">
            <input type="hidden" name="p_flow_step_id" value="' || apex_application.g_flow_step_id ||'" id="pFlowStepId">
            <input type="hidden" name="p_instance" value="' || APEX_CUSTOM_AUTH.GET_SESSION_ID ||'" id="pInstance">');            

        l_clob:=l_clob || chr(10) || TO_CLOB('
        <script>
            const gRestUrl = "' || getRestUrl() || '";' || CASE WHEN apex_application.g_flow_step_id=2 THEN '
            const gHomeUrl = "' || apex_util.host_url('SCRIPT') || 'home";' END || '
        </script>');

        l_page_js:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.js';

        IF (INSTR(l_javascript_file_urls,l_page_js)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_js,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
            END LOOP;
        END IF;

        l_clob:=l_clob || TO_CLOB('
            <script type="module">
              import {onCLS, onFID, onLCP} from ''https://unpkg.com/web-vitals?module'';
              onCLS(addToVitalsQueue);
              onFID(addToVitalsQueue);
              onLCP(addToVitalsQueue);
            </script>');

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error;
                RAISE;
    END;

END;
/