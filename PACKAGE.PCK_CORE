CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CORE" AS
    --
    gWidthThumbnail CONSTANT INTEGER:=360;
    --
    TYPE session_data_rt IS RECORD (
        app_id NUMBER, 
        session_id NUMBER,
        page_id NUMBER,
        maxtouchpoints NUMBER,
        timezone VARCHAR2(30),
        canuse_popover BOOLEAN,
        user_id NUMBER
    );
    --
    FUNCTION buildContactForm(pContactEmail IN website.contact_email%type DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION buildDeployButtons(pDomainName IN website.domain_name%type, pNetlifySiteId IN website.netlify_site_id%type, pNetlifySiteIdCustom IN website.netlify_site_id_custom%type DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION buildInputWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN CLOB;
    --
    FUNCTION buildTextareaWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN CLOB, pCanUsePopover IN BOOLEAN, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN CLOB;
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error;
    --
    FUNCTION getSessionData RETURN session_data_rt;
    --
    FUNCTION getRestUrl RETURN VARCHAR2;
    --
    FUNCTION getPageContent RETURN CLOB;
    --
    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2;
    --
    FUNCTION getCloudinaryUrl(
        pCloudname IN VARCHAR2, 
        pResourceType IN VARCHAR2, 
        pPublicId IN VARCHAR2, 
        pFormat IN VARCHAR2, 
        pWidth IN INTEGER, 
        pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2;
    --
    PROCEDURE getThumbnails(pArticleId IN article.id%type, pHTML IN OUT NOCOPY CLOB);
    --
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type);
    --
    PROCEDURE uploadIpLookup;
    --
    PROCEDURE uploadPageHits(pWebsiteIdId IN website.id%type);
    --
    g_html_start CONSTANT VARCHAR2(24):='<!-- YOUR CODE START -->';
    g_html_end CONSTANT VARCHAR2(24):='<!-- YOUR CODE END -->';
    g_css_start CONSTANT VARCHAR2(24):='/* YOUR CODE START */';
    g_css_end CONSTANT VARCHAR2(24):='/* YOUR CODE END */';
    --
    g_css CONSTANT LONG:=
'*,*::before,*::after {
    box-sizing: border-box;
}
body,h1,h2,h3,h4,p,figure,blockquote,dl,dd {
  margin-block-end: 0;
}
body {
    background: var(--color-light);
    color: var(--color-dark);
    font-family: var(--font-family), sans-serif;
    font-size: var(--step-0);
    line-height: 1.5;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    min-height: 100vh;
    max-inline-size: var(--max-width);
    margin-inline: auto;
    padding-inline: 1rem;
}
body > * + * {
    margin-top: var(--space-m);
}

/* HEADER TYPOGRAPHY STYLES */
h1 {
    font-size: var(--step-4);
    text-align: center;
}
h2 {
    font-size: var(--step-3);
}
h3 {
    font-size: var(--step-2);
}
h4 {
    font-size: var(--step-1);
}

/* Set shorter line heights on headings and interactive elements */
h1, h2, h3, h4, button, input, label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1, h2, h3, h4 {
  text-wrap: balance;
}

img, picture {
  max-width: 100%;
  display: block;
  object-fit: scale-down;
}

/* NEED TO REVIEW IMAGE CLASSES - MAYBE DO IT IN CKEDITOR */
img.float-right {
    float: right;
    border-radius: 0.5em;
    margin: 0 0 1em 1em;
}

input, textarea, button, select {
    font: inherit;
}

/* NAVIGATION LABEL STYLES */
nav[aria-label="Main Navigation"] {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
    justify-content: space-evenly;
}
.nav-label:not(.selected) {
    text-decoration: none;
}
.nav-label.selected {
    text-decoration-color: var(--color-primary);
    text-decoration-thickness: var(--space-3xs);
    text-underline-offset: var(--space-3xs);
    text-decoration-skip-ink: none;
}

/* LOGO STYLES */
div.logo {
    border: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1em;
  & svg {
    inline-size: 5em;
  }
}

/* ANCHOR (WITH SVG) STYLES */
a:has(svg) {
    display: inline-flex;
    gap: 1em;
    align-items: center;
    text-decoration-color: var(--color-primary);
    text-decoration-thickness: 0.3ex;
    text-underline-offset: 0.5ex;
    cursor: pointer;
}
svg.icon {
    inline-size: 1.5em;
    block-size: 1.5em;
}

/* ELEMENT WITH BORDER. CENTERED IMAGE */
.with-border {
    border: solid 1px var(--color-primary);
    padding: var(--space-m);
    border-radius: var(--space-s);
    & img {
        border-radius: var(--space-s);
        margin-inline: auto;
    }
}

/* UNORDERED LIST ITEMS WITH BORDER. SET CLASS ON UNSUPPORTED CKEDITOR ANCESTOR ELEMENT */
.with-border-list ul {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: var(--space-s);
    & li {
        list-style: none;
        border: solid 1px var(--color-primary);
        border-radius: var(--space-s);
        padding: var(--space-s);
    }
}

/* AUTO-FIT CARD ELEMENTS. ELEMENTS AT END OF EACH CARD ALIGNED AT BOTTOM */
.auto-fit-cards {
    clear: both;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
    gap: var(--space-l);
    & > * {
      display:flex;
      flex-direction: column;
      justify-content: space-between;
      & :nth-last-child(2) {
        margin-block-end: var(--space-s);
      }
      & :last-child {
        margin-block-start: auto;
      }
  }
}

/* CONTACT FORM STYLES */
form.contact {
    margin-inline: auto;
    display: flex;
    flex-direction: column;
    gap: 1em;
    inline-size: fit-content;
    border: solid 1px var(--color-primary);
    padding: 1em;
    border-radius: 0.5em;
    & button {
        inline-size: fit-content;
        position: relative;
        border: none;
        background: transparent;
        padding: 0;
        cursor: pointer;
        outline-offset: 4px;
        transition: filter 250ms;
    }
    & label {
        display: block;
        font-weight: 600;
    }
    & input {
        inline-size: 95%;
        line-height: 2;
    }
    & .result {
        margin-inline-start: 1em;
        color: var(--color-primary);
        opacity: 0;
        transition: opacity 250ms;
    }
}

/* PUSHABLE BUTTON STYLES */
.pushable {
    inline-size: fit-content;
    position: relative;
    border: none;
    background: transparent;
    padding: 0;
    cursor: pointer;
    outline-offset: 4px;
    transition: filter 250ms;
  }
  .shadow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 12px;
    background: hsl(0deg 0% 0% / 0.25);
    will-change: transform;
    transform: translateY(2px);
    transition:
      transform
      600ms
      cubic-bezier(.3, .7, .4, 1);
  }
  .edge {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 12px;
    background: linear-gradient(
      to left,
      hsl(340deg 100% 16%) 0%,
      hsl(340deg 100% 32%) 8%,
      hsl(340deg 100% 32%) 92%,
      hsl(340deg 100% 16%) 100%
    );
  }
  .front {
    display: block;
    position: relative;
    padding: 12px 42px;
    border-radius: 12px;
    color: white;
    background: hsl(345deg 100% 47%);
    will-change: transform;
    transform: translateY(-4px);
    transition:
      transform
      600ms
      cubic-bezier(.3, .7, .4, 1);
  }
  .pushable:hover {
    filter: brightness(110%);
  }
  .pushable:hover .front {
    transform: translateY(-6px);
    transition:
      transform
      250ms
      cubic-bezier(.3, .7, .4, 1.5);
  }
  .pushable:active .front {
    transform: translateY(-2px);
    transition: transform 34ms;
  }
  .pushable:hover .shadow {
    transform: translateY(4px);
    transition:
      transform
      250ms
      cubic-bezier(.3, .7, .4, 1.5);
  }
  .pushable:active .shadow {
    transform: translateY(1px);
    transition: transform 34ms;
  }
  .pushable:focus:not(:focus-visible) {
    outline: none;
  }

  /* DIALOG STYLES */
  dialog {
  max-inline-size: min(60ch,90vw);
  overscroll-behavior: contain;
}

dialog > div:first-of-type {
  display: grid;
  grid-template-columns: 1fr 44px;
}

dialog h2 {
  text-align: center;
}

dialog button.close {
  place-self: start end;
  background-color: transparent;
  font-size: var(--step-2);
  outline: 0;
  border: 0;
  position: sticky;
  top: 0;
  cursor: pointer;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
   scroll-behavior: auto;
  } 
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
';
    --
    g_javascript CONSTANT LONG:=
'/*
** SETUP COLLECTION OF METRICS. 
*/
if (!sessionStorage.getItem("website_loaded")) {
    console.log("setting sessionStorage.website_loaded");
    sessionStorage.setItem("website_loaded",Math.round(Date.now()/1000));
}

page_loaded = Date.now();
seq = 0;

const vitalsQueue = new Set(),
      mediaQueue = new Set();

const flushQueues = () => {
    /* Prevent error in codepen whch does not allow importing modules */
    if (!document.querySelector("[name=''website_id'']")) return;

    if (vitalsQueue.size === 0 && page_loaded === 0) return;

    const website_loaded = Number(sessionStorage.getItem("website_loaded"));
    /* This happens if user manually clears sessionStorage */
    if (website_loaded === 0) return; 

    const website_id = document.querySelector("[name=''website_id'']").value,
          article_id = document.querySelector("[name=''article_id'']").value,
          visit_url = document.querySelector("[name=''visit_url'']").value;

    const json = {};
    json["website_id"] = website_id;
    json["article_id"] = article_id;
    json["website_loaded"] = Number(sessionStorage.getItem("website_loaded"));
    json["seq"] = seq;
    if (page_loaded !== 0) {
        json["duration_visible"] =  Math.round((Date.now() - page_loaded)/1000);
        page_loaded = 0;
    }

    if (vitalsQueue.size > 0) {
        for (const item of vitalsQueue.values()) {
            json[item.name] = Math.round(item.value * 1) / 1;
            json[item.name+"_rating"] = item.rating;
        }
        vitalsQueue.clear();
    }

    /* We send full detils only on the first call to save network cost */
    if (seq === 0) {
        const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
        if (connection) {
            json["connection"] = connection.downlink + " Mb/s" + " -" + connection.effectiveType;
        }

        const agent = bowser.getParser(window.navigator.userAgent),
            browserName = agent.getBrowserName(),
            browserVersion = agent.getBrowserVersion().split(".");
        let browser = browserName + " " + browserVersion[0];
        if (browserVersion[1]!=="0") {
            browser+="."+browserVersion[1];
        }
        json["browser"] = browser;
        if (navigator.userAgentData) {
            json["mobile"] = navigator.userAgentData.mobile;
        }

        json["url"] = window.location.hostname;
        json["referrer"] = document.referrer;
    }

    const body = JSON.stringify(json);
    seq++;
    (navigator.sendBeacon && navigator.sendBeacon(visit_url, body)) || fetch(visit_url, {body, method: ''POST'', keepalive: true});


    /* Send any media performance metrics */
    if (mediaQueue.size > 0) {    
        const body = JSON.stringify([...mediaQueue]);
        let url = gRestUrl + "media-performance";
        (navigator.sendBeacon && navigator.sendBeacon(url, body)) || fetch(url, {body, method: ''POST'', keepalive: true});
        mediaQueue.clear();
    }
}

const addToVitalsQueue = (metric) => {
    console.log(metric.name,metric.value);
    vitalsQueue.add(metric);
};

addEventListener(''visibilitychange'', () => {
    console.log("visibilityState",document.visibilityState);
    if (document.visibilityState === "hidden") {
        flushQueues();
    } else {
        page_loaded = Date.now();
    }
}, { capture: true} );

if (''onpagehide'' in self) {
    addEventListener(''pagehide'', () => {
        console.log("pagehide");
        flushQueues();
    }, { capture: true} );
}

/*
** IMAGE INTERSECTION OBSERVER
*/
const images = document.querySelectorAll(''[data-src]'');
const config = {rootMargin: ''0px 0px 50px 0px'',threshold: 0};

let observer = new IntersectionObserver(function (entries, self) {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      preloadImage(entry.target);
      // Stop watching and load the image
      self.unobserve(entry.target);
    }
  });
}, config);

images.forEach(image => {
  observer.observe(image);
});

const preloadImage = (img) => {
  const src = img.getAttribute(''data-src'');
  if (!src) {
    return; 
  }
  img.src = src;
};

/*
** DIALOG HANDLING
*/
document.querySelectorAll("a[data-dialog]").forEach((button) => {
    button.addEventListener("click", (e) => {
      e.preventDefault();
      document.querySelector("dialog."+e.target.dataset.dialog).showModal();
    });
});

document.querySelectorAll("dialog button.close").forEach((button) => {
    button.addEventListener("click", (e) => {
      e.target.closest("dialog").close();
    });
    button.textContent = "X";
});

/*
** CONTACT FORM SUBMISSION
*/
const form = document.querySelector("form.contact");
if (form) {
    form.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        const submit = form.querySelector("button");
        const aws_gateway_url = submit.dataset.url;
        fetch(aws_gateway_url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
            },
            redirect: "follow",
            referrerPolicy: "no-referrer",
            body: JSON.stringify({
                name: formData.get("name"),
                email: formData.get("email"),
                message: formData.get("message"),
                contactEmail: formData.get("contactEmail"),
                signatureContactEmail: formData.get("signatureContactEmail")
            }),
        }).then((response) => {
            if (response.status) {
                console.log("submitted form");
                const formBtn = form.querySelector("button");
                formBtn.disabled = true;
                formBtn.style.cursor = "none";
                const front = formBtn.querySelector(".front");
                front.textContent = "Sent";
                front.style.background = "green";
                formBtn.querySelector(".edge").remove();
                formBtn.querySelector(".shadow").remove();
                form.querySelector(".result").style.opacity = "1";
                return;
            }
            throw new Error("Could not submit request");
        }).catch( (error) => {
            console.error(error);
            form.querySelector(".result").style.opacity = "1";
            form.querySelector(".result").textContent(error);
        });
    });
}';

END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CORE" AS

    FUNCTION getSessionData RETURN session_data_rt IS
        l_apex_session VARCHAR2(50);
        l_parts apex_t_varchar2;
        l_session_data session_data_rt;
    BEGIN
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');
        IF (l_apex_session IS NULL) THEN
            l_session_data.app_id:=apex_application.g_flow_id;
            l_session_data.session_id:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
            l_session_data.page_id:=apex_application.g_flow_step_id;
        ELSE        
            l_parts:=apex_string.split(l_apex_session,',');
            l_session_data.app_id:=l_parts(1);
            l_session_data.session_id:=l_parts(2);
            l_session_data.page_id:=l_parts(3);
        END IF;

        FOR C IN (SELECT supports_popover, timezone FROM session_data WHERE session_id=l_session_data.session_id) LOOP
            l_session_data.timezone:=C.timezone;
            l_session_data.canuse_popover:=CASE WHEN C.supports_popover='true' THEN TRUE ELSe FALSE END;
        END LOOP;

        FOR C IN (
            SELECT u.id
              FROM apex_workspace_sessions s, users u
             WHERE s.apex_session_id=l_session_data.session_id
               AND s.user_name=u.email )
        LOOP
            l_session_data.user_id:=C.id;
        END LOOP;

        IF (l_session_data.user_id IS NULL AND l_session_data.page_id=2) THEN
            RAISE_APPLICATION_ERROR(-20000,'YOUR SESSION HAS EXPIRED');
        END IF;

        RETURN l_session_data;
        EXCEPTION WHEN VALUE_ERROR THEN RETURN l_session_data;
    END;

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg);
        COMMIT;
    END;

    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        l_calling_subprogram1 varchar2(128); -- package name, standalone function name, standalone procedure name or "__anonymous_block".
        l_calling_subprogram2 varchar2(128); -- package procedure name or package function name. NULL if the parent is a standalone function, standalone procedure, or anonymous block.
    BEGIN
        l_calling_subprogram1 := utl_call_stack.subprogram(2)(1);
        BEGIN
            l_calling_subprogram2 := '.'||utl_call_stack.subprogram(2)(2);
            EXCEPTION WHEN subscript_beyond_count THEN
                l_calling_subprogram2 := null;
        END;
        INSERT INTO log(id, procedure_name, message) VALUES (seq_log.nextval, l_calling_subprogram1||l_calling_subprogram2, pMsg);
        COMMIT;
    END;

    /*
    **  Log ORACLE exceptions.
    */
    PROCEDURE log_error IS
        l_depth PLS_INTEGER;
        l_stack LONG;
        l_apex_session VARCHAR2(50);
    BEGIN
        ROLLBACK;

        /* Format call stack which includes procedure names */
        l_depth:=UTL_CALL_STACK.dynamic_depth;
        l_stack:='CALL STACK'||chr(10);
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'Line: ' || UTL_CALL_STACK.unit_line(i) || ' ' || UTL_CALL_STACK.owner(i)||'.'||UTL_CALL_STACK.concatenate_subprogram(UTL_CALL_STACK.subprogram(i)) || chr(10);
        END LOOP;

        /* Format error backtrace */
        l_stack:=l_stack || 'ERROR BACKTRACE'||chr(10);
        l_depth := UTL_CALL_STACK.error_depth;
        FOR i IN 1..l_depth LOOP
            l_stack:=l_stack || 'ORA-' || UTL_CALL_STACK.error_number(i) || ' - ' || UTL_CALL_STACK.error_msg(i) || chr(10);
        END LOOP;

        log(l_stack);

        /* If invoked in Apex session return sqlcode, sqlerrm in json payload */
        l_apex_session:=OWA_UTIL.get_cgi_env('Apex-Session');   

        apex_json.open_object; 
        apex_json.write('success', FALSE); 
        apex_json.write('sqlcode', SQLCODE); 
        apex_json.write('sqlerrm', SQLERRM); 
        apex_json.close_object;

        EXCEPTION WHEN VALUE_ERROR THEN NULL;
    END;

    /*
    ** Return RESTful API url
    */
    FUNCTION getRestUrl RETURN VARCHAR2 IS
        l_rest_url VARCHAR2(200);
    BEGIN
        SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix
          INTO l_rest_url
          FROM user_ords_schemas s, user_ords_modules m
         WHERE s.parsing_schema=sys_context('userenv','current_schema')
           AND m.name='public';

        RETURN (l_rest_url);
    END;

    /*
     **  Keep IP_LOOKUP table up to date
     */
    PROCEDURE uploadIpLookup IS 
        l_clob clob;
        TYPE t_ip_lookup IS TABLE OF ip_lookup%rowtype;
        l_ip_lookup t_ip_lookup:=t_ip_lookup();
        l_ip_count VARCHAR2(10);
    BEGIN
        FOR C IN (SELECT DISTINCT ip_address FROM page_hit MINUS SELECT ip FROM ip_lookup )
        LOOP
            pck_api.callIpdataAPI(null,C.ip_address,'GET',l_clob);
            FOR C1 IN (SELECT city,country_code,postal,count FROM JSON_TABLE(l_clob, '$' COLUMNS(city,country_code,postal,count)))
            LOOP
                l_ip_lookup.EXTEND;
                l_ip_lookup(l_ip_lookup.LAST).ip:=C.ip_address;
                l_ip_lookup(l_ip_lookup.LAST).city:=C1.city;
                l_ip_lookup(l_ip_lookup.LAST).country_code:=C1.country_code;
                l_ip_lookup(l_ip_lookup.LAST).postal:=C1.postal;
                l_ip_count:=C1.count;
            END LOOP;
        END LOOP;
        IF (l_ip_count IS NOT NULL) THEN
            log('IPDATA API COUNT IS ' || l_ip_count);
        END IF;
        FORALL i IN l_ip_lookup.FIRST..l_ip_lookup.LAST
            INSERT INTO ip_lookup VALUES l_ip_lookup(i);
    END;

    /*
     **  Google core web vital and page visit duration data is uploaded from client sessions to table website_article_cwv.
     **  This procedure aggregates the data into page hits
     */
    PROCEDURE uploadPageHits(pWebsiteIdId IN website.id%type) IS
        n PLS_INTEGER;
    BEGIN
        INSERT INTO page_hit(
            website_id, article_id, visit_date, ip_address, referrer, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, fid, fid_rating, duration_visible, browser, connection, url, mobile
        )
        SElECT 
            website_id, article_id, visit_date, ip_address, referrer, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, fid, fid_rating, duration_visible, browser, connection, url, mobile
        FROM
        (
            SELECT 
                website_id, article_id, visit_date, ip_address, 
                MAX(CASE WHEN INSTR(referrer,url)=0 THEN referrer END) referrer, 
                MAX(lcp) lcp, MAX(lcp_rating) lcp_rating, MAX(cls) cls, MAX(cls_rating) cls_rating, MAX(inp) inp, MAX(inp_rating) inp_rating, MAX(fid) fid, MAX(fid_rating) fid_rating, 
                SUM(duration_visible) duration_visible, MAX(browser) browser, MAX(connection) connection, MAX(url) url, MAX(mobile) mobile
            FROM website_article_cwv 
            WHERE website_id=pWebsiteIdId
            GROUP BY website_id, article_id, ip_address, visit_date
        ) 
        ORDER BY visit_date, article_id, ip_address;
        n:=SQL%ROWCOUNT;
        pck_core.log('Inserted '||n||' rows into page_hit table for website_id:'||pWebsiteIdId);

        DELETE website_article_cwv WHERE website_id=pWebsiteIdId;
        n:=SQL%ROWCOUNT;
        pck_core.log('Deleted '||n||' rows from website_article_cwv table for website_id:'||pWebsiteIdId);

        pck_core.uploadIpLookup;
    END;

    /*
     **  Build Contact Form
     */
    FUNCTION buildContactForm(pContactEmail IN website.contact_email%type) RETURN VARCHAR2 IS
        l_form LONG;
        l_terraform_organization_name users.terraform_organization_name%type;
        l_terraform_workspace_name users.terraform_workspace_name%type;
        l_terraform_private_key users.terraform_private_key%type;
        l_aws_gateway_url VARCHAR2(200);
        l_terraform_private_key_raw RAW(4000);
        l_signed_data RAW(4000);
        l_signature_contact_email VARCHAR2(500);
        l_clob CLOB;
    BEGIN
        /* 
        ** pUserId passed means we have to build form for deployment - use logged on user's email address unless website.contact_email is not null
        */
        IF (pContactEmail IS NOT NULL) THEN
            pck_api.getTerraformData(pUserId=>null, pTerraformOrganizationName=>l_terraform_organization_name, pTerraformWorkspaceName=>l_terraform_workspace_name, pTerraformPrivateKey=>l_terraform_private_key);
            pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>'api/v2/organizations/' || l_terraform_organization_name || '/workspaces/' || l_terraform_workspace_name, pMethod=>'GET', pData=>l_clob);

            FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
                pck_api.callTerraformAPI(pUserId=>null, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob);
                FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                    l_aws_gateway_url:=C1.value || '/';
                END LOOP;
            END LOOP;

            l_terraform_private_key_raw:=utl_i18n.string_to_raw(regexp_replace(l_terraform_private_key,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\s?|\s)',''));

            l_signed_data:=DBMS_CRYPTO.SIGN(src =>utl_i18n.string_to_raw(pContactEmail), prv_key =>l_terraform_private_key_raw, pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,sign_alg =>dbms_crypto.SIGN_SHA256_RSA);

            l_signature_contact_email:=utl_i18n.raw_to_char(utl_encode.base64_encode(l_signed_data));
        END IF;

        l_form:=
'<form class="contact">
    <div>
        <label for="nameInput">Name</label>
        <input type="text" id="nameInput" name="name" required minlength="1" maxlength="50">
    </div>
    <div>
        <label for="emailInput">Email</label>
        <input type="email" id="emailInput" name="email" required maxlength="50">
    </div>
    <div>
        <label for="messageInput">Message</label>
        <textarea id="messageInput" name="message" required minlength="1" maxlength="400" rows="5" cols="40"></textarea>
    </div>
    <input type="hidden" name="contactEmail" value="' || pContactEmail || '">
    <input type="hidden" name="signatureContactEmail" value="' || l_signature_contact_email || '">
    <div>
        <button type="submit" class="pushable" data-url="' || l_aws_gateway_url || '">
            <span class="shadow"></span>
            <span class="edge"></span>
            <span class="front">SEND</span>
        </button>
        <span class="result">Thank you</span>
    </div>
</form>';

        RETURN (l_form);
    END;

    /*
     **  Build at most 2 deploy buttons same width as first.
     */
    FUNCTION buildDeployButtons(pDomainName IN website.domain_name%type, pNetlifySiteId IN website.netlify_site_id%type, pNetlifySiteIdCustom IN website.netlify_site_id_custom%type DEFAULT NULL) RETURN VARCHAR2 is
        l_html VARCHAR2(1000);
        l_text VARCHAR2(50);
        l_text_custom VARCHAR2(50);
    BEGIN

        l_text:='https://' || REPLACE(pDomainName,'.','-') || '.netlify.app';

        IF (pNetlifySiteId IS NOT NULL) THEN 
            l_html:=
            '<button type="button" class="deploy-website pushable" data-site_id="' || pNetlifySiteId || '">
                <span class="shadow"></span>
                    <span class="edge"></span>
                    <span class="front">' || l_text || '</span>
             </button>';
            IF (pNetlifySiteIdCustom IS NOT NULL) THEN 
                l_html:=l_html || 
                '<button type="button" class="deploy-website pushable" data-site_id="'|| pNetlifySiteIdCustom || '">
                    <span class="shadow"></span>
                    <span class="edge"></span>
                    <span class="front">https://www.' || pDomainName || '</span>
                 </button>';
            END IF;
        END IF;
        RETURN(l_html);
    END;

    /*
     **  Create wrapper html for textarea element, optionally including dropdown
     */
    FUNCTION buildTextareaWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN CLOB, pCanUsePopover IN BOOLEAN, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN CLOB IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_data_type user_tab_columns.data_type%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT c.data_length, NVL(i.comments,'Info not defined yet'), c.data_type
          INTO l_data_length, l_comments, l_data_type
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="textarea-wrapper">' ||
            CASE WHEN pDropdown IS NOT NULL THEN '<div class="button-container">' END || '
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || 
                CASE WHEN pCanUsePopover 
                        THEN '<button type="button" popovertarget="' || l_column_name || '_popover"><svg class="icon"><use href="#info"></use></svg></button>
                              <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' END ||'
            </label>' || pDropdown || 
            CASE WHEN pDropdown IS NOT NULL THEN '</div>' END || '
            <textarea class="cms" placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                CASE WHEN l_data_type='CLOB' THEN '" rows="5" cols="60"' 
                     WHEN l_data_length=4000 THEN '" rows="5" cols="50" maxlength="' || l_data_length || '"' 
                     ELSE '" maxlength="' || l_data_length || '" rows="1"' 
                END || ' data-column="' || pColumn || '" data-id="' || pId || '">' || pValue || '
            </textarea>        
            <div class="button-container">
                <span class="result"></span>
                <span class="charcounter">' || NVL(LENGTH(pValue),0) || CASE WHEN l_data_type<>'CLOB' THEN '/' || l_data_length END || '</span>
            </div>
        </div>');
    END;

    /*
     **  Create wrapper html for textarea element, optionally including dropdown
     */
    FUNCTION buildInputWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN, pDropdown IN VARCHAR2 DEFAULT NULL) RETURN CLOB IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_data_type user_tab_columns.data_type%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT c.data_length, NVL(i.comments,'Info not defined yet'), c.data_type
          INTO l_data_length, l_comments, l_data_type
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="input-wrapper">' ||
            CASE WHEN pDropdown IS NOT NULL THEN '<div class="button-container">' END || '
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || 
                CASE WHEN pCanUsePopover 
                        THEN '<button type="button" popovertarget="' || l_column_name || '_popover"><svg class="icon"><use href="#info"></use></svg></button>
                              <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' END ||'
            </label>' || pDropdown || 
            CASE WHEN pDropdown IS NOT NULL THEN '</div>' END || '
            <input  class="cms" placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                '" maxlength="' || l_data_length || '" value="' || pValue || '" data-column="' || pColumn || '" data-id="' || pId || '">
            <div class="button-container">
                <span class="result"></span>
                <span class="charcounter">' || NVL(LENGTH(pValue),0) ||  '/' || l_data_length || '</span>
            </div>
        </div>');
    END;

    /*
     **  Create wrapper html for radio elements
     */
    FUNCTION buildRadioWrapper(pColumn IN VARCHAR2, pRadioButtons IN VARCHAR2, pCanUsePopover IN BOOLEAN) RETURN VARCHAR2 IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_comments user_col_comments.comments%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT NVL(i.comments,'Info not defined yet') 
          INTO l_comments
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="radio-wrapper">
                <fieldset>
                    <legend>' || INITCAP(l_column_name) || 
                    CASE WHEN pCanUsePopover 
                        THEN '<button type="button" popovertarget="' || l_column_name || '_popover"><svg class="icon"><use href="#info"></use></svg></button>
                              <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' END || '
                    </legend>
                    <div class="cluster">' || pRadioButtons || '
                    </div>
                </fieldset>
                <div class="button-container">
                    <span class="result"></span><span>&nbsp;</span>
                </div>
            </div>');
    END;

    /*
    ** the miserable privacy policy - Faceook insists that it can be accessed by an application url
    */
    FUNCTION buildPrivacyPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT body_html FROM article WHERE id=19124)   
        LOOP
            RETURN C.body_html;
        END LOOP;
    END;

    /*
     **  Login page
     */
    FUNCTION buildLoginPage RETURN CLOB IS
    BEGIN
        FOR C IN (SELECT id FROM article WHERE id=19124)  -- the miserable privacy policy
        LOOP
            RETURN TO_CLOB('
                <ul class="container">
                    <li class="red">' || pck_icons.g_oracle_svg || '</li>
                    <li class="grey login">
                        <a class="button" href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Facebook&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_facebook_svg ||'Login w/ Facebook</a>
                        <a class="button" href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Google&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || pck_icons.g_google_svg ||'Login w/ Google</a>
                        <button data-id="' || C.id || '">Priv</button>
                    </li>
                    <li class="grey">' || pck_icons.g_github_svg || '</li>
                    <li class="grey">' || pck_icons.g_cloudinary_svg || '</li>
                    <li class="yellow">ALWAYS FREE</li>
                    <li class="grey">' || pck_icons.g_netlify_svg ||'</li>
                    <li class="blue"></li>
                    <li class="grey"></li>
                    <li class="grey"></li>
                </ul>
                <dialog>
                    <div>
                        <div></div> <!-- empty div to make grid -->
                        <div class="content"></div>
                        <button type="button" class="close">&times;</button>
                    </div>
                </dialog>');
        END LOOP;
    END;

    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RETURN (NULL);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5);

        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);
            l_width INTEGER:=pWidth; 
        BEGIN
            IF (pWidth=0) THEN
                RETURN NULL;
            END IF;
            IF (pDimension IS NOT NULL) THEN
                IF (pDimension=1) THEN
                    RETURN NULL;
                ELSE
                    RETURN ',w_' || ROUND(pWidth*pDimension);
                END IF;
            END IF;
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            IF (l_arr(1)>gWidthThumbnail) THEN
                l_arr(1):=gWidthThumbnail;
                l_arr(2):=(pWidth-gWidthThumbnail)/2;
            END IF;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-gWidthThumbnail) <= ABS(l_arr(l_right)-gWidthThumbnail)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;
            IF (l_arr(l_left)=pWidth) THEN
                RETURN NULL;
            END IF;
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        IF (pResourceType IS NOT NULL) THEN
            l_media_type:=getMediaType(pResourceType, pFormat);
            l_url:='https://res.cloudinary.com/' || pCloudname ||
                    CASE l_media_type
                        WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                        WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                        WHEN 'audio' THEN '/video/upload/q_auto,f_auto,w_' || gWidthThumbnail || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                    END;
        END IF;        
        RETURN (l_url);
    END;

    /*
     **  Build gallery of thumbnail images for a given article
     */
    PROCEDURE getThumbnails(pArticleId IN article.id%type, pHTML IN OUT NOCOPY CLOB)
    IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_url_image VARCHAR2(300);
        l_media_type VARCHAR2(5);
        l_dimensions VARCHAR2(50);
        l_aspect_ratio NUMBER;
        n PLS_INTEGER:=0;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (
            SELECT a.id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(a.created_date,'dd-Mon-yyyy') uploaded, 
                   DECODE(a.width,0,pck_core.gWidthThumbnail,a.width) width, DECODE(a.height,0,pck_core.gWidthThumbnail,a.height) height, a.bytes, a.format
              FROM asset a
             WHERE a.article_id=pArticleId
               AND a.user_id=l_session_data.user_id
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            n:=n+1;
            l_media_type:=pck_core.getMediaType(C.resource_type, C.format);

            l_url_image:=pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);

            IF (C.width>0 AND C.width*.25>pck_core.gWidthThumbnail) THEN
                l_dimensions:=pck_core.gWidthThumbnail || 'xheight:' ||
                              ROUND((C.width-pck_core.gWidthThumbnail)/2) || 'xheight:';
            ELSE
                l_dimensions:=ROUND(C.width*.25) || 'x' || ROUND(C.height*.25) || ':' || 
                              ROUND(C.width*.625) || 'x' || ROUND(C.height*.625) || ':';
            END IF;

            pHTML:=pHTML || TO_CLOB(
                '<li class="card' || CASE WHEN c.width>C.height THEN ' landscape' END || '" tabindex="0" data-id="' || C.id || '">
                    <img class="fullscreen" data-dimensions="'  || l_dimensions || 
                                C.width || 'x' || C.height || '" data-src="' || l_url_image || '"' || CASE WHEN l_media_type='video' THEN ' style="display:none"' END || '>
                    <div class="actions">
                        <button type="button" class="copy"><svg><use href="#copy"></use></svg></button>
                        <button type="button" class="expand"><svg><use href="#expand"></use></svg></button>
                        <button type="button" class="delete" data-table="asset"><svg><use href="#delete"></use></svg></button>
                    </div>');

            CASE l_media_type

                WHEN 'video' THEN
                    pHTML:=pHTML || TO_CLOB(
                    '<video controls preload="metadata" poster="' || l_url_image || '">
                        <source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>
                    </video>');

                WHEN 'audio' THEN
                    l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                    pHTML:=pHTML || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>
                    </audio>');

                ELSE NULL;
            END CASE;

            pHTML:=pHTML || TO_CLOB('</li>');

        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Build authenticated page
     */
    FUNCTION buildAuthPage RETURN CLOB IS
        l_clob CLOB;
        l_user_name users.name%type;
        l_templates CLOB;
        l_template_html LONG;
        l_font_html LONG;
        l_edit_websites CLOB;
        l_dns_zones CLOB;
        l_sites CLOB;
        l_domain_dropdown LONG;
        l_printed_separator BOOLEAN:=FALSE;
        l_nav_labels LONG;
        l_body_html article.body_html%type;
        l_thumbnails CLOB;
        l_contact_form website_article.contact_form%type;

        TYPE t_domain IS RECORD (
            id                      website.id%type,
            domain_name             website.domain_name%type,
            netlify_site_id         website.netlify_site_id%type,
            netlify_site_id_custom  website.netlify_site_id%type,
            updated_date            article.updated_date%type
        );
        TYPE tt_domain IS TABLE OF t_domain;
        l_domains tt_domain;  
        l_session_data session_data_rt;
    BEGIN
        l_session_data:=getSessionData();

        l_clob:= TO_CLOB(pck_icons.g_icons_svg);

        /* Construct the top navigation menu */
        l_clob:=l_clob || TO_CLOB('
        <nav class="top-nav">
            <div class="dropdown">
                <span>' || apex_application.g_user || '</span>
                <button type="button" class="show-dropdown">&blacktriangledown;</button>
                <ul class="dropdown-items">                    
                    <li class="api-keys">
                        <button type="button" class="with-icon">
                            <svg class="icon">
                                <use href="#keys"></use>
                            </svg>
                            API Keys
                        </button>
                    </li>
                    <li class="session-log">
                        <button type="button" class="with-icon session-log">
                            <svg class="icon">
                                <use href="#list"></use>
                            </svg>
                            Session Log
                        </button>
                    </li>
                    <li class="signout">
                        <button type="button" class="with-icon">
                            <svg class="icon">
                                <use href="#signout"></use>
                            </svg>
                            Log Out
                        </button>
                    </li>      
                </ul>
            </div>
        </nav>');

        -- should use this to show users available custom domains
        /*
        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_dns_zones);
        DELETE netlify_dns_zone;
        INSERT INTO netlify_dns_zone (id, name, site_id, created_at, updated_at)
        SELECT id, name, site_id, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') 
          FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS(id, name, site_id, created_at, updated_at));

        DELETE netlify_dns_zone_server;
        INSERT INTO netlify_dns_zone_server (dns_zone_id, server)
        SELECT id, server FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS (id, NESTED '$.dns_servers[*]' COLUMNS (server varchar2(50) path '$')));

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites', pMethod=>'GET', pData=>l_sites);
        DELETE netlify_site;
        INSERT INTO netlify_site (id, name, custom_domain, url, created_at, updated_at)
        SELECT id, name, custom_domain, url, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR')
          FROM JSON_TABLE(l_sites, '$[*]' COLUMNS(id, name, custom_domain, url, created_at, updated_at));
        */

        SELECT w.id, w.domain_name, w.netlify_site_id, w.netlify_site_id_custom, MAX(COALESCE(a.updated_date, a.created_date)) updated_date
          BULK COLLECT INTO l_domains
          FROM website w, website_article wa, article a
         WHERE w.user_id=l_session_data.user_id
           AND wa.website_id=w.id
           AND a.id=wa.article_id
         GROUP BY w.id, w.domain_name, w.netlify_site_id, w.netlify_site_id_custom
         ORDER BY updated_date DESC;

        /* Get id of article that will be displayed - i.e article last updated by user */

        IF (l_domains.COUNT>0) THEN
            FOR C IN (SELECT wa.navigation_label, wa.article_id, wa.contact_form, a.body_html, CASE WHEN COALESCE(a.updated_date, a.created_date)=l_domains(1).updated_date THEN ' selected' END selected 
                        FROM website_article wa, article a 
                       WHERE wa.website_id=l_domains(1).id 
                         AND a.id=wa.article_id 
                       ORDER BY wa.display_order) 
            LOOP
                l_nav_labels:=l_nav_labels || '<a href="#" class="nav-label' || C.selected || '" data-id="' || C.article_id || '">' || C.navigation_label;
                IF (C.contact_form='YES') THEN
                    l_nav_labels:=l_nav_labels || '<svg class="icon"><use href="#envelope"></use></svg>';
                END IF;
                l_nav_labels:=l_nav_labels || '</a>';

                IF (C.selected IS NOT NULL) THEN
                    l_body_html:=C.body_html;
                    l_contact_form:=C.contact_form;
                    getThumbnails(C.article_id, l_thumbnails);
                END IF;
            END LOOP;
        END IF;

        IF (l_domains.COUNT=0) THEN
            l_domains.EXTEND(1);
        END IF;

        l_domain_dropdown:='
        <div class="dropdown">
            <button type="button" class="show-dropdown">&blacktriangledown;</button>
            <ul class="dropdown-items">
                <li>
                    <button type="button" class="with-icon new-website">
                        <svg class="icon">
                            <use href="#plus"></use>
                        </svg>
                        NEW WEBSITE
                    </button>
                </li>';

        FOR i IN 1..l_domains.COUNT LOOP
            IF (l_domains(i).id IS NULL) THEN
                l_domain_dropdown:=l_domain_dropdown ||'<li class="separator"></li>';
                CONTINUE;
            END IF;
            IF NOT (l_printed_separator) THEN
                l_domain_dropdown:=l_domain_dropdown ||'<li class="separator"></li>';
                l_printed_separator:=TRUE;
            END IF;
            l_domain_dropdown:=l_domain_dropdown ||'
                <li>
                    <button type="button" class="with-icon edit-website" data-id="' || l_domains(i).id || '">
                            <svg class="icon">
                                <use href="#pen-to-square"></use>
                            </svg>' ||          
                    l_domains(i).domain_name || '
                    </button>
                </li>';
            IF (i=l_domains.COUNT) THEN
                l_domain_dropdown:=l_domain_dropdown ||'<li class="separator"></li>';
            END IF;
        END LOOP;

        l_domain_dropdown:=l_domain_dropdown ||'
                <li>
                    <button type="button" class="with-icon delete" data-table="website" data-id=' || l_domains(1).id || '>
                        <svg class="icon">
                            <use href="#delete">
                        </svg>
                        DELETE WEBSITE
                    </button>
                </li>
            </ul>
        </div>';

        l_clob:=l_clob || TO_CLOB('
        <form class="website">' ||
            buildTextareaWrapper(l_domains(1).id, 'website.domain_name', l_domains(1).domain_name, l_session_data.canuse_popover, l_domain_dropdown) ||
            --buildInputWrapper(l_domains(1).id, 'website.domain_name', l_domains(1).domain_name, l_session_data.canuse_popover, l_domain_dropdown) ||
            --buildRadioWrapper('website.template',l_template_html, l_session_data.canuse_popover) ||
            --
            '<button type="button" class="pushable website-options">
                <span class="shadow"></span>
                <span class="edge"></span>
                <span class="front">WEBSITE OPTIONS</span>
            </button>
            <fieldset class="deploy-buttons">
                <legend>Publish Website</legend>
                <div>' ||
                buildDeployButtons(l_domains(1).domain_name, l_domains(1).netlify_site_id, l_domains(1).netlify_site_id_custom) ||
                '</div>
            </fieldset>
            <button type="button" class="pushable visits">
                <span class="shadow"></span>
                <span class="edge"></span>
                <span class="front">VISITS</span>
            </button>
        </form>
        <form action="https://codepen.io/pen/define" method="POST" target="_blank">
            <input type="hidden" name="data" value="">
        </form>
        <div class="cards">
            <!-- First card -->
            <div>
                <button type="button" class="pushable upload-media">
                    <span class="shadow"></span>
                    <span class="edge"></span>
                    <span class="front">UPLOAD MEDIA</span>
                </button>
                <div role="region" aria-label="gallery">
                    <ul class="gallery-list">' || l_thumbnails || '</ul>
                </div>
                <div class="gallery-overlay">
                    <img src="">
                    <span class="counter"></span>
                    <button type="button" class="close-fullscreen">&times;</button>
                    <button type="button" class="prev">&lt;</button>
                    <button type="button" class="next">&gt;</button>
                </div>
            </div>
            <!-- Second card -->
            <div class="page-content">                
                <button type="button" class="new-page pushable">
                    <span class="shadow"></span>
                    <span class="edge"></span>
                    <span class="front">NEW PAGE</span>
                </button>
                <nav class="website-nav-menu">' || l_nav_labels || '
                    <div class="dropdown">
                        <span>Edit Options</span>
                        <button type="button" class="show-dropdown">&blacktriangledown;</button>
                        <ul class="dropdown-items">
                            <li>
                                <button type="button" class="with-icon edit-field" data-column="website_article.navigation_label">
                                    <svg class="icon"><use href="#link"></use></svg>
                                Navigation Label
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon ' || CASE WHEN l_contact_form='YES' THEN 'remove-contact' ELSE 'add-contact' END || '">
                                    <svg class="icon"><use href="' || CASE WHEN l_contact_form='YES' THEN '#minus' ELSE '#plus' END || '"></use></svg>
                                Contact Form
                                </button>
                            </li>                    
                            <li>
                                <button type="button" class="with-icon edit-codepen">
                                    <svg class="icon"><use href="#codepen"></use></svg>
                                Codepen Editor
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon upload-codepen">
                                    <svg class="icon"><use href="#upload"></use></svg>
                                Upload Codepen Zip
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon restore-article">
                                    <svg class="icon"><use href="#backward"></use></svg>
                                Restore Before Login
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon edit-field" data-column="website_article.page_title">
                                    <svg class="icon"><use href="#searchengin"></use></svg>
                                Page Title (SEO)
                                </button>
                            </li>
                            <li>
                                <button type="button" class="with-icon edit-field" data-column="website_article.page_description">
                                    <svg class="icon"><use href="#searchengin"></use></svg>
                                Page Description (SEO)
                                </button>
                            </li>
                            <li>
                                <hr>
                            </li>
                            <li>
                                <button type="button" class="with-icon delete" data-table="website_article">
                                    <svg class="icon"><use href="#delete"></use></svg>
                                Delete Page
                                </button>
                            </li>     
                        </ul>
                    </div>
                </nav>
                <textarea id="editor-content" style="display:none">' || l_body_html || '</textarea>
                <div id="editor"></div>
                <div>
                    <span id="word-count"></span>
                    <span id="editor-status"></span>
                </div>
            </div>
        </div>
        <dialog class="popup">
            <div>
                <button type="button" class="close">&times;</button>
                <h2></h2>
                <p></p>
            </div>
        </dialog>
        <dialog class="website-options">
            <div>
                <div class="content"></div>
                <button type="button" class="close">&times;</button>
            </div>
        </dialog>
        <dialog class="edit-field">
            <div>
                <button type="button" class="close">&times;</button>
                <div class="content"></div>
                <form method="dialog">
                    <button type="button" class="saveBtn pushable">
                        <span class="shadow"></span>
                        <span class="edge"></span>
                        <span class="front">SAVE</span>
                    </button>
                </form>
            </div>
        </dialog>
        <dialog class="delete-confirm">
            <div>
                <button type="button" class="close">&times;</button>
                <h2></h2>
                <div class="content">
                    <img>
                    <p></p>
                </div>
                <form method="dialog">
                    <button type="button" class="confirmBtn pushable">
                        <span class="shadow"></span>
                        <span class="edge"></span>
                        <span class="front">CONFIRM</span>
                    </button>
                </form>
            </div>
        </dialog>
        <dialog class="log">
            <div>
                <div class="content"></div>
                <button type="button" class="close">&times;</button>
            </div>
        </dialog>');

        RETURN l_clob;
    END;

    /*
     **  All pages initiated by APEX "Dynamic Content" component.
     **  After that it's Javascript fetch and ORDS all the way
     */
    FUNCTION getPageContent RETURN CLOB IS
        l_clob CLOB;
        l_css_file_urls APEX_APPLICATION_PAGES.css_file_urls%type;
        l_javascript_file_urls APEX_APPLICATION_PAGES.javascript_file_urls%type;
        l_page_css APEX_APPLICATION_STATIC_FILES.file_name%type;
        l_page_js APEX_APPLICATION_STATIC_FILES.file_name%type;
    BEGIN
        SELECT NVL(css_file_urls,' '), NVL(javascript_file_urls,' ')
          INTO l_css_file_urls, l_javascript_file_urls
          FROM APEX_APPLICATION_PAGES 
         WHERE application_id=apex_application.g_flow_id
           AND page_id=apex_application.g_flow_step_id;

        l_page_css:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.css';

        IF (INSTR(l_css_file_urls,l_page_css)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_css,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<style>' || apex_util.blob_to_clob(C.file_content) || '</style>';
            END LOOP;
        END IF;

        CASE apex_application.g_flow_step_id
            WHEN 1 THEN l_clob:=l_clob || buildLoginPage;
            WHEN 2 THEN l_clob:=l_clob || buildAuthPage;
            WHEN 3 THEN l_clob:=l_clob || buildPrivacyPage;
        END CASE;

        l_clob:=l_clob || TO_CLOB('
            <input type="hidden" name="p_flow_id" value="' || apex_application.g_flow_id ||'" id="pFlowId">
            <input type="hidden" name="p_flow_step_id" value="' || apex_application.g_flow_step_id ||'" id="pFlowStepId">
            <input type="hidden" name="p_instance" value="' || APEX_CUSTOM_AUTH.GET_SESSION_ID ||'" id="pInstance">');            

        l_clob:=l_clob || chr(10) || TO_CLOB('
        <script>
            const gRestUrl = "' || getRestUrl() || '";' || CASE WHEN apex_application.g_flow_step_id=2 THEN '
            const gHomeUrl = "' || apex_util.host_url('SCRIPT') || 'home";' END || '
        </script>');

        l_page_js:='app' || apex_application.g_flow_id || '_' || apex_application.g_flow_step_id || '.min.js';

        IF (INSTR(l_javascript_file_urls,l_page_js)=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name=REPLACE(l_page_js,'.min')) LOOP
                l_clob:=l_clob || chr(10) || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
            END LOOP;
        END IF;

        l_clob:=l_clob || TO_CLOB('
            <script type="module">
              import {onCLS, onFID, onLCP} from ''https://unpkg.com/web-vitals?module'';
              onCLS(addToVitalsQueue);
              onFID(addToVitalsQueue);
              onLCP(addToVitalsQueue);
            </script>');

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error;
                RAISE;
    END;

    /*
    **  Administrator function to transfer ownership of a specified website and all dependent table rows to a different User 
    */
    PROCEDURE transferWebsite(pWebsiteId IN website.id%type, pUserId IN users.id%type) IS
        l_transfer_from_user_id users.id%type;
        l_transfer_to_user_id users.id%type;
    BEGIN
        SELECT user_id INTO l_transfer_from_user_id FROM website WHERE id=pWebsiteId;
        SELECT id INTO l_transfer_to_user_id FROM users WHERE id=pUserId;

        /* Don't let this happen of any article in the website has been copied to another website */

        UPDATE website 
           SET user_id=l_transfer_to_user_id 
         WHERE id=pWebsiteId AND user_id=l_transfer_from_user_id;

        UPDATE article 
           SET author_user_id=l_transfer_to_user_id 
         WHERE id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE asset 
           SET user_id=l_transfer_to_user_id 
         WHERE article_id IN (SELECT article_id FROM website_article WHERE website_id=pWebsiteid AND user_id=l_transfer_from_user_id);

        UPDATE website_article SET user_id=l_transfer_to_user_id 
         WHERE website_id=pWebsiteId AND user_id=l_transfer_from_user_id;

        COMMIT;
    END;

END;
/