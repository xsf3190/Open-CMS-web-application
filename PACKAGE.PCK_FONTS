CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_FONTS" as
    --
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pCategory IN font.category%type, pFontId IN font.id%type, pContext IN website_font.context%type, pVariable IN font.variable%type, pStatus OUT NUMBER);
    --
    PROCEDURE loadGoogleFonts;
    --
    PROCEDURE updateFonts(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
end "PCK_FONTS";
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_FONTS" as

    /* 
    **  BUILD HTML FORM TO SELECT WEBSITE FONTS
    */
    PROCEDURE getHTML(pWebsiteId IN website.id%type) IS
        l_selected_category font.category%type;
        l_header LONG;
        l_article CLOB;
        l_footer LONG;
    BEGIN
        l_header:=
        '<button type="button" class="button variable">Variable Fonts' ||
			'<svg height="1em" width="1em" viewBox="0 0 16 16" class="visually-hidden icon" fill="none" stroke="green" stroke-width="4">' ||
				'<path d="M2 10 L 8 14 L 14 2 "></path>' ||
			'</svg>' ||
		'</button>';

        l_article:='<div class="flex-items" style="--flex-gap:.5em">';
        FOR C IN (
            SELECT font_id, context 
              FROM website_font
             WHERE website_id=pWebsiteId 
             ORDER BY context
        ) LOOP
            SELECT category INTO l_selected_category FROM font WHERE id=C.font_id;
            l_article:=l_article ||
            '<fieldset class="flex-items" style="--flex-gap:1em">' ||
                '<legend>' || INITCAP(C.context) || '</legend>' ||
                '<label for="' || C.context || '-font-category">Category</label>' ||
                '<select id="' || C.context || '-font-category" name="' || C.context || '_font_category">' ||
                    '<button>' ||
                      '<selectedcontent></selectedcontent>' ||
                      '<span class="arrow"></span>' ||
                    '</button>';
            FOR C1 IN (SELECT category FROM font_category ORDER BY 1)
            LOOP
                l_article:=l_article || 
                    '<option value="' || C1.category || '"' || CASE WHEN C1.category=l_selected_category THEN ' selected' END || '>' ||
                        C1.category ||
                    '</option>';
            END LOOP;
            l_article:=l_article || 
                '</select>';

            /* Fonts in category */
            l_article:=l_article || 
                '<label for="' || C.context || '-font-family">Family</label>' ||
                '<select id="' || C.context || '-font-family" name="' || C.context || '_font_family">' ||
                    '<button>' ||
                      '<selectedcontent></selectedcontent>' ||
                      '<span class="arrow"></span>' ||
                    '</button>';
            CASE C.context
                WHEN 'headings' THEN
                    FOR C1 IN (SELECT id, family FROM font WHERE category=l_selected_category ORDER BY 2)
                    LOOP
                        l_article:=l_article || 
                        '<option value="' || TO_CHAR(C1.id) || '"'|| CASE WHEN C1.id=C.font_id THEN ' selected' END || '>' ||
                            C1.family ||
                        '</option>';
                    END LOOP;
                WHEN 'text' THEN
                    FOR C1 IN (
                        SELECT id, family 
                          FROM font 
                         WHERE category=l_selected_category 
                           AND ital_start IS NOT NULL 
                           AND 400 BETWEEN wght_start AND wght_end
                           AND 700 BETWEEN wght_start AND wght_end ORDER BY 2)
                    LOOP
                        l_article:=l_article || 
                        '<option value="' || TO_CHAR(C1.id) || '"'|| CASE WHEN C1.id=C.font_id THEN ' selected' END || '>' ||
                            C1.family ||
                        '</option>';
                    END LOOP;
            END CASE;
            l_article:=l_article || 
                '</select>' ||
                '<div class="loader icon"></div>' ||
            '</fieldset>';
        END LOOP;
        l_article:=l_article || 
        '</div>';

        FOR C IN (SELECT SUM(nb_fonts) nb_fonts, MAX(last_modified) last_modified FROM font_category) LOOP
            l_footer:=
            '<a class="icon-with-text" href="https://fonts.google.com" target="a_blank">' ||
				'<svg width="1em" height="1em" viewBox="0 0 512 512"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376C296.3 401.1 253.9 416 208 416 93.1 416 0 322.9 0 208S93.1 0 208 0 416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"/></svg>' ||
				'<small>' || C.nb_fonts || ' Google fonts</small>' ||
			'</a>' ||
            '<small>Updated ' || TO_CHAR(C.last_modified, 'dd Mon yyyy') || '</small>';
        END LOOP;

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('header', l_header);
        apex_json.write('article', l_article);
        apex_json.write('footer', l_footer);
        apex_json.close_object;

    END;
    
    /* 
    **  RETURN GOOGLE FONTS URL FOR USER-SELECTED FONT
    */
    FUNCTION getFontURL(pFontid IN font.id%type) RETURN VARCHAR2 IS
        l_api_url VARCHAR2(250);
        l_url VARCHAR2(500);
        l_url_regex VARCHAR2(50):='url.*;';
        l_font_css CLOB;
        n PLS_INTEGER;
    BEGIN
        FOR C IN (
                SELECT f.family, f.variable,
                    LTRIM(NVL2(f.ital_start,'ital',NULL) || NVL2(f.opsz_start,',opsz',NULL) || NVL2(f.slnt_start,',slnt',NULL) || 
                        NVL2(f.wdth_start,',wdth',NULL) || NVL2(f.wght_start,',wght',NULL),',') axes,
                    LTRIM(NVL2(f.opsz_start,f.opsz_start||'..'||f.opsz_end,NULL) || NVL2(f.slnt_start,','||f.slnt_start||'..'||f.slnt_end,NULL) || 
                        NVL2(f.wdth_start,','||f.wdth_start||'..'||f.wdth_end,NULL) || NVL2(f.wght_start,','||f.wght_start||'..'||f.wght_end,NULL),',') ranges
                FROM font f
                WHERE f.id=pFontid) 
        LOOP
            l_api_url:='https://fonts.googleapis.com/css2?family=' || REPLACE(C.family,' ','+');
            IF (C.axes IS NOT NULL) THEN
                l_api_url:=l_api_url || ':' || C.axes || '@';
                IF (INSTR(C.axes,'ital')>0) THEN
                    l_api_url:=l_api_url || '0,' || C.ranges || ';1,' || C.ranges;
                ELSE
                    l_api_url:=l_api_url || C.ranges;
                END IF;
            END IF;
            pck_api.callGoogleAPI(l_api_url,pData=>l_font_css);

            /* Get url for Latin glyphs ... bit desperate but so far seems to be in last font-face */
            n:=regexp_count(l_font_css,l_url_regex);
            l_url:=regexp_substr(l_font_css,l_url_regex,1,n);
        END LOOP;

        RETURN(RTRIM(l_url,';'));
    END;

    PROCEDURE getFontsInCategory(pCategory IN font.category%type, pContext IN website_font.context%type, pVariable IN font.variable%type) IS
        l_html CLOB;
    BEGIN
        APEX_JSON.open_object; 
        l_html:='<option value="">--Choose a Font--</option>';
        CASE pContext
            WHEN 'headings' THEN
                FOR C IN (
                    SELECT id, family 
                    FROM font 
                    WHERE category=pCategory 
                    AND variable=pVariable
                    ORDER BY 2
                )
                LOOP
                    l_html:=l_html || '<option value="' || C.id || '">' || C.family || '</option>';
                END LOOP;
            WHEN 'text' THEN
                FOR C IN (
                    SELECT id, family 
                    FROM font 
                    WHERE category=pCategory
                      AND variable=pVariable
                      AND ital_start IS NOT NULL 
                      --AND 400 BETWEEN wght_start AND wght_end
                      --AND 700 BETWEEN wght_start AND wght_end
                    ORDER BY 2
                )
                LOOP
                    l_html:=l_html || '<option value="' || C.id || '">' || C.family || '</option>';
                END LOOP;
        END CASE;
        APEX_JSON.write('content', l_html);
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object;
    END;

    PROCEDURE getSelectedFontURL(pFontid IN font.id%type, pVariable IN font.variable%type) IS
    BEGIN
        APEX_JSON.open_object; 
        FOR C IN (
            SELECT f.family, f.variable, f.ital_start, f.ital_end
             FROM font f
            WHERE f.id=pFontid
              AND f.variable=pVariable
        ) 
        LOOP
            apex_json.write('url',getFontUrl(pFontid));

            apex_json.open_array('axes');

            apex_json.open_object;
            apex_json.write('name','ital');
            apex_json.write('min', C.ital_start);
            apex_json.write('max', C.ital_end);
            apex_json.close_object;
            
            apex_json.close_array;
        END LOOP;
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object;
    END;

    /* 
    **  BUILD SELECT LIST OF FONT FAMILIES FOR GIVEN CATEGORY (if font_id=0) ELSE GET FONT SETTINGS FOR A SPECIFIC FONT
    */
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pCategory IN font.category%type, pFontId IN font.id%type, pContext IN website_font.context%type, pVariable IN font.variable%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html CLOB;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        IF (pContext='HTML') THEN
            getHTML(pWebsiteId);
        ELSIF (pFontId=0) THEN
            getFontsInCategory(pCategory, pContext, pVariable);
        ELSE
            getSelectedFontURL(pFontid, pVariable);
        END IF;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);
    END;

    /* 
    **  UPDATE WEBSITE HEADER FIELDS
    */
    PROCEDURE updateFonts(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_bodytext CLOB:=pBodyText;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        
        FOR C IN (
            SELECT headings_font_family, text_font_family
              FROM JSON_TABLE(l_bodytext, '$' COLUMNS(headings_font_family,text_font_family))
        ) LOOP
            UPDATE website_font
               SET font_id=C.headings_font_family,
                   updated_date=current_timestamp
             WHERE website_id=pWebsiteId
               AND context='headings';

            UPDATE website_font
               SET font_id=C.text_font_family,
                   updated_date=current_timestamp
             WHERE website_id=pWebsiteId
               AND context='text';
        END LOOP;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
    **  load Google font definitions into google_font table. wolf3 format only. Websites deployed with optimized foont.r 
    */
    PROCEDURE loadGoogleFonts IS 
        l_clob CLOB;
        l_nb_fonts PLS_INTEGER;
        l_lastModified google_font.lastModified%type;
    BEGIN
        pck_api.callGoogleAPI('https://www.googleapis.com/webfonts/v1/webfonts?capability=WOFF2&capability=VF',pData=>l_clob);

        EXECUTE IMMEDIATE('truncate table google_font');

        INSERT INTO google_font(
            family, category,
            ital_start,ital_end,
            wdth_start,wdth_end,
            wght_start,wght_end,
            opsz_start,opsz_end,
            slnt_start,slnt_end,
            subset, vf, lastModified
        )
        WITH 
        data AS
        (
            SELECT family, category, lastModified,
                TO_NUMBER(
                CASE 
                    WHEN variant='regular' THEN '400'
                    WHEN variant='italic' THEN '-400'
                    WHEN INSTR(variant,'italic')>0 THEN '-' || SUBSTR(variant,1,INSTR(variant,'italic')-1)
                    ELSE variant
                END
                ) variant,
                tag,"start" as tag_start, "end" as tag_end, subset
            FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, category, lastModified, NESTED PATH '$.variants[*]' COLUMNS (variant VARCHAR2(50) PATH '$'),  
                NESTED '$.axes[*]' COLUMNS(tag varchar2(4) PATH '$.tag', "start" number PATH '$.start', "end" number PATH '$.end'),
                NESTED PATH '$.subsets[*]' COLUMNS (subset VARCHAR2(50) PATH '$')))
        ), 
        data2 as
        (
            SELECT family, category, TO_DATE(lastModified,'YYYY-MM-DD') lastModified, 
                MIN(DECODE(SIGN(variant),1,variant)) wght_start_static, MAX(DECODE(SIGN(variant),1,variant)) wght_end_static,
                MIN(DECODE(SIGN(variant),-1,0)) ital_start, MAX(DECODE(SIGN(variant),-1,1)) ital_end,
                MAX(DECODE(tag,'wdth',tag_start)) as wdth_start, MAX(DECODE(tag,'wdth',tag_end)) as wdth_end, 
                MAX(DECODE(tag,'wght',tag_start)) as wght_start, MAX(DECODE(tag,'wght',tag_end)) as wght_end, 
                MAX(DECODE(tag,'opsz',tag_start)) as opsz_start, MAX(DECODE(tag,'opsz',tag_end)) as opsz_end, 
                MAX(DECODE(tag,'slnt',tag_start)) as slnt_start, MAX(DECODE(tag,'slnt',tag_end)) as slnt_end,
                LISTAGG(subset,'|') WITHIN GROUP (ORDER BY subset) subset
            FROM data
            GROUP BY family, category, lastModified
        )
        SELECT family, category, 
            ital_start, ital_end, 
            wdth_start, wdth_end,
            NVL(wght_start,wght_start_static), NVL(wght_end,wght_end_static),
            opsz_start, opsz_end,
            slnt_start, slnt_end,
            subset,
            DECODE(COALESCE(wdth_start,wght_start,opsz_start,slnt_start),NULL,0,1),
            lastModified
        FROM data2;


        /* Update font category table from staging table */
        MERGE INTO font_category t
        USING
        (
            SELECT category, MAX(lastmodified) last_modified, COUNT(*) nb_fonts FROM google_font GROUP BY category
        ) s
        ON (t.category=s.category)
        WHEN MATCHED THEN UPDATE SET
            t.nb_fonts=s.nb_fonts,
            t.last_modified=s.last_modified,
            t.updated_date=current_timestamp
        WHEN NOT MATCHED THEN 
            INSERT (category, nb_fonts)
            VALUES (s.category, s.nb_fonts);

        /* Update font table from staging table */
        MERGE INTO font t
        USING
        (
            SELECT family, category, ital_start, ital_end, wdth_start, wdth_end, wght_start, wght_end, opsz_start, opsz_end, slnt_start, slnt_end, vf
            FROM google_font
        ) s
        ON (t.family=s.family)
        WHEN MATCHED THEN UPDATE SET
            t.category=s.category,
            t.ital_start=s.ital_start, t.ital_end=s.ital_end,
            t.wdth_start=s.wdth_start, t.wdth_end=s.wdth_end, 
            t.wght_start=s.wght_start, t.wght_end=s.wght_end,
            t.opsz_start=s.opsz_start, t.opsz_end=s.opsz_end,
            t.slnt_start=s.slnt_start, t.slnt_end=s.slnt_end,
            t.variable=s.vf,
            t.updated_date=current_timestamp
        WHEN NOT MATCHED THEN 
            INSERT (id, family, category, ital_start, ital_end, wdth_start, wdth_end, wght_start, wght_end, opsz_start, opsz_end, slnt_start, slnt_end, variable, created_date) 
            VALUES (seq_font.nextval, s.family, s.category, s.ital_start, s.ital_end, s.wdth_start, s.wdth_end, s.wght_start, s.wght_end, s.opsz_start, s.opsz_end, s.slnt_start, s.slnt_end,  s.vf, current_timestamp);
        
        l_nb_fonts:=sql%rowcount;
        pck_core.log('Uploaded ' ||l_nb_fonts || ' Google Fonts');
    END;
end "PCK_FONTS";
/