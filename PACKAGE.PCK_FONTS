CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_FONTS" as
    --
    TYPE tt_chars_used IS RECORD (
            chars_normal VARCHAR2(500),
            chars_italic VARCHAR2(500),
            chars_bold_normal VARCHAR2(500),
            chars_bold_italic VARCHAR2(500)
    );
    TYPE t_chars_used IS TABLE OF tt_chars_used INDEX BY VARCHAR2(40);
    g_chars_used t_chars_used:=t_chars_used( 'headings' => tt_chars_used(null,null,null,null), 'text' => tt_chars_used(null,null,null,null));
    --
    PROCEDURE getCharsUsed(pArticleId IN article.id%type, pContent IN OUT NOCOPY CLOB);
    --
    PROCEDURE getFontFiles(pWebsiteId IN website.id%type, pSiteid IN website.netlify_site_id%type);
    --
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pContext IN website_font.context%type, pCategory IN font.category%type, pStatus IN OUT NUMBER);
    --
    PROCEDURE loadGoogleFonts;
    --
    PROCEDURE updateFont(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
end "PCK_FONTS";
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_FONTS" as

    /* 
    ** Return distict characters sorted 
    */
    FUNCTION distinct_chars(pCharacters IN VARCHAR2) RETURN VARCHAR2 IS
        l_chars article_chars.chars_normal%type;
    BEGIN
        SELECT LISTAGG(DISTINCT SUBSTR(pCharacters, LEVEL, 1), NULL) WITHIN GROUP (ORDER BY SUBSTR(pCharacters, LEVEL, 1))
        INTO l_chars
        FROM dual
        CONNECT BY LEVEL <= LENGTH(pCharacters);
        RETURN(l_chars);
    END;

    /*
    **  COLLECT DISTINCT CHARACTERS USED IN AN ARTICLE - SAVE IN TABLE ARTICLE_CHARS AS WELL AS GLOBAL VARIABLES FOR REFERENCE IN DEPLOYMENT
    */
    PROCEDURE getCharsUsed(pArticleId IN article.id%type, pContent IN OUT NOCOPY CLOB) IS

        l_text CLOB:=pContent;

        hd pls_integer;
        it pls_integer;
        bi pls_integer;
        b pls_integer;

        l_heading LONG;
        l_heading_regex varchar2(30):='<h[1-4](.+?)</h[1-4]>';
        l_italic_regex varchar2(15):='<i>(.+?)</i>';
        l_code_regex varchar2(30):='<code(.+?)</code>';
        l_nbsp_regex varchar2(30):='<p>&nbsp;</p>';
        l_bold_italic_regex varchar2(30):='<i><strong>(.+?)</strong></i>';
        l_bold_regex varchar2(30):='<strong>(.+?)</strong>';

        l_headings LONG;
        l_headings_italic LONG;
        l_chars_normal LONG;
        l_chars_italic LONG;
        l_chars_bold_normal LONG;
        l_chars_bold_italic LONG;

        l_first_heading VARCHAR2(160);

    BEGIN
        DELETE article_chars WHERE article_id=pArticleId;
        
        /* 
        ** REMOVE <code></code>  AND <p>&nbsp;</p>
        ** 1 - start at beginnning
        ** 0 - replace all occurrences
        ** 'n' - ignore line breaks 
        */
        l_text:=REGEXP_REPLACE(l_text,l_code_regex,null,1,0,'n');
        l_text:=REGEXP_REPLACE(l_text,l_nbsp_regex,null,1,0);

        hd:=NVL(REGEXP_COUNT(l_text,l_heading_regex),0);

        FOR i IN 1..hd LOOP
            l_heading:=REGEXP_SUBSTR(l_text,l_heading_regex,1,i);
            it:=REGEXP_COUNT(l_heading,l_italic_regex);

            FOR j IN 1..it LOOP
                l_headings_italic:=l_headings_italic || utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_heading,l_italic_regex,1,j)));
            END LOOP;

            l_heading:=REGEXP_REPLACE(l_heading,l_italic_regex,null,1,0);
            l_heading:=utl_i18n.unescape_reference(apex_escape.striphtml(l_heading));

            l_headings:=l_headings || l_heading;

            IF (i=1) THEN
                l_first_heading:=SUBSTR(l_heading,1,160);
            END IF;
        END LOOP;
        l_headings_italic:=distinct_chars(l_headings_italic);
        l_headings:=distinct_chars(l_headings);

        INSERT INTO article_chars(article_id, context, chars_bold_italic, chars_bold_normal, first_heading)
        VALUES (pArticleId, 'headings', l_headings_italic, l_headings, l_first_heading);

        l_text:=REGEXP_REPLACE(l_text,l_heading_regex,null,1,0);

        /*
        **  NOW PROCESS REST OF THE TEXT
        */

        bi:=NVL(REGEXP_COUNT(l_text, l_bold_italic_regex),0);
        FOR i IN 1..bi LOOP
            l_chars_bold_italic:=l_chars_bold_italic || utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_bold_italic_regex,1,i)));
        END LOOP;
        l_text:=REGEXP_REPLACE(l_text,l_bold_italic_regex,null,1,0);

        it:=NVL(REGEXP_COUNT(l_text,l_italic_regex),0);
        FOR i IN 1..it LOOP
            l_chars_italic:=l_chars_italic || utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_italic_regex,1,i)));
        END LOOP;
        l_text:=REGEXP_REPLACE(l_text,l_italic_regex,null,1,0);

        b:=NVL(REGEXP_COUNT(l_text,l_bold_regex),0);
        FOR i IN 1..b LOOP
            l_chars_bold_normal:=l_chars_bold_normal || utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_bold_regex,1,i)));
        END LOOP;
        l_text:=REGEXP_REPLACE(l_text,l_bold_regex,null,1,0);
        /*
        ** THE REST IS NORMAL !
        */
        l_chars_normal:=distinct_chars(utl_i18n.unescape_reference(apex_escape.striphtml(l_text)));
        l_chars_bold_normal:=distinct_chars(l_chars_bold_normal);
        l_chars_italic:=distinct_chars(l_chars_italic);
        l_chars_bold_italic:=distinct_chars(l_chars_bold_italic);

        INSERT INTO article_chars(article_id, context, chars_bold_italic, chars_bold_normal, chars_italic, chars_normal)
        VALUES (pArticleId, 'text', l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal);   
    END;

    /* 
    **  CALL GOOGLE FONTS API.
    */
    PROCEDURE getFontface(pWebsiteId IN website.id%type, pContext IN website_font.context%type, pFamily IN VARCHAR2, pApiParams IN VARCHAR2, pChars IN VARCHAR2) IS
        l_fontface VARCHAR2(2000);

        l_font_family website_fontface.font_family%type;
        l_font_style website_fontface.font_style%type;
        l_font_weight website_fontface.font_weight%type;
        l_font_stretch website_fontface.font_stretch%type;
        l_src_url website_fontface.src_url%type;
        l_deploy_filename  website_fontface.deploy_filename%type;

        l_api_url VARCHAR2(500):='https://fonts.googleapis.com/css2?family=';

        n PLS_INTEGER;
    
        FUNCTION getValue(pKeyword IN VARCHAR) RETURN VARCHAR2 IS
            j PLS_INTEGER;
            k PLS_INTEGER;
            l PLS_INTEGER;
        BEGIN
            j:=INSTR(l_fontface,pKeyword,1,1);
            k:=INSTR(l_fontface,':',j,1);
            l:=INSTR(l_fontface,';',k,1);
            RETURN (SUBSTR(l_fontface,k+2,l-k-2));
        END;

    BEGIN
        l_api_url:=l_api_url || REPLACE(pFamily,' ','+') || pApiParams || '&text=' || utl_url.escape(pChars,TRUE,'UTF-8');

        SELECT COUNT(*) INTO n FROM website_fontface WHERE website_id=pWebsiteId AND api_url=l_api_url;

        IF (n=0) THEN
            pck_api.callGoogleAPI(pUrl=>l_api_url, pData=>l_fontface);

            l_font_family:=getValue('font-family');
            l_font_style:=getValue('font-style');
            l_font_weight:=getValue('font-weight');
            l_font_stretch:=getValue('font-stretch');
            l_src_url:=getValue('src: url');
            l_src_url:=SUBSTR(l_src_url,INSTR(l_src_url,'(')+1,INSTR(l_src_url,')')-INSTR(l_src_url,'(')-1);
            l_deploy_filename:='/fonts/' || pContext || '.' || l_font_style || CASE WHEN l_font_weight>400 THEN '.bold' END || '.woff2';

            DELETE website_fontface WHERE website_id=pWebsiteId AND deploy_filename=l_deploy_filename;

            pck_core.log('insert website_fontface:'||pContext||':'||l_deploy_filename);

            INSERT INTO website_fontface(website_id, context, font_family, font_style, font_weight, font_stretch, src_url, api_url, deploy_filename)
                VALUES(pWebsiteId, pContext, l_font_family, l_font_style, l_font_weight, l_font_stretch, l_src_url, l_api_url, l_deploy_filename);
        END IF;
    END;

    /*
    ** SOME STATIC FONTS HAVE JUMPS BETWEEN WEIGHTS - E.G. 400,800
    ** THIS FUNCTiON GETS THE CLOSEST WEIGHT TO THE DEFAULT BROWSER BOLD WEIGHT (700)
    */
    FUNCTION getClosestBold(pFontid IN font.id%type, pStyle IN VARCHAR2) RETURN NUMBER
    IS
        l_closest_bold_wght font_static_wght.wght_normal%type;
    BEGIN
        CASE pStyle
            WHEN 'normal' THEN
                SELECT wght_normal
                INTO l_closest_bold_wght
                FROM font_static_wght 
                WHERE font_id=pFontid
                ORDER BY ABS(wght_normal - 700)
                FETCH FIRST ROW ONLY;
            WHEN 'italic' THEN
                SELECT wght_italic
                INTO l_closest_bold_wght
                FROM font_static_wght 
                WHERE font_id=pFontid
                ORDER BY ABS(wght_italic - 700)
                FETCH FIRST ROW ONLY;
        END CASE;
        RETURN (l_closest_bold_wght);
        
        EXCEPTION WHEN NO_DATA_FOUND /* I.E. VARIABLE FONT */
            THEN RETURN (700);
    END;

    /*
    ** BUILD URL PARAMETERS FOR VALID CALL TO GOOGLE FONTS API
    */
    PROCEDURE prepareAPICall(pWebsiteid IN NUMBER, pFontid IN NUMBER, pFamily IN VARCHAR2, pContext IN VARCHAR2, pItalicSupported IN PLS_INTEGER, pBoldSupported IN PLS_INTEGER, pItalAxis IN VARCHAR2, pItalValue IN VARCHAR2,
                pBoldItalic IN VARCHAR2, pBoldNormal IN VARCHAR2, pItalic IN VARCHAR2, pNormal IN VARCHAR2) 
    IS
        l_api_url VARCHAR2(500);
    BEGIN
        IF (pItalic IS NOT NULL) THEN
            IF (pItalicSupported=1) THEN
                l_api_url:=':' || pItalAxis || '@' || pItalValue;
                getFontface(pWebsiteId, pContext, pFamily, l_api_url, pItalic);
            END IF;
        END IF;

        IF (pBoldItalic IS NOT NULL) THEN
            IF (pItalicSupported=1 AND pBoldSupported=1) THEN
                l_api_url:=':' || pItalAxis || ',wght@' || pItalValue || ',' || getClosestBold(pFontid,'italic');
                getFontface(pWebsiteId, pContext, pFamily, l_api_url, pBoldItalic);
            END IF;
        END IF;

        IF (pNormal IS NOT NULL) THEN
            l_api_url:=null;
            getFontface(pWebsiteId, pContext, pFamily, l_api_url, pNormal);
        END IF;

        IF (pBoldNormal IS NOT NULL) THEN
            IF (pBoldSupported=1) THEN
                l_api_url:=':wght@' || getClosestBold(pFontid,'normal');
                getFontface(pWebsiteId, pContext, pFamily, l_api_url, pBoldNormal);
            END IF;
        END IF;
    END;

    /* 
    **  CALL GOOGLE FONTS API TO GET URL OF THE FONT USED IN AN ARTiCLE FOR A SPECIFIC CONTEXT, E.g "headings", "text"
    **  CALLED WHEN USER SELECTS FONT FOR A CONTEXT
    */
    PROCEDURE getFontFiles(pWebsiteId IN website.id%type, pContext IN website_font.context%type, pArticleId IN article.id%type) IS
    BEGIN
        DELETE website_fontface WHERE website_id=pWebsiteId AND context=pContext;

        FOR C IN (
            SELECT wf.font_id, wf.context, f.variable, f.italic, f.family, ac.chars_normal, ac.chars_italic, ac.chars_bold_normal, ac.chars_bold_italic, 
                CASE WHEN f.slnt_start IS NOT NULL THEN 'slnt' ELSE 'ital' END ital_axis, 
                NVL(f.slnt_start,1) ital_value,
                CASE 
                    WHEN variable=1 AND NVL(wght_end,400)>=700 THEN 1
                    WHEN variable=0 THEN
                    (
                        SELECT CASE WHEN MAX(wght_normal)>=700 THEN 1 ELSE 0 END
                        FROM font_static_wght 
                        WHERE font_id=f.id
                    )
                    ELSE 0
                END bold
              FROM website_font wf, font f, article_chars ac
             WHERE wf.website_id=pWebsiteId
               AND wf.context=pContext
               AND wf.font_id=f.id
               AND ac.context=wf.context
               AND ac.article_id=pArticleId
        ) LOOP
            prepareAPICall(pWebsiteid, C.font_id, C.family, pContext, C.italic, C.bold, C.ital_axis, C.ital_value,
                C.chars_bold_italic, C.chars_bold_normal, C.chars_italic, C.chars_normal);
        END LOOP;
    END;

    PROCEDURE deleteFontface(pWebsiteid IN website.id%type, pContext IN VARCHAR2, pDeployFilename IN VARCHAR2) IS
    BEGIN
        DELETE website_fontface 
         WHERE website_id=pWebsiteid 
           AND context=pContext
           AND deploy_filename=pDeployFilename;
    END;

    /* 
    **  CALL GOOGLE FONTS API TO GET URL OF EACH FONT USED IN THE WEBSITE - CALLED BY DEPLOYMENT
    */
    PROCEDURE getFontFiles(pWebsiteId IN website.id%type, pSiteid IN website.netlify_site_id%type) IS
        l_fontfaces VARCHAR2(4000);
    BEGIN
        /* Get distinct set of characters for each font style / weight for each context */
        FOR C IN (
            SELECT context, chars_normal, chars_italic, chars_bold_normal, chars_bold_italic 
              FROM article_chars 
             WHERE article_id IN (
                SELECT COALESCE(a.id,wa.article_id)
                FROM website_article wa, article a
                WHERE wa.website_id=pWebsiteId
                AND a.parent_id(+)=wa.article_id
            )
        ) LOOP
            g_chars_used(C.context).chars_bold_italic:=distinct_chars(g_chars_used(C.context).chars_bold_italic || C.chars_bold_italic);
            g_chars_used(C.context).chars_bold_normal:=distinct_chars(g_chars_used(C.context).chars_bold_normal || C.chars_bold_normal);
            g_chars_used(C.context).chars_italic:=distinct_chars(g_chars_used(C.context).chars_italic || C.chars_italic);
            g_chars_used(C.context).chars_normal:=distinct_chars(g_chars_used(C.context).chars_normal || C.chars_normal);
        END LOOP;

        FOR C IN (
            SELECT wf.font_id, wf.context, f.variable, f.italic, f.family, 
                CASE WHEN f.slnt_start IS NOT NULL THEN 'slnt' ELSE 'ital' END ital_axis, 
                NVL(f.slnt_start,1) ital_value,
                CASE 
                    WHEN variable=1 AND NVL(wght_end,400)>=700 THEN 1
                    WHEN variable=0 THEN
                    (
                        SELECT CASE WHEN MAX(wght_normal)>=700 THEN 1 ELSE 0 END
                        FROM font_static_wght 
                        WHERE font_id=f.id
                    )
                    ELSE 0
                END bold
              FROM website_font wf, font f
             WHERE wf.website_id=pWebsiteId
               AND wf.font_id=f.id
        ) LOOP
            prepareAPICall(pWebsiteid, C.font_id, C.family, C.context, C.italic, C.bold, C.ital_axis, C.ital_value,
                g_chars_used(C.context).chars_bold_italic, g_chars_used(C.context).chars_bold_normal, g_chars_used(C.context).chars_italic, g_chars_used(C.context).chars_normal);
        END LOOP;

        /*
        ** DELETE ANY UNUSED FONT-FACES
        */
        FOR C IN (
            SELECT ff.context
              FROM website_fontface ff
             WHERE ff.website_id=pWebsiteid
        ) LOOP
            IF (g_chars_used(C.context).chars_normal IS NULL) THEN
                deleteFontface(pWebsiteId, C.context, 'fonts/' || C.context || '.normal.woff2');
            END IF;

            IF (g_chars_used(C.context).chars_bold_normal IS NULL) THEN
                deleteFontface(pWebsiteId, C.context,'fonts/' || C.context || '.normal.bold.woff2');
            END IF;

            IF (g_chars_used(C.context).chars_italic IS NULL) THEN
                deleteFontface(pWebsiteId, C.context,'fonts/' || C.context || '.italic.woff2');
            END IF;

            IF (g_chars_used(C.context).chars_bold_italic IS NULL) THEN
                deleteFontface(pWebsiteId, C.context,'fonts/' || C.context || '.italic.bold.woff2');
            END IF;
        END LOOP;

        /* 
        ** Update CSS font-face rules for the website 
        */
        FOR C IN (
            SELECT ff.context, ff.font_family, ff.font_style, ff.font_weight, ff.font_stretch, ff.deploy_filename,
                    ROW_NUMBER() OVER (PARTITION BY context ORDER BY null) rn, COUNT(*) OVER (PARTITION BY context) nb
              FROM website_fontface ff
             WHERE ff.website_id=pWebsiteid
        ) LOOP
            l_fontfaces:=l_fontfaces ||
                '@font-face {' ||
                    'font-family:' || C.font_family || ';' ||
                    'font-style:' || C.font_style || ';' ||
                    'font-weight:' || C.font_weight || ';' ||
                    CASE WHEN C.font_stretch IS NOT NULL THEN
                    'font-stretch:' || C.font_stretch || ';' 
                    END
                    ||
                    'font-display:swap;' ||
                    'src: url("' || C.deploy_filename || '") format("woff2");' ||
                '}';
            IF (C.rn=C.nb) THEN
                UPDATE website_font 
                   SET fontface=l_fontfaces, updated_date=current_timestamp
                 WHERE website_id=pWebsiteid AND context=C.context;
                l_fontfaces:=null;
            END IF;
        END LOOP;

        /*
        ** FINALLY, REBUILD WEBSITE CSS RULES FOR FONTFACE AND ROOT
        */
        pck_css.buildWebsiteCss(pWebsiteid);
    END;


    /* 
    **  BUILD HTML FORM TO SELECT WEBSITE FONTS
    */
    PROCEDURE getHTML(pWebsiteId IN website.id%type, pArticleId IN article.id%type) IS
        l_header LONG;
        l_article CLOB;
        l_footer LONG;
        l_fontfaces LONG;
        l_json JSON_OBJECT_T;
        l_fonts JSON_ARRAY_T;
        l_fonts_obj JSON_OBJECT_T;
        l_selected VARCHAR2(9);
        l_styles VARCHAR2(100);
        
        TYPE tt_font_category IS RECORD(
            value VARCHAR2(11),
            label  VARCHAR2(30)
        );
        TYPE t_font_category IS TABLE OF tt_font_category INDEX BY PLS_INTEGER;
        l_font_categories t_font_category:=
            t_font_category(
                1=>tt_font_category('display','display'), 
                2=>tt_font_category('handwriting','handwriting'), 
                3=>tt_font_category('monospace','monospace'), 
                4=>tt_font_category('sans-serif','sans-serif'), 
                5=>tt_font_category('serif','serif'), 
                6=>tt_font_category('variable','variable fonts'), 
                7=>tt_font_category('italic','fonts with italics'), 
                8=>tt_font_category('system-ui','web-safe fonts')
            );
    BEGIN
        l_header:='<small>Select complementary fonts for headings and text</small>';

        l_article:=
        '<div class="flex-items" style="--flex-gap:.5em;--flex-direction:column;--flex-vertical-alignment:flex-start">';        

        FOR C IN (
            SELECT wf.font_id, wf.context, f.category, f.family, f.variable, f.italic
              FROM website_font wf, font f
             WHERE wf.website_id=pWebsiteId
               AND wf.font_id=f.id 
             ORDER BY context
        ) LOOP
            l_article:=l_article ||
            '<details open><summary>' || INITCAP(C.context) || '</summary>' ||
            '<fieldset class="flex-items" style="--flex-gap:1em;--flex-direction:row;inline-size:100%;">' ||
                --'<legend>' || INITCAP(C.context) || '</legend>' ||
                
                '<div>' ||
                    '<label for="' || C.context || '-font-category">Category</label>' ||
                    '<select id="' || C.context || '-font-category">' ||
                        '<button>' ||
                          '<selectedcontent></selectedcontent>' ||
                          '<span class="arrow"></span>' ||
                        '</button>';

            FOR i IN l_font_categories.FIRST .. l_font_categories.LAST
            LOOP
                IF (l_font_categories(i).value=C.category)  THEN 
                    l_selected:=' selected';
                ELSE
                    l_selected:=null;
                END IF;
                IF (l_font_categories(i).value='handwriting') THEN 
                    l_styles:='font-family:cursive';
                ELSIF (l_font_categories(i).value='display') THEN
                    l_styles:='font-family:system-ui;font-weight:500;font-stretch:120%';
                ELSE
                    l_styles:='font-family:' || l_font_categories(i).value;
                END IF;
                l_article:=l_article || 
                        '<option style="' || l_styles || '" value="' || l_font_categories(i).value || '"' || l_selected || '>' ||
                            l_font_categories(i).label ||
                        '</option>';
            END LOOP;
            
            l_article:=l_article || 
                    '</select>' ||
                '</div>';

            /* Fonts in category */
            l_article:=l_article || 
                '<div>' ||
                    '<label for="' || C.context || '-font-family">Font Name</label>' ||
                    '<select id="' || C.context || '-font-family">' ||
                        '<button>' ||
                          '<selectedcontent></selectedcontent>' ||
                          '<span class="arrow"></span>' ||
                        '</button>';
            
            FOR C1 IN (SELECT id, family FROM font WHERE category=C.category ORDER BY 2)
            LOOP
                l_article:=l_article || 
                '<option value="' || TO_CHAR(C1.id) || '"'|| CASE WHEN C1.id=C.font_id THEN ' selected' END || '>' ||
                    C1.family ||
                '</option>';
            END LOOP;
            l_article:=l_article || 
                    '</select>' ||
                '</div>' ||
                '<span class="loader icon"></span>'; 
            /*
            IF (C.variable=1) THEN
                l_article:=l_article ||
                '<button type="button" class="button" style="anchor-name:--' || C.context || '-axes" popovertarget="' || C.context || '-axes' || '">Font Settings</button>' ||
                '<div popover id="' || C.context || '-axes" style="position-anchor:--' || C.context || '-axes">Hello Axes</div>';
            END IF;
            */
            l_article:=l_article ||
            '</fieldset>' ||
            '</details>';
        END LOOP;

        FOR C IN (
            SELECT MAX(DECODE(variable,1,nb)) nb_variable, SUM(nb) total, MAX(last_modified) last_modified
            FROM
                (
                    SELECT variable,COUNT(*) nb, MAX(last_modified) last_modified FROM font WHERE family<>'system-ui' GROUP BY  variable
                )
        ) LOOP
            l_footer:=
            '<a class="icon-with-text" href="https://fonts.google.com" target="a_blank" aria-label="Search on Google Fonts">' ||
				'<svg width="1em" height="1em" viewBox="0 0 512 512" aria-hidden="true" focusable="false"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376C296.3 401.1 253.9 416 208 416 93.1 416 0 322.9 0 208S93.1 0 208 0 416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"/></svg>' ||
				'<small>' || C.total || ' Google fonts as of '|| TO_CHAR(C.last_modified, 'dd Mon yyyy') || '</small>' ||
			'</a>' ||
            '<small>' || C.nb_variable || ' Variable ' || TO_CHAR(C.total-C.nb_variable) || ' Static</small>';
        END LOOP;

        /*
        ** RETURN DIALOG CONTENTS TO CLIENT 
        */
        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('header',l_header);
        l_json.put('article',l_article);
        l_json.put('footer',l_footer);
        apex_util.prn(l_json.to_clob,false);
    END;

    /*
    ** USER CHANGES FONT CATEGORY
    */
    PROCEDURE getFontsInCategory(pCategory IN font.category%type) IS
        l_html CLOB;
        l_json JSON_OBJECT_T;

        PROCEDURE appendOption(pNumber IN NUMBER, pFontid IN NUMBER, pFamily IN VARCHAR2) IS
        BEGIN
            IF (l_html IS NULL) THEN
                l_html:='<option value="">-- Select from ' || pNumber || ' Fonts --</option>';
            END IF;
            l_html:=l_html || '<option value="' || pFontid || '">' || pFamily || '</option>';
        END;
    
    BEGIN
        CASE 
            WHEN pCategory IN ('display', 'handwriting', 'monospace', 'sans-serif', 'serif', 'system-ui') THEN
                FOR C IN (
                    SELECT id, family, COUNT(*) OVER () nb
                    FROM font 
                    WHERE category=pCategory 
                    ORDER BY 2
                )
                LOOP
                    appendOption(C.nb, C.id, C.family);
                END LOOP;
            WHEN pCategory='variable' THEN
                FOR C IN (
                    SELECT id, family, COUNT(*) OVER () nb
                    FROM font 
                    WHERE variable=1
                    ORDER BY 2
                )
                LOOP
                    appendOption(C.nb, C.id, C.family);
                END LOOP;
            WHEN pCategory='italic' THEN
                FOR C IN (
                    SELECT id, family, COUNT(*) OVER () nb
                    FROM font 
                    WHERE italic=1
                    ORDER BY 2
                )
                LOOP
                    appendOption(C.nb, C.id, C.family);
                END LOOP;
        END CASE;
        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('content', l_html);
        apex_util.prn(l_json.to_clob,false);
    END;



    /* 
    **  BUILD OPENING DIALOG CONTENT OR LIST OF FONT FAMILIES FOR A SELECTED CATEGORY
    */
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pContext IN website_font.context%type, pCategory IN font.category%type, pStatus IN OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html CLOB;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        IF (pContext='HTML') THEN
            getHTML(pWebsiteId, pArticleId);
        ELSE
            getFontsInCategory(pCategory);
        END IF;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);
    END;

    /* 
    **  USER SELECTS A NEW FONT
    */
    PROCEDURE updateFont(pWebsiteId IN website.id%type, pArticleid IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_context website_font.context%type;
        l_font_id website_font.font_id%type;

        l_json JSON_OBJECT_T;
        l_urls JSON_ARRAY_T;
        l_font JSON_OBJECT_T;
        l_system_ui PLS_INTEGER;
        n PLS_INTEGER;
        
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT context,font_id
          INTO l_context, l_font_id
          FROM JSON_TABLE(pBodyText, '$' COLUMNS(context,font_id));

        UPDATE website_font
           SET font_id=l_font_id, updated_date=current_timestamp
         WHERE website_id=pWebsiteId
           AND context=l_context;

        SELECT COUNT(*) INTO l_system_ui FROM dual 
         WHERE EXISTS (SELECT null FROM font WHERE id=l_font_id AND category='system-ui');
        
        IF (l_system_ui=0) THEN
            -- getCharsUsed(pArticleId);
            getFontFiles(pWebsiteId, pContext=>l_context, pArticleId=>pArticleId);
        END IF;

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);

        IF (l_system_ui=0) THEN
            l_urls:= new JSON_ARRAY_T;
            FOR C IN (
                SELECT font_family, font_weight, font_stretch, font_style, 'url("' || src_url || '")' src_url
                  FROM website_fontface 
                 WHERE website_id=pWebsiteid 
                   AND context=l_context
            ) LOOP
                l_font:= new JSON_OBJECT_T;
                l_font.put('font_style',C.font_style);
                l_font.put('font_weight',C.font_weight);
                l_font.put('font_stretch',C.font_stretch);
                l_font.put('src_url',C.src_url);
                l_urls.append(l_font);
            END LOOP;
            l_json.put('urls',l_urls);
        END IF;

        apex_util.prn(l_json.to_clob,false);
        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
    **  Load Google font metadata into FONT table. WOFF2 only. STATIC and VARIABLE. 
    */
    PROCEDURE loadGoogleFonts IS 
        l_clob CLOB;
        l_nb_fonts PLS_INTEGER;
        l_lastModified google_font.lastModified%type;
    BEGIN
        pck_api.callGoogleAPI('https://www.googleapis.com/webfonts/v1/webfonts?capability=WOFF2&capability=VF',pData=>l_clob);

        EXECUTE IMMEDIATE('truncate table google_font');

        INSERT INTO google_font(
            family, category,
            ital_start,ital_end,
            wdth_start,wdth_end,
            wght_start,wght_end,
            opsz_start,opsz_end,
            slnt_start,slnt_end,
            italic,
            subset, 
            variable, 
            axes,
            lastModified
        )
        WITH 
        data AS
        (
            SELECT family, category, lastModified,
                CASE WHEN variant='italic' THEN variant END italic,
                tag,"start" as tag_start, "end" as tag_end, subset
            FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, category, lastModified, NESTED PATH '$.variants[*]' COLUMNS (variant VARCHAR2(50) PATH '$'),  
                NESTED '$.axes[*]' COLUMNS(tag varchar2(4) PATH '$.tag', "start" number PATH '$.start', "end" number PATH '$.end'),
                NESTED PATH '$.subsets[*]' COLUMNS (subset VARCHAR2(50) PATH '$')))
        ), 
        data2 as
        (
            SELECT family, category, TO_DATE(lastModified,'YYYY-MM-DD') lastModified, 
                MAX(DECODE(italic,'italic',0))  as ital_start, MAX(DECODE(italic,'italic',1)) as ital_end,
                MAX(DECODE(tag,'wdth',tag_start)) as wdth_start, MAX(DECODE(tag,'wdth',tag_end)) as wdth_end, 
                MAX(DECODE(tag,'wght',tag_start)) as wght_start, MAX(DECODE(tag,'wght',tag_end)) as wght_end, 
                MAX(DECODE(tag,'opsz',tag_start)) as opsz_start, MAX(DECODE(tag,'opsz',tag_end)) as opsz_end, 
                MAX(DECODE(tag,'slnt',tag_start)) as slnt_start, MAX(DECODE(tag,'slnt',tag_end)) as slnt_end,
                LISTAGG(tag,',') WITHIN GROUP (ORDER BY null) axes,
                LISTAGG(subset,'|') WITHIN GROUP (ORDER BY subset) subset
            FROM data
            GROUP BY family, category, lastModified
        )
        SELECT family, category, 
            CASE WHEN axes IS NOT NULL THEN ital_start END ital_start, 
            CASE WHEN axes IS NOT NULL THEN ital_end END ital_end,
            wdth_start, wdth_end,
            wght_start, wght_end,
            opsz_start, opsz_end,
            slnt_start, slnt_end,
            CASE WHEN INSTR(axes,'slnt')>0 THEN 1 ELSE NVL(ital_end,0) END,
            subset,
            CASE WHEN axes IS NULL THEN 0 ELSE 1 END,
            axes,
            lastModified
        FROM data2;

        /* Update font table from staging table */
        MERGE INTO font t
        USING
        (
            SELECT family, category, lastmodified, ital_start, ital_end, wdth_start, wdth_end, wght_start, wght_end, opsz_start, opsz_end, slnt_start, slnt_end, italic, variable, axes
            FROM google_font
        ) s
        ON (t.family=s.family)
        WHEN MATCHED THEN UPDATE SET
            t.category=s.category,
            t.last_modified=s.lastmodified,
            t.ital_start=s.ital_start, t.ital_end=s.ital_end,
            t.wdth_start=s.wdth_start, t.wdth_end=s.wdth_end, 
            t.wght_start=s.wght_start, t.wght_end=s.wght_end,
            t.opsz_start=s.opsz_start, t.opsz_end=s.opsz_end,
            t.slnt_start=s.slnt_start, t.slnt_end=s.slnt_end,
            t.italic=s.italic,
            t.variable=s.variable,
            t.axes=s.axes,
            t.updated_date=current_timestamp
        WHEN NOT MATCHED THEN 
            INSERT (id, family, category, last_modified, ital_start, ital_end, wdth_start, wdth_end, wght_start, wght_end, opsz_start, opsz_end, slnt_start, slnt_end, italic, variable, axes, created_date) 
            VALUES (seq_font.nextval, s.family, s.category, s.lastmodified, s.ital_start, s.ital_end, s.wdth_start, s.wdth_end, s.wght_start, s.wght_end, s.opsz_start, s.opsz_end, s.slnt_start, s.slnt_end, s.italic, s.variable, s.axes, current_timestamp);
        
        l_nb_fonts:=sql%rowcount;
        pck_core.log('Uploaded ' ||l_nb_fonts || ' Google Fonts');

        /*
        ** LOAD STATIC FONT WEIGHTS FOR NORMAL AND ITALIC STYLES
        */
        execute immediate 'truncate table font_static_wght';
        INSERT INTO font_static_wght
        (
            font_id, wght_normal, wght_italic
        )
        WITH 
        data AS
        (
            SELECT family, DECODE(variant,'regular','400',variant) wght
            FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, axes VARCHAR2(5) EXISTS PATH '$.axes', NESTED PATH '$.variants[*]' COLUMNS (variant VARCHAR2(50) PATH '$')))
            WHERE axes='false'
        ),
        data2 AS
        (
        SELECT family, 
            CASE WHEN INSTR(wght,'italic')=0 THEN wght END wght_normal,
            CASE WHEN INSTR(wght,'italic')>0 THEN NVL(SUBSTR(wght,1,INSTR(wght,'italic')-1),400) END wght_italic
        FROM data
        ),
        data3 AS
        (
        SELECT family, 
            wght_normal,
            LEAD(wght_italic) OVER (PARTITION BY family ORDER BY null) wght_italic
        FROM data2
        )
        SELECT f.id, g.wght_normal, g.wght_italic 
        FROM data3 g, font f
        WHERE COALESCE(g.wght_normal, g.wght_italic) IS NOT NULL
        AND f.family=g.family;

        /*
        ** SET FLAG ON FONT TABLE IF FONT SUPPORTS BOLD STYLING, I.E. WEIGHT 700
        */

    END;

end "PCK_FONTS";
/