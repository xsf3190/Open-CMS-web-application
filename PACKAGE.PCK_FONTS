CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_FONTS" as
    --
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pContext IN website_font.context%type, pCategory IN font.category%type DEFAULT NULL, pVariable IN font.variable%type DEFAULT NULL, pItalic IN font.italic%type DEFAULT NULL, pStatus OUT NUMBER);
    --
    PROCEDURE loadGoogleFonts;
    --
    PROCEDURE updateFont(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
end "PCK_FONTS";
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_FONTS" as

    /* 
    **  BUILD HTML FORM TO SELECT WEBSITE FONTS
    */
    PROCEDURE getHTML(pWebsiteId IN website.id%type) IS
        l_header LONG;
        l_article CLOB;
        l_footer LONG;
        l_fontfaces LONG;
        l_json JSON_OBJECT_T;
        l_fonts JSON_ARRAY_T;
        l_fonts_obj JSON_OBJECT_T;
    BEGIN
        l_header:='<small>Select complementary fonts for headings and text</small>';

        l_article:='<div class="flex-items" style="--flex-gap:.5em;--flex-direction:column;--flex-vertical-alignment:flex-start">';
        FOR C IN (
            SELECT wf.font_id, wf.context, f.category, f.variable, f.italic
              FROM website_font wf, font f
             WHERE wf.website_id=pWebsiteId
               AND wf.font_id=f.id 
             ORDER BY context
        ) LOOP
            l_article:=l_article ||
            '<fieldset class="flex-items" style="--flex-gap:1em;--flex-direction:row;inline-size:95%">' ||
                '<legend>' || INITCAP(C.context) || '</legend>' ||
                '<div>' ||
					'<label for="' || C.context || '-variable">Variable</label>' ||
					'<input type="checkbox" id="' || C.context || '-variable" role="switch"' || CASE WHEN C.variable=0 THEN ' checked aria-checked="false"' ELSE ' aria-checked="true"' END || '/>' ||
                    '<span aria-hidden="true" style="margin-inline-start:1em">' || CASE WHEN C.variable=0 THEN '&#10060;' ELSE '&#9989;' END || '</span>' ||
                '</div>' ||
                '<div>' ||
					'<label for="' || C.context || '-italic">Italics</label>' ||
					'<input type="checkbox" id="' || C.context || '-italic" role="switch"' || CASE WHEN C.italic=0 THEN ' checked aria-checked="false"' ELSE ' aria-checked="true"' END || '/>' ||
                    '<span aria-hidden="true" style="margin-inline-start:1em">' || CASE WHEN C.italic=0 THEN '&#10060;' ELSE '&#9989;' END || '</span>' ||
                '</div>' ||
                
                '<div>' ||
                    '<label for="' || C.context || '-font-category">Category</label>' ||
                    '<select id="' || C.context || '-font-category" style="inline-size:13ch">' ||
                        '<button>' ||
                          '<selectedcontent></selectedcontent>' ||
                          '<span class="arrow"></span>' ||
                        '</button>';
            FOR C1 IN (SELECT category FROM font_category ORDER BY 1)
            LOOP
                l_article:=l_article || 
                        '<option style="font-family:' || C1.category || '" value="' || C1.category || '"' || CASE WHEN C1.category=C.category THEN ' selected' END || '>' ||
                            C1.category ||
                        '</option>';
            END LOOP;
            l_article:=l_article || 
                    '</select>' ||
                '</div>';

            /* Fonts in category */
            l_article:=l_article || 
                '<div>' ||
                    '<label for="' || C.context || '-font-family">Font Name</label>' ||
                    '<select id="' || C.context || '-font-family">' ||
                        '<button>' ||
                          '<selectedcontent></selectedcontent>' ||
                          '<span class="arrow"></span>' ||
                        '</button>';
            FOR C1 IN (SELECT id, family FROM font WHERE category=C.category AND variable=C.variable AND italic=C.italic ORDER BY 2)
            LOOP
                l_article:=l_article || 
                '<option value="' || TO_CHAR(C1.id) || '"'|| CASE WHEN C1.id=C.font_id THEN ' selected' END || '>' ||
                    C1.family ||
                '</option>';
            END LOOP;
            l_article:=l_article || 
                    '</select>' ||
                '</div>' ||
                '<small id="' || C.context || '-info" popover style="position-anchor:--' || C.context || '-font-family;position-area:bottom span-all;color:red;padding:.5em;max-width:30ch"></small>' ||
                '<span class="loader icon" popovertarget="' || C.context || '-info" style="anchor-name:--' || C.context || '-font-family"></span>' ||
            '</fieldset>';
        END LOOP;
        l_article:=l_article || 
        '</div>';

        FOR C IN (SELECT SUM(nb_fonts) nb_fonts, MAX(last_modified) last_modified FROM font_category) LOOP
            l_footer:=
            '<a class="icon-with-text" href="https://fonts.google.com" target="a_blank">' ||
				'<svg width="1em" height="1em" viewBox="0 0 512 512"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376C296.3 401.1 253.9 416 208 416 93.1 416 0 322.9 0 208S93.1 0 208 0 416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"/></svg>' ||
				'<small>' || C.nb_fonts || ' Google fonts @'|| TO_CHAR(C.last_modified, 'dd Mon yyyy') || '</small>' ||
			'</a>';
        END LOOP;

        /*
        ** SEND FONTFACE DETAILS FOR FONT CATEGORY SELECT ELEMENT
        */
        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('header',l_header);
        l_json.put('article',l_article);
        l_json.put('footer',l_footer);
        l_fonts:= new JSON_ARRAY_T;
        FOR C IN (
            SELECT category,fontface_url FROM font_category) 
        LooP
            l_fonts_obj:=new JSON_OBJECT_T;
            l_fonts_obj.put('family',C.category);
            l_fonts_obj.put('url', C.fontface_url);
            l_fonts.append(l_fonts_obj);
        END LOOP;
        l_json.put('fonts',l_fonts);
        apex_util.prn(l_json.to_clob,false);
    END;


    PROCEDURE getFontsInCategory(pCategory IN font.category%type, pVariable IN font.variable%type, pItalic IN font.italic%type) IS
        l_html CLOB;
        l_json JSON_OBJECT_T;
    BEGIN
        FOR C IN (
            SELECT id, family, COUNT(*) OVER () nb
            FROM font 
            WHERE category=pCategory 
            AND variable=pVariable
            AND italic=pItalic
            ORDER BY 2
        )
        LOOP
            IF (l_html IS NULL) THEN
                l_html:='<option value="">-Select from ' || C.nb || ' Fonts-</option>';
            END IF;
            l_html:=l_html || '<option value="' || C.id || '">' || C.family || '</option>';
        END LOOP;
           
        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('content', l_html);
        apex_util.prn(l_json.to_clob,false);
    END;

    /*
    **  GET SELECTED FONT FROM GOOGLE
    */
    PROCEDURE getSelectedFont(pWebsiteId IN website.id%type, pArticleId IN article.id%type, 
                pFontid IN website_font.font_id%type, pContext IN website_font.context%type, pError IN OUT VARCHAR2, pFontfaces IN OUT VARCHAR2) IS
        l_family font.family%type;
        l_api_url VARCHAR2(250);
        l_fontfaces LONG;
        
        l_tmp LONG;
        l_chars_normal website_font.chars_normal%type;
        l_chars_italic website_font.chars_italic%type;
        l_chars_bold_normal website_font.chars_bold_normal%type;
        l_chars_bold_italic website_font.chars_bold_italic%type;
        l_chars_normal_page PLS_INTEGER:=0;
        l_chars_italic_page PLS_INTEGER:=0;
        l_chars_bold_normal_page PLS_INTEGER:=0;
        l_chars_bold_italic_page PLS_INTEGER:=0;
        l_chars_used website_font.chars_normal%type;
        l_body_html article.body_html%type;
        l_code_regex varchar2(30):='<code(.+?)<\/code>';
        l_headings_regex varchar2(30):='<h[1-4]>(.+?)<\/h[1-4]>';
        n PLS_INTEGER;
        
    BEGIN
        /*
        **  GET NORMAL/ITALIC/BOLD CHARACTERS USED IN PAGE 
        */
        SELECT body_html INTO l_body_html FROM article WHERE id=pArticleId;
        
        /* Remove <code> elements which are always rendered in local monospace font */
        l_body_html:=REGEXP_REPLACE(l_body_html,l_code_regex,null);

        IF (pContext='headings') THEN
            n:=REGEXP_COUNT(l_body_html,l_headings_regex);
            IF (n>0) THEN
                FOR j IN 1..n 
                LOOP
                    pck_deploy.extract_styles(REGEXP_SUBSTR(l_body_html,l_headings_regex,1,j), l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal, 
                        l_chars_bold_italic_page, l_chars_bold_normal_page, l_chars_italic_page, l_chars_normal_page);
                END LOOP;
            END IF;
        END IF;

        IF (pContext='text') THEN
            l_body_html:=REGEXP_REPLACE(l_body_html,l_headings_regex,null);
            pck_deploy.extract_styles(l_body_html, l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal, 
                        l_chars_bold_italic_page, l_chars_bold_normal_page, l_chars_italic_page, l_chars_normal_page);
        END IF;

        IF (COALESCE(l_chars_bold_italic,l_chars_bold_normal,l_chars_italic,l_chars_normal) IS NULL) THEN
            pError:='No ' || pContext || ' currently in your page. Enter some ' || pContext || ' and try again.';
            RETURN;
        END IF;

        FOR C IN (
                SELECT f.family, 
                    LTRIM(NVL2(f.ital_start,'ital',NULL) || NVL2(f.opsz_start,',opsz',NULL) || NVL2(f.slnt_start,',slnt',NULL) || 
                        NVL2(f.wdth_start,',wdth',NULL) || NVL2(f.wght_start,',wght',NULL),',') axes,
                    LTRIM(NVL2(f.opsz_start,f.opsz_start||'..'||f.opsz_end,NULL) || NVL2(f.slnt_start,','||f.slnt_start||'..'||f.slnt_end,NULL) || 
                        NVL2(f.wdth_start,','||f.wdth_start||'..'||f.wdth_end,NULL) || NVL2(f.wght_start,','||f.wght_start||'..'||f.wght_end,NULL),',') ranges,
                    italic, wght_start_static, wght_end_static
                FROM font f
                WHERE f.id=pFontid) 
        LOOP
            l_family:=C.family;
            l_api_url:='https://fonts.googleapis.com/css2?family=' || REPLACE(C.family,' ','+');
            /* VARIABLE FONT */
            IF (C.axes IS NOT NULL) THEN
                l_api_url:=l_api_url || ':' || C.axes || '@';
                IF (INSTR(C.axes,'ital')>0) THEN
                    l_api_url:=l_api_url || '0,' || C.ranges || ';1,' || C.ranges;
                ELSE
                    l_api_url:=l_api_url || C.ranges;
                END IF;
                l_api_url:=l_api_url || '&text=' || pck_deploy.chars_used(l_chars_bold_italic || l_chars_bold_normal || l_chars_italic || l_chars_normal);
                pck_api.callGoogleAPI(l_api_url,pData=>pFontfaces);
            ELSE
            /* STATIC FONT */
                IF (pContext='headings') THEN
                    IF (COALESCE(l_chars_bold_normal,l_chars_normal) IS NOT NULL) THEN
                        l_api_url:=l_api_url || ':ital,wght@0,' || LEAST(700,C.wght_end_static) || '&text=' || pck_deploy.chars_used(l_chars_bold_normal || l_chars_normal);
                        pck_api.callGoogleAPI(l_api_url,pData=>l_tmp);
                        l_fontfaces:=l_fontfaces || l_tmp;
                    END IF;
                    IF (COALESCE(l_chars_bold_italic,l_chars_italic) IS NOT NULL) THEN
                        l_api_url:=l_api_url || ':ital,wght@1,' || LEAST(700,C.wght_end_static) || '&text=' || pck_deploy.chars_used(l_chars_bold_italic || l_chars_italic);
                        pck_api.callGoogleAPI(l_api_url,pData=>l_tmp);
                        l_fontfaces:=l_fontfaces || l_tmp;
                    END IF;
                END IF;
                IF (pContext='text') THEN
                    IF (l_chars_bold_normal IS NOT NULL) THEN
                        l_api_url:=l_api_url || ':ital,wght@0,' || LEAST(700,C.wght_end_static) || '&text=' || pck_deploy.chars_used(l_chars_bold_normal);
                        pck_api.callGoogleAPI(l_api_url,pData=>l_tmp);
                        l_fontfaces:=l_fontfaces || l_tmp;
                    END IF;
                    IF (l_chars_normal IS NOT NULL) THEN
                        l_api_url:=l_api_url || ':ital,wght@0,' || LEAST(400,C.wght_end_static) || '&text=' || pck_deploy.chars_used(l_chars_normal);
                        pck_api.callGoogleAPI(l_api_url,pData=>l_tmp);
                        l_fontfaces:=l_fontfaces || l_tmp;
                    END IF;
                    IF (l_chars_italic IS NOT NULL) THEN
                        l_api_url:=l_api_url || ':ital,wght@1,' || LEAST(400,C.wght_end_static) || '&text=' || pck_deploy.chars_used(l_chars_italic);
                        pck_api.callGoogleAPI(l_api_url,pData=>l_tmp);
                        l_fontfaces:=l_fontfaces || l_tmp;
                    END IF;
                    IF (l_chars_bold_italic IS NOT NULL) THEN
                        l_api_url:=l_api_url || ':ital,wght@1,' || LEAST(700,C.wght_end_static) || '&text=' || pck_deploy.chars_used(l_chars_bold_italic);
                        pck_api.callGoogleAPI(l_api_url,pData=>l_tmp);
                        l_fontfaces:=l_fontfaces || l_tmp;
                    END IF;
                END IF;
                pFontfaces:=l_fontfaces;
            END IF;
        END LOOP;

    END;

    /* 
    **  BUILD SELECT LIST OF FONT FAMILIES FOR GIVEN CATEGORY (if font_id=0) ELSE GET FONT SETTINGS FOR A SPECIFIC FONT
    */
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pContext IN website_font.context%type, pCategory IN font.category%type, 
                pVariable IN font.variable%type, pItalic IN font.italic%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html CLOB;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        IF (pContext='HTML') THEN
            getHTML(pWebsiteId);
        ELSE
            getFontsInCategory(pCategory, pVariable, pItalic);
        END IF;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);
    END;

    /* 
    **  UPDATE WEBSITE HEADER FIELDS
    */
    PROCEDURE updateFont(pWebsiteId IN website.id%type, pArticleid IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_context website_font.context%type;
        l_font_id website_font.font_id%type;
        l_fontfaces LONG;
        l_error LONG;
        l_url_regex VARCHAR2(12):='url\((.+?)\)';
        l_url VARCHAR2(500);
        l_json JSON_OBJECT_T;
        l_urls JSON_ARRAY_T;
        n PLS_INTEGER;
        
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT context,font_id
          INTO l_context, l_font_id
          FROM JSON_TABLE(pBodyText, '$' COLUMNS(context,font_id));

        pck_core.log('pArticleId:'||pArticleId||' l_font_id:'||l_font_id || ' l_context:'||l_context);

        getSelectedFont(pWebsiteId, pArticleId, l_font_id, l_context, l_error, l_fontfaces);

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);

        IF (l_error IS NOT NULL) THEN
            l_json.put('success',true);
            l_json.put('info',l_error);
        ELSE
            UPDATE website_font
               SET font_id=l_font_id,
                   chars_normal=null,
                   chars_italic=null,
                   chars_bold_normal=null,
                   chars_bold_italic=null,
                   updated_date=current_timestamp
             WHERE website_id=pWebsiteId
               AND context=l_context;
            
            l_urls:= new JSON_ARRAY_T;
            n:=REGEXP_COUNT(l_fontfaces,l_url_regex);
            FOR i IN 1..n LOOP
                l_url:=REGEXP_SUBSTR(l_fontfaces,l_url_regex,1,i);
                l_urls.append(l_url);
            END LOOP;
            l_json.put('urls',l_urls);
        END IF;

        apex_util.prn(l_json.to_clob,false);
        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
    **  load Google font definitions into google_font table. wolf3 format only. Websites deployed with optimized foont.r 
    */
    PROCEDURE loadGoogleFonts IS 
        l_clob CLOB;
        l_nb_fonts PLS_INTEGER;
        l_lastModified google_font.lastModified%type;
    BEGIN
        pck_api.callGoogleAPI('https://www.googleapis.com/webfonts/v1/webfonts?capability=WOFF2&capability=VF',pData=>l_clob);

        EXECUTE IMMEDIATE('truncate table google_font');

        INSERT INTO google_font(
            family, category,
            ital_start,ital_end,
            wdth_start,wdth_end,
            wght_start,wght_end,
            opsz_start,opsz_end,
            slnt_start,slnt_end,
            wght_start_static,
            wght_end_static,
            italic,
            subset, 
            variable, 
            axes,
            lastModified
        )
        WITH 
        data AS
        (
            SELECT family, category, lastModified,
                TO_NUMBER(
                CASE 
                    WHEN variant='regular' THEN '400'
                    WHEN variant='italic' THEN '-400'
                    WHEN INSTR(variant,'italic')>0 THEN '-' || SUBSTR(variant,1,INSTR(variant,'italic')-1)
                    ELSE variant
                END
                ) variant,
                tag,"start" as tag_start, "end" as tag_end, subset
            FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, category, lastModified, NESTED PATH '$.variants[*]' COLUMNS (variant VARCHAR2(50) PATH '$'),  
                NESTED '$.axes[*]' COLUMNS(tag varchar2(4) PATH '$.tag', "start" number PATH '$.start', "end" number PATH '$.end'),
                NESTED PATH '$.subsets[*]' COLUMNS (subset VARCHAR2(50) PATH '$')))
        ), 
        data2 as
        (
            SELECT family, category, TO_DATE(lastModified,'YYYY-MM-DD') lastModified, 
                MIN(DECODE(SIGN(variant),1,variant)) wght_start_static, MAX(DECODE(SIGN(variant),1,variant)) wght_end_static,
                MIN(DECODE(SIGN(variant),-1,1)) ital,
                MAX(DECODE(tag,'wdth',tag_start)) as wdth_start, MAX(DECODE(tag,'wdth',tag_end)) as wdth_end, 
                MAX(DECODE(tag,'wght',tag_start)) as wght_start, MAX(DECODE(tag,'wght',tag_end)) as wght_end, 
                MAX(DECODE(tag,'opsz',tag_start)) as opsz_start, MAX(DECODE(tag,'opsz',tag_end)) as opsz_end, 
                MAX(DECODE(tag,'slnt',tag_start)) as slnt_start, MAX(DECODE(tag,'slnt',tag_end)) as slnt_end,
                LISTAGG(tag,',') WITHIN GROUP (ORDER BY null) axes,
                LISTAGG(subset,'|') WITHIN GROUP (ORDER BY subset) subset
            FROM data
            GROUP BY family, category, lastModified
        )
        SELECT family, category, 
            CASE WHEN ital=1 AND axes IS NOT NULL THEN 0 END ital_start, 
            CASE WHEN ital=1 AND axes IS NOT NULL THEN 1 END ital_end,
            wdth_start, wdth_end,
            wght_start, wght_end,
            opsz_start, opsz_end,
            slnt_start, slnt_end,
            CASE WHEN axes IS NULL THEN wght_start_static END, 
            CASE WHEN axes IS NULL THEN wght_end_static END, 
            CASE WHEN ital IS NULL AND axes IS NULL THEN 0 WHEN INSTR(axes,'slnt')>0 THEN 1 ELSE NVL(ital,0) END,
            subset,
            CASE WHEN axes IS NULL THEN 0 ELSE 1 END,
            axes,
            lastModified
        FROM data2;

        /* DELETE FONTS WITH CUSTOM AXES WHICH WE DO NOT SUPPORT YET */
        --DELETE google_font WHERE vf=1 AND COALESCE(wght_start,wght_end,wdth_start,wdth_end,opsz_start,opsz_end,slnt_start,slnt_end,ital_start,ital_end) IS NULL;

        /* Update font category table from staging table */
        MERGE INTO font_category t
        USING
        (
            SELECT category, MAX(lastmodified) last_modified, COUNT(*) nb_fonts FROM google_font GROUP BY category
        ) s
        ON (t.category=s.category)
        WHEN MATCHED THEN UPDATE SET
            t.nb_fonts=s.nb_fonts,
            t.last_modified=s.last_modified,
            t.updated_date=current_timestamp
        WHEN NOT MATCHED THEN 
            INSERT (category, nb_fonts)
            VALUES (s.category, s.nb_fonts);

        /* Update font table from staging table */
        MERGE INTO font t
        USING
        (
            SELECT family, category, ital_start, ital_end, wdth_start, wdth_end, wght_start, wght_end, opsz_start, opsz_end, slnt_start, slnt_end, wght_start_static, wght_end_static, italic, variable, axes
            FROM google_font
        ) s
        ON (t.family=s.family)
        WHEN MATCHED THEN UPDATE SET
            t.category=s.category,
            t.ital_start=s.ital_start, t.ital_end=s.ital_end,
            t.wdth_start=s.wdth_start, t.wdth_end=s.wdth_end, 
            t.wght_start=s.wght_start, t.wght_end=s.wght_end,
            t.opsz_start=s.opsz_start, t.opsz_end=s.opsz_end,
            t.slnt_start=s.slnt_start, t.slnt_end=s.slnt_end,
            t.wght_start_static=s.wght_start_static,
            t.wght_end_static=s.wght_end_static,
            t.italic=s.italic,
            t.variable=s.variable,
            t.axes=s.axes,
            t.updated_date=current_timestamp
        WHEN NOT MATCHED THEN 
            INSERT (id, family, category, ital_start, ital_end, wdth_start, wdth_end, wght_start, wght_end, opsz_start, opsz_end, slnt_start, slnt_end, wght_start_static, wght_end_static, italic, variable, axes, created_date) 
            VALUES (seq_font.nextval, s.family, s.category, s.ital_start, s.ital_end, s.wdth_start, s.wdth_end, s.wght_start, s.wght_end, s.opsz_start, s.opsz_end, s.slnt_start, s.slnt_end,  s.wght_start_static, s.wght_end_static, s.italic, s.variable, s.axes, current_timestamp);
        
        l_nb_fonts:=sql%rowcount;
        pck_core.log('Uploaded ' ||l_nb_fonts || ' Google Fonts');

        
    END;
end "PCK_FONTS";
/