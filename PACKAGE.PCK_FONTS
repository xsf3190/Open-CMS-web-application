CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_FONTS" as
    --
    TYPE tt_chars_used IS RECORD (
            chars_normal VARCHAR2(500),
            chars_italic VARCHAR2(500),
            chars_bold_normal VARCHAR2(500),
            chars_bold_italic VARCHAR2(500)
    );
    TYPE t_chars_used IS TABLE OF tt_chars_used INDEX BY VARCHAR2(40);
    g_chars_used t_chars_used:=t_chars_used( 'headings' => tt_chars_used(null,null,null,null), 'text' => tt_chars_used(null,null,null,null));
    --
    PROCEDURE getCharsUsed(pArticleId IN article.id%type);
    --
    PROCEDURE getFontFiles(pWebsiteId IN website.id%type, pSiteid IN website.netlify_site_id%type);
    --
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pContext IN website_font.context%type, pCategory IN font.category%type DEFAULT NULL, pVariable IN font.variable%type DEFAULT NULL, pItalic IN font.italic%type DEFAULT NULL, pStatus OUT NUMBER);
    --
    PROCEDURE loadGoogleFonts;
    --
    PROCEDURE updateFont(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
end "PCK_FONTS";
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_FONTS" as

    /* 
    ** Return distict characters sorted 
    */
    FUNCTION distinct_chars(pCharacters IN VARCHAR2) RETURN VARCHAR2 IS
        l_chars website_font.chars_normal%type;
    BEGIN
        SELECT LISTAGG(DISTINCT SUBSTR(pCharacters, LEVEL, 1), NULL) WITHIN GROUP (
                  ORDER BY SUBSTR(pCharacters, LEVEL, 1))
        INTO l_chars
        FROM dual
        CONNECT BY LEVEL <= LENGTH(pCharacters);
        RETURN(l_chars);
    END;

    /* 
    ** EXTRACT DISTINCT ITALIC / NORMAL / BOLD CHARACTERS
    */
    PROCEDURE extract_styles(pText IN VARCHAR2, pBoldItalic IN OUT VARCHAR2, pBoldNormal IN OUT VARCHAR2, pItalic IN OUT VARCHAR2, pNormal IN OUT VARCHAR2) IS
        l_text LONG:=pText;
        l_italics_regex varchar2(12):='<i>(.+?)</i>';
        l_italics_substr LONG;
        l_italics_bold_regex varchar2(30):='<i><strong>(.+?)</strong></i>';
        l_italics_bold_substr LONG;
        l_bold_regex varchar2(30):='<strong>(.+?)</strong>';
        l_bold_substr LONG;
        l_char VARCHAR2(4);
        n PLS_INTEGER;
        len PLS_INTEGER;
    BEGIN
        IF (pText IS NULL) THEN
            RETURN;
        END IF;
        n:=REGEXP_COUNT(l_text,l_italics_bold_regex);
        FOR i IN 1..n LOOP
            l_italics_bold_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_italics_bold_regex,1,i)));
            len:=LENGTH(l_italics_bold_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_italics_bold_substr,k,1);
                    IF (pBoldItalic IS NULL OR INSTR(pBoldItalic,l_char)=0) THEN
                        pBoldItalic:=pBoldItalic || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_italics_bold_regex,null);

        n:=REGEXP_COUNT(l_text,l_italics_regex);
        FOR i IN 1..n LOOP
            l_italics_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_italics_regex,1,i)));
            len:=LENGTH(l_italics_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_italics_substr,k,1);
                    IF (pItalic IS NULL OR INSTR(pItalic,l_char)=0) THEN
                        pItalic:=pItalic || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_italics_regex,null);

        n:=REGEXP_COUNT(l_text,l_bold_regex);
        FOR i IN 1..n LOOP
            l_bold_substr:=utl_i18n.unescape_reference(apex_escape.striphtml(REGEXP_SUBSTR(l_text,l_bold_regex,1,i)));
            len:=LENGTH(l_bold_substr);
            IF (len>0) THEN
                FOR k IN 1..len LOOP
                    l_char:=SUBSTR(l_bold_substr,k,1);
                    IF (pBoldNormal IS NULL OR INSTR(pBoldNormal,l_char)=0) THEN
                        pBoldNormal:=pBoldNormal || l_char;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;

        l_text:=REGEXP_REPLACE(l_text,l_bold_regex,null);

        l_text:=utl_i18n.unescape_reference(apex_escape.striphtml(l_text));
        len:=LENGTH(l_text);
        
        IF (len>0) THEN
            FOR i IN 1..len LOOP
                l_char:=SUBSTR(l_text,i,1);
                IF (pNormal IS NULL OR INSTR(pNormal,l_char)=0) THEN
                    pNormal:=pNormal || l_char;
                END IF;
            END LOOP;
        END IF;
    END;

    /*
    **  COLLECT DISTINCT CHARACTES USED IN AN ARTICLE
    */
    PROCEDURE getCharsUsed(pArticleId IN article.id%type) IS
        l_body_html article.body_html%type;
        l_code_regex varchar2(30):='<code(.+?)<\/code>';
        l_headings_regex varchar2(30):='<h[1-4]>(.+?)<\/h[1-4]>';
        l_chars_normal article_chars.chars_normal%type;
        l_chars_italic article_chars.chars_italic%type;
        l_chars_bold_normal article_chars.chars_bold_normal%type;
        l_chars_bold_italic article_chars.chars_bold_italic%type;
        n PLS_INTEGER;

        PROCEDURE saveChars(pContext IN VARCHAR2) IS
        BEGIN
            g_chars_used(pContext).chars_normal:=distinct_chars(g_chars_used(pContext).chars_normal || l_chars_normal);
            g_chars_used(pContext).chars_bold_normal:=distinct_chars(g_chars_used(pContext).chars_bold_normal || l_chars_bold_normal);
            g_chars_used(pContext).chars_italic:=distinct_chars(g_chars_used(pContext).chars_italic || l_chars_italic);
            g_chars_used(pContext).chars_bold_italic:=distinct_chars(g_chars_used(pContext).chars_bold_italic || l_chars_bold_italic);
        END;
    BEGIN
        DELETE article_chars WHERE article_id=pArticleId;

        SELECT body_html INTO l_body_html FROM article WHERE id=pArticleId;
        
        /* 
        ** IMPLEMENT LATER FOR USER_SELECTED MONOSPACE FONT
        */
        l_body_html:=REGEXP_REPLACE(l_body_html,l_code_regex,null);

        /* 
        ** GET DISTINCT CHARACTERS USED IN HEADINGS
        */
        n:=REGEXP_COUNT(l_body_html,l_headings_regex);
        IF (n>0) THEN
            FOR j IN 1..n 
            LOOP
                extract_styles(REGEXP_SUBSTR(l_body_html,l_headings_regex,1,j), l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal);
            END LOOP;
        END IF;

        INSERT INTO article_chars(article_id, context, chars_bold_italic, chars_bold_normal, chars_italic, chars_normal)
        VALUES (pArticleId, 'headings', l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal);

        saveChars('headings');

        /* 
        ** GET DISTINCT CHARACTERS USED IN REMAINDER OF DOCUMENT (REFINE LATER TO ISOLATE "TITLE", "CODE", "BLOCKQUOTE" ETC)
        */
        l_body_html:=REGEXP_REPLACE(l_body_html,l_headings_regex,null);
        
        l_chars_bold_italic:=null;
        l_chars_bold_normal:=null;
        l_chars_italic:=null;
        l_chars_normal:=null;

        extract_styles(l_body_html, l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal);
        
        INSERT INTO article_chars(article_id, context, chars_bold_italic, chars_bold_normal, chars_italic, chars_normal)
        VALUES (pArticleId, 'text', l_chars_bold_italic, l_chars_bold_normal, l_chars_italic, l_chars_normal);

        saveChars('text');

    END;

    /* 
    **  CALL GOOGLE FONTS API.
    **  FOR VARIABLE FONTS API CAN RETURN DIFFERENT FONTFACES REFERENCING THE SAME URL
    */
    PROCEDURE getFontface(pWebsiteId IN website.id%type, pContext IN website_font.context%type, pUrl IN VARCHAR2) IS
        l_fontface VARCHAR2(500);

        l_font_family website_fontface.font_family%type;
        l_font_style website_fontface.font_style%type;
        l_font_weight website_fontface.font_weight%type;
        l_font_stretch website_fontface.font_stretch%type;
        l_src_url website_fontface.src_url%type;
    
        FUNCTION getValue(pKeyword IN VARCHAR,pPosition IN PLS_INTEGER) RETURN VARCHAR2 IS
            j PLS_INTEGER;
            k PLS_INTEGER;
            l PLS_INTEGER;
        BEGIN
            j:=INSTR(l_fontface,pKeyword,1,pPosition);
            k:=INSTR(l_fontface,':',j,1);
            l:=INSTR(l_fontface,';',k,1);
            RETURN (SUBSTR(l_fontface,k+2,l-k-2));
        END;

    BEGIN
        pck_api.callGoogleAPI(pUrl=>pUrl,pData=>l_fontface);
        
        FOR i IN 1..10 LOOP
            l_font_family:=getValue('font-family',i);
            IF (l_font_family IS NULL) THEN
                EXIT;
            END IF;
            l_font_family:=REPLACE(l_font_family,chr(39),'');
            l_font_style:=getValue('font-style',i);
            l_font_weight:=getValue('font-weight',i);
            l_font_stretch:=getValue('font-stretch',i);
            l_src_url:=getValue('src: url',i);
            l_src_url:=SUBSTR(l_src_url,INSTR(l_src_url,'(')+1,INSTR(l_src_url,')')-INSTR(l_src_url,'(')-1);
            INSERT INTO website_fontface(website_id, context, font_family, font_style, font_weight, font_stretch, src_url)
                VALUES(pWebsiteId, pContext, l_font_family, l_font_style, l_font_weight, l_font_stretch, l_src_url);
        END LOOP;
    END;

    /* 
    **  CALL GOOGLE FONTS API TO GET URL OF EACH FONT USED IN AN ARTiCLE 
    */
    PROCEDURE getFontFiles(pWebsiteId IN website.id%type, pArticleId IN article.id%type) IS
        l_api_url VARCHAR2(500);
    BEGIN
        FOR C IN (
            SELECT wf.font_id, wf.context, f.variable, f.italic, f.family, ac.chars_normal, ac.chars_italic, ac.chars_bold_normal, ac.chars_bold_italic,
                    LTRIM(NVL2(f.opsz_start,',opsz',NULL) || NVL2(f.slnt_start,',slnt',NULL)  || 
                        NVL2(f.wdth_start,',wdth',NULL) || NVL2(f.wght_start,',wght',NULL),',') axes,
                    LTRIM(NVL2(f.opsz_start,f.opsz_start||'..'||f.opsz_end,NULL) || NVL2(f.slnt_start,','||f.slnt_start||'..'||f.slnt_end,NULL) || 
                        NVL2(f.wdth_start,','||f.wdth_start||'..'||f.wdth_end,NULL) || NVL2(f.wght_start,','||f.wght_start||'..'||f.wght_end,NULL),',') ranges,
                    wght_start_static, wght_end_static
              FROM website_font wf, font f, article_chars ac
             WHERE wf.website_id=pWebsiteId
               AND wf.font_id=f.id
               AND ac.context=wf.context
               AND ac.article_id=pArticleId
        ) LOOP
            CASE C.variable
                WHEN 1 THEN
                    /*
                    **  "ital" AND "slnt" AXES ARE MUTUALLY EXCLUSIVE IN GOOGLE FONTS
                    */
                    IF (COALESCE(C.chars_italic,C.chars_bold_italic) IS NOT NULL) THEN
                        l_api_url:='https://fonts.googleapis.com/css2?family=' || REPLACE(C.family,' ','+');
                        IF (INSTR(C.axes,'slnt')=0) THEN
                            l_api_url:=l_api_url || ':ital,' || C.axes || '@1,' || C.ranges;
                        ELSE
                            l_api_url:=l_api_url || ':' || C.axes || '@' || C.ranges;
                        END IF;
                        l_api_url:=l_api_url || '&text=' || 
                            utl_url.escape(distinct_chars(C.chars_italic||C.chars_bold_italic),TRUE,'UTF-8');
                        getFontface(pWebsiteId, C.context, l_api_url);
                    END IF;                    

                    IF (COALESCE(C.chars_normal,C.chars_bold_normal) IS NOT NULL) THEN
                        l_api_url:='https://fonts.googleapis.com/css2?family=' || REPLACE(C.family,' ','+');
                        l_api_url:=l_api_url || ':' || C.axes || '@' || C.ranges;
                        l_api_url:=l_api_url || '&text=' || utl_url.escape(distinct_chars(C.chars_normal||C.chars_bold_normal),TRUE,'UTF-8');
                        getFontface(pWebsiteId, C.context, l_api_url);
                    END IF;
            END CASE;
        END LOOP;
    END;

    /* 
    **  CALL GOOGLE FONTS API TO GET URL OF EACH FONT USED IN THE WEBSITE 
    */
    PROCEDURE getFontFiles(pWebsiteId IN website.id%type, pSiteid IN website.netlify_site_id%type) IS
        l_api_url LONG;
    BEGIN
        DELETE website_fontface WHERE website_id=pWebsiteId;
        FOR C IN (
            SELECT wf.font_id, wf.context, f.variable, f.italic, f.family, 
                    LTRIM(NVL2(wf.opsz,',opsz',NULL) || NVL2(wf.slnt,',slnt',NULL)  || 
                        NVL2(wf.wdth,',wdth',NULL) || NVL2(wf.wght,',wght',NULL),',') axes,
                    LTRIM(NVL2(wf.opsz,','||wf.opsz,NULL) || NVL2(wf.slnt,','||wf.slnt,NULL) || 
                        NVL2(wf.wdth,','||wf.wdth,NULL) || NVL2(wf.wght,','||wf.wght,NULL),',') tuples,
                    wght_start_static, wght_end_static
              FROM website_font wf, font f
             WHERE wf.website_id=pWebsiteId
               AND wf.font_id=f.id
        ) LOOP
            IF (COALESCE(g_chars_used(C.context).chars_italic,g_chars_used(C.context).chars_bold_italic) IS NOT NULL AND C.italic=0) THEN
                g_chars_used(C.context).chars_normal:=distinct_chars(g_chars_used(C.context).chars_normal || g_chars_used(C.context).chars_italic);
                g_chars_used(C.context).chars_italic:=null;
                g_chars_used(C.context).chars_bold_normal:=distinct_chars(g_chars_used(C.context).chars_bold_normal || g_chars_used(C.context).chars_bold_italic);
                g_chars_used(C.context).chars_bold_italic:=null;
                pck_deploy.logDeployment(pWebsiteId, pSiteId, 'WARNING: ITALICS NOT SUPPORTED IN '|| C.family);
            END IF;
            CASE C.variable
                WHEN 1 THEN
                    /*
                    **  "ital" AND "slnt" AXES ARE MUTUALLY EXCLUSIVE IN GOOGLE FONTS
                    */
                    IF (COALESCE(g_chars_used(C.context).chars_italic,g_chars_used(C.context).chars_bold_italic) IS NOT NULL) THEN
                        l_api_url:='https://fonts.googleapis.com/css2?family=' || REPLACE(C.family,' ','+');

                        IF (INSTR(C.axes,'slnt')=0 OR C.axes IS NULL) THEN
                            l_api_url:=l_api_url || ':ital' || CASE WHEN C.axes IS NOT NULL THEN ',' END || C.axes || '@1' || CASE WHEN C.tuples IS NOT NULL THEN ',' END || C.tuples;
                        ELSE
                            l_api_url:=l_api_url || ':' || C.axes || '@' || C.tuples;
                        END IF;

                        l_api_url:=l_api_url || '&text=' || 
                            utl_url.escape(g_chars_used(C.context).chars_italic || g_chars_used(C.context).chars_bold_italic,TRUE,'UTF-8');
                        getFontface(pWebsiteId, C.context, l_api_url);
                    END IF;                    

                    IF (COALESCE(g_chars_used(C.context).chars_normal,g_chars_used(C.context).chars_bold_normal) IS NOT NULL) THEN
                        l_api_url:='https://fonts.googleapis.com/css2?family=' || REPLACE(C.family,' ','+');
                        
                        l_api_url:=l_api_url || CASE WHEN C.axes IS NOT NULL THEN ':' || C.axes || '@' || C.tuples END;
                        l_api_url:=l_api_url || '&text=' || utl_url.escape(g_chars_used(C.context).chars_normal || g_chars_used(C.context).chars_bold_normal,TRUE,'UTF-8');
                        getFontface(pWebsiteId, C.context, l_api_url);
                    END IF;
            END CASE;
        END LOOP;
    END;


    /* 
    **  BUILD HTML FORM TO SELECT WEBSITE FONTS
    */
    PROCEDURE getHTML(pWebsiteId IN website.id%type, pArticleId IN article.id%type) IS
        l_header LONG;
        l_article CLOB;
        l_footer LONG;
        l_fontfaces LONG;
        l_json JSON_OBJECT_T;
        l_fonts JSON_ARRAY_T;
        l_fonts_obj JSON_OBJECT_T;
        l_selected VARCHAR2(9);
    BEGIN
        l_header:='<small>Select complementary fonts for headings and text</small>';

        l_article:=
        '<div class="flex-items" style="--flex-gap:.5em;--flex-direction:column;--flex-vertical-alignment:flex-start">';        

        FOR C IN (
            SELECT wf.font_id, wf.context, f.category, f.family, f.variable, f.italic
              FROM website_font wf, font f
             WHERE wf.website_id=pWebsiteId
               AND wf.font_id=f.id 
             ORDER BY context
        ) LOOP
            l_article:=l_article ||
            '<details open><summary>' || INITCAP(C.context) || '</summary>' ||
            '<fieldset class="flex-items" style="--flex-gap:1em;--flex-direction:row;inline-size:100%;">' ||
                --'<legend>' || INITCAP(C.context) || '</legend>' ||
                '<div>' ||
					'<label for="' || C.context || '-variable">Variable</label>' ||
					'<input type="checkbox" id="' || C.context || '-variable" role="switch"' || CASE WHEN C.variable=0 THEN ' checked aria-checked="false"' ELSE ' aria-checked="true"' END || '/>' ||
                    '<span aria-hidden="true" style="margin-inline-start:1em">' || CASE WHEN C.variable=0 THEN '&#10060;' ELSE '&#9989;' END || '</span>' ||
                '</div>' ||
                '<div>' ||
					'<label for="' || C.context || '-italic">Italics</label>' ||
					'<input type="checkbox" id="' || C.context || '-italic" role="switch"' || CASE WHEN C.italic=0 THEN ' checked aria-checked="false"' ELSE ' aria-checked="true"' END || '/>' ||
                    '<span aria-hidden="true" style="margin-inline-start:1em">' || CASE WHEN C.italic=0 THEN '&#10060;' ELSE '&#9989;' END || '</span>' ||
                '</div>' ||
                
                '<div>' ||
                    '<label for="' || C.context || '-font-category">Category</label>' ||
                    '<select id="' || C.context || '-font-category">' ||
                        '<button>' ||
                          '<selectedcontent></selectedcontent>' ||
                          '<span class="arrow"></span>' ||
                        '</button>';
            FOR C1 IN (SELECT category FROM font_category ORDER BY 1)
            LOOP
                IF (C1.category='system-ui') THEN
                    l_article:=l_article || '<hr>';
                END IF;
                IF (C1.category=C.category)  THEN 
                    l_selected:=' selected';
                ELSE
                    l_selected:=null;
                END IF;
                l_article:=l_article || 
                        '<option style="font-family:' || C1.category || '" value="' || C1.category || '"' || l_selected || '>' ||
                            C1.category ||
                        '</option>';
            END LOOP;
            l_article:=l_article || 
                    '</select>' ||
                '</div>';

            /* Fonts in category */
            l_article:=l_article || 
                '<div>' ||
                    '<label for="' || C.context || '-font-family">Font Name</label>' ||
                    '<select id="' || C.context || '-font-family">' ||
                        '<button>' ||
                          '<selectedcontent></selectedcontent>' ||
                          '<span class="arrow"></span>' ||
                        '</button>';
            FOR C1 IN (SELECT id, family, wght_start, wght_end FROM font WHERE category=C.category AND variable=C.variable AND italic=C.italic ORDER BY 2)
            LOOP
                IF (C1.id=C.font_id) THEN
                    l_selected:=' selected';
                ELSE
                    l_selected:=null;
                END if;
                l_article:=l_article || 
                '<option value="' || TO_CHAR(C1.id) || '"'|| l_selected || '>' ||
                    C1.family ||
                '</option>';
            END LOOP;
            l_article:=l_article || 
                    '</select>' ||
                '</div>' ||
                '<small id="' || C.context || '-info" popover style="position-anchor:--' || C.context || '-font-family;position-area:bottom span-all;color:red;padding:.5em;max-width:30ch"></small>' ||
                '<span class="loader icon" popovertarget="' || C.context || '-info" style="anchor-name:--' || C.context || '-font-family"></span>' ||
                '<div>'; 
            IF (C.variable=1) THEN
                l_article:=l_article ||
                '<button type="button" class="button" style="anchor-name:--' || C.context || '-axes" popovertarget="' || C.context || '-axes' || '">Font Settings</button>' ||
                '<div popover id="' || C.context || '-axes" style="position-anchor:--' || C.context || '-axes">Hello Axes</div>';
            END IF;
            l_article:=l_article ||
                '</div>' ||
            '</fieldset>' ||
            '</details>';
        END LOOP;

        FOR C IN (SELECT SUM(nb_fonts) nb_fonts, MAX(last_modified) last_modified FROM font_category) LOOP
            l_footer:=
            '<a class="icon-with-text" href="https://fonts.google.com" target="a_blank">' ||
				'<svg width="1em" height="1em" viewBox="0 0 512 512"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376C296.3 401.1 253.9 416 208 416 93.1 416 0 322.9 0 208S93.1 0 208 0 416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"/></svg>' ||
				'<small>' || C.nb_fonts || ' Google fonts @'|| TO_CHAR(C.last_modified, 'dd Mon yyyy') || '</small>' ||
			'</a>';
        END LOOP;

        /*
        ** RETURN DIALOG CONTENTS TO CLIENT 
        */
        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('header',l_header);
        l_json.put('article',l_article);
        l_json.put('footer',l_footer);
        apex_util.prn(l_json.to_clob,false);
        /*
        ** INCLUDE FONTFACE DETAILS FOR FONT CATEGORY SELECT ELEMENT
        */
        -- l_fonts:= new JSON_ARRAY_T;
        -- FOR C IN (
        --     SELECT category,fontface_url 
        --       FROM font_category
        --      WHERE category<>'system-ui') 
        -- LOOP
        --     l_fonts_obj:=new JSON_OBJECT_T;
        --     l_fonts_obj.put('family',C.category);
        --     l_fonts_obj.put('url', C.fontface_url);
        --     l_fonts.append(l_fonts_obj);
        -- END LOOP;

        /*
        ** INCLUDE FONTFACE DETAILS FOR CURRENTLY SELECTED FONTS
        */
        /*
        getCharsUsed(pArticleId);
        getFontFiles(pWebsiteId, pArticleId);
        
        FOR C IN (
            SELECT wf.font_id, f.variable, f.family, f.wght_start, f.wght_end, ac.chars_normal, ac.chars_italic, ac.chars_bold_normal, ac.chars_bold_italic
              FROM website_font wf, font f, article_chars ac
             WHERE wf.website_id=pWebsiteId
               AND wf.font_id=f.id 
               AND ac.context=wf.context
               AND ac.article_id=pArticleId
        ) LOOP
        null;
        END LOOP;
        */

        -- l_json.put('fonts',l_fonts);
        
    END;

    /*
    ** USER CHANGES FONT CATEGORY OR CHOICE OF VARIABLE FONTS OR CHOICE OF FONTS THAT INCLUDE ITALiC TYPEFACE
    */
    PROCEDURE getFontsInCategory(pCategory IN font.category%type, pVariable IN font.variable%type, pItalic IN font.italic%type) IS
        l_html CLOB;
        l_json JSON_OBJECT_T;
    BEGIN
        FOR C IN (
            SELECT id, family, COUNT(*) OVER () nb
            FROM font 
            WHERE category=pCategory 
            AND variable=pVariable
            AND italic=pItalic
            ORDER BY 2
        )
        LOOP
            IF (l_html IS NULL) THEN
                l_html:='<option value="">--Select from ' || C.nb || ' Font' || CASE WHEN C.nb>1 THEN 's' END || '--</option>';
            END IF;
            l_html:=l_html || '<option value="' || C.id || '">' || C.family || '</option>';
        END LOOP;
           
        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('content', l_html);
        apex_util.prn(l_json.to_clob,false);
    END;



    /* 
    **  BUILD OPENING DIALOG CONTENT OR LIST OF FONT FAMILIES FOR A SELECTED CATEGORY
    */
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pContext IN website_font.context%type, pCategory IN font.category%type, 
                pVariable IN font.variable%type, pItalic IN font.italic%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html CLOB;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        IF (pContext='HTML') THEN
            getHTML(pWebsiteId, pArticleId);
        ELSE
            getFontsInCategory(pCategory, pVariable, pItalic);
        END IF;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);
    END;

    /* 
    **  USER SELECTS A FONT FOR A CATEGORY
    */
    PROCEDURE updateFont(pWebsiteId IN website.id%type, pArticleid IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_context website_font.context%type;
        l_font_id website_font.font_id%type;
        l_fontfaces LONG;
        l_error LONG;
        l_url_regex VARCHAR2(12):='url\((.+?)\)';
        l_url VARCHAR2(500);
        l_json JSON_OBJECT_T;
        l_urls JSON_ARRAY_T;
        l_axes JSON_ARRAY_T;
        l_system_ui PLS_INTEGER;
        n PLS_INTEGER;
        
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT context,font_id
          INTO l_context, l_font_id
          FROM JSON_TABLE(pBodyText, '$' COLUMNS(context,font_id));

        SELECT COUNT(*) INTO l_system_ui FROM dual 
         WHERE EXISTS (SELECT null FROM font WHERE id=l_font_id AND category='system-ui');
        
        IF (l_system_ui=0) THEN
        null;
            --getSelectedFont(pWebsiteId, pArticleId, l_font_id, l_context, l_error, l_fontfaces);
        END IF;

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);

        IF (l_error IS NOT NULL) THEN
            l_json.put('info',l_error);
        ELSE
            UPDATE website_font
               SET font_id=l_font_id,
                   chars_normal=null,
                   chars_italic=null,
                   chars_bold_normal=null,
                   chars_bold_italic=null,
                   updated_date=current_timestamp
             WHERE website_id=pWebsiteId
               AND context=l_context;
            
            IF (l_system_ui=0) THEN
                l_urls:= new JSON_ARRAY_T;
                n:=REGEXP_COUNT(l_fontfaces,l_url_regex);
                FOR i IN 1..n LOOP
                    l_url:=REGEXP_SUBSTR(l_fontfaces,l_url_regex,1,i);
                    l_urls.append(l_url);
                END LOOP;
                l_json.put('urls',l_urls);
            END IF;

        END IF;

        apex_util.prn(l_json.to_clob,false);
        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
    **  load Google font definitions into google_font table. wolf3 format only. Websites deployed with optimized foont.r 
    */
    PROCEDURE loadGoogleFonts IS 
        l_clob CLOB;
        l_nb_fonts PLS_INTEGER;
        l_lastModified google_font.lastModified%type;
    BEGIN
        pck_api.callGoogleAPI('https://www.googleapis.com/webfonts/v1/webfonts?capability=WOFF2&capability=VF',pData=>l_clob);

        EXECUTE IMMEDIATE('truncate table google_font');

        INSERT INTO google_font(
            family, category,
            ital_start,ital_end,
            wdth_start,wdth_end,
            wght_start,wght_end,
            opsz_start,opsz_end,
            slnt_start,slnt_end,
            wght_start_static,
            wght_end_static,
            italic,
            subset, 
            variable, 
            axes,
            lastModified
        )
        WITH 
        data AS
        (
            SELECT family, category, lastModified,
                TO_NUMBER(
                CASE 
                    WHEN variant='regular' THEN '400'
                    WHEN variant='italic' THEN '-400'
                    WHEN INSTR(variant,'italic')>0 THEN '-' || SUBSTR(variant,1,INSTR(variant,'italic')-1)
                    ELSE variant
                END
                ) variant,
                tag,"start" as tag_start, "end" as tag_end, subset
            FROM JSON_TABLE(l_clob, '$.items[*]' COLUMNS(family, category, lastModified, NESTED PATH '$.variants[*]' COLUMNS (variant VARCHAR2(50) PATH '$'),  
                NESTED '$.axes[*]' COLUMNS(tag varchar2(4) PATH '$.tag', "start" number PATH '$.start', "end" number PATH '$.end'),
                NESTED PATH '$.subsets[*]' COLUMNS (subset VARCHAR2(50) PATH '$')))
        ), 
        data2 as
        (
            SELECT family, category, TO_DATE(lastModified,'YYYY-MM-DD') lastModified, 
                MIN(DECODE(SIGN(variant),1,variant)) wght_start_static, MAX(DECODE(SIGN(variant),1,variant)) wght_end_static,
                MIN(DECODE(SIGN(variant),-1,1)) ital,
                MAX(DECODE(tag,'wdth',tag_start)) as wdth_start, MAX(DECODE(tag,'wdth',tag_end)) as wdth_end, 
                MAX(DECODE(tag,'wght',tag_start)) as wght_start, MAX(DECODE(tag,'wght',tag_end)) as wght_end, 
                MAX(DECODE(tag,'opsz',tag_start)) as opsz_start, MAX(DECODE(tag,'opsz',tag_end)) as opsz_end, 
                MAX(DECODE(tag,'slnt',tag_start)) as slnt_start, MAX(DECODE(tag,'slnt',tag_end)) as slnt_end,
                LISTAGG(tag,',') WITHIN GROUP (ORDER BY null) axes,
                LISTAGG(subset,'|') WITHIN GROUP (ORDER BY subset) subset
            FROM data
            GROUP BY family, category, lastModified
        )
        SELECT family, category, 
            CASE WHEN ital=1 AND axes IS NOT NULL THEN 0 END ital_start, 
            CASE WHEN ital=1 AND axes IS NOT NULL THEN 1 END ital_end,
            wdth_start, wdth_end,
            wght_start, wght_end,
            opsz_start, opsz_end,
            slnt_start, slnt_end,
            CASE WHEN axes IS NULL THEN wght_start_static END, 
            CASE WHEN axes IS NULL THEN wght_end_static END, 
            CASE WHEN ital IS NULL AND axes IS NULL THEN 0 WHEN INSTR(axes,'slnt')>0 THEN 1 ELSE NVL(ital,0) END,
            subset,
            CASE WHEN axes IS NULL THEN 0 ELSE 1 END,
            axes,
            lastModified
        FROM data2;

        /* DELETE FONTS WITH CUSTOM AXES WHICH WE DO NOT SUPPORT YET */
        --DELETE google_font WHERE vf=1 AND COALESCE(wght_start,wght_end,wdth_start,wdth_end,opsz_start,opsz_end,slnt_start,slnt_end,ital_start,ital_end) IS NULL;

        /* Update font category table from staging table */
        MERGE INTO font_category t
        USING
        (
            SELECT category, MAX(lastmodified) last_modified, COUNT(*) nb_fonts FROM google_font GROUP BY category
        ) s
        ON (t.category=s.category)
        WHEN MATCHED THEN UPDATE SET
            t.nb_fonts=s.nb_fonts,
            t.last_modified=s.last_modified,
            t.updated_date=current_timestamp
        WHEN NOT MATCHED THEN 
            INSERT (category, nb_fonts)
            VALUES (s.category, s.nb_fonts);

        /* Update font table from staging table */
        MERGE INTO font t
        USING
        (
            SELECT family, category, ital_start, ital_end, wdth_start, wdth_end, wght_start, wght_end, opsz_start, opsz_end, slnt_start, slnt_end, wght_start_static, wght_end_static, italic, variable, axes
            FROM google_font
        ) s
        ON (t.family=s.family)
        WHEN MATCHED THEN UPDATE SET
            t.category=s.category,
            t.ital_start=s.ital_start, t.ital_end=s.ital_end,
            t.wdth_start=s.wdth_start, t.wdth_end=s.wdth_end, 
            t.wght_start=s.wght_start, t.wght_end=s.wght_end,
            t.opsz_start=s.opsz_start, t.opsz_end=s.opsz_end,
            t.slnt_start=s.slnt_start, t.slnt_end=s.slnt_end,
            t.wght_start_static=s.wght_start_static,
            t.wght_end_static=s.wght_end_static,
            t.italic=s.italic,
            t.variable=s.variable,
            t.axes=s.axes,
            t.updated_date=current_timestamp
        WHEN NOT MATCHED THEN 
            INSERT (id, family, category, ital_start, ital_end, wdth_start, wdth_end, wght_start, wght_end, opsz_start, opsz_end, slnt_start, slnt_end, wght_start_static, wght_end_static, italic, variable, axes, created_date) 
            VALUES (seq_font.nextval, s.family, s.category, s.ital_start, s.ital_end, s.wdth_start, s.wdth_end, s.wght_start, s.wght_end, s.opsz_start, s.opsz_end, s.slnt_start, s.slnt_end,  s.wght_start_static, s.wght_end_static, s.italic, s.variable, s.axes, current_timestamp);
        
        l_nb_fonts:=sql%rowcount;
        pck_core.log('Uploaded ' ||l_nb_fonts || ' Google Fonts');

        
    END;
end "PCK_FONTS";
/