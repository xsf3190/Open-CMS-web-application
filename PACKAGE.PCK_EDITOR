CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_EDITOR" is
    --
    PROCEDURE deployWebsite(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getDeploymentStatus(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getHeader(pWebsiteId IN website.id%type, pEyeDropper IN VARCHAR2, pStatus OUT NUMBER);
    --
    PROCEDURE updateEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE updateHeader(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_EDITOR" is

    /* 
    **  DEPLOY WEBSITE
    */
    PROCEDURE deployWebsite(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_job_name VARCHAR2(30);
        l_env VARCHAR2(4);
        l_site_id website.netlify_site_id%type;
        l_site_id_custom website.netlify_site_id_custom%type;
    BEGIN
        pck_core.log('start deployWebsite:'||pWebsiteId);
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        /* 
        ** Check no other session currently deploying - simultaneous deployments not allowed on Netlify free plan 
        */
        FOR C IN (SELECT job_name FROM user_scheduler_running_jobs WHERE job_name LIKE 'DEPLOY_%') LOOP
            apex_json.open_object;
            apex_json.write('content', '<h2>Someone else is deploying ... try again later</h2>');
            apex_json.write('stop', TRUE);
            apex_json.write('success', TRUE);
            apex_json.close_object;
            RETURN;
        END LOOP;

        IF (INSTR(l_session_data.url,'netlify.app')>0) THEN
            l_env:='TEST';
        ELSE
            l_env:='LIVE';
        END IF;

        DELETE website_deploy WHERE website_id=pWebsiteId;
        UPDATE website SET netlify_deploy_id=NULL WHERE id=pWebsiteId RETURNING netlify_site_id, netlify_site_id_custom INTO l_site_id, l_site_id_custom;

        l_job_name:=dbms_scheduler.generate_job_name('DEPLOY_');
        dbms_scheduler.create_job(
            job_name   => l_job_name,
            job_type   =>'STORED_PROCEDURE',
            job_action =>'pck_deploy.runDeployment',
            number_of_arguments=>6,
            start_date=>systimestamp
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 1,
            argument_value => pWebsiteId
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 2,
            argument_value => l_session_data.user_id
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 3,
            argument_value => l_env
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 4,
            argument_value => CASE WHEN l_env='TEST' THEN l_site_id ELSE l_site_id_custom END
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 5,
            argument_value => pck_core.getRestUrl()
        );
        
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 6,
            argument_value => 101
        );
        dbms_scheduler.enable(l_job_name);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', '<ol role="list" class="deploy"><li><span>' || TO_CHAR(current_timestamp,'hh24:mi:ss') || '</span><span>Starting deployment of ' || l_session_data.url || '</span></li></ol>');
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
     **  Get deployment status from website_deploy logging table - called from Javascript every 3 seconds
     */
    PROCEDURE getDeploymentStatus(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS 
        l_site_id website_deploy.site_id%type;
        l_content CLOB;
        l_clob CLOB;
        l_ssl_url VARCHAR2(100);
        l_deployment_complete BOOLEAN:=FALSE;
        l_netlify_status website_deploy.status%type;
        l_netlify_deploy_id website.netlify_deploy_id%type;
        l_state VARCHAR2(200);
        l_updated_at website.netlify_last_published%type;
        l_job_name VARCHAR2(30);
        l_session_data pck_sec.t_session_data;
        TYPE t_deploy_log IS RECORD(
            id website_deploy.id%type,
            log_time VARCHAR2(8),
            message website_deploy.message%type,
            status website_deploy.status%type);
        TYPE tt_deploy_log IS TABLE OF t_deploy_log;
        l_deploy_log tt_deploy_log;          
        l_env VARCHAR2(4);
        l_is_live BOOLEAN;
        cert_not_ready exception;
        pragma exception_init( cert_not_ready, -29273 );
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        IF (INSTR(l_session_data.url,'netlify.app')>0) THEN
            l_env:='TEST';
        ELSE
            l_env:='LIVE';
        END IF;

        SELECT netlify_deploy_id, CASE WHEN l_env='TEST' THEN netlify_site_id ELSE netlify_site_id_custom END
          INTO l_netlify_deploy_id, l_site_id
          FROM website
         WHERE id=pWebsiteId;

        l_is_live:=l_env='LIVE';

        /* Get latest deployment status if started */
        IF (l_netlify_deploy_id IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites/'|| l_site_id || '/deploys/' || l_netlify_deploy_id, pMethod=>'GET', pData=>l_clob);
            FOR C IN (SELECT state, ssl_url, TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') updated_at
                        FROM JSON_TABLE(l_clob, '$' COLUMNS (state, ssl_url, updated_at)) 
                       WHERE state='ready') 
            LOOP
                pck_deploy.logDeployment(pWebsiteId, l_site_id, C.state, pLogTime=>C.updated_at);
                l_ssl_url:=C.ssl_url;
            END LOOP;
        END IF;

        SELECT id, TO_CHAR(log_time,'hh24:mi:ss') log_time, message, status
          BULK COLLECT INTO l_deploy_log
          FROM website_deploy 
         WHERE website_id=pWebsiteId
           AND site_id=l_site_id
           AND sent_ind='N'
         ORDER BY id;

        /* Now return list of all deployment status messages to client */
        FOR i IN 1..l_deploy_log.COUNT
        LOOP
            IF (l_deploy_log(i).message='ready') THEN 
                l_content:=l_content ||'<li><span>' || l_deploy_log(i).log_time || '</span><span>Successful deployment</span></li>'; 
                IF (l_is_live) THEN
                    BEGIN
                        l_clob:=apex_web_service.make_rest_request(p_url=>l_ssl_url, p_http_method=>'GET');
                        EXCEPTION WHEN cert_not_ready THEN
                            l_content:=l_content ||'<li><span></span><span style="color:red">Certificate in process of being issued</span></li>'; 
                    END;
                END If;
                l_deployment_complete:=TRUE;
                EXIT;
            END IF;

            IF (l_deploy_log(i).status='OK') THEN 
                l_content:=l_content ||'<li><span>' || l_deploy_log(i).log_time || '</span><span>' || l_deploy_log(i).message || '</span></li>'; 
            ELSE
                l_content:=l_content ||'<li class="nok"><span>' || l_deploy_log(i).log_time || '</span><span>' || l_deploy_log(i).message || '</span></li>'; 
                l_deployment_complete:=TRUE;
            END IF;
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('completed', l_deployment_complete);
        apex_json.write('content', l_content);
        apex_json.close_object;

        FORALL i IN 1..l_deploy_log.COUNT
            UPDATE website_deploy SET sent_ind='Y' WHERE id=l_deploy_log(i).id;

        IF (l_deployment_complete) THEN
            IF (l_is_live) THEN
                UPDATE website 
                   SET netlify_last_published_custom = current_timestamp
                 WHERE id=pWebsiteId;
            ELSE
                UPDATE website 
                   SET netlify_last_published = current_timestamp
                 WHERE id=pWebsiteId;
            END IF;

            l_job_name:=dbms_scheduler.generate_job_name('DELETE_');
            dbms_scheduler.create_job(
                job_name   => l_job_name,
                job_type   =>'STORED_PROCEDURE',
                job_action =>'pck_deploy.runDelete',
                number_of_arguments=>3,
                start_date=>systimestamp
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 1,
                argument_value => l_session_data.user_id
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 2,
                argument_value => pWebsiteId
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 3,
                argument_value => l_site_id
            );
            dbms_scheduler.enable(l_job_name);    
        END IF;

        pStatus:=200;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(pStatus);
    END;

    /* 
    **  GET CONTENT FOR CKEDITOR
    */
    PROCEDURE getEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_body_html article.body_html%type;
        l_last_update VARCHAR2(20);
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT body_html, apex_util.get_since(updated_date) last_update
          INTO l_body_html, l_last_update
          FROM article
         WHERE id=pArticleId;

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('html', l_body_html);
        apex_json.write('last_update', l_last_update);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /* 
    **  UPDATE CONTENT RECEIVED FROM CKEDITOR
    */
    PROCEDURE updateEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_word_count article.word_count%type;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        UPDATE article t SET (t.word_count, t.body_html, t.updated_date) = 
            (
                SELECT REGEXP_SUBSTR(j.word_count,'(\d)+') word_count, j.body_html, current_timestamp as updated_date
                  FROM article x, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (word_count, body_html CLOB)) j
                 WHERE x.id=pArticleId
            )
        WHERE t.id=pArticleId
        RETURNING t.word_count INTO l_word_count;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('message', 'Saved ' || l_word_count || ' words');
        APEX_JSON.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
     **  Get details of column to be edited
     */
    PROCEDURE getColumnDetails(pColumn IN VARCHAR2, pDataLength IN OUT user_tab_columns.data_length%type, pPopover IN OUT VARCHAR2 ) IS
        l_comments user_col_comments.comments%type;
        l_column_name user_tab_columns.column_name%type:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);
    BEGIN
        SELECT c.data_length, i.comments
          INTO pDataLength, l_comments
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1))
           AND c.column_name=UPPER(l_column_name)
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        IF (l_comments IS NOT NULL) THEN
            pPopover:=
            '<button type="button" popovertarget="' || l_column_name || '_popover" id="' || l_column_name || '_btn">&#9432;</button>
            <div id="' || l_column_name || '_popover" popover anchor="' || l_column_name || '_btn">' || l_comments || '</div>';
        END IF;
    END;

    /*
     **  Create wrapper html for input text element
     */
    FUNCTION buildInputWrapper(pColumn IN VARCHAR2, pValue IN VARCHAR2) RETURN VARCHAR2 IS
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_popover LONG;
    BEGIN
        getColumnDetails(pColumn, l_data_length, l_popover);

        l_column_name:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);

        RETURN(
        '<div class="input-wrapper">' ||
            '<input type="text" style="line-height:initial" placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                '" size="20" maxlength="' || l_data_length || '" value="' || pValue || '" data-column="' || pColumn || '">' ||
            '<div class="charcounter align-end" style="font-size:var(--step--2);font-family:monospace">' || NVL(LENGTH(pValue),0) ||  '/' || l_data_length || '</div>' ||
        '</div>');
    END;

    /* 
    **  BUILD HTML INPUT ELEMENTS TO EDiT WEBSITE HEADER
    */
    PROCEDURE getHeader(pWebsiteId IN website.id%type, pEyeDropper IN VARCHAR2, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_color_primary website.color_primary%type;
        l_title website.title%type;
        l_subtitle website.subtitle%type;
        l_header_effect website.header_effect%type;
        l_html LONG;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT color_primary, title, subtitle, header_effect
          INTO l_color_primary, l_title, l_subtitle, l_header_effect
          FROM website
         WHERE id=pWebsiteId;

        l_html:=
        '<form class="flow">' ||
            '<fieldset>' ||
                '<legend>Change Background</legend>' ||
                '<div class="flex-items">' ||
                    '<input type="color" class="background-color" value="' || l_color_primary || '">' || 
                    CASE WHEN pEyeDropper='true' THEN
                    '<button type="button" class="button eyedropper" style="--button-padding:0 0;--button-radius:0;--button-bg:transparent;fill:white">' ||
                        '<svg class="icon" aria-hidden="true" focusable="false">' ||
                            '<use href="#eyedropper"></use>' ||
                        '</svg>' ||
                    '</button>'
                    END ||
                    '<button type="button" class="button background-image" style="--button-padding:0 0;--button-radius:0;--button-bg:transparent;fill:white">' ||
                        '<svg class="icon" aria-hidden="true" focusable="false">' ||
                            '<use href="#image"></use>' ||
                        '</svg>' ||
                    '</button>' ||
                '</div>' ||
            '</fieldset>' ||
            buildInputWrapper('website.title',l_title) || 
            buildInputWrapper('website.subtitle',l_subtitle) ||
            '<div class="flex-items space-between">' ||
                '<button type="button" class="button publish-changes">PUBLISH CHANGES</button>' ||
                '<button type="button" class="button cancel-changes">CANCEL</button>' ||
            '</div>' ||
        '</form>';

        l_html:=l_html || '<svg width="0" height="0">';
        FOR C IN (SELECT id, viewbox, svg FROM icon WHERE id IN ('eyedropper','image')) LOOP
            l_html:=l_html || '<symbol id="' || C.id || '" viewBox="' || C.viewbox || '" preserveAspectRatio="">' || C.svg || '</symbol>';
        END LOOP;
        l_html:=l_html || '</svg>';

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('html', l_html);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /* 
    **  UPDATE WEBSITE HEADER FIELDS
    */
    PROCEDURE updateHeader(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_table_name VARCHAR2(30);
        l_column_name VARCHAR2(30);
        l_ddl VARCHAR2(200);
        l_bodytext CLOB:=pBodyText;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        pck_core.log(l_bodytext);
        /*
        FOR C IN (SELECT table_column, value FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (table_column, value)) )
        LOOP
            l_table_name:=SUBSTR(C.table_column,1,INSTR(C.table_column,'.')-1);
            l_column_name:=SUBSTR(C.table_column,INSTR(C.table_column,'.')+1);
            l_ddl:='UPDATE ' || l_table_name || ' SET updated_date=current_timestamp,' || l_column_name || '=:B1 WHERE id=:B2';
             EXECUTE IMMEDIATE l_ddl USING C.value, pWebsiteId;
        END LOOP;
        */
        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

end;
/