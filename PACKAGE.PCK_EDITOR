CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_EDITOR" is
    --
    PROCEDURE deployWebsite(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getDeploymentStatus(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pCategory IN font.category%type, pFontId IN font.id%type, pStatus OUT NUMBER);
    --
    FUNCTION getFontURL(pFontid IN font.id%type) RETURN VARCHAR2;
    --
    PROCEDURE getHeader(pWebsiteId IN website.id%type, pEyeDropper IN VARCHAR2, pStatus OUT NUMBER);
    --
    PROCEDURE initWebsiteFonts(pWebsiteId IN website.id%type, pTitleFont IN font.family%type, pSubTitleFont IN font.family%type DEFAULT NULL);
    --
    PROCEDURE updateEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE updateHeader(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE getFooter(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_EDITOR" is

    /* 
    **  DEPLOY WEBSITE
    */
    PROCEDURE deployWebsite(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_job_name VARCHAR2(30);
        l_env VARCHAR2(4);
        l_site_id website.netlify_site_id%type;
        l_site_id_custom website.netlify_site_id_custom%type;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        /* 
        ** Check no other session currently deploying - simultaneous deployments not allowed on Netlify free plan 
        */
        FOR C IN (SELECT job_name FROM user_scheduler_running_jobs WHERE job_name LIKE 'DEPLOY_%') LOOP
            apex_json.open_object;
            apex_json.write('content', '<h2>Someone else is deploying ... try again later</h2>');
            apex_json.write('stop', TRUE);
            apex_json.write('success', TRUE);
            apex_json.close_object;
            RETURN;
        END LOOP;

        IF (INSTR(l_session_data.url,'netlify.app')>0) THEN
            l_env:='TEST';
        ELSE
            l_env:='LIVE';
        END IF;

        DELETE website_deploy WHERE website_id=pWebsiteId;
        UPDATE website SET netlify_deploy_id=NULL WHERE id=pWebsiteId RETURNING netlify_site_id, netlify_site_id_custom INTO l_site_id, l_site_id_custom;

        l_job_name:=dbms_scheduler.generate_job_name('DEPLOY_');
        dbms_scheduler.create_job(
            job_name   => l_job_name,
            job_type   =>'STORED_PROCEDURE',
            job_action =>'pck_deploy.runDeployment',
            number_of_arguments=>6,
            start_date=>systimestamp
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 1,
            argument_value => pWebsiteId
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 2,
            argument_value => l_session_data.user_id
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 3,
            argument_value => l_env
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 4,
            argument_value => CASE WHEN l_env='TEST' THEN l_site_id ELSE l_site_id_custom END
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 5,
            argument_value => pck_core.getRestUrl()
        );
        
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 6,
            argument_value => 101
        );
        dbms_scheduler.enable(l_job_name);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', '<ol role="list" class="deploy"><li><span>' || TO_CHAR(current_timestamp,'hh24:mi:ss') || '</span><span>Starting deployment of ' || l_session_data.url || '</span></li></ol>');
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
     **  Get deployment status from website_deploy logging table - called from Javascript every 3 seconds
     */
    PROCEDURE getDeploymentStatus(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS 
        l_site_id website_deploy.site_id%type;
        l_content CLOB;
        l_clob CLOB;
        l_ssl_url VARCHAR2(100);
        l_deployment_complete BOOLEAN:=FALSE;
        l_netlify_status website_deploy.status%type;
        l_netlify_deploy_id website.netlify_deploy_id%type;
        l_state VARCHAR2(200);
        l_updated_at website.netlify_last_published%type;
        l_job_name VARCHAR2(30);
        l_session_data pck_sec.t_session_data;
        TYPE t_deploy_log IS RECORD(
            id website_deploy.id%type,
            log_time VARCHAR2(8),
            message website_deploy.message%type,
            status website_deploy.status%type);
        TYPE tt_deploy_log IS TABLE OF t_deploy_log;
        l_deploy_log tt_deploy_log;          
        l_env VARCHAR2(4);
        l_is_live BOOLEAN;
        cert_not_ready exception;
        pragma exception_init( cert_not_ready, -29273 );
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        IF (INSTR(l_session_data.url,'netlify.app')>0) THEN
            l_env:='TEST';
        ELSE
            l_env:='LIVE';
        END IF;

        SELECT netlify_deploy_id, CASE WHEN l_env='TEST' THEN netlify_site_id ELSE netlify_site_id_custom END
          INTO l_netlify_deploy_id, l_site_id
          FROM website
         WHERE id=pWebsiteId;

        l_is_live:=l_env='LIVE';

        /* Get latest deployment status if started */
        IF (l_netlify_deploy_id IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites/'|| l_site_id || '/deploys/' || l_netlify_deploy_id, pMethod=>'GET', pData=>l_clob);
            FOR C IN (SELECT state, ssl_url, TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') updated_at
                        FROM JSON_TABLE(l_clob, '$' COLUMNS (state, ssl_url, updated_at)) 
                       WHERE state='ready') 
            LOOP
                pck_deploy.logDeployment(pWebsiteId, l_site_id, C.state, pLogTime=>C.updated_at);
                l_ssl_url:=C.ssl_url;
            END LOOP;
        END IF;

        SELECT id, TO_CHAR(log_time,'hh24:mi:ss') log_time, message, status
          BULK COLLECT INTO l_deploy_log
          FROM website_deploy 
         WHERE website_id=pWebsiteId
           AND site_id=l_site_id
           AND sent_ind='N'
         ORDER BY id;

        /* Now return list of all deployment status messages to client */
        FOR i IN 1..l_deploy_log.COUNT
        LOOP
            IF (l_deploy_log(i).message='ready') THEN 
                l_content:=l_content ||'<li><span>' || l_deploy_log(i).log_time || '</span><span>Successful deployment</span></li>'; 
                IF (l_is_live) THEN
                    BEGIN
                        l_clob:=apex_web_service.make_rest_request(p_url=>l_ssl_url, p_http_method=>'GET');
                        EXCEPTION WHEN cert_not_ready THEN
                            l_content:=l_content ||'<li><span></span><span style="color:red">Certificate in process of being issued</span></li>'; 
                    END;
                END If;
                l_deployment_complete:=TRUE;
                EXIT;
            END IF;

            IF (l_deploy_log(i).status='OK') THEN 
                l_content:=l_content ||'<li><span>' || l_deploy_log(i).log_time || '</span><span>' || l_deploy_log(i).message || '</span></li>'; 
            ELSE
                l_content:=l_content ||'<li class="nok"><span>' || l_deploy_log(i).log_time || '</span><span>' || l_deploy_log(i).message || '</span></li>'; 
                l_deployment_complete:=TRUE;
            END IF;
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('completed', l_deployment_complete);
        apex_json.write('content', l_content);
        apex_json.close_object;

        FORALL i IN 1..l_deploy_log.COUNT
            UPDATE website_deploy SET sent_ind='Y' WHERE id=l_deploy_log(i).id;

        IF (l_deployment_complete) THEN
            IF (l_is_live) THEN
                UPDATE website 
                   SET netlify_last_published_custom = current_timestamp
                 WHERE id=pWebsiteId;
            ELSE
                UPDATE website 
                   SET netlify_last_published = current_timestamp
                 WHERE id=pWebsiteId;
            END IF;

            l_job_name:=dbms_scheduler.generate_job_name('DELETE_');
            dbms_scheduler.create_job(
                job_name   => l_job_name,
                job_type   =>'STORED_PROCEDURE',
                job_action =>'pck_deploy.runDelete',
                number_of_arguments=>3,
                start_date=>systimestamp
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 1,
                argument_value => l_session_data.user_id
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 2,
                argument_value => pWebsiteId
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 3,
                argument_value => l_site_id
            );
            dbms_scheduler.enable(l_job_name);    
        END IF;

        pStatus:=200;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(pStatus);
    END;

    /* 
    **  GET CONTENT FOR CKEDITOR
    */
    PROCEDURE getEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_body_html article.body_html%type;
        l_last_update VARCHAR2(20);
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT body_html, apex_util.get_since(updated_date) last_update
          INTO l_body_html, l_last_update
          FROM article
         WHERE id=pArticleId;

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('html', l_body_html);
        apex_json.write('last_update', l_last_update);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;



    /* 
    **  UPDATE CONTENT RECEIVED FROM CKEDITOR
    */
    PROCEDURE updateEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_word_count article.word_count%type;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        UPDATE article t SET (t.word_count, t.body_html, t.updated_date) = 
            (
                SELECT REGEXP_SUBSTR(j.word_count,'(\d)+') word_count, j.body_html, current_timestamp as updated_date
                  FROM article x, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (word_count, body_html CLOB)) j
                 WHERE x.id=pArticleId
            )
        WHERE t.id=pArticleId
        RETURNING t.word_count INTO l_word_count;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('message', 'Saved ' || l_word_count || ' words');
        APEX_JSON.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /* 
    **  INITIALIZE WEBSITE FONTS
    */
    PROCEDURE initWebsiteFonts(pWebsiteId IN website.id%type, pTitleFont IN font.family%type, pSubTitleFont IN font.family%type DEFAULT NULL) IS
    BEGIN
        DELETE website_font WHERE website_id=pWebsiteId;
        INSERT INTO website_font(website_id, font_id, context, ital, wght, wdth, opsz, slnt, font_size, underline)
        SELECT pWebsiteId, id, 'TITLE', 
                NVL2(ital_start,0,NULL), 
                CASE WHEN wght_start IS NOT NULL THEN 400 END, 
                CASE WHEN wdth_start IS NOT NULL THEN 100 END, 
                CASE WHEN opsz_start IS NOT NULL THEN 14 END, 
                CASE WHEN slnt_start IS NOT NULL THEN 0 END,
                6,
                NULL
          FROM font
         WHERE family=pTitleFont;
        
        IF (pSubTitleFont IS NOT NULL) THEN
            INSERT INTO website_font(website_id, font_id, context, ital, wght, wdth, opsz, slnt, font_size, underline)
            SELECT pWebsiteId, id, 'SUBTITLE', 
                    NVL2(ital_start,0,NULL), 
                    CASE WHEN wght_start IS NOT NULL THEN 400 END, 
                    CASE WHEN wdth_start IS NOT NULL THEN 100 END, 
                    CASE WHEN opsz_start IS NOT NULL THEN 14 END, 
                    CASE WHEN slnt_start IS NOT NULL THEN 0 END,
                    6,
                    NULL
              FROM font
             WHERE family=pSubTitleFont;
        END IF;
    END;

    FUNCTION getFontURL(pFontid IN font.id%type) RETURN VARCHAR2 IS
        l_api_url VARCHAR2(250);
        l_url VARCHAR2(500);
        l_url_regex VARCHAR2(50):='url.*;';
        l_font_css CLOB;
        n PLS_INTEGER;
    BEGIN
        FOR C IN (
                SELECT f.family, 
                    LTRIM(NVL2(f.ital_start,'ital',NULL) || NVL2(f.opsz_start,',opsz',NULL) || NVL2(f.slnt_start,',slnt',NULL) || 
                        NVL2(f.wdth_start,',wdth',NULL) || NVL2(f.wght_start,',wght',NULL),',') axes,
                    LTRIM(NVL2(f.opsz_start,f.opsz_start||'..'||f.opsz_end,NULL) || NVL2(f.slnt_start,','||f.slnt_start||'..'||f.slnt_end,NULL) || 
                        NVL2(f.wdth_start,','||f.wdth_start||'..'||f.wdth_end,NULL) || NVL2(f.wght_start,','||f.wght_start||'..'||f.wght_end,NULL),',') ranges
                FROM font f
                WHERE f.id=pFontid) 
        LOOP
            l_api_url:='https://fonts.googleapis.com/css2?family=' || REPLACE(C.family,' ','+') || ':' || C.axes || '@';
            IF (INSTR(C.axes,'ital')>0) THEN
                l_api_url:=l_api_url || '0,' || C.ranges || ';1,' || C.ranges;
            ELSE
                l_api_url:=l_api_url || C.ranges;
            END IF;
            
            pck_api.callGoogleAPI(l_api_url,l_font_css);
            pck_core.log(l_font_css);

            /* Get url for Latin charcters ... but desperate but so far seems to be in last font-face */
            n:=regexp_count(l_font_css,l_url_regex);
            l_url:=regexp_substr(l_font_css,l_url_regex,1,n);
        END LOOP;

        RETURN(RTRIM(l_url,';'));
    END;

    /* 
    **  GET VARIABLE FONT LISTS AND PROPERTIES (font_id=0) ELSE GET SETTING FOR SPECIFIC FONT
    */
    PROCEDURE getFonts(pWebsiteId IN website.id%type, pCategory IN font.category%type, pFontId IN font.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html CLOB;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        APEX_JSON.open_object; 

        IF (pFontId=0) THEN /* Get all fonts for category*/
            l_html:='<option value="">--Choose a Font--</option>';
            FOR C IN (
                SELECT id, family 
                FROM font 
                WHERE category=pCategory ORDER BY 2
            )
            LOOP
                l_html:=l_html || '<option value="' || C.id || '">' || C.family || '</option>';
            END LOOP;
            APEX_JSON.write('content', l_html);
        ELSE
            FOR C IN (
                SELECT f.family, f.ital_start, f.ital_end, f.wght_start, f.wght_end, f.wdth_start, f.wdth_end, f.opsz_start, f.opsz_end, f.slnt_start, f.slnt_end
                 FROM font f
                WHERE f.id=pFontid
            ) 
            LOOP
                apex_json.write('url',getFontUrl(pFontid));

                apex_json.open_array('axes');
                apex_json.open_object;
                apex_json.write('name','wght');
                apex_json.write('min', C.wght_start);
                apex_json.write('max', C.wght_end);
                apex_json.close_object;
                apex_json.open_object;
                apex_json.write('name','wdth');
                apex_json.write('min', C.wdth_start);
                apex_json.write('max', C.wdth_end);
                apex_json.close_object;
                apex_json.open_object;
                apex_json.write('name','opsz');
                apex_json.write('min', C.opsz_start);
                apex_json.write('max', C.opsz_end);
                apex_json.close_object;
                apex_json.open_object;
                apex_json.write('name','slnt');
                apex_json.write('min', C.slnt_start);
                apex_json.write('max', C.slnt_end);
                apex_json.close_object;
                apex_json.open_object;
                apex_json.write('name','ital');
                apex_json.write('min', C.ital_start);
                apex_json.write('max', C.ital_end);
                apex_json.close_object;
                apex_json.close_array;
            END LOOP;
        END IF;

        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);
    END;

    /* BUILD <select> elements for specified font */
    FUNCTION buildSelectFont(pFontId IN font.id%type, pColumnName IN VARCHAR2) RETURN VARCHAR2 IS
        l_html LONG;
        l_selected_category font.category%type;
    BEGIN
        /* Font Category first */
        SELECT category INTO l_selected_category FROM font WHERE id=pFontId;
        l_html:=
        '<label for="' || pColumnName || '-font-category">Font Category' ||
          '<select id="' || pColumnName || '-font-category" name="' || pColumnName || '_font_category" style="min-width:10em">' ||
            '<button>' ||
              '<selectedcontent></selectedcontent>' ||
              '<span class="arrow"></span>' ||
            '</button>';
        FOR C IN (SELECT DISTINCT category FROM font ORDER BY 1)
        LOOP
            l_html:=l_html || 
            '<option value="' || C.category || '"' || CASE WHEN C.category=l_selected_category THEN ' selected' END || '>' ||
                C.category ||
            '</option>';
        END LOOP;
        l_html:=l_html || 
            '</select>' ||
        '</label>';

        /* Fonts in category */
        l_html:=l_html || 
        '<label for="' || pColumnName || '-font-family">Font Family' ||
        '<select id="' || pColumnName || '-font-family" name="' || pColumnName || '_font_family">' ||
            '<button>' ||
              '<selectedcontent></selectedcontent>' ||
              '<span class="arrow"></span>' ||
            '</button>';
        FOR C IN (SELECT id, family FROM font WHERE category=l_selected_category ORDER BY 2)
        LOOP
            l_html:=l_html || 
            '<option value="' || C.id || '"'|| CASE WHEN C.id=pFontId THEN ' selected' END || '>' ||
                C.family ||
            '</option>';
        END LOOP;
        l_html:=l_html || 
            '</select>' ||
        '</label>';

        RETURN(l_html);
    END;

    /*
     **  Create wrapper html for input text element
     */
    FUNCTION buildFontWrapper(pWebsiteId IN website.id%type, pColumn IN VARCHAR2, pValue IN VARCHAR2) RETURN VARCHAR2 IS
        l_table_name user_tab_columns.table_name%type:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name user_tab_columns.column_name%type:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);
        l_html LONG;
    BEGIN
        FOR C IN (
            SELECT c.data_length, i.comments, wf.font_id, wf.font_size, wf.underline, f.wght_start, f.wght_end, wf.wght, f.wdth_start, f.wdth_end, wf.wdth, f.opsz_start, f.opsz_end, wf.opsz, f.slnt_start, f.slnt_end, wf.slnt, f.ital_start, f.ital_end, wf.ital
              FROM user_tab_columns c, user_col_comments i, website w, website_font wf, font f
             WHERE c.table_name=l_table_name
               AND c.column_name=UPPER(l_column_name)
               AND i.table_name=c.table_name
               AND i.column_name=c.column_name
               AND w.id=pWebsiteId
               AND wf.website_id=w.id
               AND wf.context=UPPER(l_column_name)
               AND wf.font_id=f.id
        )
        LOOP
            l_html:=
            '<fieldset class="flex-items '|| l_column_name || '-font" style="--flex-direction:column; --flex-vertical-alignment:flex-start;--flex-gap:1em">' ||
                '<legend><strong>Change ' || INITCAP(REPLACE(l_column_name,'_',' ')) || '</strong></legend>' ||
                '<div class="flex-items" style="--flex-direction:row;">' ||
                    buildSelectFont(C.font_id, l_column_name) ||
                '</div>' ||

                '<div style="width:100%">' ||
                    '<input type="text" style="font:inherit;font-size:120%" placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || l_column_name || 
                        '" size="20" maxlength="' || C.data_length || '" value="' || pValue || '">' ||
                    '<span class="charcounter" style="font-size:80%">' || NVL(LENGTH(pValue),0) ||  '/' || C.data_length || '</span>' ||
                '</div>' ||
                
                '<div class="flex-items" style="--flex-direction:row;--flex-gap:1em">' ||
                    '<label for="' || l_column_name || '-font-size">Size' ||
                        '<input type="range" id="' || l_column_name || '-font-size" name="' || l_column_name || '_font_size" min="2" max="14" value="' || C.font_size || '"/>' ||
                    '</label>' ||
                    '<label for="' || l_column_name || '-underline">Underline' ||
                        '<input type="range" id="' || l_column_name || '-underline" name="' || l_column_name || '_underline" min="0" max="22" value="' || C.underline || '"/>' ||
                    '</label>' ||
                    '<label for="' || l_column_name || '-font-wght"' || CASE WHEN C.wght_start IS NULL THEN ' class="visually-hidden"' END || '>Weight' ||
                        '<input type="range" id="' || l_column_name || '-font-wght"' || CASE WHEN C.wght_start IS NULL THEN ' disabled' END || ' name="' || l_column_name || '_font_wght" min="' || C.wght_start || '" max="' || C.wght_end || '" value="' || C.wght || '"/>' ||
                    '</label>' ||
                    '<label for="' || l_column_name || '-font-wdth"' || CASE WHEN C.wdth_start IS NULL THEN ' class="visually-hidden"' END || '>Width' ||
                        '<input type="range" id="' || l_column_name || '-font-wdth"' || CASE WHEN C.wdth_start IS NULL THEN ' disabled' END || ' name="' || l_column_name || '_font_wdth" min="' || C.wdth_start || '" max="' || C.wdth_end || '" value="' || C.wdth || '"/>' ||
                    '</label>' ||
                    '<label for="' || l_column_name || '-font-ital"' || CASE WHEN C.ital_start IS NULL THEN ' class="visually-hidden"' END || '>Italics' ||
                        '<input type="range" id="' || l_column_name || '-font-ital"' || CASE WHEN C.ital_start IS NULL THEN ' disabled' END || ' name="' || l_column_name || '_font_ital" min="' || C.ital_start || '" max="' || C.ital_end || '" value="' || C.ital || '"/>' ||
                    '</label>' ||
                    '<label for="' || l_column_name || '-font-slnt"' || CASE WHEN C.slnt_start IS NULL THEN ' class="visually-hidden"' END || '>Slant' ||
                        '<input type="range" id="' || l_column_name || '-font-slnt"' || CASE WHEN C.slnt_start IS NULL THEN ' disabled' END || ' name="' || l_column_name || '_font_slnt" min="' || C.slnt_start || '" max="' || C.slnt_end || '" value="' || C.slnt || '"/>' ||
                    '</label>' ||
                    '<label for="' || l_column_name || '-font-opsz"' || CASE WHEN C.opsz_start IS NULL THEN ' class="visually-hidden"' END || '>Optical Size' ||
                        '<input type="range" id="' || l_column_name || '-font-opsz"' || CASE WHEN C.opsz_start IS NULL THEN ' disabled' END || ' name="' || l_column_name || '_font_opsz" min="' || C.opsz_start || '" max="' || C.opsz_end || '" value="' || C.opsz || '"/>' ||
                    '</label>' ||
                '</div>' ||
            '</fieldset>';
        END LOOP;
        RETURN(l_html);
    END;

    /* 
    **  BUILD HTML INPUT ELEMENTS TO EDiT WEBSITE HEADER
    */
    PROCEDURE getHeader(pWebsiteId IN website.id%type, pEyeDropper IN VARCHAR2, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html LONG;
        l_title_font_url VARCHAR2(500);
        l_subtitle_font_url VARCHAR2(500);
        l_title_font_family font.family%type;
        l_subtitle_font_family font.family%type;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        FOR C IN (
            SELECT w.color_primary, w.header_effect, w.header_text_color, w.title, w.subtitle
              FROM website w
             WHERE w.id=pWebsiteId
        ) 
        LOOP
            l_html:=
            '<form class="editor">' ||
                '<fieldset class="background-color">' ||
                    '<legend><strong>Change Header</strong></legend>' ||
                    '<input type="hidden" name="header_text_color" value="' || C.header_text_color || '">' ||
                    '<input type="color" class="background-color" name="color_primary" value="' || C.color_primary || '">' || 
                    CASE WHEN pEyeDropper='true' THEN
                    '<button type="button" class="button eyedropper" style="--button-bg:transparent;--button-hover-bg:transparent">' ||
                        '<svg class="icon" aria-hidden="true" focusable="false">' ||
                            '<use href="#eyedropper"></use>' ||
                        '</svg>' ||
                    '</button>'
                    END ||
                    '<button type="button" class="button background-image" style="--button-bg:transparent;--button-hover-bg:transparent">' ||
                        '<svg class="icon" aria-hidden="true" focusable="false">' ||
                            '<use href="#image"></use>' ||
                        '</svg>' ||
                    '</button>' ||
                    '<span class="result"></span>' ||
                '</fieldset>' ||
                buildFontWrapper(pWebsiteId,'website.title', C.title) || 
                buildFontWrapper(pWebsiteId,'website.subtitle',C.subtitle) ||
                '<div class="flex-items space-between buttons">' ||
                    '<button type="button" class="button publish-changes" data-endpoint="publish-website/:ID" data-method="GET" style="--button-bg:rebeccapurple">PUBLISH</button>' ||
                    '<button type="button" class="button cancel-changes" style="--button-bg:rebeccapurple">CANCEL</button>' ||
                '</div>' ||
            '</form>';
        END LOOP;
        /* Include SVG symbols in hidden element */
        l_html:=l_html || '<svg width="0" height="0">';
        FOR C IN (SELECT id, viewbox, svg FROM icon WHERE id IN ('eyedropper','image')) LOOP
            l_html:=l_html || '<symbol id="' || C.id || '" viewBox="' || C.viewbox || '" preserveAspectRatio="">' || C.svg || '</symbol>';
        END LOOP;
        l_html:=l_html || '</svg>';

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('html', l_html);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /* 
    **  UPDATE WEBSITE HEADER FIELDS
    */
    PROCEDURE updateHeader(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_bodytext CLOB:=pBodyText;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        
        FOR C IN (
            SELECT color_primary, header_text_color, title,title_font_family,title_font_size,NULLIF(title_underline,'0') title_underline, title_font_wght,title_font_wdth,title_font_opsz,title_font_slnt,title_font_ital,
                subtitle,subtitle_font_family,subtitle_font_size,NULLIF(subtitle_underline,'0') subtitle_underline, subtitle_font_wght,subtitle_font_wdth,subtitle_font_opsz,subtitle_font_slnt,subtitle_font_ital
              FROM JSON_TABLE(l_bodytext, '$' 
              COLUMNS(color_primary,header_text_color,title,title_font_family,title_font_size,title_underline,title_font_wght,title_font_wdth,title_font_opsz,title_font_slnt,title_font_ital,
                subtitle,subtitle_font_family,subtitle_font_size,subtitle_underline,subtitle_font_wght,subtitle_font_wdth,subtitle_font_opsz,subtitle_font_slnt,subtitle_font_ital
              ))
        ) LOOP
            UPDATE website
               SET color_primary=C.color_primary, header_text_color=C.header_text_color, title=C.title, subtitle=C.subtitle,updated_date=current_timestamp
             WHERE id=pWebsiteId;
            
            UPDATE website_font
               SET font_id=C.title_font_family,
                   font_size=C.title_font_size,
                   underline=C.title_underline,
                   wght=C.title_font_wght,
                   wdth=C.title_font_wdth,
                   opsz=C.title_font_opsz,
                   slnt=C.title_font_slnt,
                   ital=C.title_font_ital,
                   updated_date=current_timestamp
             WHERE website_id=pWebsiteId
               AND context='TITLE';

            UPDATE website_font
               SET font_id=C.subtitle_font_family,
                   font_size=C.subtitle_font_size,
                   underline=C.subtitle_underline,
                   wght=C.subtitle_font_wght,
                   wdth=C.subtitle_font_wdth,
                   opsz=C.subtitle_font_opsz,
                   slnt=C.subtitle_font_slnt,
                   ital=C.subtitle_font_ital,
                   updated_date=current_timestamp
             WHERE website_id=pWebsiteId
               AND context='SUBTITLE';

        END LOOP;


        
        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /* 
    **  BUILD HTML INPUT ELEMENTS TO EDiT WEBSITE HEADER
    */
    PROCEDURE getFooter(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html LONG;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        FOR C IN (
            SELECT w.color_primary, w.header_effect, w.header_text_color, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name
              FROM website w
             WHERE w.id=pWebsiteId
        ) 
        LOOP
            l_html:=
            '<form class="editor">' ||
                '<fieldset class="flex-items" style="--flex-gap:1em">' ||
                    '<legend><strong>Change Footer</strong></legend>' ||
                    
                    '<div>' ||
                        '<label for="contact-email">Contact Email</label>' ||
                        '<input type="email" id="contact-email" name="contact_email" maxlength="50" value="' || C.contact_email || '">' ||
                    '</div>' ||
                    
                    '<div>' ||
                        '<label for="telephone-number">Telephone</label>' ||
                        '<input type="tel" id="telephone-number" name="telephone_number" maxlength="20" value="' || C.telephone_number || '">' ||
                    '</div>' ||

                    '<div>' ||
                        '<label for="mobile-number">Mobile</label>' ||
                        '<input type="tel" id="mobile-number" name="mobile_number" maxlength="20" value="' || C.mobile_number || '">' ||
                    '</div>' ||

                    '<div>' ||
                        '<label for="linkedin-name">LinkedIn</label>' ||
                        '<input type="text" id="linkedin-name" name="linkedin_name" maxlength="50" autocapitalize="none" value="' || C.linkedin_name || '">' ||
                    '</div>' ||
                    
                '</fieldset>' ||
                '<div class="flex-items space-between">' ||
                    '<button type="button" class="button publish-changes" data-endpoint="publish-website/:ID" data-method="GET" style="--button-bg:rebeccapurple">PUBLISH</button>' ||
                    '<button type="button" class="button cancel-changes" style="--button-bg:rebeccapurple">CANCEL</button>' ||
                '</div>' ||
            '</form>';
        END LOOP;
        /* Include SVG symbols in hidden element */
        l_html:=l_html || '<svg width="0" height="0">';
        FOR C IN (SELECT id, viewbox, svg FROM icon WHERE id IN ('eyedropper','image')) LOOP
            l_html:=l_html || '<symbol id="' || C.id || '" viewBox="' || C.viewbox || '" preserveAspectRatio="">' || C.svg || '</symbol>';
        END LOOP;
        l_html:=l_html || '</svg>';

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('html', l_html);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

end;
/