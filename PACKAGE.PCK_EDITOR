CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_EDITOR" is
    --
    PROCEDURE deleteHero(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE deployWebsite(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE getColor(pWebsiteId IN website.id%type, pArticleid IN article.id%type, pContent IN VARCHAR2, pStatus OUT NUMBER);
    --
    PROCEDURE getDeploymentStatus(pWebsiteId IN website.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE getFooter(pWebsiteId IN website.id%type, pEyeDropper IN VARCHAR2, pStatus OUT NUMBER);
    --
    PROCEDURE getPages(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER);
    --
    PROCEDURE updateColor(pWebsiteId IN website.id%type, pArticleid IN article.id%type, pBodytext IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE updateEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE updateFooter(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE updateHero(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE updatePages(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
    --
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_EDITOR" is

    TYPE tt_labels IS RECORD (
            article_id website_article.article_id%type,
            navigation_label website_article.navigation_label%type,
            display_order website_article.display_order%type
        );
    TYPE t_labels IS TABLE OF tt_labels;

    /* 
    **  DEPLOY WEBSITE
    */
    PROCEDURE deployWebsite(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_job_name VARCHAR2(30);
        l_env VARCHAR2(4);
        l_site_id website.netlify_site_id%type;
        l_site_id_custom website.netlify_site_id_custom%type;
        l_esm_library VARCHAR2(4):='live';
        l_json JSON_OBJECT_T;
    BEGIN
        /* 
        ** Check no other session currently deploying - simultaneous deployments not allowed on Netlify free plan 
        */
        FOR C IN (SELECT job_name FROM user_scheduler_running_jobs WHERE job_name LIKE 'DEPLOY_%') LOOP
            l_json:= new JSON_OBJECT_T;
            l_json.put('success',true);
            l_json.put('content', '<h4>Someone else is deploying ... try again later</h4>');
            l_json.put('stop', TRUE);
            apex_util.prn(l_json.to_clob,false);
            RETURN;
        END LOOP;

        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT env INTO l_env FROM JSON_TABLE(pBodyText, '$' COLUMNS(env));

        UPDATE website SET netlify_deploy_id=NULL WHERE id=pWebsiteId RETURNING netlify_site_id, netlify_site_id_custom INTO l_site_id, l_site_id_custom;
        
        DELETE website_deploy WHERE website_id=pWebsiteId AND site_id=CASE WHEN l_env='TEST' THEN l_site_id ELSE l_site_id_custom END;
        
        l_job_name:=dbms_scheduler.generate_job_name('DEPLOY_');
        dbms_scheduler.create_job(
            job_name   => l_job_name,
            job_type   =>'STORED_PROCEDURE',
            job_action =>'pck_deploy.runDeployment',
            number_of_arguments=>5,
            start_date=>systimestamp
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 1,
            argument_value => pWebsiteId
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 2,
            argument_value => l_session_data.user_id
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 3,
            argument_value => l_env
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 4,
            argument_value => CASE WHEN l_env='TEST' THEN l_site_id ELSE l_site_id_custom END
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 5,
            argument_value => pck_core.getRestUrl()
        );
        dbms_scheduler.enable(l_job_name);

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('content', '<table role="presentation" style="font-family:monospace;background:#342a21;color:white"><tbody><tr><td>' || TO_CHAR(current_timestamp AT TIME ZONE l_session_data.timezone,'hh24:mi:ss') || '</td><td>Starting deployment</td></tr></tbody></table>');
        apex_util.prn(l_json.to_clob,false);

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
     ** Get deployment status from website_deploy logging table - called from Javascript every 3 seconds
     ** Have to poll Netlify deployment status 
     */
    PROCEDURE getDeploymentStatus(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS 
        l_site_id website_deploy.site_id%type;
        l_content CLOB;
        l_clob CLOB;
        l_deployment_complete BOOLEAN:=FALSE;
        l_netlify_status website_deploy.status%type;
        l_netlify_deploy_id website.netlify_deploy_id%type;
        l_state VARCHAR2(200);
        l_job_name VARCHAR2(30);
        l_session_data pck_sec.t_session_data;
        TYPE t_deploy_log IS RECORD(
            id website_deploy.id%type,
            log_time website_deploy.log_time%type,
            message website_deploy.message%type,
            status website_deploy.status%type);
        TYPE tt_deploy_log IS TABLE OF t_deploy_log;
        l_deploy_log tt_deploy_log;          
        l_env VARCHAR2(4);
        l_json JSON_OBJECT_T;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        l_env:=pck_hosting.getEnvFromURL(l_session_data.url);

        SELECT netlify_deploy_id, CASE WHEN l_env='TEST' THEN netlify_site_id ELSE netlify_site_id_custom END
          INTO l_netlify_deploy_id, l_site_id
          FROM website
         WHERE id=pWebsiteId;

        /* Get latest deployment status if started */
        IF (l_netlify_deploy_id IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites/'|| l_site_id || '/deploys/' || l_netlify_deploy_id, pMethod=>'GET', pData=>l_clob);
            SELECT 'Netlify is ' || state INTO l_state FROM JSON_TABLE(l_clob, '$' COLUMNS (state)); 
            pck_deploy.logDeployment(pWebsiteId, l_site_id, l_state, pLogTime=>current_date);
        END IF;

        SELECT id, log_time, message, status
          BULK COLLECT INTO l_deploy_log
          FROM website_deploy 
         WHERE website_id=pWebsiteId
           AND site_id=l_site_id
           AND sent_ind='N'
         ORDER BY id;

        /* Now return list of all deployment status messages to client */
        FOR i IN 1..l_deploy_log.COUNT
        LOOP
            l_content:=l_content ||'<tr' || CASE WHEN l_deploy_log(i).status='NOK' THEN ' style="color:red"' END || '><td>' || TO_CHAR(l_deploy_log(i).log_time AT TIME ZONE l_session_data.timezone,'hh24:mi:ss') || '</td><td>' || l_deploy_log(i).message || '</td></tr>'; 
            IF (l_deploy_log(i).message='Netlify is ready') THEN 
                l_content:=l_content ||'<tr style="color:green"><td>' || TO_CHAR(l_deploy_log(i).log_time AT TIME ZONE l_session_data.timezone,'hh24:mi:ss') || '</td><td>SUCCESSFUL DEPLOYMENT</td></tr>'; 
                l_deployment_complete:=TRUE;
            END IF;
        END LOOP;

        IF (l_deployment_complete) THEN
            update article 
            set deployed_date=case when l_env='TEST' THEN current_timestamp ELSE deployed_date end,
                deployed_date_custom=case when l_env='LIVE' THEN current_timestamp ELSE deployed_date_custom end
            where id in
            (
            select id from article
            connect by prior id=parent_id
            start with id in (select article_id from website_article where website_id=pWebsiteid)
            );
        END IF;

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('completed',l_deployment_complete);
        l_json.put('content', l_content);
        apex_util.prn(l_json.to_clob,false);

        FORALL i IN 1..l_deploy_log.COUNT
            UPDATE website_deploy SET sent_ind='Y' WHERE id=l_deploy_log(i).id;

        /*
        ** DELETE ANY PREVIOUD DEPLOYMENTS
        */ 
        IF (l_deployment_complete) THEN
            IF (l_env='LIVE') THEN
                UPDATE website 
                   SET netlify_last_published_custom = current_timestamp
                 WHERE id=pWebsiteId;
            ELSE
                UPDATE website 
                   SET netlify_last_published = current_timestamp
                 WHERE id=pWebsiteId;
            END IF;

            l_job_name:=dbms_scheduler.generate_job_name('DELETE_');
            dbms_scheduler.create_job(
                job_name   => l_job_name,
                job_type   =>'STORED_PROCEDURE',
                job_action =>'pck_deploy.runDelete',
                number_of_arguments=>3,
                start_date=>systimestamp
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 1,
                argument_value => l_session_data.user_id
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 2,
                argument_value => pWebsiteId
            );
            dbms_scheduler.set_job_argument_value(
                job_name => l_job_name,
                argument_position => 3,
                argument_value => l_site_id
            );
            dbms_scheduler.enable(l_job_name);    
        END IF;

        pStatus:=200;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(pStatus);
    END;

    /* 
    **  BUILD FORM CONTROLS TO EDIT WEBSITE PAGES
    */
    PROCEDURE getPages(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_header LONG;
        l_article CLOB;
        l_footer LONG;
        l_json JSON_OBJECT_T;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        
        l_header:='<small>Add / Delete pages, change navigation labels.</small>';

        SELECT wa.article_id, wa.navigation_label, wa.collection_type
          BULK COLLECT INTO pck_codepen.g_nav_labels
          FROM website w, website_article wa
         WHERE w.id=pWebsiteId
           AND wa.website_id=w.id
         ORDER BY wa.display_order;
        
        l_article:=
            pck_codepen.buildNavLabels(pWebsiteId, pArticleId, pEdit=>TRUE) ||
            '<fieldset class="flex-items">' ||
                '<div>' ||
                    '<label for="navigation-label">Navigation Label</label>' ||
                    '<input type="text" id="navigation-label" name="navigation_label" maxlength="30" value="">' ||
                '</div>' ||
                '<fieldset class="flex-items">' ||
                    '<legend>Page Type</legend>' ||
                    '<label for="collection_type-normal">Normal' ||
                    '<input type="radio" id="collection_type-normal" name="collection_type" value="N/A"></label>' ||
                    '<label for="collection_type-blog">Blog' ||
                    '<input type="radio" id="collection_type-blog" name="collection_type" value="BLOG"></label>' ||
                    '<label for="collection_type-portfolio">Portfolio' ||
                    '<input type="radio" id="collection_type-portfolio" name="collection_type" value="PORTFOLIO"></label>' ||
                '</fieldset>' ||
                '<button type="button" class="button add-page">Add Page</button>' ||
                '<button type="button" class="button delete-page">Delete Page</button>' ||
                '<button type="button" class="button deploy">Save Changes</button>' ||
                '<span class="errors" style="color:red"></span>' ||
            '</fieldset>';

        l_footer:='<small>TAKE CARE when migrating an existing website to keep the same label names</small>';

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('header',l_header);
        l_json.put('article',l_article);
        l_json.put('footer',l_footer);
        apex_util.prn(l_json.to_clob,false);

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /* 
    **  UPDATE WEBSITE_ARTICLE TABLE WITH ALL CHANGES 
    */
    PROCEDURE updatePages(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        TYPE tt_arr IS RECORD(
            display_order website_article.display_order%type,
            article_id website_article.article_id%type,
            navigation_label website_article.navigation_label%type,
            collection_type website_article.collection_type%type
        );
        TYPE t_arr IS TABLE OF tt_arr INDEX BY PLS_INTEGER;
        l_arr t_arr;
        l_current_date TIMESTAMP:=current_timestamp;
        l_moved_article_id website_article.article_id%type;
        TYPE t_article_id IS TABLE OF website_article.article_id%type;
        l_article_id t_article_id;
        l_old_nav VARCHAR2(4000);
        l_new_nav VARCHAR2(4000);
        l_do_deploy BOOLEAN;
        l_clob CLOB;
        l_json JSON_OBJECT_T;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT LISTAGG(navigation_label) WITHIN GROUP (ORDER BY display_order) INTO l_old_nav FROM website_article WHERE website_id=pWebsiteid;

        SELECT display_order, article_id, navigation_label, collection_type
          BULK COLLECT INTO l_arr
          FROM JSON_TABLE(pBodyText, '$[*]' COLUMNS (display_order FOR ORDINALITY, article_id, navigation_label, collection_type));

       -- Create ARTICLE rows for new pages. Retain rows where labels have been moved.
        FOR i IN 1..l_arr.COUNT LOOP
            IF (l_arr(i).article_id<=0) THEN
                FOR C IN (
                    SELECT article_id FROM website_article WHERE website_id=pWebsiteId AND navigation_label=l_arr(i).navigation_label
                ) LOOP
                    l_moved_article_id:=C.article_id;
                    l_arr(i).article_id:=C.article_id;
                END LOOP;
                IF (l_moved_article_id IS NULL) THEN
                    INSERT INTO article (id, author_user_id) 
                    VALUES (seq_article.nextval, l_session_data.user_id);
                    INSERT INTO website_article (website_id, article_id, navigation_label, collection_type, user_id, display_order)
                    VALUES (pWebsiteId, seq_article.currval, l_arr(i).navigation_label, l_arr(i).collection_type, l_session_data.user_id, 1);
                    l_arr(i).article_id:=seq_article.currval;
                END IF;
            END IF;
        END LOOP;

        FORALL i IN l_arr.FIRST .. l_arr.LAST
            UPDATE website_article 
               SET display_order=l_arr(i).display_order,
                   navigation_label=l_arr(i).navigation_label,
                   collection_type=l_arr(i).collection_type,
                   updated_date=l_current_date
             WHERE website_id = pWebsiteId
               AND article_id=l_arr(i).article_id;

        -- Delete pages not passed from client
        DELETE website_article WHERE website_id=pWebsiteId AND updated_date<l_current_date RETURNING article_id BULK COLLECT INTO l_article_id;

        -- Delete Cloudinary assets tagged by article_id
        FOR i IN 1..l_article_id.COUNT LOOP
            FOR C IN (
                SELECT DISTINCT cld_cloud_name, resource_type
                  FROM asset
                 WHERE article_id=l_article_id(i)
            )   
            LOOP
                pck_api.callCloudinaryAPI(pUserId=>l_session_data.user_id, pEndpoint=>C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || l_article_id(i), pMethod=>'DELETE', pData=>l_clob);
            END LOOP;
        END LOOP;

        FORALL i IN l_article_id.FIRST .. l_article_id.LAST
            DELETE article WHERE id=l_article_id(i);

        SELECT LISTAGG(navigation_label) WITHIN GROUP (ORDER BY display_order) INTO l_new_nav FROM website_article WHERE website_id=pWebsiteid;

        l_do_deploy:=NVL(l_new_nav,'x') <> NVL(l_old_nav,'x');
        
        IF (l_do_deploy) tHEN
            UPDATE website SET nav_updated_date = current_timestamp WHERE id=pWebsiteid;
        END IF;

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('deploy',l_do_deploy);
        apex_util.prn(l_json.to_clob,false);

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);
    END;

    /* 
    **  GET CONTENT FOR REVISITS TO EDITED PAGES
    */
    PROCEDURE getEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_header_html website_article.header_html%type; 
        l_main_html article.body_html%type;
        l_footer_html website_article.footer_html%type; 
        l_last_update VARCHAR2(20);
        l_json JSON_OBJECT_T;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT body_html, apex_util.get_since(updated_date) last_update
          INTO l_main_html, l_last_update
          FROM article
         WHERE id=pArticleId;

        SELECT header_html, footer_html
          INTO l_header_html, l_footer_html
          FROM website_article
         WHERE website_id=pWebsiteId
           AND article_id=pArticleid;

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('header',l_header_html);
        l_json.put('main',l_main_html);
        l_json.put('footer',l_footer_html);
        apex_util.prn(l_json.to_clob,false);

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);
    END;



    /* 
    **  UPDATE CONTENT RECEIVED FROM CKEDITOR. SET FLAG ON WEBSITE IF HOME PAGE HEADER / FOOTER UPDATED
    */
    PROCEDURE updateEditorContent(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_word_count NUMBER;
        l_html CLOB;
        l_id VARCHAR2(6);
        l_json JSON_OBJECT_T;

        PROCEDURE setWebsiteUpdatedDate IS
        BEGIN
            UPDATE website 
               SET nav_updated_date=current_timestamp
             WHERE EXISTS (
                SELECT null 
                  FROM website_article
                 WHERE website_id=pWebsiteId 
                   AND article_id=pArticleid 
                   AND display_order=(
                        SELECT MAX(display_order) 
                          FROM website_article
                         WHERE website_id=pWebsiteId 
                           AND article_id=pArticleid 
                        )
                );
        END;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT REGEXP_SUBSTR(word_count,'(\d)+') word_count, body_html, id
          INTO l_word_count, l_html, l_id
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (word_count, body_html CLOB, id));

        CASE l_id
            WHEN 'header' THEN
                UPDATE website_article 
                   SET header_html=l_html,
                       updated_date = current_timestamp
                 WHERE website_id=pWebsiteid
                   AND article_id=pArticleId;

                setWebsiteUpdatedDate;

            WHEN 'main' THEN
                UPDATE article 
                   SET word_count=l_word_count, 
                       body_html=l_html,
                       updated_date = current_timestamp
                 WHERE id=pArticleId;

            WHEN 'footer' THEN
                UPDATE website_article 
                   SET footer_html=l_html,
                       updated_date = current_timestamp
                 WHERE website_id=pWebsiteid
                   AND article_id=pArticleId;

                setWebsiteUpdatedDate;
        END CASE;

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('message','Saved');
        apex_util.prn(l_json.to_clob,false);

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;
    
    /* 
    **  UPDATE WEBSITE HERO IMAGE
    */
    PROCEDURE updateHero(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_bodytext CLOB:=pBodyText;
        l_hero_asset_id website.hero_asset_id%type;
        l_img VARCHAR2(1000);
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        
        SELECT hero_asset_id INTO l_hero_asset_id FROM JSON_TABLE(l_bodytext, '$' COLUMNS(hero_asset_id));

        UPDATE website SET hero_asset_id=l_hero_asset_id, updated_date=current_timestamp WHERE id=pWebsiteId;

        FOR C IN (
            SELECT cld_cloud_name, resource_type, public_id, width, height, format, breakpoints
              FROM asset
             WHERE id=l_hero_asset_id
            ) 
        LOOP
            l_img:='<img "width="' || C.width || '" height="' || C.height || '"';
            l_img:=l_img || ' sizes="50vw"';
            l_img:=l_img || ' srcset="';
            FOR C1 IN (SELECT column_value AS breakpoint FROM TABLE(apex_string.split(C.breakpoints,','))) LOOP
                l_img:=l_img || 'https://res.cloudinary.com/' || C.cld_cloud_name || '/w_' || C1.breakpoint || '/' || C.public_id || ' ' || C1.breakpoint || 'w,';
            END LOOP;
            l_img:=RTRIM(l_img,',') || '">';
        END LOOP;
        
        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('img', l_img);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /* 
    **  DELETE HERO IMAGE
    */
    PROCEDURE deleteHero(pWebsiteId IN website.id%type, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        
       UPDATE website SET hero_asset_id=NULL, updated_date=current_timestamp WHERE id=pWebsiteId;
        
        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);
    END;



    /* 
    **  BUILD HTML INPUT ELEMENTS TO EDiT WEBSITE FOOTER
    */
    PROCEDURE getFooter(pWebsiteId IN website.id%type, pEyeDropper IN VARCHAR2, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html LONG;
        l_footer LONG;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        FOR C IN (
            SELECT w.footer_background_color, w.footer_color, w.header_effect, w.contact_email, w.telephone_number, w.mobile_number, w.linkedin_name, w.instagram_name
              FROM website w
             WHERE w.id=pWebsiteId
        ) 
        LOOP
            l_html:=
            '<form>' ||
                '<fieldset class="flex-items">' ||
                    '<legend><strong>Change Footer</strong></legend>' ||
                    '<div class="flex-items" style="--flex-direction:row">' ||
                        '<label for="footer-background-color-1">Pick Background Color' || 
                            '<input type="color" id="footer-background-color-1" class="footer-background-color" name="footer_background_color" value="' || C.footer_background_color || '">' || 
                        '</label>' ||
                        CASE WHEN pEyeDropper='true' THEN
                        '<label for="footer-background-color-2">Pick from Screen' ||
                            '<button type="button" class="eyedropper"></button>' ||
                        '</label>'
                        END ||
                        '<label for="footer-color">Text Color' || 
                            '<input type="color" id="footer-color" class="footer-color" name="footer_color" value="' || C.footer_color || '">' || 
                        '</label>' ||
                    '</div>' ||
                    '<div class="flex-items" style="--flex-direction:row">' ||
                        '<div>' ||
                            '<label for="contact-email">Contact Email</label>' ||
                            '<input type="email" id="contact-email" name="contact_email" maxlength="50" value="' || C.contact_email || '">' ||
                        '</div>' ||
                        
                        '<div>' ||
                            '<label for="telephone-number">Telephone</label>' ||
                            '<input type="tel" id="telephone-number" name="telephone_number" maxlength="20" value="' || C.telephone_number || '">' ||
                        '</div>' ||

                        '<div>' ||
                            '<label for="mobile-number">Mobile</label>' ||
                            '<input type="tel" id="mobile-number" name="mobile_number" maxlength="20" value="' || C.mobile_number || '">' ||
                        '</div>' ||

                        '<div>' ||
                            '<label for="linkedin-name">LinkedIn Name</label>' ||
                            '<input type="text" id="linkedin-name" name="linkedin_name" maxlength="50" autocapitalize="none" value="' || C.linkedin_name || '">' ||
                        '</div>' ||

                        '<div>' ||
                            '<label for="instagram-name">Instagram Name</label>' ||
                            '<input type="text" id="instagram-name" name="instagram_name" maxlength="50" autocapitalize="none" value="' || C.instagram_name || '">' ||
                        '</div>' ||
                    '</div>' ||
                '</fieldset>' ||

                '<ul class="flex-items space-between buttons">' ||
                    '<li><button type="button" class="button publish-changes" data-endpoint="publish-website/" style="--button-bg:rebeccapurple">PUBLISH</button></li>' ||
                    '<li>' ||
                        '<button type="button" class="button save-changes no-focus" style="--button-bg:rebeccapurple">SAVE</button>' ||
                        '<div role="alert"></div>' ||
                    '</li>' ||
                    '<li><button type="button" class="button cancel-changes" style="--button-bg:rebeccapurple">CANCEL</button></li>' ||
                '</ul>' ||
            '</form>';

            l_footer:=
            '<a class="icon-with-text" href="mailto:' || C.contact_email || '" data-contact_email>' ||
                '<svg class="icon" aria-hidden="true" focusable="false"><use href="#email"></use></svg><span>' || C.contact_email || '</span>' ||
            '</a>' ||
            '<a class="icon-with-text" href="tel:' || C.telephone_number || '" data-telephone_number>' ||
                '<svg class="icon" aria-hidden="true" focusable="false"><use href="#phone"></use></svg><span>' || C.telephone_number || '</span>' ||
            '</a>' ||
            '<a class="icon-with-text" href="tel:' || C.mobile_number || '" data-mobile_number>' ||
                '<svg class="icon" aria-hidden="true" focusable="false"><use href="#mobile"></use></svg><span>' || C.mobile_number || '</span>' ||
            '</a>' ||
            '<a class="icon-with-text" href="https://www.linkedin.com/in/' || C.linkedin_name || '" data-linkedin_name>' ||
                '<svg class="icon" aria-hidden="true" focusable="false"><use href="#linkedin"></use></svg><span>' || CASE WHEN C.linkedin_name IS NOT NULL THEN 'Let''s Connect' END || '</span>' ||
            '</a>' ||
            '<a class="icon-with-text" href="https://www.instagram.com/' || C.instagram_name || '" data-instagram_name>' ||
                '<svg class="icon" aria-hidden="true" focusable="false"><use href="#instagram"></use></svg><span>' || CASE WHEN C.instagram_name IS NOT NULL THEN 'Connect Instagram' END || '</span>' ||
            '</a>';

        END LOOP;

        /* Include SVG symbols in hidden element */
        l_html:=l_html || '<svg width="0" height="0">';
        FOR C IN (SELECT id, viewbox, svg FROM icon WHERE id IN ('email','phone','mobile','linkedin','instagram')) LOOP
            l_html:=l_html || '<symbol id="' || C.id || '" viewBox="' || C.viewbox || '" preserveAspectRatio="">' || C.svg || '</symbol>';
        END LOOP;
        l_html:=l_html || '</svg>';

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('html', l_html);
        apex_json.write('footer', l_footer);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    PROCEDURE updateFooter(pWebsiteId IN website.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_bodytext CLOB:=pBodyText;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        
        FOR C IN (
            SELECT footer_background_color, footer_color, contact_email, telephone_number, mobile_number, linkedin_name, instagram_name
              FROM JSON_TABLE(l_bodytext, '$' 
              COLUMNS(footer_background_color, footer_color, contact_email, telephone_number, mobile_number, linkedin_name, instagram_name))
        ) LOOP
            UPDATE website
               SET footer_background_color=C.footer_background_color, 
                    footer_color=C.footer_color, 
                    contact_email=C.contact_email, 
                    telephone_number=C.telephone_number,
                    mobile_number=C.mobile_number, 
                    linkedin_name=C.linkedin_name, 
                    instagram_name=C.instagram_name,
                    updated_date=current_timestamp
             WHERE id=pWebsiteId;
        END LOOP;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
    ** GET HANDLER FOR SETTING BACKGROUND COLOR AND SHAPES
    ** pContext IDENTIFIES PAGE SECTION, I.E. "header", "main", "footer"
    */
    PROCEDURE getColor(pWebsiteId IN website.id%type, pArticleid IN article.id%type, pContent IN VARCHAR2, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_header LONG;
        l_article CLOB;
        l_footer LONG;
        l_background_color website_article.header_background_color%type;
        l_json JSON_OBJECT_T;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        l_header:='<small>Select background color for ' || pContent || '</small>';

        SELECT CASE pContent WHEN 'header' THEN header_background_color WHEN 'main' THEN main_background_color WHEN 'footer' THEN footer_background_color END
          INTO l_background_color 
          FROM website_article
         WHERE website_id=pWebsiteId
           AND article_id=pArticleid;

        l_article:=
        '<form>' ||
            '<fieldset>' ||
                '<label for="' || pContent || '-background-color">Background Color</label>' ||
                '<input type="color" id="' || pContent || '-background-color" value="' || l_background_color || '">' || 
            '</fieldset>' ||
        '</form>';

        l_footer:='<small>Get shapes from <a href="https://www.shapedivider.app" target="a_blank">Shape Divider App</a></small>';

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        l_json.put('header',l_header);
        l_json.put('article',l_article);
        l_json.put('footer',l_footer);
        apex_util.prn(l_json.to_clob,false);

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
    ** UPDATE BACKGROUND COLOR ACCORDING TO CONTENT
    */
    PROCEDURE updateColor(pWebsiteId IN website.id%type, pArticleid IN article.id%type, pBodytext IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_ddl VARCHar2(500);
        l_json JSON_OBJECT_T;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        FOR C IN (
            SELECT background_color, REPLACE(content,'-','_') content FROM JSON_TABLE(pBodytext, '$' COLUMNS(background_color, content))
        ) LOOP
            l_ddl:='UPDATE website_article SET ' || C.content || '=:B1 WHERE website_id=:B2 AND article_id=:B3';
            EXECUTE IMMEDIATE l_ddl USING C.background_color, pWebsiteId, pArticleid;
        END LOOP;

        l_json:= new JSON_OBJECT_T;
        l_json.put('success',true);
        apex_util.prn(l_json.to_clob,false);

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

end;
/