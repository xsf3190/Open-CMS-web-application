CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_MEDIA" IS
    --
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2;
    --
    PROCEDURE getThumbnails(pArticleId IN article.id%type, pHTML IN OUT NOCOPY CLOB);
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_MEDIA" IS

    gWidthThumbnail CONSTANT INTEGER:=360;

    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RETURN (NULL);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5);

        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);
            l_width INTEGER:=pWidth; 
        BEGIN
            IF (pWidth=0) THEN
                RETURN NULL;
            END IF;
            IF (pDimension IS NOT NULL) THEN
                IF (pDimension=1) THEN
                    RETURN NULL;
                ELSE
                    RETURN ',w_' || ROUND(pWidth*pDimension);
                END IF;
            END IF;
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            IF (l_arr(1)>gWidthThumbnail) THEN
                l_arr(1):=gWidthThumbnail;
                l_arr(2):=(pWidth-gWidthThumbnail)/2;
            END IF;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-gWidthThumbnail) <= ABS(l_arr(l_right)-gWidthThumbnail)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;
            IF (l_arr(l_left)=pWidth) THEN
                RETURN NULL;
            END IF;
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        IF (pResourceType IS NOT NULL) THEN
            l_media_type:=getMediaType(pResourceType, pFormat);
            l_url:='https://res.cloudinary.com/' || pCloudname ||
                    CASE l_media_type
                        WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                        WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                        WHEN 'audio' THEN '/video/upload/q_auto,f_auto,w_' || gWidthThumbnail || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                    END;
        END IF;        
        RETURN (l_url);
    END;

    /*
     **  Build gallery of thumbnail images for a given article
     */
    PROCEDURE getThumbnails(pArticleId IN article.id%type, pHTML IN OUT NOCOPY CLOB)
    IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_url_image VARCHAR2(300);
        l_media_type VARCHAR2(5);
        l_dimensions VARCHAR2(50);
        l_aspect_ratio NUMBER;
        n PLS_INTEGER:=0;
    BEGIN
        FOR C IN (
            SELECT a.id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(a.created_date,'dd-Mon-yyyy') uploaded, 
                   DECODE(a.width,0,gWidthThumbnail,a.width) width, DECODE(a.height,0,gWidthThumbnail,a.height) height, a.bytes, a.format
              FROM asset a
             WHERE a.article_id=pArticleId
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            n:=n+1;
            l_media_type:=getMediaType(C.resource_type, C.format);

            l_url_image:=getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);

            IF (C.width>0 AND C.width*.25>gWidthThumbnail) THEN
                l_dimensions:=gWidthThumbnail || 'xheight:' ||
                              ROUND((C.width-gWidthThumbnail)/2) || 'xheight:';
            ELSE
                l_dimensions:=ROUND(C.width*.25) || 'x' || ROUND(C.height*.25) || ':' || 
                              ROUND(C.width*.625) || 'x' || ROUND(C.height*.625) || ':';
            END IF;

            pHTML:=pHTML || TO_CLOB(
                '<li' || CASE WHEN c.width>C.height THEN ' class="landscape"' END || ' tabindex="0" data-id="' || C.id || '">
                    <img class="fullscreen" data-dimensions="'  || l_dimensions || 
                                C.width || 'x' || C.height || '" data-src="' || l_url_image || '"' || CASE WHEN l_media_type='video' THEN ' style="display:none"' END || '>');

            CASE l_media_type
                WHEN 'video' THEN
                    pHTML:=pHTML || TO_CLOB(
                    '<video controls preload="metadata" poster="' || l_url_image || '">
                        <source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>
                    </video>');

                WHEN 'audio' THEN
                    l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                    pHTML:=pHTML || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>
                    </audio>');

                ELSE NULL;
            END CASE;

            IF (l_media_type='image') THEN
                pHTML:=pHTML || TO_CLOB(
                '<div class="actions">
                    <button type="button" class="copy" title="Copy URL">&#x2398;</button>
                    <button type="button" class="expand" title="Fullscreen">&#9974;</button>
                </div>');
            END IF;

            pHTML:=pHTML || TO_CLOB('</li>');
        END LOOP;
    END;
END;
/