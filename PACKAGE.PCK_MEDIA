CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_MEDIA" IS
    --
    PROCEDURE deleteCldAsset(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodytext IN CLOB, pStatus OUT NUMBER);
    --
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2;
    --
    FUNCTION getImageSrcset(pAssetId IN asset.id%type, pSizes IN VARCHAR2) RETURN VARCHAR2;
    --
    FUNCTION getThumbnails(pArticleId IN article.id%type) RETURN CLOB;
    --
    PROCEDURE getThumbnails(pArticleId IN article.id%type, pDeploy IN BOOLEAN DEFAULT FALSE, pHTML IN OUT NOCOPY CLOB);
    --
    PROCEDURE getCldSignature(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pParamsToSign IN CLOB, pStatus OUT NUMBER);
    --
    PROCEDURE getCldDetails(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pRequest IN VARCHAR2, pStatus OUT NUMBER);
    --
    PROCEDURE updateCldAsset(pWebsiteId IN website.id%type, pArticleId IN article.id%type DEFAULT NULL);
    --
    PROCEDURE uploadCldMetadata(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER);
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_MEDIA" IS

    gWidthThumbnail CONSTANT INTEGER:=360;

    /*
    ** GET AUTHENTICATED USER'S CLOUDINARY DETAILS IN ORDER TO PREPARE UPLOAD WIDGET
    */
    PROCEDURE getCldDetails(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pRequest IN VARCHAR2, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size INTEGER;
        l_video_max_size INTEGER;
        l_google_api_key users.google_api_key%type;
        l_thumbnails CLOB;
        l_heading VARCHAR2(50);
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        IF (pRequest='details') THEN
            pck_api.getCloudinaryData(pUserId=>l_session_data.user_id, pCloudName=>l_cld_cloud_name, pCldApiKey=>l_cld_api_key, pCldImageMaxSize=>l_image_max_size, pCldVideoMaxSize=>l_video_max_size, pGoogleApiKey=>l_google_api_key);
            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('cloudname', l_cld_cloud_name);
            apex_json.write('apikey', l_cld_api_key);
            apex_json.write('maxImageFileSize', l_image_max_size);
            apex_json.write('maxVideoFileSize', l_video_max_size);
            apex_json.write('googleApiKey', l_google_api_key);
            apex_json.close_object;
        ELSE
            l_thumbnails:=pck_media.getThumbnails(pArticleId);
            IF (SUBSTR(l_thumbnails,1,3)='<ul') THEN
                IF (pRequest='copy') THEN 
                    l_heading:='Click image to copy URL';
                ELSIF (pRequest='hero') THEN
                    l_heading:='Click image for header background';
                END IF;
            END IF;

            APEX_JSON.open_object; 
            APEX_JSON.write('success', TRUE);
            APEX_JSON.write('thumbnails', l_thumbnails);
            APEX_JSON.write('heading',l_heading);
            APEX_JSON.close_object;
        END IF;

        pStatus:=200;
        
        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /*
    ** DELETE CLOUDINARY ASSET
    */
    PROCEDURE deleteCldAsset(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodytext IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_asset_id asset.id%type;
        l_bodytext CLOB:=pBodytext;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);
        pck_core.log(l_bodytext);
        pck_core.log('l_session_data.user_id:'||l_session_data.user_id);

        SELECT id INTO l_asset_id FROM asset a, JSON_TABLE(pBodytext, '$' COLUMNS (asset_id)) j
        WHERE a.id=j.asset_id
        AND a.user_id=l_session_data.user_id
        AND a.article_id=pArticleId;

        pck_cms_delete.deleteAsset(l_session_data.user_id, l_asset_id);

        pStatus:=200;
        
        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /*
    ** GENERATE USER SIGNATURE FROM AUTHENTICATED  USER'S CLOUDINARY API SECRET
    */
    PROCEDURE getCldSignature(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pParamsToSign IN CLOB, pStatus OUT NUMBER) IS
        l_params_to_sign clob:=pParamsToSign;
        l_string_to_sign varchar2(2000):=NULL; 
        l_session_data pck_sec.t_session_data;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM users, JSON_TABLE(l_params_to_sign FORMAT JSON, '$' COLUMNS filename_override,headers,source,tags,timestamp,use_filename)
         WHERE users.id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || pck_api.getCloudinaryAPISecret(l_session_data.user_id)), dbms_crypto.HASH_SH1));
        apex_json.close_object;

        pStatus:=200;
        
        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;

    /*
    ** UPDATE EXISTING CLOUDINARY ASSETS CONVERTING TO AVIF FORMAT AND 50% COMPRESSION
    */
    PROCEDURE updateCldAsset(pWebsiteid IN website.id%type, pArticleId IN article.id%type) IS
        TYPE tt_assets IS RECORD(
            domain_name website.domain_name%type, 
            id asset.id%type,
            cld_cloud_name asset.cld_cloud_name%type, 
            public_id asset.public_id%type, 
            format asset.format%type,
            breakpoints asset.breakpoints%type, 
            cld_api_key users.cld_api_key%type, 
            cld_api_secret users.cld_api_secret%type
        );
        TYPE t_assets IS TABLE OF tt_assets INDEX BY PLS_INTEGER;
        l_assets t_assets;

        l_parm_names apex_application_global.VC_ARR2;
        l_parm_values apex_application_global.VC_ARR2;
        l_timestamp NUMBER:=trunc((cast(current_timestamp at time zone 'UTC' as date) - to_date('01-jan-1970','dd-mon-yyyy')) * (86400));
        l_signature VARCHAR2(100);
        l_string_to_sign varchar2(2000);  
        l_clob CLOB;
        l_json JSON_OBJECT_T;
        l_return CLOB;
        n PLS_INTEGER:=0;
    BEGIN
        /*
        ** CLOUDINARY SIGNATURE IS URL QUERY STRING OF ALL PARAMETERS EXCEPT "api_key" ARRANGED ALPHABETICALLY BY NAME
        */
        l_parm_names(1):='eager';
        l_parm_values(1):='f_avif,q_50';
        l_parm_names(3):='timestamp';    
        l_parm_values(3):=l_timestamp;
        l_parm_names(4):='type';
        l_parm_values(4):='upload';
        
        SELECT domain_name, id, cld_cloud_name, public_id, format, breakpoints, cld_api_key, cld_api_secret
          BULK COLLECT INTO l_assets
          FROM
            ( 
                SELECT w.domain_name, a.id, a.cld_cloud_name, a.public_id, a.format, a.breakpoints, u.cld_api_key, u.cld_api_secret 
                  FROM website w, website_article wa, asset a, users u 
                 WHERE w.id=pWebsiteid
                   AND wa.website_id=w.id
                   AND wa.article_id=NVL(pArticleId,wa.article_id)
                   AND a.article_id=wa.article_id
                   AND a.resource_type='image'
                   AND a.format<>'avif'
                   AND u.id=a.user_id
                 UNION ALL
                SELECT w.domain_name, a.id, a.cld_cloud_name, a.public_id, a.format, a.breakpoints, u.cld_api_key, u.cld_api_secret 
                  FROM website w, asset a, users u 
                 WHERE w.id=pWebsiteid
                   AND w.hero_asset_id=a.id
                   AND a.resource_type='image'
                   AND a.format<>'avif'
                   AND u.id=a.user_id
            );

        apex_web_service.clear_request_headers;
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';

        FOR i IN 1..l_assets.COUNT LOOP

            l_parm_names(2):='public_id';
            l_parm_values(2):=l_assets(i).public_id;
            
            l_string_to_sign:=NULL;
            FOR i IN 1..4 LOOP
                l_string_to_sign:=l_string_to_sign || l_parm_names(i) || '=' || l_parm_values(i) || '&';
            END LOOP;
            -- append user's secret to query string
            l_string_to_sign:=RTRIM(l_string_to_sign,'&') || l_assets(i).cld_api_secret;

            l_parm_names(5):='signature';    
            l_parm_values(5):=dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign), dbms_crypto.HASH_SH1);

            l_parm_names(6):='api_key';    
            l_parm_values(6):=l_assets(i).cld_api_key;

            l_json:=new JSON_OBJECT_T;
            FOR i IN 1..l_parm_names.COUNT LOOP
                l_json.put(l_parm_names(i), l_parm_values(i));
            END LOOP;            

            l_return:=apex_web_service.make_rest_request(
                p_url=>'https://api.cloudinary.com/v1_1/' || l_assets(i).cld_cloud_name || '/image/explicit', 
                p_http_method=>'POST', 
                p_body=>l_json.stringify);

            IF (apex_web_service.g_status_code<>200) THEN
                pck_core.log('Got Error ' || apex_web_service.g_status_code || ' converting ' || l_assets(i).public_id || ' for domain ' || l_assets(i).domain_name);
                RAISE_APPLICATION_ERROR(-20000,'Error in avif conversion - see log for details');
                EXIT;
            END IF;

            l_assets(i).format:='avif';

            -- Get responsive vreakpoints and update ASSET table
            
            l_return:=apex_web_service.make_rest_request(
                p_url=>'https://res.cloudinary.com/' || l_assets(i).cld_cloud_name || '/w_auto:breakpoints_200_1920_5_10:json/' || l_assets(i).public_id, 
                p_http_method=>'GET');

            l_assets(i).breakpoints:=LTRIM(RTRIM(SUBSTR(l_return,INSTR(l_return,':')+1),']}'),'[');

            pck_core.log(TO_CHAR(i)|| '/' || TO_CHAR(l_assets.COUNT) ||  ' - Successful conversion to avif of ' || l_assets(i).public_id || ' for domain ' || l_assets(i).domain_name);

        END LOOP;

        FORALL i IN 1..l_assets.COUNT
            UPDATE asset 
               SET format=l_assets(i).format,
                   breakpoints=l_assets(i).breakpoints,
                   updated_date=current_timestamp
             WHERE id=l_assets(i).id;

        pck_core.log('Updated ' || l_assets.COUNT || ' assets');
        
        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error;
    END;

    /*
     **  RELEVANT METADATA OF ALL UPLOADED MEDIA INSERTED INTO ASSETS TABLE
     */       
    PROCEDURE uploadCldMetadata(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_bodytext CLOB:=pBodyText;
        l_url VARCHAR2(200);
        l_response CLOB;
        l_breakpoints asset.breakpoints%type;
        l_article_id asset.article_id%type;
        l_favicon_asset_id website.favicon_asset_id%type;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        FOR C IN (
            SELECT seq, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format
              FROM JSON_TABLE(l_bodytext, '$.images[*]' COLUMNS (seq FOR ORDINALITY, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes,  format))
        ) LOOP
            IF (C.resource_type='image') THEN
                l_url:='https://res.cloudinary.com/' || C.cld_cloud_name || '/w_auto:breakpoints_200_1920_5_10:json/' || C.public_id;
                l_response:=apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'GET');
                l_breakpoints:=LTRIM(RTRIM(SUBSTR(l_response,INSTR(l_response,':')+1),']}'),'[');
            END IF;
        
            INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, breakpoints, display_order, created_date, user_id)
            VALUES (seq_asset.nextval, C.article_id, C.cld_cloud_name, C.resource_type, C.public_id, C.width, C.height, C.bytes, C.format, l_breakpoints, C.seq, current_timestamp, l_session_data.user_id);

            /*
            UPDATE article 
               SET (cover_asset_id, nb_assets) = (SELECT  MIN(id), COUNT(*) FROM asset WHERE article_id=pArticleId)
             WHERE id=pArticleId;
            */
        END LOOP;

        /* 
        ** Set website favicon uploaded SVG file with "favicon' in the name"
        */
        BEGIN
            SELECT NVL(MAX(id),0) INTO l_favicon_asset_id FROM asset WHERE article_id=pArticleId AND format='svg' AND INSTR(public_id,'favicon')>0;
            IF (l_favicon_asset_id>0) THEN
                UPDATE website 
                   SET favicon_asset_id=l_favicon_asset_id
                 WHERE id=pWebsiteId;
            END IF;
        END;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object;

        pStatus:=200;
        
        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;  


    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RETURN (NULL);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5);

        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);
            l_width INTEGER:=pWidth; 
        BEGIN
            IF (pWidth=0) THEN
                RETURN NULL;
            END IF;
            IF (pDimension IS NOT NULL) THEN
                IF (pDimension=1) THEN
                    RETURN NULL;
                ELSE
                    RETURN ',w_' || ROUND(pWidth*pDimension);
                END IF;
            END IF;
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            IF (l_arr(1)>gWidthThumbnail) THEN
                l_arr(1):=gWidthThumbnail;
                l_arr(2):=(pWidth-gWidthThumbnail)/2;
            END IF;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-gWidthThumbnail) <= ABS(l_arr(l_right)-gWidthThumbnail)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;
            IF (l_arr(l_left)=pWidth) THEN
                RETURN NULL;
            END IF;
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        IF (pResourceType IS NOT NULL) THEN
            l_media_type:=getMediaType(pResourceType, pFormat);
            l_url:='https://res.cloudinary.com/' || pCloudname ||
                    CASE l_media_type
                        WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                        WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                        WHEN 'audio' THEN '/video/upload/q_auto,f_auto,w_' || gWidthThumbnail || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                    END;
        END IF;        
        RETURN (l_url);
    END;

    /*
     **  Build gallery of thumbnail images for a given article
     */
    PROCEDURE getThumbnails(pArticleId IN article.id%type, pDeploy IN BOOLEAN DEFAULT FALSE, pHTML IN OUT NOCOPY CLOB)
    IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_url_image VARCHAR2(300);
        l_media_type VARCHAR2(5);
        l_dimensions VARCHAR2(50);
        l_aspect_ratio NUMBER;
        n PLS_INTEGER:=0;
    BEGIN
        FOR C IN (
            SELECT a.id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(a.created_date,'dd-Mon-yyyy') uploaded, 
                   DECODE(a.width,0,gWidthThumbnail,a.width) width, a.height, a.bytes, a.format
              FROM asset a
             WHERE a.article_id=pArticleId
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            n:=n+1;
            l_media_type:=getMediaType(C.resource_type, C.format);

            l_url_image:=getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);

            IF (C.width>0 AND C.width*.25>gWidthThumbnail) THEN
                l_dimensions:=gWidthThumbnail || ':' || ROUND((C.width-gWidthThumbnail)/2) || ':' || C.width;
            ELSE
                l_dimensions:=ROUND(C.width*.25) || ':' || ROUND(C.width*.625) || ':' || C.width;
            END IF;

            pHTML:=pHTML || TO_CLOB(
                '<li' || CASE WHEN c.width>C.height THEN ' class="landscape"' END || ' tabindex="0" data-id="' || C.id || '">
                    <img class="fullscreen" data-dimensions="'  || l_dimensions || '" data-src="' || l_url_image || '"' || CASE WHEN l_media_type='video' THEN ' style="display:none"' END || '>');

            CASE l_media_type
                WHEN 'video' THEN
                    pHTML:=pHTML || TO_CLOB(
                    '<video controls preload="metadata" poster="' || l_url_image || '">
                        <source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>
                    </video>');

                WHEN 'audio' THEN
                    l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                    pHTML:=pHTML || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>
                    </audio>');
                ELSE NULL;
            END CASE;

            IF (NOT pDeploy) THEN
                pHTML:=pHTML || TO_CLOB(
                '<button type="button" class="media-options" title="Edit Media">&#128397;</button>');
            END IF;

            pHTML:=pHTML || TO_CLOB('</li>');
        END LOOP;
    END;

    /*
     **  Build list of thumbnail images for a given article
     */
    FUNCTION getThumbnails(pArticleId IN article.id%type) RETURN CLOB
    IS
        l_clob CLOB;
        l_url_image VARCHAR2(300);
    BEGIN
        l_clob:='<ul role="list" class="carousel">';

        FOR C IN (
            SELECT id, cld_cloud_name, resource_type, public_id, width, height, format
              FROM asset
             WHERE article_id=pArticleId
               AND NVL(format,'N/A')<>'clt'
             ORDER BY display_order )
        LOOP
            l_clob:=l_clob ||
                '<li class="overlay" data-id="' || C.id || '">';

            l_url_image:=
                '<img draggable="false" src="https://res.cloudinary.com/' || C.cld_cloud_name || '/' ||
                    CASE C.resource_type
                        WHEN 'image' THEN 'w_200/' || C.public_id
                        WHEN 'video' THEN 'video/upload/q_auto,f_auto,w_200/' || C.public_id || '.avif'
                        WHEN 'audio' THEN 'video/upload/q_auto,f_auto,w_200/fl_waveform/' || C.public_id || '.png'
                    END ||
                '">';

            IF (C.resource_type='image') THEN
                l_clob:=l_clob || l_url_image;
            ELSIF (C.resource_type='video') THEN
                l_clob:=l_clob || 
                '<video draggable="false" controls preload="metadata" poster="' || l_url_image || '">' ||
                    '<source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>' ||
                    '<source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>' ||
                '</video>';
            ELSIF (C.resource_type='audio') THEN
                l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                l_clob:=l_clob || 
                '<audio draggable="false" preload="metadata" controls>' ||
                    '<source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>' ||
                    '<source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>' ||
                    '<source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>' ||
                    '<source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>' ||
                '</audio>';
            END IF;

            l_clob:=l_clob || 
                '<button type="button" class="copy-url">⮺</button>' ||
            '</li>';
        END LOOP;

        l_clob:=l_clob || 
        '</ul>';

        RETURN (l_clob);
    END;

    /*
     **  Build gallery of thumbnail images for a given article
     */
    FUNCTION getImageSrcset(pAssetId IN asset.id%type, pSizes IN VARCHAR2) RETURN VARCHAR2
    IS
        l_img_html VARCHAR2(1000);
        l_img_src VARCHAR2(200);
        n PLS_INTEGER:=0;
    BEGIN
        FOR C IN (
            SELECT cld_cloud_name, resource_type, public_id, width, height, breakpoints, alt_text
              FROM asset
             WHERE id=pAssetId )
        LOOP
            l_img_html:=
            '<img width="' || C.width || '" height="' || C.height || '" draggable="false" id="' || pAssetId || '" style="margin-inline:auto;border-radius:initial"';
            
            l_img_html:=l_img_html || 
            ' sizes=';

            IF (pSizes='any') THEN
                l_img_html:=l_img_html || '"any"';
            ELSE
                l_img_html:=l_img_html || '"(max-width: ' || LEAST(C.width,1920) || 'px) 100vw, ' || LEAST(C.width,1920) || 'px"';
            END IF;

            FOR C1 IN (SELECT column_value AS breakpoint FROM TABLE(apex_string.split(C.breakpoints,','))) LOOP
                l_img_src:='https://res.cloudinary.com/' || C.cld_cloud_name || '/w_' || C1.breakpoint || '/' || C.public_id;
                n:=n+1;
                IF (n=1) THEN
                    l_img_html:=l_img_html || 
                    ' src="' || l_img_src || '"' ||
                    ' srcset="';
                END IF;
                l_img_html:=l_img_html || l_img_src || ' ' || C1.breakpoint || 'w,';
            END LOOP;
            l_img_html:=RTRIM(l_img_html,',') || '"';

            l_img_html:=l_img_html ||
            ' alt="' || C.alt_text || '">'; 

        END LOOP;

        RETURN (l_img_html);
    END;

END;
/