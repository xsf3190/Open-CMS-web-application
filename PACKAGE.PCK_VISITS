CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_VISITS" AS
    --
    PROCEDURE getPerformance(pId IN VARCHAR2);
    --
    PROCEDURE getVisits(pId IN VARCHAR2, pEmail IN BOOLEAN DEFAULT FALSE);
    --
    PROCEDURE uploadIpLookup;
    --
    PROCEDURE uploadPageHits(pWebsiteId IN website.id%type DEFAULT NULL);
    --
    PROCEDURE uploadPageVisit(pBodyText IN CLOB);
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_VISITS" AS

    /*
     **  Procedure invoked by POST to REST end point "page-visit".
     **  Upload page visit details sent by javascript from deployed website pages
     */
    PROCEDURE uploadPageVisit(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address website_article_cwv.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        l_user_agent website_article_cwv.user_agent%type:=SUBSTR(OWA_UTIL.get_cgi_env('HTTP_USER_AGENT'),1,255);
        l_this_referrer VARCHAR2(50):=LOWER(sys_context('userenv','db_name'));
        l_browser website_article_cwv.browser%type;
    BEGIN
        l_browser:=REGEXP_SUBSTR(l_user_agent,'*(Chrome\/\d*)');
        IF (l_browser IS NULL) THEN
            l_browser:=REGEXP_SUBSTR(l_user_agent,'*(Version\/\d*.\d* Safari)');
            IF (l_browser IS NOT NULL) THEN
                l_browser:='Safari ' || REGEXP_SUBSTR(l_browser,'\d+(\.\d+)?');
            ELSE
                l_browser:=REGEXP_SUBSTR(l_user_agent,'*(Firefox\/\d*)');
            END IF;
        END IF;

        INSERT INTO website_article_cwv (
            website_id, article_id, seq, referrer, ip_address, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, 
            user_agent, browser, mobile, connection, url, website_loaded, duration_visible)
        SELECT website_id, article_id, seq, CASE WHEN referrer LIKE '%' || l_this_referrer || '%' THEN l_this_referrer ELSE referrer END, l_ip_address, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, 
                l_user_agent, l_browser, mobile, connection, url, website_loaded, duration_visible
          FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' 
            COLUMNS (website_id, article_id, seq, referrer, LCP, LCP_rating, CLS, CLS_rating, INP, INP_rating, 
                    browser, mobile, connection, url, website_loaded, duration_visible));  

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Keep IP_LOOKUP table up to date
     */
    PROCEDURE uploadIpLookup IS 
        l_clob clob;
        TYPE t_ip_lookup IS TABLE OF ip_lookup%rowtype;
        l_ip_lookup t_ip_lookup:=t_ip_lookup();
        l_ip_count VARCHAR2(10);
    BEGIN
        FOR C IN (SELECT DISTINCT ip_address FROM page_hit MINUS SELECT ip FROM ip_lookup )
        LOOP
            pck_api.callIpdataAPI(null,C.ip_address,'GET',l_clob);
            FOR C1 IN (SELECT city,country_code,postal,count FROM JSON_TABLE(l_clob, '$' COLUMNS(city,country_code,postal,count)))
            LOOP
                l_ip_lookup.EXTEND;
                l_ip_lookup(l_ip_lookup.LAST).ip:=C.ip_address;
                l_ip_lookup(l_ip_lookup.LAST).city:=C1.city;
                l_ip_lookup(l_ip_lookup.LAST).country_code:=C1.country_code;
                l_ip_lookup(l_ip_lookup.LAST).postal:=C1.postal;
                l_ip_count:=C1.count;
            END LOOP;
        END LOOP;
        IF (l_ip_count IS NOT NULL) THEN
            pck_core.log('IPDATA API COUNT IS ' || l_ip_count);
        END IF;
        FORALL i IN l_ip_lookup.FIRST..l_ip_lookup.LAST
            INSERT INTO ip_lookup VALUES l_ip_lookup(i);
    END;

    /*
     **  Google core web vital and website visit duration data is uploaded from client sessions to table website_article_cwv.
     **  This procedure aggregates the data into the page_hit table.
     **  Each page_hit row represents one visit from one ip address to a web page in a discrete client session.
     */
    PROCEDURE uploadPageHits(pWebsiteId IN website.id%type) IS
        n PLS_INTEGER;
    BEGIN
        DELETE website_article_cwv cwv WHERE cwv.website_id=pWebsiteId AND NOT EXISTS (SELECT null FROM article a WHERE a.id=cwv.article_id);
        n:=SQL%ROWCOUNT;
        IF (n>0) THEN
            pck_core.log('Discarded '||n||' rows from website_article_cwv referencing articles deleted since last deployment.');
        END IF;

        MERGE INTO page_hit t
        USING (
            SElECT 
                website_id, article_id, website_loaded, ip_address, apex_string_util.get_domain(referrer) referrer, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, NVL(duration_visible,0) duration_visible, user_agent, browser, connection, url, mobile,
                to_timestamp('1970-01-01','yyyy-mm-dd') + numtodsinterval(website_loaded,'second') visit_date
            FROM
            (
                SELECT 
                    website_id, article_id, ip_address, website_loaded,  
                    MAX(CASE WHEN INSTR(referrer,url)=0 THEN referrer END) referrer, 
                    MAX(lcp) lcp, MAX(lcp_rating) lcp_rating, MAX(cls) cls, MAX(cls_rating) cls_rating, MAX(inp) inp, MAX(inp_rating) inp_rating, 
                    SUM(duration_visible) duration_visible, MAX(user_agent) user_agent, MAX(browser) browser, MAX(connection) connection, MAX(url) url, MAX(mobile) mobile
                FROM website_article_cwv 
                WHERE website_id=pWebsiteId
                GROUP BY website_id, article_id, ip_address, website_loaded
            )
        ) s
        ON (t.website_id=s.website_id AND 
            t.article_id=s.article_id AND 
            t.ip_address=s.ip_address AND 
            t.website_loaded=s.website_loaded)
        WHEN NOT MATCHED THEN
            INSERT (website_id, article_id, ip_address, website_loaded, visit_date, referrer, duration_visible, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, user_agent, browser, connection, url, mobile)    
            VALUES (s.website_id, s.article_id, s.ip_address, s.website_loaded, s.visit_date, s.referrer, s.duration_visible, s.lcp, s.lcp_rating, s.cls, s.cls_rating, s.inp, s.inp_rating, s.user_agent, s.browser, s.connection, s.url, s.mobile)
        WHEN MATCHED THEN
            UPDATE SET t.updated_date=current_timestamp,
                t.duration_visible=t.duration_visible+s.duration_visible,
                t.lcp=CASE WHEN t.lcp IS NOT NULL AND s.lcp IS NOT NULL THEN GREATEST(s.lcp,t.lcp) ELSE COALESCE(s.lcp,t.lcp) END,
                t.lcp_rating=CASE WHEN t.lcp_rating IS NOT NULL AND s.lcp_rating IS NOT NULL THEN GREATEST(s.lcp_rating,t.lcp_rating) ELSE COALESCE(s.lcp_rating,t.lcp_rating) END,
                t.cls=CASE WHEN t.cls IS NOT NULL AND s.cls IS NOT NULL THEN GREATEST(s.cls,t.cls) ELSE COALESCE(s.cls,t.cls) END,
                t.cls_rating=CASE WHEN t.cls_rating IS NOT NULL AND s.cls_rating IS NOT NULL THEN GREATEST(s.cls_rating,t.cls_rating) ELSE COALESCE(s.cls_rating,t.cls_rating) END,
                t.inp=CASE WHEN t.inp IS NOT NULL AND s.inp IS NOT NULL THEN GREATEST(s.inp,t.inp) ELSE COALESCE(s.inp,t.inp) END,
                t.inp_rating=CASE WHEN t.inp_rating IS NOT NULL AND s.inp_rating IS NOT NULL THEN GREATEST(s.inp_rating,t.inp_rating) ELSE COALESCE(s.inp_rating,t.inp_rating) END   
                ;
        n:=SQL%ROWCOUNT;
        IF (n>0) THEN
            pck_core.log('Merged '||n||' rows into page_hit table');
        END IF;

        DELETE website_article_cwv WHERE website_id=pWebsiteId;
        n:=SQL%ROWCOUNT;
        IF (n>0) THEN
            pck_core.log('Deleted '||n||' rows merged from website_article_cwv table');
        END IF;

        uploadIpLookup;
    END;

    FUNCTION cwvRating(pLCP IN VARCHAR2 DEFAULT NULL, pCLS IN VARCHAR2 DEFAULT NULL, pINP IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
        l_cwv VARCHAR2(200);
    BEGIN
        IF (pLCP IS NOT NULL) THEN
            l_cwv:=l_cwv || '<mark class="' || pLCP || '">LCP</mark>';
        ELSE
            l_cwv:=l_cwv || '<mark></mark>';
        END IF;
        IF (pCLS IS NOT NULL) THEN
            l_cwv:=l_cwv || '<mark class="' || pCLS || '">CLS</mark>';
        ELSE
            l_cwv:=l_cwv || '<mark></mark>';
        END IF;
        IF (pINP IS NOT NULL) THEN
            l_cwv:=l_cwv || '<mark class="' || pINP || '">INP</mark>';
        ELSE
            l_cwv:=l_cwv || '<mark></mark>';
        END IF;
        RETURN(l_cwv);
    END;

    /*
    ** Get overall Google Core Web Vital performance rating if available
    */
    FUNCTION cwvRatingOverall(pLCP IN VARCHAR2 DEFAULT NULL, pCLS IN VARCHAR2 DEFAULT NULL, pINP IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
        l_cwv page_hit.lcp_rating%type;
    BEGIN
        IF (COALESCE(pLCP,pCLS,pINP) IS NULL) THEN
            RETURN('-');
        END IF;

        IF ((pLCP='good' OR pLCP IS NULL) AND (pCLS='good' OR pCLS IS NULL) AND (pINP='good' OR pINP IS NULL)) THEN
           l_cwv:='good';
        ELSIF ((pLCP='poor' OR pLCP IS NULL) OR (pCLS='poor' OR pCLS IS NULL) OR (pINP='poor' OR pINP IS NULL)) THEN
            l_cwv:='poor';
        ELSE
            l_cwv:='needs improvement';
        END IF;

        RETURN('<span class="' || REPLACE(l_cwv,' ','-') || '">' || UPPER(l_cwv) || '</span>');
    END;

    
    FUNCTION sql2Html (pSql IN VARCHAR2, pBindVar IN NUMBER) RETURN CLOB
    IS
        l_cur       NUMBER:=dbms_sql.open_cursor;
        l_execute   NUMBER;
        l_col_cnt    INTEGER;
        rec_tab      DBMS_SQL.DESC_TAB;
        l_flag       NUMBER;
        l_varchar2   VARCHAR2 (4000);
        l_date       DATE;
        l_number     NUMBER;
        l_html       CLOB;
    BEGIN
        dbms_sql.parse(l_cur,pSql,dbms_sql.native);

        dbms_sql.bind_variable(l_cur,':B1',pBindVar);

        -- define columns
        
        dbms_sql.describe_columns (l_cur, l_col_cnt, rec_tab);
        FOR i IN 1 .. l_col_cnt
        LOOP
            CASE rec_tab (i).col_type
                 WHEN 1 THEN
                    dbms_sql.define_column (l_cur,i,l_varchar2,2000);
                 WHEN 2 THEN
                    dbms_sql.define_column (l_cur, i, l_number);
                 WHEN 12 THEN
                    dbms_sql.define_column (l_cur, i, l_date);
                 ELSE
                    dbms_sql.define_column (l_cur,i,l_varchar2,2000);
              END CASE;
        END LOOP;

        l_html:='<table role="presentation">';
        
       -- Print column names of dynamic sql
       l_html:=l_html || '<thead><tr>';
       FOR i IN 1 .. l_col_cnt
       LOOP
          l_html:=l_html || '<th>' || rec_tab (i).col_name || '</th>';
       END LOOP;
       l_html:=l_html || '</tr></thead>';


        l_execute:=dbms_sql.execute(l_cur);
        
       -- Print data fetched by query
       l_html:=l_html || '<tbody>';
       LOOP
          l_flag := dbms_sql.fetch_rows (l_cur);
          EXIT WHEN l_flag = 0;
          
          l_html:=l_html || '<tr>';
          FOR i IN 1 .. l_col_cnt
          LOOP
             CASE rec_tab(i).col_type
                WHEN 1 THEN
                   dbms_sql.column_value (l_cur, i, l_varchar2);
                   l_html:=l_html || '<td>' || l_varchar2 || '</td>';
                WHEN 2 THEN
                   dbms_sql.column_value (l_cur, i, l_number);
                   l_html:=l_html || '<td>' || l_number || '</td>';
                WHEN 12 THEN
                   dbms_sql.column_value (l_cur, i, l_date);
                   l_html:=l_html || '<td>' || TO_CHAR (l_date, 'DD/MM/YYYY HH24:MI:SS') || '</td>';
                ELSE
                   l_html:=l_html || '<td>' || l_varchar2 || '</td>';
             END CASE;
          END LOOP;
          l_html:=l_html || '</tr>';
       END LOOP;
       l_html:=l_html || '</tbody></table>';

       dbms_sql.close_cursor (l_cur);

       RETURN (l_html);
    END;

    /*
    **  EMAIL WEBSITE VISIT ANALYSIS
    */
    PROCEDURE sendmail(pWebsiteId IN website.id%type, pContent IN OUT NOCOPY CLOB) IS
        l_body CLOB:='To view the content of this message, please use an HTML enabled mail client.'||utl_tcp.crlf;
        l_body_html CLOB:=
        '<!DOCTYPE html>
         <html>
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <meta name="format-detection" content="telephone=no">
                <meta name="format-detection" content="date=no">
                <meta name="format-detection" content="address=no">
                <meta name="format-detection" content="email=no">
                <style type="text/css">
                    body {
                        font-family:Georgia,sans-serif;
                        font-size:1rem;
                    }
                    td,
                    th {
                        border: 1px solid rgb(190, 190, 190);
                        padding: 0.5rem;
                    }
                    table {
                        border-collapse: collapse;
                        border: 2px solid rgb(200, 200, 200);
                        width: 100%;
                    }
                    table + table {
                        margin-top: 1rem;
                    }
                    thead {
                        background-color: #d7d9f2;
                    }
                    td.centered {
                        text-align: center;
                        font-weight: 900;
                    }
                    td.centered > span {
                        display: inline-block;
                        padding: 4px;
                    }
                    .good {
                        color: #000;
                        background-color: #0cce6b;
                    }
                    .needs-improvement {
                        color: #000;
                        background-color: #ffa401;
                    }
                    .poor {
                        color: #000;
                        background-color: #ff4e41;
                    }
                </style>
            </head>
        <body>';
    BEGIN
        FOR C IN (SELECT contact_email, domain_name FROM website WHERE id=pWebsiteId) LOOP
            pck_core.log('Sending website analysis for ' || C.domain_name || ' by email to '|| C.contact_email);
            apex_mail.send(
                p_to=>C.contact_email, 
                p_from=>'visits@'||C.domain_name, 
                p_body=>l_body, 
                p_body_html=>l_body_html || pContent || '</body></html>',
                p_subj=>'Website Analysis - ' || C.domain_name);

            apex_mail.push_queue(); 
        END LOOP;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    FUNCTION cwv(pLcp IN NUMBER) RETURN VARCHAR2 IS 
        l_html LONG;
        l_margin NUMBER;
        l_score VARCHAR2(10);
    BEGIN
    /* LCP reported in milliseconds - make appropriate calculation for % within 0 -> 6.5 seconds*/ 
        l_margin:=LEAST(ROUND(pLcp/6500*100,1),100);
        l_score:=TO_CHAR(ROUND(pLcp/1000,1),'0.0') || ' sec';

        l_html:=
        '<div class="cwv">
            <div class="lcp">
              <span></span>
              <span>2.5 sec</span>
              <span>4 sec</span>
              <span class="good">GOOD</span>
              <span class="needs-improvement">NEEDS<br>IMPROVEMENT</span>
              <span class="poor">POOR</span>
            </div>
            <div style="margin-inline-start:' || l_margin || '%;font-size:160%">&#8593;</div>
            <div class="score">Your overall score at 95 percentile is ' || l_score || ' sec</div>
        </div>';
        RETuRN (l_html);
    END;

    /*
    **  Return log of all visits to website
    */
    PROCEDURE getVisits(pId IN VARCHAR2, pEmail IN BOOLEAN DEFAULT FALSE) IS
        l_website_id website.id%type;
        l_netlify_site_id website.netlify_site_id%type;
        l_url page_hit.url%type;
        l_content CLOB;
        l_rating VARCHAR2(100);
        l_sql LONG;
        l_session_data pck_core.session_data_rt;
        n PLS_INTEGER;
    BEGIN
        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_netlify_site_id:=SUBSTR(pId,INSTR(pId,',')+1);

        SELECT CASE WHEN netlify_site_id=l_netlify_site_id THEN REPLACE(domain_name,'.','-') || '.netlify.app' ELSE domain_name END
          INTO l_url
          FROM website
         WHERE id=l_website_id;

        pck_visits.uploadPageHits(l_website_id);

        FOR C IN (
            SELECT COUNT(*) nb_hit, COUNT(DISTINCT ip_address) nb_distinct_ip, MIN(visit_date) first_hit, MAX(visit_date) last_hit
              FROM page_hit
             WHERE website_id=l_website_id
               AND url=l_url
        ) LOOP
            l_content:=
            '<p><strong>' || C.nb_hit || '</strong> visits from <strong>' || 
                             C.nb_distinct_ip || '</strong> distinct IP since <strong>' || 
                             TO_CHAR(C.first_hit,'dd Mon yyyy') || 
            '</strong></p>';
        END LOOP;

        l_content:=l_content ||
        '<table role="presentation">
            <thead>
                <tr>
                    <th rowspan="2">Website Visit</th>
                    <th>Location</th>
                    <th rowspan="2">Viewing time</th>
                    <th>Browser</th>
                    <th rowspan="2">Performance</th>
                </tr>
                <tr>
                    <th>Referrer</th>
                    <th>Connection</th>
                </tr>
            </thead>
            <tbody>';

        FOR C IN (
            WITH website_hits as 
            (
                SELECT p.website_id, p.ip_address, p.visit_date, 
                        MAX(p.referrer) referrer, 
                        MAX(p.lcp_rating) lcp_rating, MAX(p.cls_rating) cls_rating, MAX(p.inp_rating) inp_rating, 
                        SUM(p.duration_visible) duration_visible, MAX(p.browser) browser, MAX(p.connection) connection, MAX(p.mobile) mobile
                  FROM website w, page_hit p
                 WHERE w.id=l_website_id
                   AND p.website_id=w.id
                   AND p.url=l_url
                 GROUP BY p.website_id, p.ip_address, p.visit_date
            )
            SELECT wh.visit_date, wh.referrer, ip.city||','||ip.country_code||','||ip.postal location, 
                    wh.browser, wh.connection, wh.mobile, wh.duration_visible, wh.lcp_rating, wh.cls_rating, wh.inp_rating
              FROM website_hits wh, ip_lookup ip
             WHERE ip.ip=wh.ip_address
             ORDER BY wh.visit_date DESC
        ) 
        LOOP
            l_rating:=cwvRatingOverall(C.lcp_rating, C.cls_rating, C.inp_rating);
            l_content:=l_content ||
                '<tr>
                    <td rowspan="2">' || TO_CHAR(C.visit_date, 'dd Mon yyyy fmhh24:fmmi')  || '</td>
                    <td>' || LTRIM(RTRIM(C.location,','),',') || '</td>
                    <td rowspan="2">' || CASE WHEN C.duration_visible IS NOT NULL THEN TO_CHAR(C.duration_visible) || ' seconds' END || '</td>
                    <td>' || C.browser || '</td>
                    <td  rowspan="2" class="centered">' || l_rating || '</td>
                </tr>
                <tr>
                    <td>' || NVL(REPLACE(C.referrer,'.','&#173;.'),'-') || '</td>
                    <td>' || C.connection || CASE WHEN C.mobile='true' THEN ' (Mob)' END || '</td>
                </tr>';
        END LOOP;
        l_content:=l_content || '</tbody></table>';

        /* 
        ** Create page analysis report if multi-page website
        */
        n:=0;
        l_sql:='SELECT TO_CHAR(visit_date,''dd Mon yyyy fmhh24:fmmi'') "Page Views",';
        FOR C1 IN (SELECT navigation_label FROM website_article WHERE website_id=l_website_id ORDER BY display_order) LOOP
            n:=n+1;
            l_sql:=l_sql || 'MAX(DECODE(navigation_label,''' || C1.navigation_label || ''',duration_visible)) "' || C1.navigation_label || '",';
        END LOOP;
        IF (n>1) THEN
            l_sql:=RTRIM(l_sql,',') ||
            'FROM 
                (
                SELECT ph.visit_date, ph.ip_address, wa.navigation_label, SUM(ph.duration_visible) duration_visible
                  FROM website w, page_hit ph, website_article wa
                 WHERE w.id=:B1
                   AND ph.website_id=w.id
                   AND ph.url=CASE WHEN w.netlify_site_id_custom IS NULL THEN REPLACE(w.domain_name,''.'',''-'') || ''.netlify.app'' ELSE w.domain_name END
                   AND ph.article_id=wa.article_id
                 GROUP BY ph.visit_date, ph.ip_address, wa.navigation_label
                )
             GROUP  BY visit_date
             ORDER BY visit_date DESC';

            l_content:=l_content || sql2Html(l_sql, l_website_id);
        END IF;

        IF (pEmail) THEN
            sendmail(l_website_id, l_content);
        ELSE
            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('content', l_content);
            apex_json.close_object;
        END IF;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    /*
    **  Return log of all performance metrics captured for website
    */
    PROCEDURE getPerformance(pId IN VARCHAR2) IS
        l_website_id website.id%type;
        l_netlify_site_id website.netlify_site_id%type;
        l_url page_hit.url%type;
        l_content CLOB;
        l_session_data pck_core.session_data_rt;
        n PLS_INTEGER;

        FUNCTION cwv(pMetric IN VARCHAR2, pScore IN NUMBER) RETURN VARCHAR2 IS
            l_margin NUMBER;
            l_score VARCHAR2(10);
        BEGIN
            CASE pMetric
                WHEN 'lcp' THEN
                    /* LCP reported in milliseconds - make appropriate calculation for % within 0 -> 6.5 seconds*/ 
                    l_margin:=LEAST(ROUND(pScore/6500*100,1),100);
                    l_score:=TO_CHAR(ROUND(pScore/1000,1),'0.0') || ' sec';

                    RETURN (
                    '<div class="cwv">
                        <div class="lcp">
                          <span></span>
                          <span>2.5 sec</span>
                          <span>4 sec</span>
                          <span class="good">GOOD</span>
                          <span class="needs-improvement">NEEDS<br>IMPROVEMENT</span>
                          <span class="poor">POOR</span>
                        </div>
                        <div style="margin-inline-start:' || l_margin || '%;font-size:160%">&#8593;</div>
                        <div class="score">Your overall score at 95 percentile is ' || l_score || '</div>
                    </div>');

                WHEN 'cls' THEN
                    /* LCP reported in milliseconds - make appropriate calculation for % within 0 -> 6.5 seconds*/ 
                    l_margin:=LEAST(ROUND(pScore/0.4*100,1),100);
                    l_score:=TO_CHAR(pScore);

                    RETURN (
                    '<div class="cwv">
                        <div class="lcp">
                          <span></span>
                          <span>0.1</span>
                          <span>0.25</span>
                          <span class="good">GOOD</span>
                          <span class="needs-improvement">NEEDS<br>IMPROVEMENT</span>
                          <span class="poor">POOR</span>
                        </div>
                        <div style="margin-inline-start:' || l_margin || '%;font-size:160%">&#8593;</div>
                        <div class="score">Your overall score at 95 percentile is ' || l_score || '</div>
                    </div>');

                WHEN 'inp' THEN
                    /* LCP reported in milliseconds - make appropriate calculation for % within 0 -> 6.5 seconds*/ 
                    l_margin:=LEAST(ROUND(pScore/700*100,1),100);
                    l_score:=TO_CHAR(pScore);

                    RETURN (
                    '<div class="cwv">
                        <div class="lcp">
                          <span></span>
                          <span>200 ms</span>
                          <span>500 ms</span>
                          <span class="good">GOOD</span>
                          <span class="needs-improvement">NEEDS<br>IMPROVEMENT</span>
                          <span class="poor">POOR</span>
                        </div>
                        <div style="margin-inline-start:' || l_margin || '%;font-size:160%">&#8593;</div>
                        <div class="score">Your overall score at 95 percentile is ' || l_score || ' ms</div>
                    </div>');
            END CASE;
        END;

    BEGIN
        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_netlify_site_id:=SUBSTR(pId,INSTR(pId,',')+1);

        SELECT CASE WHEN netlify_site_id=l_netlify_site_id THEN REPLACE(domain_name,'.','-') || '.netlify.app' ELSE domain_name END
          INTO l_url
          FROM website
         WHERE id=l_website_id;

        pck_visits.uploadPageHits(l_website_id);

        FOR C IN (
            SELECT COUNT(*) nb_hit, COUNT(DISTINCT ip_address) nb_distinct_ip, MIN(visit_date) first_hit, MAX(visit_date) last_hit,
                    APPROX_PERCENTILE(0.95 DETERMINISTIC) WITHIN GROUP (ORDER BY lcp) lcp,
                    APPROX_PERCENTILE(0.95 DETERMINISTIC) WITHIN GROUP (ORDER BY cls) cls,
                    APPROX_PERCENTILE(0.95 DETERMINISTIC) WITHIN GROUP (ORDER BY inp) inp,
                    ROUND(AVG(duration_visible)) avg_viewing_time
              FROM page_hit
             WHERE website_id=l_website_id
               AND url=l_url
        ) LOOP
            l_content:=
            '<p>Performance ratings are the <a href="https://developers.google.com/search/docs/appearance/core-web-vitals" target="_blank">Core Web Vitals</a>
                used by Google in its ranking algorithm.</p>
            <p>Metrics are automatically captured for each page visited on the website.</p>
            <p>Based on <strong>' || C.nb_hit || '</strong> visits from <strong>' || C.nb_distinct_ip || '</strong> distinct IP since <strong>' || TO_CHAR(C.first_hit,'dd Mon yyyy') || 
            '</strong></p>';
            l_content:=l_content || 
            '<h2>Largest Contentful Paint (LCP)</h2>' || cwv('lcp', C.lcp) ||
            '<h2>Cumulative Layout Shift (CLS)</h2>' || cwv('cls', C.cls) ||
            '<h2>Interaction to Next Paint (INP)</h2>' || cwv('inp', C.inp);
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

END;
/