CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_VISITS" AS
    --
    PROCEDURE getVisits(pId IN VARCHAR2);
    --
    PROCEDURE uploadIpLookup;
    --
    PROCEDURE uploadPageHits(pWebsiteId IN website.id%type DEFAULT NULL);
    --
    PROCEDURE uploadPageVisit(pBodyText IN CLOB);
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_VISITS" AS

    /*
     **  Procedure invoked by POST to REST end point "page-visit".
     **  Upload page visit details sent by javascript from deployed website pages
     */
    PROCEDURE uploadPageVisit(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address website_article_cwv.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
    BEGIN
        INSERT INTO website_article_cwv (
            website_id, article_id, seq, referrer, ip_address, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, fid, fid_rating, 
            browser, mobile, connection, url, website_loaded, duration_visible)
        SELECT website_id, article_id, seq, referrer, l_ip_address, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, fid, fid_rating, 
                browser, mobile, connection, url, website_loaded, duration_visible
          FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' 
            COLUMNS (website_id, article_id, seq, referrer, LCP, LCP_rating, CLS, CLS_rating, INP, INP_rating, FID, FID_rating, 
                    browser, mobile, connection, url, website_loaded, duration_visible));  

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Keep IP_LOOKUP table up to date
     */
    PROCEDURE uploadIpLookup IS 
        l_clob clob;
        TYPE t_ip_lookup IS TABLE OF ip_lookup%rowtype;
        l_ip_lookup t_ip_lookup:=t_ip_lookup();
        l_ip_count VARCHAR2(10);
    BEGIN
        FOR C IN (SELECT DISTINCT ip_address FROM page_hit MINUS SELECT ip FROM ip_lookup )
        LOOP
            pck_api.callIpdataAPI(null,C.ip_address,'GET',l_clob);
            FOR C1 IN (SELECT city,country_code,postal,count FROM JSON_TABLE(l_clob, '$' COLUMNS(city,country_code,postal,count)))
            LOOP
                l_ip_lookup.EXTEND;
                l_ip_lookup(l_ip_lookup.LAST).ip:=C.ip_address;
                l_ip_lookup(l_ip_lookup.LAST).city:=C1.city;
                l_ip_lookup(l_ip_lookup.LAST).country_code:=C1.country_code;
                l_ip_lookup(l_ip_lookup.LAST).postal:=C1.postal;
                l_ip_count:=C1.count;
            END LOOP;
        END LOOP;
        IF (l_ip_count IS NOT NULL) THEN
            pck_core.log('IPDATA API COUNT IS ' || l_ip_count);
        END IF;
        FORALL i IN l_ip_lookup.FIRST..l_ip_lookup.LAST
            INSERT INTO ip_lookup VALUES l_ip_lookup(i);
    END;

    /*
     **  Google core web vital and website visit duration data is uploaded from client sessions to table website_article_cwv.
     **  This procedure aggregates the data into the page_hit table.
     **  Each page_hit row represents one visit from one ip address to a web page in a discrete client session.
     */
    PROCEDURE uploadPageHits(pWebsiteId IN website.id%type) IS
        n PLS_INTEGER;
    BEGIN
        MERGE INTO page_hit t
        USING (
            SElECT 
                website_id, article_id, website_loaded, ip_address, referrer, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, fid, fid_rating, NVL(duration_visible,0) duration_visible, browser, connection, url, mobile,
                to_timestamp('1970-01-01','yyyy-mm-dd') + numtodsinterval(website_loaded,'second') visit_date
            FROM
            (
                SELECT 
                    website_id, article_id, ip_address, website_loaded,  
                    MAX(CASE WHEN INSTR(referrer,url)=0 THEN referrer END) referrer, 
                    MAX(lcp) lcp, MAX(lcp_rating) lcp_rating, MAX(cls) cls, MAX(cls_rating) cls_rating, MAX(inp) inp, MAX(inp_rating) inp_rating, MAX(fid) fid, MAX(fid_rating) fid_rating, 
                    SUM(duration_visible) duration_visible, MAX(browser) browser, MAX(connection) connection, MAX(url) url, MAX(mobile) mobile
                FROM website_article_cwv 
                WHERE website_id=NVL(pWebsiteId,website_id)
                GROUP BY website_id, article_id, ip_address, website_loaded
            )
        ) s
        ON (t.website_id=s.website_id AND 
            t.article_id=s.article_id AND 
            t.ip_address=s.ip_address AND 
            t.website_loaded=s.website_loaded)
        WHEN NOT MATCHED THEN
            INSERT (website_id, article_id, ip_address, website_loaded, visit_date, referrer, duration_visible, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, fid, fid_rating, browser, connection, url, mobile)    
            VALUES (s.website_id, s.article_id, s.ip_address, s.website_loaded, s.visit_date, s.referrer, s.duration_visible, s.lcp, s.lcp_rating, s.cls, s.cls_rating, s.inp, s.inp_rating, s.fid, s.fid_rating, s.browser, s.connection, s.url, s.mobile)
        WHEN MATCHED THEN
            UPDATE SET t.updated_date=current_timestamp,
                t.duration_visible=t.duration_visible+s.duration_visible,
                t.lcp=CASE WHEN t.lcp IS NOT NULL AND s.lcp IS NOT NULL THEN GREATEST(s.lcp,t.lcp) ELSE COALESCE(s.lcp,t.lcp) END,
                t.lcp_rating=CASE WHEN t.lcp_rating IS NOT NULL AND s.lcp_rating IS NOT NULL THEN GREATEST(s.lcp_rating,t.lcp_rating) ELSE COALESCE(s.lcp_rating,t.lcp_rating) END,
                t.cls=CASE WHEN t.cls IS NOT NULL AND s.cls IS NOT NULL THEN GREATEST(s.cls,t.cls) ELSE COALESCE(s.cls,t.cls) END,
                t.cls_rating=CASE WHEN t.cls_rating IS NOT NULL AND s.cls_rating IS NOT NULL THEN GREATEST(s.cls_rating,t.cls_rating) ELSE COALESCE(s.cls_rating,t.cls_rating) END,
                t.inp=CASE WHEN t.inp IS NOT NULL AND s.inp IS NOT NULL THEN GREATEST(s.inp,t.inp) ELSE COALESCE(s.inp,t.inp) END,
                t.inp_rating=CASE WHEN t.inp_rating IS NOT NULL AND s.inp_rating IS NOT NULL THEN GREATEST(s.inp_rating,t.inp_rating) ELSE COALESCE(s.inp_rating,t.inp_rating) END,
                t.fid=CASE WHEN t.fid IS NOT NULL AND s.fid IS NOT NULL THEN GREATEST(s.fid,t.fid) ELSE COALESCE(s.fid,t.fid) END,
                t.fid_rating=CASE WHEN t.fid_rating IS NOT NULL AND s.fid_rating IS NOT NULL THEN GREATEST(s.fid_rating,t.fid_rating) ELSE COALESCE(s.fid_rating,t.fid_rating) END        
                ;
        n:=SQL%ROWCOUNT;
        pck_core.log('Merged '||n||' rows into page_hit table');

        DELETE website_article_cwv WHERE website_id=NVL(pWebsiteId,website_id);
        n:=SQL%ROWCOUNT;
        pck_core.log('Deleted '||n||' rows from website_article_cwv table');

        uploadIpLookup;
    END;

    /*
    **  Return log of all visits to website
    */
    PROCEDURE getVisits(pId IN VARCHAR2) IS
        l_website_id website.id%type;
        l_domain_name VARCHAR2(200);
        l_content CLOB;
        l_cwv VARCHAR2(200);
        l_visit_date VARCHAR2(22);
        l_referrer page_hit.referrer%type;
        l_session_data pck_core.session_data_rt;
        n PLS_INTEGER;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_domain_name:=SUBSTR(pId,INSTR(pId,',')+1);

        pck_visits.uploadPageHits(l_website_id);

        l_content:='
        <ol class="visits">
            <li>
                <span>Visit Date</span><span>Location</span><span>Referrer</span><span>Browser</span><span>Connection</span><span>Viewing time</span><span style="text-align:center">Performance</span>
            </li>';

        FOR C IN (
            WITH website_hits as 
            (
                SELECT website_id, ip_address, visit_date, 
                        MAX(referrer) referrer, 
                        MAX(lcp_rating) lcp_rating, MAX(cls_rating) cls_rating, MAX(inp_rating) inp_rating, MAX(fid_rating) fid_rating, 
                        SUM(duration_visible) duration_visible, MAX(browser) browser, MAX(connection) connection, MAX(mobile) mobile
                  FROM page_hit
                 WHERE  website_id=l_website_id
                   AND  url=l_domain_name 
                 GROUP BY website_id, ip_address, visit_date
            )
            SELECT  
            wh.visit_date, wh.referrer, ip.city||','||ip.country_code||','||ip.postal location, 
                    wh.browser, wh.connection, wh.mobile, wh.duration_visible, wh.lcp_rating, wh.cls_rating, wh.inp_rating, wh.fid_rating
                FROM website_hits wh, ip_lookup ip
                WHERE ip.ip=wh.ip_address
                ORDER BY wh.visit_date desc
        ) 
        LOOP
            l_cwv:='';
            IF (C.lcp_rating IS NOT NULL) THEN
                l_cwv:=l_cwv || '<mark class="' || C.lcp_rating || '">LCP</mark>';
            ELSE
                l_cwv:=l_cwv || '<mark></mark>';
            END IF;
            IF (C.cls_rating IS NOT NULL) THEN
                l_cwv:=l_cwv || '<mark class="' || C.cls_rating || '">CLS</mark>';
            ELSE
                l_cwv:=l_cwv || '<mark></mark>';
            END IF;
            IF (C.inp_rating IS NOT NULL) THEN
                l_cwv:=l_cwv || '<mark class="' || C.inp_rating || '">INP</mark>';
            ELSIF (C.fid_rating IS NOT NULL) THEN
                l_cwv:=l_cwv || '<mark class="' || C.fid_rating || '">FID</mark>';
            ELSE
                l_cwv:=l_cwv || '<mark></mark>';
            END IF;

            IF (INSTR(C.referrer,'google')>0) 
                THEN l_referrer:='google';
            ELSIF (INSTR(C.referrer,'linkedin')>0) 
                THEN l_referrer:='linkedin';
            ELSIF (INSTR(C.referrer,'bing')>0) 
                THEN l_referrer:='bing';
            ELSE
                l_referrer:=C.referrer;
            END IF;

            l_content:=l_content || '
                <li>
                    <span>' || TO_CHAR(C.visit_date AT TIME ZONE l_session_data.timezone, 'dd Mon yyyy fmhh24:fmmi')  || '</span>
                    <span>' || LTRIM(RTRIM(C.location,','),',') || '</span>
                    <span>' || l_referrer || '</span>
                    <span>' || C.browser || '</span>
                    <span>' || C.connection || CASE WHEN C.mobile='true' THEN ' (Mob)' END || '</span>
                    <span>' || CASE WHEN C.duration_visible IS NOT NULL THEN TO_CHAR(C.duration_visible) || ' seconds' END || '</span>
                    <span class="cwv">' || l_cwv || '</span>
                </li>';
        END LOOP;
        l_content:=l_content || '</ol>';

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

END;
/