CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_VISITS" AS
    --
    PROCEDURE getPerformance(pId IN VARCHAR2);
    --
    PROCEDURE getVisits(pWebsiteId IN website.id%type, pReport IN VARCHAR2, pOffset IN NUMBER, pStatus OUT NUMBER);
    --
    PROCEDURE insertMessage(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NuMBER);
    --
    PROCEDURE sendContactForm(pWebsiteid IN website.id%type, pBodyText IN CLOB);
    --
    PROCEDURE uploadIpLookup;
    --
    PROCEDURE uploadPageHits(pWebsiteId IN website.id%type DEFAULT NULL);
    --
    PROCEDURE uploadPageVisit(pBodyText IN CLOB);
    --
    PROCEDURE daily_job;
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_VISITS" AS

    ROWS_PER_PAGE CONSTANT PLS_INTEGER:=10;
    /*
     **  Procedure invoked by POST to REST end point "page-visit".
     **  Upload page visit details sent by javascript from deployed website pages
     */
    PROCEDURE uploadPageVisit(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address website_article_cwv.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        l_user_agent website_article_cwv.user_agent%type:=SUBSTR(OWA_UTIL.get_cgi_env('HTTP_USER_AGENT'),1,255);
        l_this_referrer VARCHAR2(50):=LOWER(sys_context('userenv','db_name'));
    BEGIN
        INSERT INTO website_article_cwv (
            website_id, article_id, seq, referrer, ip_address, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, 
            user_agent, mobile, connection, url, website_loaded, duration_visible, transfer_size)
        SELECT website_id, article_id, seq, CASE WHEN referrer LIKE '%' || l_this_referrer || '%' THEN l_this_referrer ELSE referrer END, l_ip_address, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, 
                l_user_agent, mobile, connection, url, website_loaded, duration_visible, transfer_size
          FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' 
            COLUMNS (website_id, article_id, seq, referrer, LCP, LCP_rating, CLS, CLS_rating, INP, INP_rating, 
                    mobile, connection, url, website_loaded, duration_visible, transfer_size, webdriver))
          WHERE webdriver='false';  

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Update IP_LOOKUP table with any new IP address details. This procedure does not fail, just reports errors to avoid loss of service (e.g. upgrade to paid plan)
     */
    PROCEDURE uploadIpLookup IS 
        l_clob clob;
        TYPE t_ip_lookup IS TABLE OF ip_lookup%rowtype;
        l_ip_lookup t_ip_lookup:=t_ip_lookup();
        l_current_timestamp ip_lookup.created_date%type:=current_timestamp;
    BEGIN
        FOR C IN (SELECT DISTINCT ip_address FROM page_hit MINUS SELECT ip FROM ip_lookup )
        LOOP
            pck_api.callIpdataAPI(null,C.ip_address,'GET',l_clob);
            FOR C1 IN (SELECT city,country_code,postal,error_code,error_message FROM JSON_TABLE(l_clob, '$' COLUMNS(city,country_code,postal,error_code,error_message)))
            LOOP
                l_ip_lookup.EXTEND;
                l_ip_lookup(l_ip_lookup.LAST).ip:=C.ip_address;
                l_ip_lookup(l_ip_lookup.LAST).city:=C1.city;
                l_ip_lookup(l_ip_lookup.LAST).country_code:=C1.country_code;
                l_ip_lookup(l_ip_lookup.LAST).postal:=C1.postal;
                l_ip_lookup(l_ip_lookup.LAST).error_code:=C1.error_code;
                l_ip_lookup(l_ip_lookup.LAST).error_message:=C1.error_message;
                l_ip_lookup(l_ip_lookup.LAST).created_date:=l_current_timestamp;
            END LOOP;
        END LOOP;
        FORALL i IN l_ip_lookup.FIRST..l_ip_lookup.LAST
            INSERT INTO ip_lookup VALUES l_ip_lookup(i);
    END;

    /*
     **  Google core web vital and website visit duration data is uploaded from client sessions to table website_article_cwv.
     **  This procedure aggregates the data into the page_hit table.
     **  Each page_hit row represents one visit from one ip address to a web page in a discrete client session.
     */
    PROCEDURE uploadPageHits(pWebsiteId IN website.id%type) IS
        TYPE t_browser_lookup IS TABLE OF browser_lookup%rowtype;
        l_browser_lookup t_browser_lookup:=t_browser_lookup();
        l_object JSON_OBJECT_T;
        l_array JSON_ARRAY_T;
        l_clob clob;
        l_clob2 clob;
        n PLS_INTEGER;
    BEGIN
        DELETE website_article_cwv WHERE INSTR(UPPER(referrer),UPPER(sys_context('userenv','db_name')))>0;
        DELETE website_article_cwv WHERE INSTR(user_agent,'Headless')>0;
        DELETE website_article_cwv cwv WHERE cwv.website_id=pWebsiteId AND NOT EXISTS (SELECT null FROM article a WHERE a.id=cwv.article_id);

        FOR C IN (SELECT DISTINCT user_agent FROM website_article_cwv c WHERE website_id=pWebsiteId AND NOT EXISTS (SELECT NULL FROM browser_lookup b WHERE b.user_agent=c.user_agent))
        LOOP
            l_array:= new JSON_ARRAY_T;
            l_object:=new JSON_OBJECT_T;
            l_object.put('name','User-Agent');
            l_object.put('value',C.user_agent);
            l_array.append(l_object);
            l_object:=new JSON_OBJECT_T;
            l_object.put('headers',l_array);
            l_clob:=l_object.stringify;
            pck_api.callBrowserAPI(l_clob,l_clob2);
            FOR C1 IN (SELECT simple_software_string FROM JSON_TABLE(l_clob2 FORMAT JSON, '$.detection' COLUMNS (simple_software_string)) )
            LOOP
                l_browser_lookup.EXTEND;
                l_browser_lookup(l_browser_lookup.LAST).browser:=C1.simple_software_string;
                l_browser_lookup(l_browser_lookup.LAST).user_agent:=C.user_agent;
            END LOOP;
        END LOOP;
        FORALL i IN l_browser_lookup.FIRST..l_browser_lookup.LAST
            INSERT INTO browser_lookup VALUES l_browser_lookup(i);
        
        MERGE INTO page_hit t
        USING (
            SElECT 
                website_id, article_id, website_loaded, ip_address, apex_string_util.get_domain(referrer) referrer, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, NVL(duration_visible,0) duration_visible, NVL(browser,user_agent) browser, connection, url, mobile,
                to_timestamp('1970-01-01','yyyy-mm-dd') + numtodsinterval(website_loaded,'second') visit_date, transfer_size
            FROM
            (
                SELECT 
                    website_id, article_id, ip_address, website_loaded,  
                    MAX(CASE WHEN INSTR(referrer,url)=0 THEN referrer END) referrer, 
                    MAX(lcp) lcp, MAX(lcp_rating) lcp_rating, MAX(cls) cls, MAX(cls_rating) cls_rating, MAX(inp) inp, MAX(inp_rating) inp_rating, 
                    SUM(duration_visible) duration_visible, MAX(website_article_cwv.user_agent) user_agent, MAX(browser_lookup.browser) browser, MAX(connection) connection, MAX(url) url, MAX(mobile) mobile, MAX(transfer_size) transfer_size
                FROM website_article_cwv, browser_lookup
                WHERE website_id=pWebsiteId
                AND browser_lookup.user_agent(+)=website_article_cwv.user_agent
                GROUP BY website_id, article_id, ip_address, website_loaded
            )
        ) s
        ON (t.website_id=s.website_id AND 
            t.article_id=s.article_id AND 
            t.ip_address=s.ip_address AND 
            t.website_loaded=s.website_loaded)
        WHEN NOT MATCHED THEN
            INSERT (website_id, article_id, ip_address, website_loaded, visit_date, referrer, duration_visible, lcp, lcp_rating, cls, cls_rating, inp, inp_rating, browser, connection, url, mobile, transfer_size)    
            VALUES (s.website_id, s.article_id, s.ip_address, s.website_loaded, s.visit_date, s.referrer, s.duration_visible, s.lcp, s.lcp_rating, s.cls, s.cls_rating, s.inp, s.inp_rating, s.browser, s.connection, s.url, s.mobile, s.transfer_size)
        WHEN MATCHED THEN
            UPDATE SET t.updated_date=current_timestamp,
                t.duration_visible=t.duration_visible+s.duration_visible,
                t.lcp=CASE WHEN t.lcp IS NOT NULL AND s.lcp IS NOT NULL THEN GREATEST(s.lcp,t.lcp) ELSE COALESCE(s.lcp,t.lcp) END,
                t.lcp_rating=CASE WHEN t.lcp_rating IS NOT NULL AND s.lcp_rating IS NOT NULL THEN GREATEST(s.lcp_rating,t.lcp_rating) ELSE COALESCE(s.lcp_rating,t.lcp_rating) END,
                t.cls=CASE WHEN t.cls IS NOT NULL AND s.cls IS NOT NULL THEN GREATEST(s.cls,t.cls) ELSE COALESCE(s.cls,t.cls) END,
                t.cls_rating=CASE WHEN t.cls_rating IS NOT NULL AND s.cls_rating IS NOT NULL THEN GREATEST(s.cls_rating,t.cls_rating) ELSE COALESCE(s.cls_rating,t.cls_rating) END,
                t.inp=CASE WHEN t.inp IS NOT NULL AND s.inp IS NOT NULL THEN GREATEST(s.inp,t.inp) ELSE COALESCE(s.inp,t.inp) END,
                t.inp_rating=CASE WHEN t.inp_rating IS NOT NULL AND s.inp_rating IS NOT NULL THEN GREATEST(s.inp_rating,t.inp_rating) ELSE COALESCE(s.inp_rating,t.inp_rating) END,
                t.url=COALESCE(t.url,s.url) 
                ;
        n:=SQL%ROWCOUNT;
        pck_core.log(n||' rows loaded into page_hit table');

        DELETE website_article_cwv WHERE website_id=pWebsiteId;

        uploadIpLookup;
    END;

    FUNCTION cwvRating(pLCP IN VARCHAR2 DEFAULT NULL, pCLS IN VARCHAR2 DEFAULT NULL, pINP IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
        l_cwv VARCHAR2(200);
    BEGIN
        IF (pLCP IS NOT NULL) THEN
            l_cwv:=l_cwv || '<mark class="' || pLCP || '">LCP</mark>';
        ELSE
            l_cwv:=l_cwv || '<mark></mark>';
        END IF;
        IF (pCLS IS NOT NULL) THEN
            l_cwv:=l_cwv || '<mark class="' || pCLS || '">CLS</mark>';
        ELSE
            l_cwv:=l_cwv || '<mark></mark>';
        END IF;
        IF (pINP IS NOT NULL) THEN
            l_cwv:=l_cwv || '<mark class="' || pINP || '">INP</mark>';
        ELSE
            l_cwv:=l_cwv || '<mark></mark>';
        END IF;
        RETURN(l_cwv);
    END;
    
    FUNCTION sql2Html (pSql IN VARCHAR2, pWebsiteId IN website.id%type, pUrl IN VARCHAR2, pOffset IN NUMBER) RETURN CLOB
    IS
        l_cur       NUMBER:=dbms_sql.open_cursor;
        l_execute   NUMBER;
        l_col_cnt    INTEGER;
        rec_tab      DBMS_SQL.DESC_TAB;
        l_flag       NUMBER;
        l_varchar2   VARCHAR2 (4000);
        l_date       DATE;
        l_number     NUMBER;
        l_html       CLOB;
    BEGIN
    --pck_core.log(pSql);
        dbms_sql.parse(l_cur,pSql,dbms_sql.native);

        dbms_sql.bind_variable(l_cur,':B1',pWebsiteId);
        dbms_sql.bind_variable(l_cur,':B2',pUrl);
        dbms_sql.bind_variable(l_cur,':B3',pOffset);


        -- define columns
        
        dbms_sql.describe_columns (l_cur, l_col_cnt, rec_tab);
        FOR i IN 1 .. l_col_cnt
        LOOP
            CASE rec_tab (i).col_type
                 WHEN 1 THEN
                    dbms_sql.define_column (l_cur,i,l_varchar2,2000);
                 WHEN 2 THEN
                    dbms_sql.define_column (l_cur, i, l_number);
                 WHEN 12 THEN
                    dbms_sql.define_column (l_cur, i, l_date);
                 ELSE
                    dbms_sql.define_column (l_cur,i,l_varchar2,2000);
              END CASE;
        END LOOP;

        IF (pOffset=0) THEN
            l_html:=
            '<table role="presentation">' ||
            '<thead><tr>';
           FOR i IN 1 .. l_col_cnt
           LOOP
              l_html:=l_html || '<th>' || rec_tab (i).col_name || '</th>';
           END LOOP;
           l_html:=l_html || '</tr></thead><tbody>';
        END IF;

        l_execute:=dbms_sql.execute(l_cur);
        
       -- Print data fetched by query
       LOOP
          l_flag := dbms_sql.fetch_rows (l_cur);
          EXIT WHEN l_flag = 0;
          
          l_html:=l_html || '<tr>';
          FOR i IN 1 .. l_col_cnt
          LOOP
             CASE rec_tab(i).col_type
                WHEN 1 THEN
                   dbms_sql.column_value (l_cur, i, l_varchar2);
                   l_html:=l_html || '<td>' || l_varchar2 || '</td>';
                WHEN 2 THEN
                   dbms_sql.column_value (l_cur, i, l_number);
                   l_html:=l_html || '<td>' || l_number || '</td>';
                WHEN 12 THEN
                   dbms_sql.column_value (l_cur, i, l_date);
                   l_html:=l_html || '<td>' || TO_CHAR (l_date, 'DD/MM/YYYY HH24:MI:SS') || '</td>';
                ELSE
                   l_html:=l_html || '<td>' || l_varchar2 || '</td>';
             END CASE;
          END LOOP;
          l_html:=l_html || '</tr>';
       END LOOP;

        IF (pOffset=0) THEN
            l_html:=l_html || '</tbody></table>';
        END IF;

       dbms_sql.close_cursor (l_cur);

       RETURN (l_html);
    END;

    /*
    **  EMAIL WEBSITE VISIT ANALYSIS
    */
    PROCEDURE sendmail(pWebsiteId IN website.id%type, pContent IN OUT NOCOPY CLOB) IS
        l_json JSON_OBJECT_T;
        l_payload CLOB;
        l_clob CLOB;
        l_body CLOB:='To view the content of this message, please use an HTML enabled mail client.'||utl_tcp.crlf;
        l_body_html CLOB:=
        '<!DOCTYPE html>
         <html>
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <meta name="format-detection" content="telephone=no">
                <meta name="format-detection" content="date=no">
                <meta name="format-detection" content="address=no">
                <meta name="format-detection" content="email=no">
                <style type="text/css">
                    body {
                        font-family:Georgia,sans-serif;
                        font-size:1rem;
                    }
                    td,
                    th {
                        border: 1px solid rgb(190, 190, 190);
                        padding: 0.5rem;
                    }
                    table {
                        border-collapse: collapse;
                        border: 2px solid rgb(200, 200, 200);
                        width: 100%;
                    }
                    table + table {
                        margin-top: 1rem;
                    }
                    thead {
                        background-color: #d7d9f2;
                    }
                    td.centered {
                        text-align: center;
                        font-weight: 900;
                    }
                    td.centered > span {
                        display: inline-block;
                        padding: 4px;
                    }
                    .good {
                        color: #000;
                        background-color: #0cce6b;
                    }
                    .needs-improvement {
                        color: #000;
                        background-color: #ffa401;
                    }
                    .poor {
                        color: #000;
                        background-color: #ff4e41;
                    }
                </style>
            </head>
        <body>';
    BEGIN
        FOR C IN (SELECT NVL(w.contact_email, u.email) contact_email, w.domain_name FROM website w, users u where u.id=w.user_id AND w.id=pWebsiteId) LOOP
            l_json:=new JSON_OBJECT_T;
            l_json.put('contactEmail',C.contact_email);
            l_json.put('subject','Website visits to '|| C.domain_name);
            l_json.put('body', l_body_html || pContent || '</body></html>');
            l_json.put('sourceEmail','visits@adfreesites.com');

            l_payload:=l_json.stringify;
            pck_api.callAWSemailAPI(pMethod=>'POST',pBody=>l_payload,pData=>l_clob);
        END LOOP;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    FUNCTION cwv(pLcp IN NUMBER) RETURN VARCHAR2 IS 
        l_html LONG;
        l_margin NUMBER;
        l_score VARCHAR2(10);
    BEGIN
    /* LCP reported in milliseconds - make appropriate calculation for % within 0 -> 6.5 seconds*/ 
        l_margin:=LEAST(ROUND(pLcp/6500*100,1),100);
        l_score:=TO_CHAR(ROUND(pLcp/1000,1),'0.0') || ' sec';

        l_html:=
        '<div class="cwv">
            <div class="lcp">
              <span></span>
              <span>2.5 sec</span>
              <span>4 sec</span>
              <span class="good">GOOD</span>
              <span class="needs-improvement">NEEDS<br>IMPROVEMENT</span>
              <span class="poor">POOR</span>
            </div>
            <div style="margin-inline-start:' || l_margin || '%;font-size:160%">&#8593;</div>
            <div class="score">Your overall score at 95 percentile is ' || l_score || ' sec</div>
        </div>';
        RETuRN (l_html);
    END;

    /*
    ** Convert seconds to hms notation, e.g. 100 -> 1m40s
    */
    FUNCTION elapsedTime(pSeconds IN NUMBER) RETUrN VARCHAR2 IS
        t_ela_time apex_t_varchar2;
        l_ela_time VARCHAR2(11);
    BEGIN
        IF (pSeconds>86399) THEN
            RETURN ('>24h');
        END IF;
        t_ela_time:=apex_string.split(TO_CHAR(TO_DATE(pSeconds,'sssss'),'fmhh24:mi:ss'),':');
        l_ela_time:=NULL;
        IF (t_ela_time(1)<>'0') THEN
            l_ela_time:=l_ela_time || t_ela_time(1) || 'h';
        END if;
        IF (t_ela_time(2)<>'0') THEN
            l_ela_time:=l_ela_time || t_ela_time(2) || 'm';
        END if;
        IF (t_ela_time(3)<>'0') THEN
            l_ela_time:=l_ela_time || t_ela_time(3) || 's';
        END if;
        RETURN (l_ela_time);
    END;

    /*
    **  Return log of all visits to website
    */
    PROCEDURE getWebsiteVisits(pWebsiteId IN website.id%type, pOffset IN NUMBER, pTimeZone IN VARCHAR2, pUrl IN VARCHAR2, pCount IN OUT NUMBER, pHtml IN OUT NOCOPY CLOB) IS
        l_content CLOB;
        l_popover VARCHAR2(300);
        l_rating VARCHAR2(200);
        l_total PLS_INTEGER;
        l_ela_time VARCHAR2(11);
        n PLS_INTEGER:=0;

        FUNCTION cwv (pLCPr IN VARCHAR2 DEFAULT NULL, pCLSr IN VARCHAR2 DEFAULT NULL, pINPr IN VARCHAR2 DEFAULT NULL, pLCP IN VARCHAR2 DEFAULT NULL, pCLS IN VARCHAR2 DEFAULT NULL, pINP IN VARCHAR2 DEFAULT NULL) RETuRN VARCHAR2
        IS
            l_rating VARCHAR2(50);
        BEGIN
            l_rating:='<br>';
            IF (pLCPr IS NOT NULL) THEN
                IF (pLCP>2.5) THEN
                    l_rating:=l_rating || '<span>LCP:' || pLCP || 's</span>';
                END IF;
            END IF;
            IF (pCLSr IS NOT NULL) THEN
                IF (pCLS>0.1) THEN
                    l_rating:=l_rating || '<span>CLS:' || pCLS || '</span>';
                END IF;
            END IF;
            IF (pINPr IS NOT NULL) THEN
                IF (pINP>200) THEN
                    l_rating:=l_rating || '<span>INP:' || pINP || 'ms</span>';
                END IF;
            END IF;
            RETURN (l_rating);
        END;
    BEGIN
        IF (pOffset=0) THEN
            l_content:='<details><summary>Overview</summary>';
            l_content:=l_content || '<section class="grid grid__4col">';
            l_content:=l_content || '<span class="grid-heading">Total Visits</span>';
            l_content:=l_content || '<span class="grid-heading">Since</strong></span>';
            l_content:=l_content || '<span class="grid-heading">Distinct Visitors</strong></span>';
            l_content:=l_content || '<span class="grid-heading">Average Visit</strong></span>';
            
            FOR C IN (
                SELECT COUNT(DISTINCT website_loaded||ip_address) nb_visit, COUNT(DISTINCT ip_address) nb_distinct_ip, TRUNC(current_date)-TRUNC(MIN(visit_date)) ela_days, ROUND(AVG(duration_visible),0) viewing_time
                  FROM page_hit
                 WHERE website_id=pWebsiteId
                   AND url=pUrl
            ) LOOP
                l_content:=l_content ||
                    '<span>' || C.nb_visit || '</span><span>' || NVL(C.ela_days,0) || ' days</span><span>' || C.nb_distinct_ip || '</span><span>' || elapsedTime(NVL(C.viewing_time,0)) || '</span>';
            END LOOP;
            l_content:=l_content || '</section>';
            l_content:=l_content || '</details>';

            l_content:=l_content ||
            '<table role="presentation">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Location</th>
                        <th>Visit Time</th>
                        <th>Referrer</th>
                        <th>Web Vitals</th>
                    </tr>
                </thead>
                <tbody>';
        END IF;

        FOR C IN (
            WITH website_hits as 
            (
                SELECT p.website_id, p.ip_address, p.visit_date, 
                        COUNT(*) OVER() total,
                        MAX(p.referrer) referrer, 
                        MAX(p.lcp_rating) lcp_rating, MAX(p.cls_rating) cls_rating, MAX(p.inp_rating) inp_rating, 
                        MAX(p.lcp) lcp, MAX(p.cls) cls, MAX(p.inp) inp, 
                        SUM(p.duration_visible) duration_visible, MAX(p.browser) browser, MAX(p.connection) connection, MAX(p.mobile) mobile
                  FROM website w, page_hit p
                 WHERE w.id=pWebsiteId
                   AND p.website_id=w.id
                   AND p.url=pUrl
                 GROUP BY p.website_id, p.ip_address, p.visit_date
                 ORDER BY p.visit_date DESC
                 OFFSET pOffset ROWS
                 FETCH FIRST ROWS_PER_PAGE ROWS ONLY
            )
            SELECT wh.total, wh.visit_date, wh.referrer, ip.city||', '||ip.country_code||' '||ip.postal location, CASE WHEN ip.error_message IS NOT NULL THEN ip.ip END ip_address,
                    wh.browser, wh.connection, wh.mobile, wh.duration_visible, wh.lcp_rating, wh.cls_rating, wh.inp_rating, RouND(wh.lcp/1000,1) lcp, cls, inp
              FROM website_hits wh, ip_lookup ip
             WHERE ip.ip=wh.ip_address
        ) 
        LOOP
            n:=n+1;
            IF (n=1) THEN
                pCount:=C.total;
            END IF;
            n:=pOffset+n;
            
            l_popover:=C.browser;

            l_ela_time:=elapsedTime(C.duration_visible);

            IF (C.connection IS NOT NULL) THEN
                l_popover:=l_popover || ' (' || C.connection;
                IF ( C.mobile='true') THEN
                    l_popover:=l_popover || ' Mobile';
                END IF;
                l_popover:=l_popover || ')';
            END IF;

            IF (COALESCE(C.lcp_rating,C.cls_rating,C.inp_rating) IS NULL) THEN
                l_rating:='-';
            ELSE
                IF ((C.lcp_rating='good' OR C.lcp_rating IS NULL) AND (C.cls_rating='good' OR C.cls_rating IS NULL) AND (C.inp_rating='good' OR C.inp_rating IS NULL)) THEN
                   l_rating:='<span class="good">GOOD</span>';
                ELSIF ((C.lcp_rating='poor' OR C.lcp_rating IS NULL) OR (C.cls_rating='poor' OR C.cls_rating IS NULL) OR (C.inp_rating='poor' OR C.inp_rating IS NULL)) THEN
                    l_rating:='<span class="poor">POOR</span>' || cwv(C.lcp_rating,C.cls_rating,C.inp_rating, C.lcp,C.cls,C.inp);
                ELSE
                    l_rating:='<span class="needs-improvement">NEEDS IMPROVEMENT</span>' || cwv(C.lcp_rating,C.cls_rating,C.inp_rating, C.lcp,C.cls,C.inp);
                END IF;
            END IF;

            l_content:=l_content ||
                '<tr>
                    <td>' || TO_CHAR(C.visit_date at time zone pTimeZone, 'dd-mm-yy fmhh24:fmmi')  || 
                    '<button type="button" class="button" data-button-variant="no-styles" popovertarget="popover_' || n || '" id="anchor_' || n || '">&#9432;</button>' ||
                    '<span id="popover_' || n || '" popover anchor="anchor_' || n || '">' || l_popover || '</span>' ||
                    '</td>
                    <td>' || COALESCE(C.ip_address,LTRIM(RTRIM(C.location,','),',')) || '</td>
                    <td>' || l_ela_time || '</td>
                    <td>' || NVL(REPLACE(C.referrer,'.','&#173;.'),'-') || '</td>
                    <td class="centered">' || l_rating || '</td>
                </tr>';
        END LOOP;

        IF (pOffset=0) THEN
            l_content:=l_content || '</tbody></table>';
        END IF;

        pHtml:=l_content;
    END;


    PROCEDURE getPageVisits(pWebsiteId IN website.id%type, pOffset IN NUMBER, pTimeZone IN VARCHAR2, pUrl IN VARCHAR2, pCount IN OUT NUMBER, pHtml IN OUT NOCOPY CLOB)  IS
        l_sql LONG;
    BEGIN
        IF (pOffset=0) THEN
            SELECT COUNT(DISTINCT visit_date||ip_address)
              INTO pCount
              FROM page_hit
             WHERE website_id=pWebsiteId
               AND url=pUrl;
        END IF;

        l_sql:='SELECT TO_CHAR(visit_date at time zone ''' || pTimeZone || ''',''dd Mon yyyy fmhh24:fmmi'') "Visit Date"';
        FOR C IN (SELECT navigation_label FROM website_article WHERE website_id=pWebsiteId ORDER BY display_order) LOOP
            l_sql:=l_sql || ',MAX(DECODE(navigation_label,''' || C.navigation_label || ''',duration_visible)) "' || C.navigation_label || '"';
        END LOOP;

        l_sql:=l_sql ||
        'FROM 
            (
            WITH articles AS
                (
                SELECT navigation_label, article_id 
                FROM website_article WHERE website_id=:B1
                UNION ALL
                SELECT wa.navigation_label, a.id 
                FROM website_article wa, article a
                WHERE a.parent_id=wa.article_id
                AND wa.website_id=:B1
                )
            SELECT ph.visit_date, ph.ip_address, a.navigation_label, SUM(ph.duration_visible) duration_visible
              FROM articles a, page_hit ph
             WHERE ph.website_id=:B1
               AND ph.url=:B2
               AND ph.article_id=a.article_id
             GROUP BY ph.visit_date, ph.ip_address, a.navigation_label
            )
        GROUP  BY visit_date
        ORDER BY visit_date DESC
        OFFSET :B3 ROWS
        FETCH FIRST '|| ROWS_PER_PAGE || ' ROWS ONLY'; 

        pHtml:=sql2Html(l_sql, pWebsiteId, pUrl, pOffset);

    END;

    PROCEDURE getVisitsByLocation(pWebsiteId IN website.id%type, pOffset IN NUMBER, pUrl IN VARCHAR2, pCount IN OUT NUMBER, pHtml IN OUT NOCOPY CLOB)  IS
        l_content CLOB;
        n PLS_INTEGER:=0;
    BEGIN
        IF (pOffset=0) THEN
            l_content:=
            '<table role="presentation">
                <thead>
                    <tr>
                        <th>Location</th>
                        <th>No. Visits</th>
                    </tr>
                </thead>
                <tbody>';
        END IF;

        FOR C IN (
                    SELECT location,  nb_visits, RATIO_TO_REPORT(nb_visits) OVER() pct, COUNT(*) OVER() total
                    FROM
                        (
                        SELECT i.country_code location, COUNT(*) nb_visits, COUNT(*) OVER() total_visits
                          FROM page_hit p, ip_lookup i
                         WHERE p.website_id=pWebsiteId
                           AND p.url=pUrl
                           AND p.ip_address=i.ip
                         AND i.country_code IS NOT NULL
                         GROUP BY i.country_code
                        )
                        ORDER BY nb_visits DESC, location
                        OFFSET pOffset ROWS
                        FETCH FIRST ROWS_PER_PAGE ROWS ONLY
            ) LOOP
                n:=n+1;
                IF (n=1) THEN
                    pCount:=C.total;
                END IF;
                l_content:=l_content || '<tr><td>' || LTRIM(RTRIM(C.location,','),',') || '</td><td>' || C.nb_visits || ' (' || TO_CHAR(C.pct*100,'fm990D00') || '%)</td></tr>';
            END LOOP;

        IF (pOffset=0) THEN
            l_content:=l_content || 
            '</tbody></table>';
        END IF;

        pHtml:=l_content;
    END;

    PROCEDURE getVisitsByBrowser(pWebsiteId IN website.id%type, pOffset IN NUMBER, pUrl IN VARCHAR2, pCount IN OUT NUMBER, pHtml IN OUT NOCOPY CLOB)  IS
        l_content CLOB;
        n PLS_INTEGER:=0;
    BEGIN
        IF (pOffset=0) THEN
            l_content:=
            '<table role="presentation">
                <thead>
                    <tr>
                        <th>Browser</th>
                        <th>No. Visits</th>
                    </tr>
                </thead>
                <tbody>';
        END IF;

        FOR C IN (
                    SELECT browser,  nb_visits, RATIO_TO_REPORT(nb_visits) OVER() pct, COUNT(*) OVER() total
                    FROM
                        (
                        SELECT browser, COUNT(*) nb_visits, COUNT(*) OVER() total_visits
                          FROM page_hit p
                         WHERE p.website_id=pWebsiteId
                           AND p.url=pUrl
                         GROUP BY p.browser
                        )
                        ORDER BY nb_visits DESC, browser
                        OFFSET pOffset ROWS
                        FETCH FIRST ROWS_PER_PAGE ROWS ONLY
            ) LOOP
                n:=n+1;
                IF (n=1) THEN
                    pCount:=C.total;
                END IF;
                l_content:=l_content || '<tr><td>' || LTRIM(RTRIM(C.browser,','),',') || '</td><td>' || C.nb_visits || ' (' || TO_CHAR(C.pct*100,'fm990D00') || '%)</td></tr>';
            END LOOP;

        IF (pOffset=0) THEN
            l_content:=l_content || 
            '</tbody></table>';
        END IF;

        pHtml:=l_content;
    END;

    PROCEDURE getBlogVisits(pWebsiteId IN website.id%type, pOffset IN NUMBER, pTimeZone IN VARCHAR2, pUrl IN VARCHAR2, pCount IN OUT NUMBER, pHtml IN OUT NOCOPY CLOB)  IS
        l_content CLOB;
        n PLS_INTEGER:=0;
    BEGIN
        IF (pOffset=0) THEN
            l_content:=
            '<table role="presentation">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Views</th>
                        <th>Avg Viewing time</th>
                         <th>Distinct Visitors</th>
                    </tr>
                </thead>
                <tbody>';
        END IF;

        FOR C IN (SELECT a.title, 
                            COUNT(*) OVER() total,
                            COUNT(*) nb_views, 
                            NVL(ROUND(AVG(p.duration_visible),0),0) avg_viewing_time,
                            COUNT(DISTINCT p.ip_address) nb_distinct_visitors
                    FROM article a, website_article wa, page_hit p
                   WHERE wa.website_id=pWebsiteId
                     AND wa.collection_type='BLOG'
                     AND a.parent_id=wa.article_id
                     AND a.id=p.article_id(+)
                     AND p.url(+)=pUrl
                   GROUP BY a.title
                   ORDER BY nb_views DESC
                  OFFSET pOffset ROWS
                   FETCH FIRST ROWS_PER_PAGE ROWS ONLY) 
        LOOP
            n:=n+1;
            IF (n=1) THEN
                pCount:=C.total;
            END IF;
            l_content:=l_content ||
            '<tr><td>' 
                || C.title || '</td><td>'
                || C.nb_views || '</td><td>' 
                || elapsedTime(C.avg_viewing_time) || '</td><td>'
                || C.nb_distinct_visitors || '</td>' ||
            '</tr>';
        END LOOP;

        IF (pOffset=0) THEN
            l_content:=l_content || 
            '</tbody></table>';
        END IF;

        pHtml:=l_content;
    END;

    PROCEDURE getPageViewHistory(pWebsiteId IN website.id%type, pUrl IN VARCHAR2, pPeriod IN VARCHAR2, pHtml IN OUT NOCOPY CLOB) IS
        l_content CLOB;
        l_height_offset CONSTANT PLS_INTEGER:=10;
        l_width_offset CONSTANT PLS_INTEGER:=10;
        l_height PLS_INTEGER;
        l_width PLS_INTEGER;
        l_data_height PLS_INTEGER;
        l_points LONG;
        l_text VARCHAR2(50);
        l_label_y PLS_INTEGER;
        n PLS_INTEGER:=0;
    BEGIN
        FOR C IN (
            WITH data AS
            (
                SELECT dt, nb_hits, MAX(nb_hits) OVER () max_hits
                FROM
                (
                    SELECT TRUNC(visit_date) dt, COUNT(nb_hits) nb_hits
                    FROM
                    (
                        SELECT ip_address,visit_date, COUNT(*) nb_hits
                           FROM page_hit 
                          WHERE website_id=pWebsiteId
                            AND url=pUrl
                            AND TRUNC(visit_date)>=SYSDATE-30
                          GROUP BY ip_address, visit_date
                    )
                    GROUP BY TRUNC(visit_date)
                )
            ),
            period AS
            (
                SELECT MIN(dt) first_dt, TRUNC(SYSDATE) last_dt
                FROM data
            ),
            range AS
            (
                SELECT first_dt + level - 1 dt
                FROM period
                CONNECT BY level <= last_dt - first_dt
            )
            SELECT r.dt, NVL(d.nb_hits,0) nb_hits, d.max_hits, COUNT(*) OVER () nb_periods, MIN(r.dt) OVER() start_date
            FROM range r, data d
            WHERE r.dt=d.dt(+)
            ORDER BY 1
        )
        LOOP
            n:=n+1;
            IF (n=1) THEN
                /* Do y-axis labels first starting from top */
                l_height:=0;
                l_width:=7;
                l_content:='<g class="labels y-labels">';
                IF (C.max_hits<=10) THEN
                    FOR i IN REVERSE 0 .. C.max_hits LOOP
                        l_height:=l_height+l_height_offset;
                        l_text:='<text x="' || l_width || '" y="' || l_height || '">' || i || '</text>';
                        l_content:=l_content || l_text;
                    END LOOP;
                    
                ELSIF (C.max_hits<=100) THEN
                    l_content:='<g class="labels y-labels">';
                    FOR i IN REVERSE 0 .. CEIL(C.max_hits/10) LOOP
                        l_height:=l_height+l_height_offset;
                        l_label_y:=i*10;
                        l_text:='<text x="' || l_width || '" y="' || l_height || '">' || l_label_y || '</text>';
                        l_content:=l_content || l_text;
                    END LOOP;
                END IF;
                l_content:=l_content || '</g>';
                l_width:=l_width+3;
                l_content:=l_content || '<line class="y-axis" x1="' || l_width || '" y1="' || l_height_offset || '" x2="' || l_width || '" y2="' || l_height || '"></line>';

                /* Print x-axis labels */
                l_height:=l_height + 5;
                l_content:=l_content || '<g class="labels x-labels">';
                FOR i IN  0 .. C.nb_periods LOOP
                    IF (Mod(i,7)=0) THEN
                        l_text:='<text x="' || l_width || '" y="' || l_height || '">' || TO_CHAR(C.start_date + i,'dd/mm') || '</text>';
                        l_content:=l_content || l_text;
                    END IF;
                    l_width:=l_width + 10;
                END LOOP;
                l_height:=l_height - 5;
                l_content:=l_content || '</g>';
                l_content:=l_content || '<line class="x-axis" x1="' || l_width_offset || '" y1="' || l_height || '" x2="' || l_width || '" y2="' || l_height || '"></line>';
                l_width:=l_width_offset;
            END IF;
            IF (C.max_hits<=10) THEN
                l_data_height:=l_height - (l_height_offset * C.nb_hits);
            ELSIF (C.max_hits<=100) THEN
                l_data_height:=l_height - (l_height_offset * (C.nb_hits/10));
            END IF;
            l_points:=l_points || l_width || ',' || l_data_height || ' ';
            l_width:=l_width + 10;
        END LOOP;
        l_height:=l_height + 5;
        l_content:=l_content || '<polyline points="' || RTRIM(l_points) || '" />';
        pHtml:='<svg class="graph" viewBox="0 0 ' || l_width || ' ' || l_height || '">' || l_content || '</svg>';
    END;

    /* 
    **  ENTRY POINT FOR ALL VISIT REPORTS
    */
    PROCEDURE getVisits(pWebsiteId IN website.id%type, pReport IN VARCHAR2, pOffset IN NUMBER, pStatus OUT NUMBER) IS
        l_session_data pck_sec.t_session_data;
        l_html CLOB;
        l_count NUMBER;
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        CASE pReport
            WHEN 'website' THEN getWebsiteVisits(pWebsiteId, pOffset, l_session_data.timezone, l_session_data.url, l_count, l_html);
            WHEN 'page' THEN getPageVisits(pWebsiteId, pOffset, l_session_data.timezone, l_session_data.url, l_count, l_html);
            WHEN 'location' THEN getVisitsByLocation(pWebsiteId, pOffset, l_session_data.url, l_count, l_html);
            WHEN 'browser' THEN getVisitsByBrowser(pWebsiteId, pOffset, l_session_data.url, l_count, l_html);
            WHEN 'blog' THEN getBlogVisits(pWebsiteId, pOffset, l_session_data.timezone, l_session_data.url, l_count, l_html);
            WHEN 'daily' THEN getPageViewHistory(pWebsiteId, l_session_data.url, 'dd', l_html);
        END CASE;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('count', l_count);
        apex_json.write('article', l_html);
        apex_json.write('offset', pOffset + ROWS_PER_PAGE);
        apex_json.close_object;

        pStatus:=200;

    EXCEPTION WHEN OTHERS THEN
        pck_core.log_error(pStatus);

    END;

    /*
    **  Return log of all performance metrics captured for website
    */
    PROCEDURE getPerformance(pId IN VARCHAR2) IS
        l_website_id website.id%type;
        l_env VARCHAR2(4);
        l_url page_hit.url%type;
        l_content CLOB;
        l_session_data pck_core.session_data_rt;
        n PLS_INTEGER;

        FUNCTION cwv(pGood IN NUMBER, pPoor IN NUMBER, pUnits IN VARCHAR2, pScore IN NUMBER) RETURN VARCHAR2 IS
            l_margin NUMBER;
            l_grid_template_columns VARCHAR2(30);
        BEGIN
            -- 2.5 | 4.0  => grid-template-columns: 2.5fr 1.5fr 2.5fr;
            -- 0.1 | 0.25 => grid-template-columns: 1fr 2.5fr 1fr;
            -- 200 | 500  => grid-template-columns: 2fr 3fr 2fr;

            /* Express range as fractional units */
            l_grid_template_columns:=TO_CHAR(pGood*10) || 'fr ' || TO_CHAR((pPoor-pGood)*10) || 'fr ' || pGood*10 || 'fr';

            /* Calculate margin-inline-start as percentage of score */
            l_margin:=LEAST(ROUND(pScore/(pPoor+pGood)*100,1),100);

            RETURN (
            '<div>
                <div class="cwv" style="grid-template-columns:' || l_grid_template_columns || '">
                  <span></span>
                  <span>' || pGood || ' ' || pUnits || '</span>
                  <span>' || pPoor || ' ' || pUnits || '</span>
                  <span class="good">GOOD</span>
                  <span class="needs-improvement">NEEDS<br>IMPROVEMENT</span>
                  <span class="poor">POOR</span>
                </div>
                <div style="margin-inline-start:' || l_margin || '%;font-size:160%">&#8593;</div>
                <div class="score">Your overall score at 95 percentile is ' || pScore || ' ' || pUnits || '</div>
            </div>');

        END;

    BEGIN
        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_env:=SUBSTR(pId,INSTR(pId,',')+1);

        SELECT CASE WHEN l_env='TEST' THEN REPLACE(domain_name,'.','-') || '.netlify.app' ELSE domain_name END
          INTO l_url
          FROM website
         WHERE id=l_website_id;

        FOR C IN (
            SELECT COUNT(DISTINCT website_loaded||ip_address) nb_hit, COUNT(DISTINCT ip_address) nb_distinct_ip, MIN(visit_date) first_hit, MAX(visit_date) last_hit,
                    APPROX_PERCENTILE(0.95 DETERMINISTIC) WITHIN GROUP (ORDER BY lcp) lcp,
                    APPROX_PERCENTILE(0.95 DETERMINISTIC) WITHIN GROUP (ORDER BY cls) cls,
                    APPROX_PERCENTILE(0.95 DETERMINISTIC) WITHIN GROUP (ORDER BY inp) inp,
                    ROUND(AVG(duration_visible)) avg_viewing_time
              FROM page_hit
             WHERE website_id=l_website_id
               AND url=l_url
        ) LOOP
            l_content:=
            '<p>Performance ratings are the <a href="https://developers.google.com/search/docs/appearance/core-web-vitals" target="_blank">Core Web Vitals</a>
                used by Google in its ranking algorithm.</p>
            <p>Metrics are automatically captured for each page visited on the website.</p>
            <p>Based on <strong>' || C.nb_hit || '</strong> visits from <strong>' || C.nb_distinct_ip || '</strong> distinct IP since <strong>' || TO_CHAR(C.first_hit,'dd Mon yyyy') || 
            '</strong></p>';
            l_content:=l_content || 
            '<h2>Largest Contentful Paint (LCP)</h2>' || cwv(2.5, 4, 'sec', ROUND(C.lcp/1000,1)) || '<hr>' || /* convert LCP from milliseconds to seconds */
            '<h2>Cumulative Layout Shift (CLS)</h2>' || cwv(0.1, 0.25, NuLL, C.cls) || '<hr>' ||
            '<h2>Interaction to Next Paint (INP)</h2>' || cwv(200, 500, 'ms', C.inp);
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    PROCEDURE sendContactForm(pWebsiteid IN website.id%type, pBodyText IN CLOB) IS
        l_body_text CLOB:=pBodyText;
        l_clob CLOB;
        l_json JSON_OBJECT_T;
        l_payload CLOB;
        l_table_html LONG;
    BEGIN
        
        FOR C IN (SELECT w.domain_name, NVL(w.contact_email,u.email) contact_email, j.url form_url, j.email form_email, j.name form_name, j.message form_message
                    FROM website w, users u, JSON_TABLE(l_body_text, '$' COLUMNS (url, email, name, message)) j 
                   WHERE w.id=pWebsiteid
                     AND w.user_id=u.id)
        LOOP
            l_table_html:=
            '<html>
            <head>
            <style type="text/css">
            table {
                border-collapse: collapse;
                letter-spacing: 1px;
                font-family: system-ui;
                font-size: 1.3rem;
            }
            th, td {
                padding: 1rem;
                border: 2px solid rgb(190, 190, 190);
            }
            </style>
            </head>
            <body>
            <table>
            <thead>
                <tr bgcolor="#d7d9f2">
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Message</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>' || C.form_name || '</td>
                    <td>' || C.form_email || '</td>
                    <td style="width:50%">' || C.form_message || '</td>
                </tr>
            <tbody>
            </table>
            </body>
            </html>';
            l_json:=new JSON_OBJECT_T;
            l_json.put('contactEmail',C.contact_email);
            l_json.put('subject','Contact Form submitted from '|| C.form_url);
            l_json.put('body', l_table_html);
            l_json.put('sourceEmail','contact.form@adfreesites.com');

            l_payload:=l_json.stringify;
            pck_api.callAWSemailAPI(pMethod=>'POST',pBody=>l_payload,pData=>l_clob);
        END LOOP;
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
    END;

    /*
    ** USER LEAVES AE ON A WEBSITE PAGE
    */
    PROCEDURE insertMessage(pWebsiteId IN website.id%type, pArticleId IN article.id%type, pBodyText IN CLOB, pStatus OUT NuMBER) IS
        l_session_data pck_sec.t_session_data;
        l_message_id article_message.id%type;
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_payload CLOB;
        l_body_html CLOB:=
        '<!DOCTYPE html>
         <html>
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <meta name="format-detection" content="telephone=no">
                <meta name="format-detection" content="date=no">
                <meta name="format-detection" content="address=no">
                <meta name="format-detection" content="email=no">
                <style type="text/css">
                    body {
                        font-family: system-ui,sans-serif;
                        font-size: 24px;
                    }
                    td,
                    th {
                        border: 1px solid rgb(190, 190, 190);
                        padding: 0.5rem;
                    }
                    table {
                        border-collapse: collapse;
                        border: 2px solid rgb(200, 200, 200);
                        width: 100%;
                    }
                    thead {
                        background-color: #d7d9f2;
                    }
                </style>
            </head>
        <body>';
    BEGIN
        l_session_data:=pck_sec.getSessionData(pWebsiteId);

        l_message_id:=seq_article_message.nextval;

        INSERT INTO article_message (id, article_id, sending_user_id, message)
        SELECT l_message_id, pArticleId, l_session_data.user_id, message FROM JSON_TABLE(pBodyText,  '$' COLUMNS (message));

        FOR C IN (
            SELECT m.message, w.contact_email, w.domain_name, u.email 
              FROM article_message m, website w, users u
             WHERE w.id=pWebsiteId 
               AND m.id=l_message_id
               AND u.id=l_session_data.user_id
        ) LOOP
            l_body_html:=l_body_html || 
            '<table role="presentation">' ||
                '<thead><tr><th>Message Content</th></tr></thead>' ||
                '<tbody>' ||
                    '<tr><td>' || C.message || '</td></tr>' ||
                '</tbody>' ||
            '</table></body></html>';          

            l_json:=new JSON_OBJECT_T; 
            l_json.put('contactEmail',C.contact_email);
            l_json.put('subject','Message sent by ' || C.email || ' via ' || C.domain_name);
            l_json.put('body', l_body_html);
            l_json.put('sourceEmail','message@adfreesites.com');
            l_payload:=l_json.stringify;
            pck_core.log('Sending email to ' || C.contact_email || ' from ' || C.email);
            pck_api.callAWSemailAPI(pMethod=>'POST', pBody=>l_payload, pData=>l_clob);
        END LOOP;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        pStatus:=200;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(pStatus);
    END;


    PROCEDURE daily_job IS
        l_content VARCHAR2(300);
    BEGIN
        /* Set Administrator user id for logging */
        FOR C IN (
            SELECT u.id
              FROM apex_workspace_apex_users w, users u 
             WHERE w.email=u.email
               AND w.is_admin='Yes'
               FETCH FIRST ROW ONLY
        ) LOOP
            pck_sec.g_session_user_id:=C.id;
        END LOOP;

        FOR C IN (SELECT id, domain_name, login_form FROM website WHERE netlify_site_id_custom IS NOT NULL) LOOP
            pck_core.log('START visit data processing for ' || C.domain_name);
            uploadPageHits(C.id);
            COMMIT;
            pck_core.log('END visit data processing for ' || C.domain_name);
        END LOOP;
    END;
    
END;
/