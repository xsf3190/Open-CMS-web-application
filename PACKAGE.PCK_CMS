CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS" is
    --
    PROCEDURE getAccountUsage;
    --
    PROCEDURE getArticle(pArticleId IN article.id%type);
    --
    PROCEDURE getArticles(pId IN VARCHAR2);
    --
    PROCEDURE getCldDetails;
    --
    PROCEDURE getCldSignature(pParamsToSign IN CLOB);
    --
    PROCEDURE getSessionLog(SessionId IN NUMBER);
    --
    PROCEDURE getWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE insertCollection(pParentId IN article.id%type);
    --
    PROCEDURE reorder(pId IN NUMBER, pBodyText IN CLOB);
    --
    PROCEDURE restoreArticle(pArticleId IN article.id%type);
    --
    PROCEDURE setClientInfo(pBodyText IN CLOB);
    --
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB);
    --
    PROCEDURE uploadPerformance(pBodyText IN CLOB);
    --
    PROCEDURE signout;
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS" is

    g_html_start CONSTANT VARCHAR2(24):='<!-- YOUR CODE START -->';
    g_html_end CONSTANT VARCHAR2(24):='<!-- YOUR CODE END -->';
    g_css_js_start CONSTANT VARCHAR2(24):='/* YOUR CODE START */';
    g_css_js_end CONSTANT VARCHAR2(24):='/* YOUR CODE END */';

    /*
    ** GET ACCOUNT USAGE FOR CURRENT USER - CLOUDINARY, NETLIFY
    */
    PROCEDURE getAccountUsage IS
        l_content CLOB;
        l_clob CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_content:=
        '<table role="presentation">
            <caption style="caption-side:bottom">1 Cloudinary Credit = 1GB storage | 1GB bandwidth | 1000 transformations</caption>
            <thead>
                <tr>
                    <th></th>
                    <th>Usage</th>
                    <th>Capacity</th>
                    <th>% Used</th>
                </tr>
            </thead>
            <tbody>';

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'accounts/#SLUG#/bandwidth', pMethod=>'GET', pData=>l_clob);
        FOR C IN (SELECT used, included FROM JSON_TABLE(l_clob FORMAT JSON, '$'  COLUMNS (used, included)) ) LOOP
            l_content:=l_content || 
            '<tr>
                <td><strong>Netlify bandwidth</strong></td>
                <td>' || apex_string_util.to_display_filesize(C.used) || '</td>
                <td>' || apex_string_util.to_display_filesize(C.included) || '</td> 
                <td>' || TO_CHAR(ROUND(C.used*100/C.included,2),'90.00') || '%</td>
            </tr>';
        END LOOP;



        FOR C IN (SELECT usage_date,transformations_usage,transformations_credit_usage,bandwidth_usage,bandwidth_credit_usage,storage_usage,storage_credit_usage,objects_usage,credits_usage,credits_limit,used_percent
                    FROM usage
                   WHERE user_id=l_session_data.user_id
                     AND usage_date=(SELECT MAX(usage_date) FROM usage WHERE user_id=l_session_data.user_id) )
        LOOP
            l_content:=l_content || 
            '<tr>
                <td>Cloudinary Transformations - '|| C.transformations_usage || '</td>
                <td>' || TO_CHAR(C.transformations_credit_usage,'0.00') || ' credits</td>
                <td></td> 
                <td></td>
            </tr>
            <tr>
                <td>Cloudinary Bandwidth - ' || apex_string_util.to_display_filesize(C.bandwidth_usage) || '</td>
                <td>' || TO_CHAR(C.bandwidth_credit_usage,'0.00') || ' credits</td>
                <td></td> 
                <td></td>
            </tr>
            <tr>
                <td>Cloudinary Storage - ' || apex_string_util.to_display_filesize(C.storage_usage) || '</td>
                <td>' || TO_CHAR(C.storage_credit_usage,'0.00') || ' credits</td>
                <td></td> 
                <td></td>
            </tr>
            <tr>
                <td><strong>Cloudinary Total Credits</strong></td>
                <td>' || TO_CHAR(C.credits_usage,'90.00') || ' credits</td>
                <td>' || C.credits_limit || '</td> 
                <td>' || C.used_percent || '%</td>
            </tr>';
        END LOOP;

        FOR C IN (SELECT total_used, max_size FROM (SELECT SUM(bytes) total_used  FROM dba_segments WHERE tablespace_name<>'SAMPLESCHEMA'), (SELECT max_size FROM v$pdbs)) LOOP
            l_content:=l_content || 
            '<tr>
                <td><strong>Oracle storage</strong></td>
                <td>' || apex_string_util.to_display_filesize(C.total_used) || '</td>
                <td>' || apex_string_util.to_display_filesize(C.max_size) || '</td> 
                <td>' || TO_CHAR(ROUND(C.total_used*100/C.max_size,2),'90.00') || '%</td>
            </tr>';
        END LOOP;

        l_content:=l_content ||
        '</tbody>
        </table>';

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

    EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    PROCEDURE getCldDetails IS
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size INTEGER;
        l_video_max_size INTEGER;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        pck_api.getCloudinaryData(pUserId=>l_session_data.user_id, pCloudName=>l_cld_cloud_name, pCldApiKey=>l_cld_api_key, pCldImageMaxSize=>l_image_max_size, pCldVideoMaxSize=>l_video_max_size);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('cloudname', l_cld_cloud_name);
        apex_json.write('apikey', l_cld_api_key);
        apex_json.write('maxImageFileSize', l_image_max_size);
        apex_json.write('maxVideoFileSize', l_video_max_size);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    PROCEDURE getCldSignature(pParamsToSign IN CLOB) IS
        l_params_to_sign clob:=pParamsToSign;
        l_string_to_sign varchar2(2000):=NULL; 
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM users, JSON_TABLE(l_params_to_sign FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            )
            WHERE users.id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || pck_api.getCloudinaryAPISecret(l_session_data.user_id)), dbms_crypto.HASH_SH1));
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     ** Insert row in session_data table when user views home page.
     */
    PROCEDURE setClientInfo(pBodyText IN CLOB) IS
        l_ip_address session_data.ip_address%type;
    BEGIN
        l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        INSERT INTO session_data (session_id, timezone, maxtouchpoints, supports_popover, supports_eyedropper, ip_address)
        SELECT session_id, timezone, maxtouchpoints, supports_popover, supports_eyedropper, l_ip_address
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$[*]' COLUMNS (session_id, timezone, maxtouchpoints, supports_popover, supports_eyedropper));

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    PROCEDURE getSessionLog(SessionId IN NUMBER) IS
        l_content CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_content:='
        <table>
            <thead>
                <tr>
                    <th style="width:10%;text-align:left;">Log Time</th>
                    <th style="width:90%;text-align:left;">Log Message</th>
                </tr>
            </thead>
            <tbody>';
        FOR C IN (SELECT log_date, message 
                    FROM log
                   ORDER BY id DESC) 
        LOOP
            l_content:=l_content || '
                <tr>
                    <td>' || TO_CHAR(C.log_date AT TIME ZONE l_session_data.timezone, 'hh24:mi:ss') || '</td><td>' || REPLACE(C.message,chr(10),'<br>') || '</td>
                </tr>';
        END LOOP;
        l_content:=l_content || '
            </tbody>
        </table>';

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    /*
    ** GET CONTENT FOR A SELECTED WEBSITE
    */
    PROCEDURE getWebsite(pWebsiteId IN website.id%type) IS
        l_session_data pck_core.session_data_rt;
        l_website_id website.id%type;
        l_nav_labels LONG;
        l_thumbnails LONG;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        apex_json.open_object;
        FOR C IN (
            SELECT w.domain_name
              FROM website w
             WHERE w.id=pWebsiteId
               AND w.user_id=l_session_data.user_id) 
        LOOP
            apex_json.write('domain_name', C.domain_name);
        END LOOP;
        
        apex_json.write('nav_labels', pck_core.buildPageNav(pWebsiteId));
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Load metadata after media uploaded to Cloudinary.
     **  Insert uploaded asset metadata into ASSETS table
     */       
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB) IS
        l_session_data pck_core.session_data_rt;
        l_bodytext CLOB:=pBodyText;
        l_thumbnails CLOB;
        l_article_id asset.article_id%type;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT article_id INTO l_article_id FROM users, JSON_TABLE(l_bodytext,'$.images[*]' COLUMNS (article_id))  WHERE ROWNUM=1 AND users.id=l_session_data.user_id;

        INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, display_order, created_date, user_id)
        SELECT seq_asset.nextval, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, seq_asset.currval, current_timestamp, l_session_data.user_id
          FROM JSON_TABLE(l_bodytext, '$.images[*]' COLUMNS (article_id, public_id, width, height, bytes, resource_type, format, cld_cloud_name));

        UPDATE article SET (cover_asset_id, nb_assets) = (SELECT  MIN(id), COUNT(*) FROM asset WHERE article_id=l_article_id)
         WHERE id=l_article_id;

        pck_media.getThumbnails(l_article_id,pDeploy=>FALSE,pHtml=>l_thumbnails);

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('thumbnails', l_thumbnails);
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;  

    /*
     **  Upload Performance data from entries accumulated by Javascript Performance API
     */       
    PROCEDURE uploadPerformance(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        n PLS_INTEGER;
    BEGIN
        INSERT /*+ ignore_row_on_dupkey_index ( performance (session_id, url)) */ 
          INTO performance(id, asset_id, session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, capture_date, user_id, ip_address)
        WITH json AS 
        (
            SELECT session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, timestamp'1970-01-01 00:00:00' + numtodsinterval(epoch,'second') capture_date, l_user_id, l_ip_address
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, epoch))
        )
        SELECT seq_performance.nextval, a.id, j.session_id, j.url, j.connection_type, j.transfersize, j.duration, j.content_type, j.window_innerwidth, j.browser, j.capture_date, l_user_id, l_ip_address
          FROM json j, asset a
         WHERE j.cld_cloud_name=a.cld_cloud_name
           AND j.resource_type=a.resource_type
           AND j.public_id=a.public_id;

        INSERT /*+ ignore_row_on_dupkey_index ( servertiming (performance_id, seq)) */ 
          INTO servertiming(performance_id, seq, name, duration, description)
        WITH json AS 
        (
            SELECT session_id, url, seq, name, duration, description
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, url,
                        NESTED  '$.servertiming[*]' columns (seq for ordinality,name,duration,description))) 
        )
        SELECT p.id, j.seq, j.name, j.duration, j.description
          FROM json j, performance p
         WHERE p.session_id=j.session_id
           AND p.url=j.url
           AND j.seq IS NOT NULL;        

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object; 

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** Get contact email address signed by Terraform together with AWS gateway url
    */ 
    PROCEDURE getTerraformParameters(pUserId IN users.id%type, pContactEmail IN website.contact_email%type, pAwsGatewayUrl IN OUT VARCHAR2, pSignatureContactEmail IN OUT VARCHAR2) IS
        l_clob CLOB;
        l_clob2 CLOB;
        l_terraform_organization_name users.terraform_organization_name%type;
        l_terraform_workspace_name users.terraform_workspace_name%type;
        l_terraform_private_key users.terraform_private_key%type;
        l_terraform_private_key_raw RAW(4000);
        l_terraform_url VARCHAR2(200);
        l_signed_data RAW(4000);
    BEGIN
        pck_api.getTerraformData(pUserId, l_terraform_organization_name, l_terraform_workspace_name, l_terraform_private_key);

        pck_api.callTerraformAPI(pUserId=>pUserId, pEndpoint=>'api/v2/organizations/' || l_terraform_organization_name || '/workspaces/' || l_terraform_workspace_name, pMethod=>'GET', pData=>l_clob);

        FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
            pck_api.callTerraformAPI(pUserId=>pUserId, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob2);
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob2, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                pAwsGatewayUrl:=C1.value || '/';
            END LOOP;
        END LOOP;

        l_terraform_private_key_raw:=utl_i18n.string_to_raw(regexp_replace(l_terraform_private_key,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\s?|\s)',''));

        l_signed_data:=DBMS_CRYPTO.SIGN(src =>utl_i18n.string_to_raw(pContactEmail), prv_key =>l_terraform_private_key_raw, pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,sign_alg =>dbms_crypto.SIGN_SHA256_RSA);

        pSignatureContactEmail:=utl_i18n.raw_to_char(utl_encode.base64_encode(l_signed_data));
    END;

    /*
     **  Get requested page content (text and media)
     */    
    PROCEDURE getArticle(pArticleId IN article.id%type)  IS
        l_thumbnails CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (
            SELECT body_html, apex_util.get_since(COALESCE(updated_date, created_date)) updated_date
            FROM article
            WHERE id=pArticleId
            AND author_user_id=l_session_data.user_id)
        LOOP
            pck_media.getThumbnails(pArticleId, pDeploy=>FALSE, pHtml=>l_thumbnails);
            apex_json.open_object;
            apex_json.write('success', TRUE); 
            apex_json.write('html', C.body_html);
            apex_json.write('thumbnails', l_thumbnails);
            apex_json.write('updated_date', C.updated_date);
            apex_json.close_object;
        END LOOP;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END; 

    /*
     **  Return list of articles owned by parent article id (i.e. subpages)
     **  parameter is constructed as "parent_id, article_id" where parent_id is the selected Page id
     **  article_id will be "0" if no Page selected - i.e. user clicked on caret button before clicking on a Page
     **  article_id will be the last selected subpage article id if user had selected one - in which case we highlight it in the returned list
     **  article_id may be unrelated to the parent_id if user clicked on caret button having previously clicked on some unrelated Page or subpage
     */    
    PROCEDURE getArticles(pId IN VARCHAR2)  IS
        l_content CLOB;
        l_collection_type website_article.collection_type%type;
        l_parent_id article.id%type;
        l_subarticle_id article.id%type;
        l_item VARCHAR2(500);
        l_url VARCHAR2(500);
        l_session_data pck_core.session_data_rt;
        l_subarticle_selected BOOLEAN:=FALSE;
        l_thumbnails CLOB;
        n PLS_INTEGER:=0;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_parent_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_subarticle_id:=SUBSTR(pId,INSTR(pId,',')+1);

        SELECT collection_type INTO l_collection_type FROM website_article WHERE article_id=l_parent_id;

        FOR C IN (
            SELECT art.id, NVL(art.title,'&#9888; TITLE MISSING') title, apex_util.get_since(COALESCE(art.updated_date, art.created_date)) updated_date,
                    ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width
              FROM article art, asset ass
             WHERE art.parent_id=l_parent_id
               AND art.author_user_id=l_session_data.user_id
               AND art.cover_asset_id=ass.id(+)
             ORDER BY art.display_order NULLS FIRST, art.updated_date DESC) 
        LOOP
            CASE l_collection_type
                WHEN 'BLOG' THEN
                    l_item:='<li data-id="' || C.id || '"><a class="with-icon nav-label subpage">';
                    IF (C.id=l_subarticle_id) THEN 
                        l_item:=l_item || '&#9656;&nbsp;';
                        l_subarticle_selected:=TRUE;
                    END IF;
                    l_item:=l_item || C.title || '</a></li>';
                WHEN 'MEDIA' THEN
                    l_item:='<li data-id="' || C.id || '" title="' || C.title || '">';
                    IF (C.cld_cloud_name IS NOT NULL) THEN
                        l_item:=l_item || '<a class="nav-label subpage"><img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '"></a>';
                    END IF;
                    IF (C.id=l_subarticle_id) THEN
                        l_subarticle_selected:=TRUE;
                    END IF;
                    l_item:=l_item || '</li>';
            END CASE;
            l_content:=l_content || TO_CLOB(l_item);
        END LOOP;        
        
        apex_json.open_object;
        apex_json.write('success', TRUE); 
        /* Check subarticle exists within parent article - if not then return html and thumbnails of the parent */
        IF  (NOT l_subarticle_selected) AND (l_parent_id<>l_subarticle_id) THEN
            FOR C IN (SELECT body_html, apex_util.get_since(COALESCE(updated_date, created_date)) updated_date FROM article WHERE id=l_parent_id) LOOP
                apex_json.write('html', C.body_html);
                apex_json.write('updated_date', C.updated_date);
                pck_media.getThumbnails(l_parent_id, pDeploy=>FALSE, pHtml=>l_thumbnails);
                apex_json.write('thumbnails', l_thumbnails);
            END LOOP;
        END IF;
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END; 

    /*
     **  Insert new sub page 
     */        
    PROCEDURE insertCollection(pParentId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT id FROM article WHERE id=pParentId AND author_user_id=l_session_data.user_id) LOOP
            INSERT INTO article (id, parent_id, author_user_id, created_date) VALUES (seq_article.nextval, pParentId, l_session_data.user_id, current_timestamp);
        END LOOP;
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('article_id', seq_article.currval);
        APEX_JSON.close_object;
    END;

    /*
     **  Restore article content to prior to last login
     */        
    PROCEDURE restoreArticle(pArticleId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
        l_timestamp TIMESTAMP;
        l_body_html article.body_html%type;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT login_date INTO l_timestamp FROM user_login WHERE apex_session_id=l_session_data.session_id;
        SELECT body_html INTO l_body_html FROM article AS OF TIMESTAMP l_timestamp WHERE id=pArticleId;
        UPDATE article SET body_html=l_body_html WHERE id=pArticleId;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Procedure called by the autoSave feature of CKEditor
     */        
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
        l_word_count article.word_count%type;
        l_parent_id article.parent_id%type;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        UPDATE article t SET (t.title, t.word_count, t.body_html, t.updated_date) = 
            (
                SELECT SUBSTR(title,1,100) title, REGEXP_SUBSTR(word_count,'(\d)+') word_count, body_html, current_timestamp as updated_date
                FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (title, word_count, body_html CLOB))
            )
        WHERE t.id=pArticleId
          AND t.author_user_id=l_session_data.user_id
        RETURNING t.parent_id, t.word_count INTO l_parent_id, l_word_count;

        UPDATE website SET updated_date=current_timestamp 
         WHERE user_id=l_session_data.user_id
           AND id IN (SELECT website_id FROM website_article WHERE article_id=COALESCE(l_parent_id,pArticleId));

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('message', 'Saved ' || l_word_count || ' words');
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Reorder rows in specified table - i.e. update column DISPLAY_ORDER
     */
    PROCEDURE reorder(pId IN NUMBER, pBodyText IN CLOB) IS
        l_table_name VARCHAR2(30);
        l_dbid_string LONG;

        TYPE t_table_id IS RECORD(
            id NUMBER,
            display_order NUMBER);
        TYPE tt_table_id IS TABLE OF t_table_id;
        l_table_ids tt_table_id; 

        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT table_name, dbid_string 
          INTO l_table_name, l_dbid_string 
          FROM users, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (table_name, dbid_string))
         WHERE users.id=l_session_data.user_id;

        SELECT column_value, rownum 
          BULK COLLECT INTO l_table_ids
          FROM TABLE(apex_string.split(l_dbid_string,':'));

        CASE l_table_name
            WHEN 'website_article' THEN
                FORALL i IN l_table_ids.first .. l_table_ids.last
                UPDATE website_article 
                   SET display_order=l_table_ids(i).display_order 
                 WHERE website_id = pId
                   AND article_id=l_table_ids(i).id;

            WHEN 'article' THEN
                FORALL i IN l_table_ids.first .. l_table_ids.last
                UPDATE article 
                   SET display_order=l_table_ids(i).display_order 
                 WHERE parent_id = pId
                   AND id=l_table_ids(i).id;

            WHEN 'asset' THEN
                FORALL i IN l_table_ids.first .. l_table_ids.last
                UPDATE asset 
                   SET display_order=l_table_ids(i).display_order 
                 WHERE id=l_table_ids(i).id;
                --
                UPDATE article SET cover_asset_id=l_table_ids(1).id WHERE id=pId;
        END CASE;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** Logout authenticated session
    */
    PROCEDURE signout IS
        session_ended EXCEPTION;
        PRAGMA EXCEPTION_INIT(session_ended,-20987);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        BEGIN 
            apex_session.delete_session(p_session_id=>l_session_data.session_id);
            EXCEPTION WHEN session_ended THEN NULL;
        END;
        /*
        owa_cookie.send(
            name => 'ORA_WWV_APP_101',
            value => null,
            expires => sysdate -1, 
            path =>'ords' );
        */
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;     

END;
/