CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS" is
    --
    PROCEDURE daily_job;
    --
    PROCEDURE deleteAll(pUserId IN users.id%type);
    --
    PROCEDURE deleteArticle;
    --
    PROCEDURE deleteAsset;
    --
    FUNCTION getPageContent RETURN CLOB;
    --
    PROCEDURE getCldDetails(pArticleId IN article.id%type);
    --
    PROCEDURE getCldSignature(pParamsToSign IN CLOB);
    --
    PROCEDURE getArticle(pArticleId IN article.id%type);
    --
    PROCEDURE getPerformance;
    --
    PROCEDURE getThumbnails(pArticleId IN article.id%type);
    --
    PROCEDURE getUsage(pUserId IN users.id%type DEFAULT NULL, pUsageDate IN DATE DEFAULT NULL);
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2);
    --
    PROCEDURE manual_restore(pPassword IN VARCHAR2);
    --
    PROCEDURE publishArticle;
    --
    PROCEDURE reorderAssets;
    --
    PROCEDURE saveArticle;
    --
    PROCEDURE setClientInfo(pBodyText IN CLOB);
    --
    PROCEDURE signout;
    --
    PROCEDURE updateAsset;
    --
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE uploadWebVitals(pBodyText IN CLOB);
    --
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB);
    --
    PROCEDURE uploadPerformance(pBodyText IN CLOB);
    --
    PROCEDURE updateUser;
    --    
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS" is
    
    g_cloudinary_svg LONG:='<svg id="cld-main-logo" viewBox="0 0 500 96.77">
      <title>Cloudinary Logo</title>
      <defs>
        <style>
          .cls-1 {
            fill: #3448c5;
          }
        </style>
      </defs>
      <g id="Layer_2" data-name="Layer 2">
        <g id="Layer_1-2" data-name="Layer 1">
          <path class="cls-1" d="M160.53,30.41a17.14,17.14,0,0,1,13.56,6.7.69.69,0,0,0,1,.11l5.71-4.55a.71.71,0,0,0,.11-1,26,26,0,0,0-20.61-10.13c-14.91,0-27,12.85-27,28.65s12.13,28.65,27,28.65A25.85,25.85,0,0,0,180.9,68.72a.69.69,0,0,0-.12-1l-5.7-4.5a.71.71,0,0,0-1,.11A17.26,17.26,0,0,1,160.53,70c-10.19,0-18.16-8.7-18.16-19.79S150.34,30.41,160.53,30.41Z"></path>
          <path class="cls-1" d="M188.27,19.91h7.16a.71.71,0,0,1,.71.71V77.4a.7.7,0,0,1-.7.7h-7.16a.71.71,0,0,1-.71-.71V20.62A.7.7,0,0,1,188.27,19.91Z"></path>
          <path class="cls-1" d="M220.54,39.55c-9.49,0-19.09,6.72-19.09,19.57,0,11.29,8.21,19.81,19.09,19.81s19.17-8.52,19.17-19.81S231.47,39.55,220.54,39.55Zm10.53,19.57c0,6.52-4.53,11.44-10.53,11.44S210.1,65.64,210.1,59.12s4.49-11.2,10.44-11.2S231.07,52.73,231.07,59.12Z"></path>
          <path class="cls-1" d="M278.3,40.37h-7.16a.7.7,0,0,0-.71.7v19c0,7.42-5.12,10.05-9.51,10.05-3.88,0-7.79-2.93-7.79-9.48V41.07a.7.7,0,0,0-.71-.7h-7.16a.7.7,0,0,0-.7.7v20.5c0,11.25,5.09,17.44,14.34,17.44,3.36,0,8.8-1.93,10.84-6.19l.69.14V77.4a.71.71,0,0,0,.71.71h7.16a.71.71,0,0,0,.71-.71V41.07A.7.7,0,0,0,278.3,40.37Z"></path>
          <path class="cls-1" d="M322.27,19.91H315.1a.7.7,0,0,0-.7.71V46l-.44-.7c-2.18-3.51-6.87-5.78-11.95-5.78-8.76,0-17.62,6.75-17.62,19.65,0,11.25,7.61,19.73,17.69,19.73,3.84,0,9.25-1.54,11.88-5.86l.44-.72V77.4a.7.7,0,0,0,.7.71h7.17a.7.7,0,0,0,.7-.71V20.62A.7.7,0,0,0,322.27,19.91Zm-8,39.21a11,11,0,0,1-10.75,11.36c-5.86,0-10.45-5-10.45-11.36s4.59-11.2,10.45-11.2A11,11,0,0,1,314.24,59.12Z"></path>
          <path class="cls-1" d="M333,40.37h7.16a.7.7,0,0,1,.7.7V77.4a.7.7,0,0,1-.7.7H333a.71.71,0,0,1-.71-.71V41.07A.71.71,0,0,1,333,40.37Z"></path>
          <path class="cls-1" d="M336.61,21.06a5.57,5.57,0,0,0-5.69,5.57,5.64,5.64,0,0,0,5.69,5.58,5.54,5.54,0,0,0,5.61-5.58A5.48,5.48,0,0,0,336.61,21.06Z"></path>
          <path class="cls-1" d="M370.35,39.55c-3.14,0-8.72,1.69-10.85,6.19l-.69-.14V41.07a.7.7,0,0,0-.71-.7h-7.16a.7.7,0,0,0-.7.7V77.4a.7.7,0,0,0,.7.71h7.16a.71.71,0,0,0,.71-.71v-19c0-7.36,5.12-10,9.51-10,3.88,0,7.79,2.91,7.79,9.4V77.4a.71.71,0,0,0,.71.71H384a.71.71,0,0,0,.71-.71V56.91C384.69,45.72,379.59,39.55,370.35,39.55Z"></path>
          <path class="cls-1" d="M427.48,40.37h-7.16a.7.7,0,0,0-.71.7v5l-.43-.7c-2.19-3.51-6.88-5.78-12-5.78-8.75,0-17.62,6.75-17.62,19.65,0,11.25,7.61,19.73,17.7,19.73,3.83,0,9.24-1.54,11.88-5.86l.43-.72V77.4a.71.71,0,0,0,.71.71h7.16a.7.7,0,0,0,.7-.71V41.07A.7.7,0,0,0,427.48,40.37Zm-8,18.75A11,11,0,0,1,408.7,70.48c-5.86,0-10.44-5-10.44-11.36s4.58-11.2,10.44-11.2A11,11,0,0,1,419.46,59.12Z"></path>
          <path class="cls-1" d="M460.15,40.5a13.66,13.66,0,0,0-5.14-1c-4.76,0-8.22,2.85-10,8.25l-.64-.09V41.07a.7.7,0,0,0-.71-.7h-7.16a.7.7,0,0,0-.71.7V77.4a.71.71,0,0,0,.71.71h7.24a.7.7,0,0,0,.7-.71V65c0-14.8,5.91-17,9.44-17a11,11,0,0,1,4.33.9.72.72,0,0,0,.61,0,.7.7,0,0,0,.36-.48l1.42-7.11A.71.71,0,0,0,460.15,40.5Z"></path>
          <path class="cls-1" d="M499.88,40.68a.69.69,0,0,0-.59-.31h-7.71a.72.72,0,0,0-.66.45L481.59,65l-9.42-24.18a.72.72,0,0,0-.66-.45h-7.86a.69.69,0,0,0-.58.31.7.7,0,0,0-.07.66l14,34.38-7.73,20.09a.71.71,0,0,0,.66,1h7.5a.69.69,0,0,0,.65-.45l21.86-55A.69.69,0,0,0,499.88,40.68Z"></path>
          <path class="cls-1" d="M97.91,28.11A40.38,40.38,0,0,0,59.73,0,39.62,39.62,0,0,0,24.6,20.87a29.88,29.88,0,0,0-7.21,56.56l.75.34h.05v-8.5a22.29,22.29,0,0,1,9.29-41.16l2.1-.22L30.5,26A32.15,32.15,0,0,1,59.73,7.57a32.7,32.7,0,0,1,31.55,25L92,35.43l3,0a18.53,18.53,0,0,1,18.15,18.46c0,7.05-4.07,12.82-11,15.74v8.06l.5-.16c11.14-3.65,18.06-12.71,18.06-23.64A26.19,26.19,0,0,0,97.91,28.11Z"></path>
          <path class="cls-1" d="M45.07,76.79l1.66,1.66a.33.33,0,0,1-.23.56H33.4a6,6,0,0,1-6-6V47.57a.33.33,0,0,0-.33-.33H24.27a.33.33,0,0,1-.24-.56L35.15,35.56a.33.33,0,0,1,.47,0L46.73,46.68a.33.33,0,0,1-.23.56H43.66a.34.34,0,0,0-.34.33v25A6,6,0,0,0,45.07,76.79Z"></path>
          <path class="cls-1" d="M69.64,76.79l1.67,1.66a.33.33,0,0,1-.24.56H58a6,6,0,0,1-6-6V54a.34.34,0,0,0-.33-.34H48.84a.33.33,0,0,1-.23-.56L59.72,42a.33.33,0,0,1,.47,0L71.31,53.08a.33.33,0,0,1-.24.56H68.23a.34.34,0,0,0-.33.34V72.57A6,6,0,0,0,69.64,76.79Z"></path>
          <path class="cls-1" d="M94.22,76.79l1.66,1.66a.33.33,0,0,1-.23.56H82.54a6,6,0,0,1-6-6V60.38a.33.33,0,0,0-.33-.33H73.41a.33.33,0,0,1-.23-.57L84.3,48.37a.32.32,0,0,1,.46,0L95.88,59.48a.33.33,0,0,1-.23.57H92.8a.33.33,0,0,0-.33.33V72.57A6,6,0,0,0,94.22,76.79Z"></path>
        </g>
      </g>
    </svg>';
 
     g_oracle_svg LONG:='<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 786.9448547363281 713.8074645996094" preserveAspectRatio="xMidYMid meet">
  <!-- svg-source:excalidraw -->
  
  <defs>
    <style class="style-fonts">
      @font-face {
        font-family: "Virgil";
        src: url("https://excalidraw.com/Virgil.woff2");
      }
      @font-face {
        font-family: "Cascadia";
        src: url("https://excalidraw.com/Cascadia.woff2");
      }
    </style>
  </defs>
  <rect x="0" y="0" width="786.9448547363281" height="713.8074645996094" fill="#ffffff"></rect><g stroke-linecap="round" transform="translate(10 10) rotate(0 383.47242736816406 184.60592651367188)"><path d="M32 0 M32 0 C212.08 1.69, 391.69 1.36, 734.94 0 M32 0 C272.38 0.09, 512.56 -0.01, 734.94 0 M734.94 0 C758.23 -0.79, 766.59 10.21, 766.94 32 M734.94 0 C757.51 -0.25, 768.1 11.76, 766.94 32 M766.94 32 C765.73 144.62, 764.46 255.82, 766.94 337.21 M766.94 32 C765.64 127.55, 766.22 222.65, 766.94 337.21 M766.94 337.21 C766.88 356.61, 757.55 370.29, 734.94 369.21 M766.94 337.21 C769.21 358.29, 758.03 369.66, 734.94 369.21 M734.94 369.21 C499.75 369.51, 265.4 369.8, 32 369.21 M734.94 369.21 C506 368.74, 278.14 368.35, 32 369.21 M32 369.21 C12 370.75, -0.91 357.95, 0 337.21 M32 369.21 C9.63 367.09, -2.01 359.07, 0 337.21 M0 337.21 C-0.36 231.18, -0.31 121.94, 0 32 M0 337.21 C0.84 217.4, 1.69 99.02, 0 32 M0 32 C0.04 11.54, 10.42 -0.07, 32 0 M0 32 C0.08 8.6, 10.75 -2.22, 32 0" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(79.83111572265625 31.40155029296875) rotate(0 321.3899230957031 22.5)"><text x="0" y="0" font-family="Virgil, Segoe UI Emoji" font-size="36px" fill="#f0000f" text-anchor="start" style="white-space: pre;" direction="ltr" dominant-baseline="text-before-edge">ORACLE CLOUD INFRASTRUCTURE</text></g><g stroke-linecap="round" transform="translate(70.62078857421875 581.0865783691406) rotate(0 41.74928283691406 41.74928283691406)"><path d="M55.9 1.89 C62.69 3.51, 69.62 10.23, 74.3 15.99 C78.98 21.76, 83.3 28.98, 83.98 36.48 C84.66 43.97, 81.77 54, 78.4 60.96 C75.02 67.92, 69.94 74.4, 63.72 78.25 C57.5 82.11, 48.78 84.43, 41.07 84.09 C33.36 83.75, 23.95 80.51, 17.47 76.22 C10.99 71.94, 4.92 65.27, 2.21 58.38 C-0.5 51.49, -0.45 42.25, 1.21 34.88 C2.87 27.52, 7.22 19.68, 12.17 14.17 C17.13 8.66, 23.49 3.78, 30.94 1.82 C38.4 -0.14, 52.23 1.83, 56.89 2.39 C61.56 2.96, 59.3 4.56, 58.92 5.19 M46.73 -0.2 C53.88 0.51, 62.15 6.49, 67.78 11.38 C73.41 16.26, 77.93 22.22, 80.49 29.1 C83.04 35.99, 84.96 45.46, 83.11 52.68 C81.26 59.9, 75.14 67.61, 69.36 72.42 C63.59 77.24, 55.87 80.43, 48.46 81.55 C41.05 82.67, 31.74 82.23, 24.91 79.15 C18.08 76.06, 11.65 69.16, 7.46 63.07 C3.27 56.97, -0.1 49.8, -0.23 42.59 C-0.36 35.37, 2.7 26.35, 6.68 19.77 C10.65 13.2, 16.68 6.39, 23.62 3.15 C30.56 -0.08, 44.24 0.94, 48.3 0.38 C52.37 -0.18, 48.4 -0.96, 48 -0.22" stroke="none" stroke-width="0" fill="#868e96"></path><path d="M59.12 4.05 C66.09 6.34, 73.45 12.93, 77.59 19.1 C81.74 25.27, 84.07 33.48, 84 41.08 C83.93 48.69, 81.39 58.17, 77.17 64.72 C72.95 71.27, 65.75 77.21, 58.7 80.39 C51.65 83.56, 42.4 85.04, 34.86 83.77 C27.33 82.51, 18.93 77.87, 13.48 72.79 C8.04 67.71, 4.28 60.52, 2.17 53.3 C0.06 46.07, -1.31 36.82, 0.83 29.45 C2.96 22.09, 9.04 13.88, 14.96 9.11 C20.88 4.34, 28.83 1.71, 36.35 0.82 C43.88 -0.07, 55.86 2.94, 60.11 3.77 C64.36 4.59, 62.13 4.94, 61.85 5.8 M49.04 1.54 C56.37 2.67, 65.46 6.73, 70.79 12.02 C76.12 17.31, 79.41 25.83, 81.03 33.27 C82.66 40.71, 82.61 49.97, 80.53 56.67 C78.45 63.37, 74.5 68.89, 68.55 73.47 C62.59 78.04, 52.54 83.51, 44.79 84.12 C37.04 84.73, 28.67 81, 22.03 77.1 C15.4 73.2, 8.82 66.98, 4.99 60.72 C1.15 54.46, -1.4 46.88, -0.97 39.55 C-0.53 32.21, 2.82 23.05, 7.6 16.72 C12.38 10.39, 20.66 3.97, 27.69 1.55 C34.71 -0.86, 46.08 1.98, 49.75 2.24 C53.42 2.49, 49.68 2.78, 49.71 3.09" stroke="#000000" stroke-width="1" fill="none"></path></g><g stroke-linecap="round"><g transform="translate(95.96489555868675 597.8370674741029) rotate(0 13.148185171917902 24.652908421457653)" fill-rule="evenodd"><path d="M-1.4 -0.69 L5.83 3.58 L9.02 4.92 L22.5 2.72 L31.82 -1.62 L31.16 4.78 L34.93 6.82 L36.04 16.65 L35.47 24.79 L30.97 31.09 L22.32 33.78 L24.01 36.12 L26.09 51.07 L11.09 49.15 L8.53 44.46 L1.62 44.67 L-0.76 41.75 L-8.68 32.53 L-5.89 33.1 L1.51 40.28 L10.43 38.34 L11.04 32.91 L3.32 28.85 L-0.39 25.17 L-2.79 16.5 L-1.11 9.91 L0.09 7.61 L0.13 0.13" stroke="none" stroke-width="0" fill="#fff" fill-rule="evenodd"></path><path d="M1.04 -0.89 C2.04 -0.48, 4.03 0.3, 5.04 1.3 C6.04 2.3, 6.18 4.73, 7.05 5.13 C7.93 5.54, 8.13 3.97, 10.28 3.74 C12.43 3.5, 17.58 3.81, 19.95 3.74 C22.32 3.66, 23.25 3.81, 24.5 3.29 C25.74 2.78, 26.31 1.49, 27.4 0.65 C28.49 -0.2, 30.49 -2.21, 31.03 -1.79 C31.57 -1.38, 30.64 2.06, 30.63 3.14 C30.62 4.21, 30.43 3.62, 30.95 4.65 C31.47 5.68, 33.17 7.09, 33.76 9.32 C34.34 11.55, 34.25 15.19, 34.47 18.03 C34.68 20.88, 35.69 24.21, 35.04 26.4 C34.38 28.59, 31.88 30.23, 30.54 31.17 C29.19 32.11, 28.22 31.62, 26.96 32.05 C25.7 32.48, 23.79 33.54, 22.99 33.75 C22.19 33.95, 22.01 32.63, 22.15 33.28 C22.28 33.92, 23.35 35.59, 23.81 37.61 C24.27 39.63, 24.89 43.17, 24.9 45.4 C24.91 47.63, 24.17 49.91, 23.86 50.97 C23.56 52.04, 24.91 51.9, 23.07 51.77 C21.23 51.65, 15.02 50.44, 12.83 50.24 C10.63 50.04, 10.43 51.8, 9.92 50.58 C9.4 49.36, 10.24 44.05, 9.72 42.91 C9.21 41.76, 8.13 43.31, 6.8 43.74 C5.46 44.16, 3.18 45.65, 1.71 45.44 C0.23 45.23, -1.18 43.78, -2.06 42.46 C-2.94 41.14, -2.71 38.44, -3.57 37.53 C-4.43 36.62, -6.17 37.39, -7.22 37 C-8.27 36.61, -10.17 35.75, -9.86 35.21 C-9.56 34.67, -6.31 33.68, -5.4 33.75 C-4.48 33.83, -5.36 34.54, -4.36 35.67 C-3.37 36.8, -0.9 39.45, 0.59 40.52 C2.08 41.6, 3.48 42.12, 4.58 42.13 C5.67 42.13, 6.27 40.93, 7.15 40.56 C8.04 40.19, 9.67 40.67, 9.91 39.88 C10.14 39.09, 8.35 36.56, 8.57 35.8 C8.8 35.05, 10.55 35.55, 11.26 35.35 C11.96 35.14, 13.41 35.18, 12.8 34.56 C12.2 33.95, 9.41 32.52, 7.63 31.64 C5.85 30.77, 3.38 30.04, 2.14 29.31 C0.9 28.59, 0.86 29.07, 0.19 27.3 C-0.47 25.54, -1.83 21.86, -1.85 18.72 C-1.88 15.57, -0.57 10.37, 0.03 8.43 C0.62 6.48, 1.85 7.64, 1.74 7.02 C1.62 6.4, -0.56 6.01, -0.65 4.71 C-0.75 3.41, 1.16 -0.03, 1.16 -0.76 M0.12 1.26 C1.15 1.96, 3.55 2.45, 4.6 2.77 C5.65 3.09, 5.45 3.41, 6.42 3.19 C7.39 2.98, 7.86 1.3, 10.4 1.5 C12.93 1.69, 19.62 4.27, 21.62 4.37 C23.63 4.47, 21.29 2.41, 22.42 2.09 C23.55 1.77, 27.08 3.25, 28.42 2.46 C29.76 1.67, 29.8 -2.58, 30.46 -2.65 C31.11 -2.71, 32.16 0.43, 32.36 2.09 C32.56 3.74, 31.43 5.87, 31.68 7.29 C31.92 8.7, 33.1 8.82, 33.83 10.58 C34.57 12.34, 35.81 15.39, 36.09 17.86 C36.37 20.33, 36.03 23.14, 35.53 25.4 C35.03 27.67, 34.47 30.44, 33.1 31.44 C31.74 32.44, 29.39 31.38, 27.35 31.41 C25.3 31.43, 21.41 31.26, 20.84 31.6 C20.27 31.93, 23.12 32.3, 23.93 33.41 C24.73 34.52, 25.76 36.21, 25.68 38.26 C25.59 40.3, 23.75 43.81, 23.43 45.69 C23.11 47.56, 24.02 48.66, 23.75 49.52 C23.47 50.39, 24.06 50.48, 21.78 50.88 C19.5 51.28, 12.07 52.08, 10.07 51.94 C8.07 51.79, 9.55 51.18, 9.76 50.03 C9.97 48.88, 11.58 46.16, 11.34 45.06 C11.1 43.96, 9.81 43.38, 8.32 43.45 C6.84 43.51, 3.95 45.71, 2.43 45.45 C0.9 45.19, 0.51 42.95, -0.8 41.88 C-2.12 40.82, -4.37 40.12, -5.45 39.05 C-6.54 37.99, -6.84 36.25, -7.32 35.48 C-7.81 34.71, -8.64 34.5, -8.35 34.45 C-8.05 34.41, -6.69 34.76, -5.54 35.21 C-4.39 35.66, -2.17 36.24, -1.43 37.15 C-0.69 38.06, -1.85 40.14, -1.08 40.65 C-0.3 41.15, 1.61 40.3, 3.22 40.17 C4.82 40.04, 7.32 40.21, 8.54 39.86 C9.77 39.51, 10.31 38.41, 10.55 38.06 C10.79 37.72, 9.69 38.26, 9.98 37.78 C10.26 37.3, 11.83 36.12, 12.24 35.18 C12.65 34.23, 13.38 32.72, 12.44 32.1 C11.5 31.47, 8.21 31.87, 6.59 31.41 C4.97 30.96, 4.09 29.97, 2.71 29.37 C1.34 28.77, -0.78 29.5, -1.64 27.82 C-2.5 26.13, -2.28 22.34, -2.45 19.26 C-2.62 16.18, -3.27 11.4, -2.66 9.35 C-2.05 7.29, 0.58 7.59, 1.21 6.95 C1.85 6.3, 1.24 6.9, 1.16 5.47 C1.09 4.05, 1.07 -0.49, 0.79 -1.59" stroke="#000000" stroke-width="1" fill="none"></path></g></g><mask></mask><g stroke-linecap="round" transform="translate(51.009063720703125 538.0015563964844) rotate(0 345.90032958984375 82.9029541015625)"><path d="M32 0 M32 0 C233.98 -0.54, 436.89 -1.2, 659.8 0 M32 0 C263.06 2.28, 494.92 2.49, 659.8 0 M659.8 0 C679.44 0.45, 691.95 11.25, 691.8 32 M659.8 0 C683.07 -1.14, 693.24 8.78, 691.8 32 M691.8 32 C693.81 70.59, 693.92 109.64, 691.8 133.81 M691.8 32 C692.91 67.9, 691.57 101.99, 691.8 133.81 M691.8 133.81 C693.18 153.81, 682.05 164.89, 659.8 165.81 M691.8 133.81 C690.31 153.67, 682.91 165.69, 659.8 165.81 M659.8 165.81 C523.87 166.96, 388.75 166.74, 32 165.81 M659.8 165.81 C464.14 166.15, 267.64 166.09, 32 165.81 M32 165.81 C9.77 166.7, 1.78 156.62, 0 133.81 M32 165.81 C8.86 164.01, -0.54 153.44, 0 133.81 M0 133.81 C0 105.75, 1.1 77.47, 0 32 M0 133.81 C-0.8 94.94, 0.05 54.91, 0 32 M0 32 C-1.17 8.72, 12.15 -1.58, 32 0 M0 32 C-1.48 11.6, 10.62 1.31, 32 0" stroke="#000000" stroke-width="1" fill="none"></path></g><g stroke-linecap="round"><g transform="translate(125.12301272956472 165.38497023474844) rotate(0 51.06445946820372 47.84720910885022)" fill-rule="evenodd"><path d="M-0.14 0.03 L-0.74 94.38 L2.4 97.9 L8.42 100.77 L22.68 102.89 L53.27 107.31 L85.93 101.69 L90.87 99.13 L98.5 96.82 L100.43 92.02 L101.5 1.85 L96.36 -2.13 L72.76 -8.86 L47.62 -12.89 L17.4 -6.73 L-1.78 -0.49" stroke="none" stroke-width="0" fill="#fa5252" fill-rule="evenodd"></path><path d="M-0.74 0.36 C-0.82 13.77, -1.49 64.14, -0.96 80.11 C-0.44 96.08, -0.02 92.66, 2.43 96.17 C4.88 99.68, 8.84 99.46, 13.73 101.19 C18.62 102.93, 25.38 105.49, 31.76 106.59 C38.14 107.68, 46.11 107.98, 52.02 107.76 C57.92 107.55, 61.94 106.21, 67.2 105.29 C72.46 104.38, 78.26 104.07, 83.57 102.26 C88.88 100.44, 96.34 97.96, 99.09 94.41 C101.83 90.86, 99.54 94.8, 100.03 80.95 C100.53 67.09, 102.11 24.73, 102.05 11.28 C101.99 -2.17, 102.27 3.15, 99.67 0.25 C97.07 -2.65, 90.84 -4.27, 86.45 -6.13 C82.05 -7.98, 78.73 -10.02, 73.3 -10.86 C67.88 -11.7, 58.71 -11.15, 53.89 -11.15 C49.07 -11.16, 50.21 -11.25, 44.41 -10.88 C38.61 -10.52, 26.65 -10.72, 19.1 -8.96 C11.55 -7.19, 2.31 -1.76, -0.92 -0.29 M1.08 -0.5 C1.4 13.06, 1.09 64.7, 1.24 81.05 C1.4 97.4, -0.1 94.08, 2 97.61 C4.1 101.14, 8.56 101.18, 13.84 102.22 C19.13 103.26, 27.68 102.99, 33.7 103.83 C39.71 104.68, 44.33 107.29, 49.92 107.28 C55.51 107.27, 61.83 104.73, 67.23 103.78 C72.63 102.83, 76.73 102.85, 82.34 101.58 C87.94 100.32, 97.82 99.73, 100.84 96.19 C103.87 92.65, 100.2 94.3, 100.51 80.34 C100.82 66.37, 102.5 25.74, 102.69 12.38 C102.88 -0.99, 104.43 3.33, 101.66 0.14 C98.89 -3.06, 90.95 -4.83, 86.1 -6.78 C81.25 -8.73, 77.96 -10.72, 72.55 -11.56 C67.14 -12.4, 58.67 -12.16, 53.64 -11.84 C48.6 -11.52, 48.26 -10.21, 42.35 -9.63 C36.44 -9.05, 25.08 -9.94, 18.18 -8.35 C11.29 -6.76, 4.3 -1.47, 0.98 -0.07" stroke="#c92a2a" stroke-width="1" fill="none"></path></g></g><mask></mask><g stroke-linecap="round" transform="translate(124.74955045228933 153.06011620710393) rotate(0 50.626483401915095 13.765081576212367)"><path d="M27.97 0.7 C36.09 -0.41, 47.76 0.51, 57.57 1.09 C67.39 1.66, 79.6 2.44, 86.87 4.15 C94.15 5.86, 99.65 8.76, 101.22 11.36 C102.79 13.97, 100.68 17.26, 96.28 19.79 C91.88 22.32, 83.75 25.28, 74.8 26.55 C65.85 27.81, 52.39 27.98, 42.56 27.39 C32.74 26.8, 22.68 24.81, 15.85 23.01 C9.01 21.22, 3.24 19.32, 1.55 16.61 C-0.14 13.89, 0.46 9.37, 5.72 6.7 C10.97 4.03, 27.21 1.54, 33.07 0.6 C38.94 -0.33, 40.42 0.7, 40.91 1.07 M51.55 1.19 C60.95 0.89, 71.88 0.02, 79.76 1.49 C87.64 2.97, 95.57 7.45, 98.8 10.03 C102.04 12.61, 102.51 14.53, 99.18 16.99 C95.86 19.44, 86.84 23.24, 78.85 24.77 C70.86 26.3, 60.95 26.24, 51.25 26.16 C41.55 26.08, 28.54 25.5, 20.64 24.28 C12.73 23.07, 6.61 21.28, 3.81 18.87 C1.01 16.47, 0.89 12.46, 3.84 9.86 C6.78 7.27, 13.57 5.1, 21.47 3.29 C29.37 1.48, 46.39 -0.48, 51.22 -1 C56.05 -1.53, 50.27 -0.46, 50.46 0.15" stroke="none" stroke-width="0" fill="#ffffff"></path><path d="M64.05 0.1 C73.42 0.68, 84.74 3.42, 91.08 5.44 C97.42 7.46, 101.84 9.6, 102.09 12.2 C102.34 14.8, 98.28 18.69, 92.57 21.04 C86.86 23.39, 77.19 25.37, 67.81 26.29 C58.43 27.22, 45.8 27.14, 36.29 26.56 C26.78 25.99, 16.76 24.94, 10.74 22.84 C4.73 20.74, 0.53 16.89, 0.22 13.96 C-0.08 11.02, 3.43 7.44, 8.92 5.25 C14.41 3.05, 23.83 1.72, 33.18 0.79 C42.54 -0.13, 59.41 -0.48, 65.04 -0.29 C70.67 -0.09, 67.08 1.49, 66.96 1.95 M44.65 -0.08 C54.11 -0.49, 66.93 0.32, 75.49 1.81 C84.06 3.3, 91.86 6.16, 96.06 8.85 C100.26 11.55, 102.37 15.3, 100.69 17.99 C99.01 20.69, 93.37 23.57, 85.98 25.04 C78.58 26.51, 66.19 26.62, 56.33 26.81 C46.47 27, 35.19 27.57, 26.81 26.19 C18.42 24.82, 10.53 21.18, 6.02 18.56 C1.5 15.94, -1.92 12.78, -0.31 10.48 C1.3 8.17, 8.21 6.46, 15.69 4.71 C23.16 2.95, 39.62 0.52, 44.53 -0.06 C49.45 -0.65, 44.82 0.71, 45.19 1.19" stroke="#c92a2a" stroke-width="1" fill="none"></path></g><g transform="translate(93.39942954695181 290.44092139055226) rotate(0 94.21556091308591 19.084503173828125)"><text x="94.21556091308594" y="0" font-family="Virgil, Segoe UI Emoji" font-size="30.535205078124978px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr" dominant-baseline="text-before-edge">Primary ADB</text></g><g stroke-linecap="round"><g transform="translate(555.8300744971428 159.3449006546703) rotate(0 50.959503886294954 48.47655929679803)" fill-rule="evenodd"><path d="M-0.9 -1.67 L-1.81 92.36 L2.3 96.5 L5.64 98.87 L22.61 103.3 L52.38 106.77 L85.76 100.9 L92 100.71 L98.58 95.35 L100.19 91.99 L102.71 -0.29 L95.87 -4.01 L72.48 -8.17 L48.5 -9.37 L17.47 -8.2 L-1.42 -0.82" stroke="none" stroke-width="0" fill="#fa5252" fill-rule="evenodd"></path><path d="M-0.1 0.39 C0.06 13.98, 0.14 65.34, 0.43 81.31 C0.72 97.28, -0.5 92.68, 1.63 96.22 C3.76 99.76, 8.32 100.96, 13.23 102.53 C18.15 104.09, 24.75 105.09, 31.1 105.61 C37.46 106.13, 45.12 105.45, 51.36 105.64 C57.6 105.83, 62.98 107.29, 68.55 106.75 C74.11 106.2, 79.55 104.46, 84.76 102.38 C89.97 100.29, 97.17 97.73, 99.81 94.25 C102.45 90.77, 100.2 95.56, 100.6 81.51 C101 67.46, 102.35 23.68, 102.22 9.96 C102.09 -3.77, 102.46 1.84, 99.83 -0.83 C97.2 -3.5, 90.81 -4.73, 86.43 -6.06 C82.06 -7.38, 78.92 -8.15, 73.58 -8.78 C68.24 -9.41, 59.42 -9.51, 54.36 -9.84 C49.3 -10.16, 49.18 -10.84, 43.22 -10.74 C37.27 -10.64, 25.84 -10.98, 18.63 -9.24 C11.42 -7.49, 3.12 -1.76, -0.05 -0.28 M-1.61 -0.45 C-1.52 13.36, -0.69 66.53, -0.29 82.88 C0.11 99.24, -1.44 94.73, 0.79 97.69 C3.02 100.64, 7.78 99.21, 13.09 100.6 C18.41 101.98, 26.11 104.82, 32.69 106 C39.27 107.19, 46.47 107.7, 52.57 107.7 C58.67 107.7, 64.02 106.99, 69.28 106 C74.55 105.01, 79.32 103.44, 84.16 101.77 C88.99 100.09, 95.42 99.37, 98.29 95.94 C101.16 92.52, 100.6 95.47, 101.38 81.2 C102.15 66.94, 102.86 24.14, 102.95 10.36 C103.04 -3.43, 104.72 1.33, 101.91 -1.51 C99.1 -4.35, 90.9 -5.53, 86.08 -6.68 C81.25 -7.82, 78.26 -7.86, 72.97 -8.39 C67.69 -8.91, 59.16 -9.66, 54.36 -9.83 C49.57 -10, 50.35 -9.59, 44.2 -9.41 C38.05 -9.24, 25.06 -10.34, 17.47 -8.78 C9.87 -7.22, 1.27 -1.47, -1.36 -0.05" stroke="#c92a2a" stroke-width="1" fill="none"></path></g></g><mask></mask><g stroke-linecap="round" transform="translate(555.4566122198675 147.0200466270258) rotate(0 50.626483401915095 13.765081576212367)"><path d="M71.28 1.5 C80.1 2.19, 89.07 4.24, 94.06 6.62 C99.06 9, 102.38 13.08, 101.26 15.78 C100.13 18.49, 94.08 20.8, 87.32 22.85 C80.56 24.91, 70.37 27.59, 60.7 28.1 C51.02 28.61, 38.43 27.26, 29.27 25.94 C20.12 24.62, 10.55 22.42, 5.77 20.18 C0.99 17.95, -0.75 15.16, 0.61 12.5 C1.96 9.85, 7.34 6.36, 13.89 4.23 C20.45 2.1, 29.56 0.03, 39.93 -0.26 C50.3 -0.55, 69.84 2.1, 76.13 2.48 C82.43 2.86, 78.36 1.81, 77.71 2.01 M42.78 -0.71 C52.32 -1.19, 65.35 0.76, 74.11 2.14 C82.87 3.53, 90.81 5.51, 95.35 7.59 C99.89 9.67, 102.92 12.02, 101.33 14.63 C99.74 17.24, 93.01 20.9, 85.81 23.23 C78.61 25.56, 67.9 27.91, 58.14 28.61 C48.38 29.31, 36.18 28.79, 27.25 27.42 C18.31 26.05, 9.02 23.08, 4.51 20.37 C0 17.66, -1.57 13.77, 0.19 11.14 C1.94 8.5, 8.32 6.16, 15.06 4.55 C21.79 2.93, 35.92 1.92, 40.6 1.43 C45.28 0.94, 42.69 1.63, 43.13 1.62" stroke="none" stroke-width="0" fill="#ffffff"></path><path d="M51.42 1 C60.72 0.85, 72.65 1.53, 80.56 2.86 C88.47 4.2, 95.9 6.25, 98.88 8.99 C101.87 11.74, 101.64 16.72, 98.47 19.33 C95.31 21.95, 88.06 23.48, 79.89 24.7 C71.72 25.91, 59.47 26.57, 49.45 26.6 C39.42 26.63, 27.54 26.54, 19.75 24.89 C11.96 23.25, 5.56 19.42, 2.71 16.73 C-0.13 14.03, -0.4 11.08, 2.67 8.75 C5.73 6.42, 11.34 3.99, 21.1 2.73 C30.86 1.48, 53.28 1.32, 61.24 1.23 C69.2 1.13, 69.09 2.09, 68.88 2.17 M53.89 -0.43 C63.38 -0.53, 75.35 0.99, 82.79 2.56 C90.22 4.13, 96.18 6.21, 98.52 9 C100.85 11.8, 100.26 16.74, 96.81 19.33 C93.36 21.92, 86.16 23.19, 77.81 24.54 C69.46 25.9, 56.72 27.42, 46.7 27.46 C36.68 27.5, 25.22 26.29, 17.69 24.78 C10.16 23.27, 4.11 21.2, 1.53 18.42 C-1.04 15.64, -1.61 10.94, 2.22 8.1 C6.06 5.26, 15.86 2.81, 24.53 1.37 C33.19 -0.07, 49.32 -0.55, 54.24 -0.55 C59.15 -0.56, 54.19 0.88, 54 1.36" stroke="#c92a2a" stroke-width="1" fill="none"></path></g><g transform="translate(510.07805734294493 290.2878757362554) rotate(0 95.12284851074219 17.20257568359375)"><text x="95.12284851074219" y="0" font-family="Virgil, Segoe UI Emoji" font-size="27.524121093749986px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr" dominant-baseline="text-before-edge">Recovery ADB</text></g><g stroke-linecap="round"><g transform="translate(171.08638177056264 341.34266958325475) rotate(0 -0.11902241781322687 88.56684783692072)"><path d="M-0.49 0.26 C-0.71 29.75, -0.83 147.32, -1.13 176.7 M1.45 -0.66 C1.12 28.99, -0.9 148.13, -1.69 177.79" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(171.08638177056264 341.34266958325475) rotate(0 -0.11902241781322687 88.56684783692072)"><path d="M-10.93 150.64 C-9.81 157.68, -7.03 167.54, -3.44 176.02 M-12.09 150.14 C-8.79 154.28, -7.36 160.4, -1.16 178.69" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(171.08638177056264 341.34266958325475) rotate(0 -0.11902241781322687 88.56684783692072)"><path d="M9.59 151.07 C4.25 157.89, 0.57 167.61, -3.44 176.02 M8.43 150.57 C7.58 154.74, 4.86 160.77, -1.16 178.69" stroke="#000000" stroke-width="1" fill="none"></path></g></g><mask></mask><g stroke-linecap="round"><g transform="translate(596.3878364187867 517.2168060149663) rotate(0 1.3213547073490872 -87.29830174918268)"><path d="M1.06 -0.19 C1.28 -29.06, 0.12 -144.02, 0.25 -172.77 M0.16 -1.33 C0.84 -30.57, 2.28 -145.55, 2.48 -174.41" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(596.3878364187867 517.2168060149663) rotate(0 1.3213547073490872 -87.29830174918268)"><path d="M12.13 -147.63 C11.75 -150.99, 9.78 -157.32, 1.11 -176.34 M11.72 -146.4 C10.62 -152.58, 7.53 -161.14, 2.3 -174.86" stroke="#000000" stroke-width="1" fill="none"></path></g><g transform="translate(596.3878364187867 517.2168060149663) rotate(0 1.3213547073490872 -87.29830174918268)"><path d="M-8.39 -147.84 C-4.4 -151.33, -2 -157.63, 1.11 -176.34 M-8.8 -146.61 C-4.6 -152.7, -2.39 -161.21, 2.3 -174.86" stroke="#000000" stroke-width="1" fill="none"></path></g></g><mask></mask><g transform="translate(14.649688720703125 423.7976379394531) rotate(0 59.00398254394531 22.5)"><text x="0" y="0" font-family="Virgil, Segoe UI Emoji" font-size="36px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr" dominant-baseline="text-before-edge">Export</text></g><g transform="translate(637.0982360839844 424.0375671386719) rotate(0 57.959983825683594 22.5)"><text x="0" y="0" font-family="Virgil, Segoe UI Emoji" font-size="36px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr" dominant-baseline="text-before-edge">Import</text></g><g transform="translate(178.66049194335938 616.8913391113281) rotate(0 257.8125 12)"><text x="0" y="0" font-family="Cascadia, Segoe UI Emoji" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr" dominant-baseline="text-before-edge">https://github.com/{owner}/{repository-name}</text></g></svg>';

    g_facebook_svg LONG:='<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 40 40" style="enable-background:new 0 0 40 40;" xml:space="preserve">
<style type="text/css">
	.st0{fill:url(#SVGID_1_);}
	.st1{fill:#FFFFFF;}
</style>
<linearGradient id="SVGID_1_" gradientUnits="userSpaceOnUse" x1="-277.375" y1="406.6018" x2="-277.375" y2="407.5726" gradientTransform="matrix(40 0 0 -39.7778 11115.001 16212.334)">
	<stop  offset="0" style="stop-color:#0062E0"/>
	<stop  offset="1" style="stop-color:#19AFFF"/>
</linearGradient>
<path class="st0" d="M16.7,39.8C7.2,38.1,0,29.9,0,20C0,9,9,0,20,0s20,9,20,20c0,9.9-7.2,18.1-16.7,19.8l-1.1-0.9h-4.4L16.7,39.8z"
	/>
<path class="st1" d="M27.8,25.6l0.9-5.6h-5.3v-3.9c0-1.6,0.6-2.8,3-2.8h2.6V8.2c-1.4-0.2-3-0.4-4.4-0.4c-4.6,0-7.8,2.8-7.8,7.8V20
	h-5v5.6h5v14.1c1.1,0.2,2.2,0.3,3.3,0.3c1.1,0,2.2-0.1,3.3-0.3V25.6H27.8z"/>
</svg>';

    g_google_svg LONG:='<svg xmlns="http://www.w3.org/2000/svg" width="705.6" height="720" viewBox="0 0 186.69 190.5" xmlns:v="https://vecta.io/nano"><g transform="translate(1184.583 765.171)"><path clip-path="none" mask="none" d="M-1089.333-687.239v36.888h51.262c-2.251 11.863-9.006 21.908-19.137 28.662l30.913 23.986c18.011-16.625 28.402-41.044 28.402-70.052 0-6.754-.606-13.249-1.732-19.483z" fill="#4285f4"/><path clip-path="none" mask="none" d="M-1142.714-651.791l-6.972 5.337-24.679 19.223h0c15.673 31.086 47.796 52.561 85.03 52.561 25.717 0 47.278-8.486 63.038-23.033l-30.913-23.986c-8.486 5.715-19.31 9.179-32.125 9.179-24.765 0-45.806-16.712-53.34-39.226z" fill="#34a853"/><path clip-path="none" mask="none" d="M-1174.365-712.61c-6.494 12.815-10.217 27.276-10.217 42.689s3.723 29.874 10.217 42.689c0 .086 31.693-24.592 31.693-24.592-1.905-5.715-3.031-11.776-3.031-18.098s1.126-12.383 3.031-18.098z" fill="#fbbc05"/><path d="M-1089.333-727.244c14.028 0 26.497 4.849 36.455 14.201l27.276-27.276c-16.539-15.413-38.013-24.852-63.731-24.852-37.234 0-69.359 21.388-85.032 52.561l31.692 24.592c7.533-22.514 28.575-39.226 53.34-39.226z" fill="#ea4335" clip-path="none" mask="none"/></g></svg>';
    /*
     ** CLOB and VARCHAR2 signatures for log procedure
     */
     
     gWidthThumbnail CONSTANT INTEGER:=360;
     

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        k_calling_package constant varchar2(128) := utl_call_stack.subprogram(2)(1);
        k_calling_subprog constant varchar2(128) := utl_call_stack.subprogram(2)(2);
    BEGIN
        INSERT INTO log(procedure_name, message) VALUES (k_calling_package || '.' || k_calling_subprog, pMsg);
        COMMIT;
    END;
    
    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        k_calling_package constant varchar2(128) := utl_call_stack.subprogram(2)(1);
        k_calling_subprog constant varchar2(128) := utl_call_stack.subprogram(2)(2);    
    BEGIN
        INSERT INTO log(procedure_name, message) VALUES (k_calling_package || '.' || k_calling_subprog, pMsg);
        COMMIT;
    END;
    
    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2) IS
    BEGIN
        ROLLBACK;
        log(pCode || '-' || pErrMsg || '-' || dbms_utility.format_error_stack||dbms_utility.format_error_backtrace);
    END;

    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2, pAjax IN BOOLEAN) IS
    BEGIN
        log(pCode || '-' || pErrMsg || '-' || dbms_utility.format_error_stack||dbms_utility.format_error_backtrace);
        IF (pAjax) THEN
            apex_json.open_object; 
            apex_json.write('success', FALSE); 
            apex_json.write('sqlcode', sqlcode); 
            apex_json.write('sqlerrm', sqlerrm); 
            apex_json.close_object;
        END IF;
    END;
    
    /*
    ** Run restore process manually. Need to specify the last data pump export schema encryption password.
    */
    PROCEDURE manual_restore(pPassword IN VARCHAR2)  IS 
        l_restore_files varchar2(1000):='GRANT.OBJECT_GRANT:GRANT.SYSTEM_GRANT:EXPORT_SCHEMA.EXAMPLE.dmp:APEX_APPLICATION.100';
    BEGIN
        
        FOR C IN (SELECT github_token, github_repos_owner, github_repos, u.email, w.workspace_name 
              FROM users u, apex_workspace_developers w 
             WHERE w.first_schema_provisioned=sys_context('userenv','current_schema')
               AND w.is_admin='Yes'
               AND w.email=u.email) 
        LOOP
            EXECUTE IMMEDIATE q'{
                BEGIN pck_restore.submit_job@RESTORE_LINK(
                    pGithub_files=>:B1, 
                    pGithub_token=>:B2, 
                    pGithub_repos_owner=>:B3, 
                    pGithub_repos=>:B4,
                    pPassword=>:B5,
                    pEmail=>:B6,
                    pWorkspace=>:B7,
                    pSchema=>:B8); END;}' 
                USING l_restore_files, C.github_token, C.github_repos_owner, C.github_repos, pPassword, C.email, C.workspace_name, sys_context('userenv','current_schema');
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
    
    /*
    ** Generate random 16 character password string. Used in order to create encrypted schema export dumpfile
    */
    FUNCTION generate_password(
        no_of_digits             in number DEFAULT 5,
        no_of_special_characters in number DEFAULT 3,
        no_of_lower              in number DEFAULT 4,
        no_of_upper              in number DEFAULT 4
        ) return varchar2
    IS
        password VARCHAR2(4000);
        digits   CONSTANT VARCHAR2(10) := '0123456789';
        lower    CONSTANT VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';
        upper    CONSTANT VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        special  CONSTANT VARCHAR2(30) := '!"£$%^*()-_=+{}[]<>,\|/?;:@#';
    BEGIN
        SELECT LISTAGG(letter, NULL) WITHIN GROUP (ORDER BY DBMS_RANDOM.VALUE)
        INTO   password
        FROM   (
        SELECT SUBSTR(
                 digits,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(digits) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_digits
        UNION ALL
        SELECT SUBSTR(
                 lower,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(lower) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_lower
        UNION ALL
        SELECT SUBSTR(
                 upper,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(upper) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_upper
        UNION ALL
        SELECT SUBSTR(
                 special,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(special) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_special_characters
        );
    
        RETURN password;
    END;    
    
    /*
    **  Daily job run by dbms_scheduler
    */
    PROCEDURE daily_job IS 
        l_github_token users.github_token%type; 
        l_github_repos_owner users.github_repos_owner%type;
        l_github_repos users.github_repos%type;
        l_email users.email%type;
        l_email_sender users.email%type;
        l_password VARCHAR2(20);
        l_github_filename VARCHAR2(100);
        l_workspace_name apex_workspace_developers.workspace_name%type;
        l_restore_files VARCHAR2(4000);
    BEGIN
        /*
        ** 1. Get Cloudinary usage for all subscribers 
        */
        getUsage;
        
        /*
        **  2. Backup to Github
        **     Github token and repository details are maintained in USERS table
        **     Email address of Apex Admin user must match for this to work
        **     Complex password auto-generated to encrypt schema export dump file
        */
       
        SELECT github_token, github_repos_owner, github_repos, u.email, w.workspace_name 
          INTO l_github_token, l_github_repos_owner, l_github_repos, l_email, l_workspace_name
          FROM users u, apex_workspace_developers w 
         WHERE w.first_schema_provisioned=sys_context('userenv','current_schema')
           AND w.is_admin='Yes'
           AND w.email=u.email;
           
        SELECT email 
          INTO l_email_sender
          FROM users 
         WHERE approved_sender_ind='Y';
        
        l_password:=generate_password();
        pck_backup.github_backup(l_github_token, l_github_repos_owner, l_github_repos, l_email_sender, l_email, l_password, l_restore_files);
    
        /*
        **  3. Restore from Github into Restore database, where a workspace with same name as current schema must exist.
        **     We use dynamic sql for this so that this package compiles after being restored - nb: DB LINKs are not included in any schema export
        **     To avoid ORA-02074 we submit job on restore database remotely using database link
        **     "l_restore_files" is separated list of github file names to be restored
        */
        
        log('About to submit job on restore server to import Github backup files - ' || l_restore_files);
        EXECUTE IMMEDIATE q'{
            BEGIN pck_restore.submit_job@RESTORE_LINK(
                pGithub_files=>:B1, 
                pGithub_token=>:B2, 
                pGithub_repos_owner=>:B3, 
                pGithub_repos=>:B4,
                pPassword=>:B5,
                pEmailSender=>:B6,
                pEmail=>:B7,
                pWorkspace=>:B8,
                pSchema=>:B9); END;}' USING l_restore_files, l_github_token, l_github_repos_owner, l_github_repos, l_password, l_email_sender, l_email, l_workspace_name,sys_context('userenv','current_schema');
                
        INSERT INTO metrics (id,log_date,nb_assets,bytes,nb_articles,word_count,total_credits,credits_remaining,total_used,max_size)
        WITH metrics AS 
            (
                SELECT nb_assets, bytes, nb_articles, word_count  
                  FROM (SELECT COUNT(*) nb_assets, SUM(bytes) bytes FROM asset), (SELECT COUNT(*) nb_articles, SUM(word_count) word_count FROM article)
            ),
            credits AS
            (
                SELECT SUM(credits_limit) total_credits, SUM(credits_limit - (credits_limit*(used_percent/100))) credits_remaining
                FROM usage 
                WHERE usage_date=(SELECT MAX(usage_date) FROM usage)
            ),
            db1 AS
            (
                SELECT total_used_adb1+total_used_adb2 total_used FROM (SELECT SUM(bytes) total_used_adb1 FROM dba_segments WHERE tablespace_name<>'SAMPLESCHEMA'), (SELECT SUM(bytes) total_used_adb2 FROM dba_segments@restore_link WHERE tablespace_name<>'SAMPLESCHEMA')
            ),
            db2 AS
            (
                SELECT max_size_adb1+max_size_adb2 max_size FROM (SELECT max_size max_size_adb1 FROM v$pdbs), (SELECT max_size max_size_adb2 FROM v$pdbs@restore_link)
            )            
        SELECT SEQ_METRICS.nextval as id, current_timestamp as log_date, met.nb_assets, met.bytes, met.nb_articles, met.word_count, cr.total_credits, cr.credits_remaining, db1.total_used, db2.max_size
          FROM metrics met, credits cr, db1, db2;
          
        COMMIT;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
    
    PROCEDURE getApexSession(pAppId IN OUT NUMBER, pSessionId IN OUT NUMBER) IS
        l_apex_session VARCHAR2(100):=OWA_UTIL.get_cgi_env('Apex-Session');
    BEGIN
        pAppId:=SUBSTR(l_apex_session,1,INSTR(l_apex_session,',')-1);
        pSessionId:=SUBSTR(l_apex_session,INSTR(l_apex_session,',')+1);
    END;
    
    FUNCTION getUserId(pSaveCookie BOOLEAN DEFAULT FALSE) RETURN users.id%type IS
        l_names owa_cookie.vc_arr;
        l_vals owa_cookie.vc_arr;
        l_num_vals INTEGER;
        
        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_apex_cookie_value users.apex_cookie_value%type;
        l_user_id users.id%type;
    BEGIN        
        getApexSession(l_app_id, l_session_id);
        
        BEGIN
            SELECT u.id, apex_cookie_value
              INTO l_user_id, l_apex_cookie_value
              FROM apex_workspace_sessions s, users u
             WHERE s.apex_session_id=l_session_id
               AND s.user_name=u.email;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN RETURN(NULL);
        END;
        
        /* Additional check that session cookie is valid */
        owa_cookie.get_all(names => l_names, vals => l_vals, num_vals => l_num_vals);
        FOR i IN 1..l_names.COUNT LOOP
            IF (l_names(i)='ORA_WWV_APP_' || l_app_id) THEN
                IF (pSaveCookie) THEN
                    UPDATE users SET apex_cookie_value=l_vals(i) WHERE id=l_user_id;
                ELSIF (l_apex_cookie_value<>l_vals(i)) THEN
                    RAISE_APPLICATION_ERROR(-20000,'SESSION COOKIE VALUE HAS CHANGED');
                END IF;
            END IF;
        END LOOP;

        RETURN (l_user_id);
    END;    
        
    
    PROCEDURE getCldDetails(pArticleId IN article.id%type) IS
        l_user_id users.id%type:=getUserId();
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size usage.image_max_size%type;
        l_video_max_size usage.video_max_size%type;
        l_cldapikey VARCHAR2(1);
    BEGIN      
        /* get Cloudinary details either of logged on user of the hosting user */
        BEGIN
            SELECT cld_cloud_name, cld_api_key, image_max_size, video_max_size
              INTO l_cld_cloud_name, l_cld_api_key, l_image_max_size, l_video_max_size
              FROM 
                    (
                        SELECT ROW_NUMBER() OVER (ORDER BY usage_date DESC) rn, users.cld_cloud_name, users.cld_api_key, usage.image_max_size, usage.video_max_size
                        FROM users, usage 
                        WHERE users.id=l_user_id
                        AND usage.user_id=users.id
                    ) 
             WHERE rn=1;
             l_cldapikey:='Y';
             
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    SELECT cld_cloud_name, cld_api_key, image_max_size, video_max_size
                      INTO l_cld_cloud_name, l_cld_api_key, l_image_max_size, l_video_max_size
                      FROM 
                            (
                                SELECT ROW_NUMBER() OVER (ORDER BY usage_date DESC) rn, users.cld_cloud_name, users.cld_api_key, usage.image_max_size, usage.video_max_size
                                FROM users, usage 
                                WHERE users.hosting_user_ind='Y'
                                AND usage.user_id=users.id
                            ) 
                     WHERE rn=1;  
                     l_cldapikey:='N';
            END;

            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('cloudname', l_cld_cloud_name);
            apex_json.write('apikey', l_cld_api_key);
            apex_json.write('maxImageFileSize', l_image_max_size);
            apex_json.write('maxVideoFileSize', l_video_max_size);
            apex_json.write('cldapikey', l_cldapikey);
            apex_json.write('articleId', CASE WHEN pArticleId=0 THEN seq_article.nextval ELSE pArticleId END);
            apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    PROCEDURE getCldSignature(pParamsToSign IN CLOB) IS
        l_params_to_sign clob:=pParamsToSign;
        l_user_id users.id%type:=getUserId();
        l_string_to_sign varchar2(2000):=NULL; 
    BEGIN
        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM JSON_TABLE(l_params_to_sign FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            );
        
        /* get Cloudinary details either of logged on user OR the hosting Cloudinary user */
        FOR C IN (SELECT NVL(u1.cld_cloud_name,u2.cld_cloud_name) cld_cloud_name, NVL(u1.cld_api_key, u2.cld_api_key) cld_api_key, NVL(u1.cld_api_secret,u2.cld_api_secret) cld_api_secret
                    FROM users u1, users u2
                   WHERE u1.id=l_user_id
                     AND u2.hosting_user_ind='Y')
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || C.cld_api_secret), dbms_crypto.HASH_SH1));
            apex_json.close_object;
        END LOOP;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     ** Set Time Zone according to client device. Procedure called on DOMContentLoaded event
     */
    PROCEDURE setClientInfo(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_client_TZ users.client_tz%type;
        l_maxtouchpoints NUMBER;
        l_user_id users.id%type;
    BEGIN
        l_user_id:=getUserId(pSaveCookie=>TRUE);
        
        IF (l_user_id IS NOT NULL) THEN
            SELECT timezone, maxtouchpoints
              INTO l_client_TZ, l_maxtouchpoints
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' COLUMNS (timezone, maxtouchpoints));
            UPDATE users SET client_tz=l_client_TZ, maxtouchpoints=l_maxtouchpoints, updated_date=current_timestamp WHERE id=l_user_id;          
        END IF;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Format timestamp according to user's current time zone
     */
    FUNCTION fmtUpdatedDate(pTimestamp IN article.updated_date%type) RETURN VARCHAR2
    IS
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
    BEGIN
        IF (l_timezone IS NOT NULL) THEN
            RETURN ( TO_CHAR(pTimestamp AT TIME ZONE l_timezone, 'dd Mon yyyy fmhh:fmmi PM') );
        ELSE
            RETURN ( TO_CHAR(pTimestamp, 'dd Mon yyyy'));
        END IF;
    END;
    
    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RAISE_APPLICATION_ERROR(-20001,'Media type not supported - ' || pFormat);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5):=getMediaType(pResourceType, pFormat);
        
        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);
            l_width INTEGER:=pWidth; 
        BEGIN
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-gWidthThumbnail) <= ABS(l_arr(l_right)-gWidthThumbnail)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;        
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        l_url:='https://res.cloudinary.com/' || pCloudname ||
                CASE l_media_type
                    WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                    WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                    WHEN 'audio' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                END;
                
        RETURN (l_url);
    END;
    
    /*
     **  Respond to user clicking "Save & Exit" in Rich Text Editor.
     **  Parse text and extract title and excerpt for the artile.
     **  Convert markdown to html and save in article row.
     */
    PROCEDURE saveArticle 
    IS
        l_article_id    article.id%type:=apex_application.g_x01;
        title_len       PLS_INTEGER;
        excerpt_len     PLS_INTEGER;
        l_word_count    article.word_count%type;
        l_updated_date  article.updated_date%type;
        l_body_html     CLOB;
        l_plain_text    CLOB;
        l_instr         PLS_INTEGER;
        l_null          VARCHAR2(1);
        l_title         VARCHAR2(61);
        l_title_more    VARCHAR2(3);
        l_excerpt       VARCHAR2(161);
        l_excerpt_more  VARCHAR2(3);
        l_excerpt_words VARCHAR2(15);
        --l_extra_link_attributes apex_t_varchar2('target', '_blank');
        
        PROCEDURE split2(pInput IN VARCHAR2, pMaxLen1 IN INTEGER, pOutput1 IN OUT VARCHAR2, pMore1 IN OUT VARCHAR2, 
                                             pMaxLen2 IN INTEGER, pOutput2 IN OUT VARCHAR2, pMore2 IN OUT VARCHAR2) IS
            l_words     apex_t_varchar2;
            rem         PLS_INTEGER;
            l_start2    PLS_INTEGER;
        BEGIN
            l_words:=apex_string.split(REPLACE(pInput,CHR(10),' '),' ');
            --log(apex_string.join(l_words,':'));
            FOR i IN 1..l_words.COUNT LOOP
                IF (l_words(i) IS NULL) THEN
                    CONTINUE;
                END IF;
                rem:=pMaxLen1 - NVL(LENGTHB(pOutput1),0);
                IF (LENGTHB(l_words(i)) <= rem) THEN
                    pOutput1:=pOutput1 || l_words(i) || ' ';
                ELSE
                    pOutput1:=RTRIM(pOutput1);
                    pMore1:='...';
                    l_start2:=i;
                    EXIT;
                END IF;
            END LOOP;
            
            IF (pMaxLen2=0) THEN RETURN; END IF;

    
            FOR i IN l_start2..l_words.COUNT LOOP
                IF (l_words(i) IS NULL) THEN
                    CONTINUE;
                END IF;
                rem:=pMaxLen2 - NVL(LENGTHB(pOutput2),0);
                IF (LENGTHB(l_words(i)) <= rem) THEN
                    pOutput2:=pOutput2 || l_words(i) || ' ';
                ELSE
                    pOutput2:=RTRIM(pOutput2);
                    pMore2:='...';
                    EXIT;
                END IF;
            END LOOP;        
        END;
        
    BEGIN
        SELECT MAX(DECODE(column_name,'TITLE',data_length)), MAX(DECODE(column_name,'EXCERPT',data_length))
        INTO title_len, excerpt_len
        FROM user_tab_columns 
        WHERE table_name='ARTICLE';
    
        FOR C IN (SELECT dbms_lob.getlength(body) len, body
                    FROM article 
                   WHERE id=l_article_id) 
        LOOP
            l_body_html := APEX_MARKDOWN.TO_HTML (p_markdown => C.body, p_embedded_html_mode => APEX_MARKDOWN.c_embedded_html_preserve, p_extra_link_attributes => apex_t_varchar2('target', '_blank')); -- escapes special characters while preserving embedded html
            apex_escape.set_html_escaping_mode('E');
            l_plain_text:=dbms_lob.substr(utl_i18n.unescape_reference(APEX_ESCAPE.STRIPHTML(l_body_html)),title_len+excerpt_len+20,1); -- strip html to plain text, removing any XSS embedded in <script></noscript>
            l_plain_text:=APEX_ESCAPE.STRIPHTML(l_plain_text);
            IF (l_plain_text IS NULL) THEN
                EXIT;
            END IF;
            l_instr:=INSTR(l_plain_text,CHR(10));
            IF (l_instr<=title_len AND l_instr>0) THEN
                l_title:=SUBSTR(l_plain_text,1,l_instr-1);
                split2(SUBSTR(l_plain_text,l_instr+1),excerpt_len,l_excerpt,l_excerpt_more,0,l_null,l_null);
            ELSE
                split2(l_plain_text,title_len,l_title,l_title_more,excerpt_len,l_excerpt,l_excerpt_more);
            END IF;
        END LOOP;
        
        UPDATE article SET title=l_title, title_more=l_title_more, excerpt=l_excerpt, excerpt_more=l_excerpt_more, body_html=l_body_html 
         WHERE id=l_article_id 
         RETURNING word_count, updated_date INTO l_word_count, l_updated_date;

        IF (l_word_count>0 AND l_excerpt IS NOT NULL) THEN
            l_excerpt_words:=' ' || l_word_count || ' word' || CASE WHEN l_word_count>1 THEN 's' END;
        END IF;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('words', l_excerpt_words);
        apex_json.write('title', l_title);
        apex_json.write('excerpt', l_excerpt || l_excerpt_more);
        apex_json.write('updated', fmtUpdatedDate(l_updated_date)); 
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
    ** Logout authenticated session
    */
    PROCEDURE signout IS
        l_app_id NUMBER;
        l_session_id NUMBER;
    BEGIN
        getApexSession(l_app_id, l_session_id);

        apex_session.delete_session(p_session_id=>l_session_id);
        /*
        owa_cookie.send(
            name => 'ORA_WWV_APP_101',
            value => null,
            expires => sysdate -1, 
            path =>'ords' );
        */
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
         
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Construct Home page HTML of qualifying blog articles
     **
     **  Unauthenticated user (i.e. HOME page)
     **    - articles where PUBLIC=Y
     **
     **  Authenticated user -
     **    - articles authored by user
     **    - first card is for creatng a new article
     **    - create menu and buttons to manage article
     */
    FUNCTION getPageContent RETURN CLOB IS
        l_clob CLOB;
        l_css_file_urls APEX_APPLICATION_PAGES.css_file_urls%type;
        l_javascript_file_urls APEX_APPLICATION_PAGES.javascript_file_urls%type;
    BEGIN
        SELECT NVL(css_file_urls,' '), NVL(javascript_file_urls,' ')
          INTO l_css_file_urls, l_javascript_file_urls
          FROM APEX_APPLICATION_PAGES 
         WHERE application_id=apex_application.g_flow_id
           AND page_id=apex_application.g_flow_step_id;
        
        IF (INSTR(l_css_file_urls,'app100.min.css')=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name='app100.css') LOOP
                l_clob:=l_clob || '<style>' || apex_util.blob_to_clob(C.file_content) || '</style>';
            END LOOP;
        END IF;
        
        --IF (apex_authentication.is_authenticated) THEN
        IF (apex_application.g_flow_step_id=2) THEN
            FOR C IN (SELECT id FROM users WHERE email=apex_application.g_user) LOOP
                l_clob:=l_clob || TO_CLOB(
                '<nav>
                    <button type="button" class="add-card">NEW CONTENT</button>
                    <span>' || apex_application.g_user || '</span>
                    <button type="button" class="signout">SIGN OUT</button>
                 </nav>');
            END LOOP;
        ELSE
            FOR C IN (SELECT body_html FROM article WHERE id=1) 
            LOOP
                l_clob:=l_clob || TO_CLOB('
                    <div>
                        <ul class="homepage">
                            <li class="red"></li>
                            <li class="grey">' || g_oracle_svg || '</li>
                            <li class="grey"></li>
                            <li class="grey">' || g_cloudinary_svg || '</li>
                            <li class="yellow">ALWAYS FREE</li>
                            <li class="grey">
                                <h4>Login</h4>
                                <a href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Facebook&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || g_facebook_svg ||'</a>
                                <a href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Google&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || g_google_svg ||'</a>
                            </li>
                            <li class="blue"></li>
                            <li class="grey"></li>
                        </ul>
                        <div class="ck-content">' || C.body_html || '
                        </div>
                    </div>
                    <h2>PUBLISHED ARTICLES</h2>');
            END LOOP;
        END IF;
        
        l_clob:=l_clob || TO_CLOB('<ul class="cards" role="list">');
            
        /* Create cards as <li> elements for each article */
        FOR C IN (
            WITH covers AS
            (
                SELECT article_id, alt_text, nb_assets, cld_cloud_name, resource_type, public_id, format, DECODE(width,0,gWidthThumbnail,width) width
                FROM
                (
                SELECT article_id, alt_text, cld_cloud_name, resource_type, public_id, width, format, display_order,  
                       MIN(display_order) OVER (PARTITION BY article_id) min_display_order, 
                       COUNT(*) OVER (PARTITION BY article_id) nb_assets
                FROM asset
                WHERE NVL(asset.format,'N/A')<>'clt'
                ) 
                WHERE display_order=min_display_order
            )
            SELECT a.id,
                   a.is_public,
                   c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                   c.alt_text,
                   NVL2(c.nb_assets,1,0) first_asset,
                   NVL(c.nb_assets,0) nb_assets,
                   a.title || a.title_more title, 
                   a.excerpt || a.excerpt_more excerpt,
                   CASE WHEN a.excerpt IS NOT NULL AND a.word_count>0 THEN a.word_count || ' word' || CASE WHEN a.word_count>1 THEN 's' END END word_count,
                   u.name,
                   NVL(a.updated_date, a.created_date) updated_date
              FROM article a, users u, covers c
             WHERE u.email=CASE WHEN apex_application.g_user='nobody' THEN u.email ELSE apex_application.g_user END
               AND a.author_user_id=u.id
               AND a.is_public=CASE WHEN apex_application.g_user='nobody' THEN 'Y' ELSE a.is_public END
               AND c.article_id(+)=a.id
             UNION ALL
             SELECT -1, null, null, null, null,null,null,null,0,0,null,null,null,CASE WHEN apex_application.g_user='nobody' THEN null ELSE apex_application.g_user END,systimestamp from dual
             ORDER BY updated_date DESC) 
        LOOP
            l_clob:=l_clob || TO_CLOB(
                '<li class="card" tabindex="0" data-id="' || C.id || '">
                    <div class="button-container">
                        <button type="button" class="fa show-gallery"' || CASE WHEN C.first_asset=0 THEN ' disabled' END || '>&blacktriangleright;' || C.first_asset || '/' || C.nb_assets || '</button>' ||
                        --CASE WHEN apex_authentication.is_authenticated THEN
                        CASE WHEN apex_application.g_flow_step_id=2 THEN
                        '<div class="dropdown">
                          <button type="button" class="fa fa-caret-down show-dropdown"></button>
                          <ul class="dropdown-items">
                            <li><button type="button" class="fa fa-cloud-upload upload-media">Upload</button></li>
                            <li><button type="button" class="fa fa-edit edit-text">Edit</button></li>
                            <li><button type="button" class="fa fa-newspaper-o preview"' || CASE WHEN C.id<0 THEN ' disabled' END || '>Preview</button></li>' ||
                            CASE 
                              WHEN C.is_public='Y' THEN 
                                '<li><button type="button" class="fa fa-share2 unpublish">Unpublish</button></li>'
                              ELSE 
                                '<li><button type="button" class="fa fa-share2 publish"' || CASE WHEN C.id<0 THEN ' disabled' END || '>Publish</button></li>'
                            END 
                            || '
                            <li><button type="button" class="fa fa-trash delete"' || CASE WHEN C.id=1 THEN ' disabled' END || '>Delete</button></li>
                            <li><button type="button" class="fa fa-id-card">' || C.id || '</button></li>
                        </div>'
                        END ||'
                    </div>' ||
                    CASE WHEN C.first_asset=0 
                        THEN '<button type="button" class="no-media upload-media">UPLOAD MEDIA</button>' 
                        ELSE '<img class="show-gallery" src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '" alt="' || C.alt_text || '">' 
                    END ||
                    CASE WHEN COALESCE(C.title,C.excerpt) IS NULL 
                        THEN '<br>
                              <button type="button" class="no-media edit-text">CREATE TEXT</button>'
                        ELSE '<h4 class="title ' || CASE WHEN apex_authentication.is_authenticated THEN 'edit-text' ELSE 'preview' END || '">' || C.title || '</h4>
                              <p class="excerpt">' || C.excerpt || '<span class="word-count">' || C.word_count || '</span></p>'
                    END || '   
                    <footer>' || C.name || ', <span class="updated-date">' || fmtUpdatedDate(C.updated_date)  || '</span></footer>
                </li>');
        END LOOP;
        l_clob:=l_clob || TO_CLOB('</ul>');
        l_clob:=l_clob || TO_CLOB(
            '<dialog class="popup">
                <div>
                    <button type="button" class="close">&times;</button>
                    <h2></h2>
                    <p></p>
                    <button type="button" class="confirm">CONFIRM</button>
                </div>
            </dialog>
            <dialog class="preview">
                <div>
                    <div></div> <!-- empty div for preview grid -->
                    <div class="content ck-content"></div>
                    <button type="button" class="close" autofocus>&times;</button>
                </div>
            </dialog>
            <dialog class="editor">
                <div>
                    <div></div>
                    <div>
                        <div id="editor"></div>
                        <div id="word-count"></div>
                        <div id="editor-status"></div>
                    </div>
                    <button type="button" class="close" autofocus>&times;</button>
                </div>
            </dialog>            
            <dialog class="gallery">
                <div>
                    <button type="button" class="close" autofocus>&times;</button>
                    <nav>
                        <div>
                            <button type="button" class="thumbs-minus fa">&minus;</button>
                            <button type="button" class="thumbs-plus fa">&plus;</button>
                        </div>
                        <button type="button" class="list-performance">PERFORMANCE</button>
                    </nav>
                    <div class="gallery-container" role="region" aria-label="gallery">
                        <p class="instruction"></p>
                        <ul></ul>
                    </div>
                    <div class="gallery-overlay">
                        <img src="">
                        <fieldset>
                            <legend><span></span><button class="close-fieldset" type="button">&times;</button></legend>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                        </fieldset>
                        <span class="counter"></span>
                        <button type="button" class="close-fullscreen">&times;</button>
                        <button type="button" class="prev">&lt;</button>
                        <button type="button" class="next">&gt;</button>
                    </div>
                </div>
            </dialog>            
            <dialog class="perftable">
                <div>
                    <button type="button" class="close">&times;</button>
                    <div class="content"></div>
                </div>
            </dialog>
            <dialog class="cldapikey">
                <div>
                    <button type="button" class="close">&times;</button>
                    <p>Subscribe to a free <a href="https://cloudinary.com/users/register_free">Cloudinary plan</a> and enter your API key in the field below</p>
                    <p>Alternatively click "Continue as guest" for limited access</p>
                    <fieldset>
                        <legend>Cloudinary API Environment variable</legend>
                        <input type="text" id="cldapikey">
                    </fieldset>
                    <div class="button-container">
                        <button type="button" class="save">Save Changes</button>
                        <button type="button" class="guest">Continue as guest</button>
                    </div>
                </div>
            </dialog> 
            ');
 
        IF (INSTR(l_javascript_file_urls,'app100.min.js')=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name='app100.js') LOOP
                l_clob:=l_clob || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
            END LOOP;
            --IF (apex_authentication.is_authenticated) THEN
            IF (apex_application.g_flow_step_id=2) THEN
                FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name='app100auth.js') LOOP
                    l_clob:=l_clob || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
                END LOOP;            
            END IF;
        END IF;
        
        FOR C IN ( SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix url
                     FROM user_ords_schemas s, user_ords_modules m
                    WHERE s.parsing_schema=sys_context('userenv','current_schema')
                      AND m.name='public' ) 
        LOOP
            l_clob:=l_clob || TO_CLOB('
            <script type="module">
              import {onCLS, onFID, onLCP} from ''https://unpkg.com/web-vitals?module'';
              gRestUrl = "' || C.url || '";
              onCLS(addToVitalsQueue);
              onFID(addToVitalsQueue);
              onLCP(addToVitalsQueue);
            </script>');
        END LOOP;

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
  
    /*
    ** Build HTML for public home page. Main content maintained in article id = 1
    
        
        FOR C IN (
            WITH 
            metric AS
            (
                SELECT nb_assets,bytes,nb_articles,word_count,total_credits,credits_remaining,total_used,max_size
                FROM
                (
                SELECT id, MAX(id) OVER () max_id, nb_assets,bytes,nb_articles,word_count,total_credits,credits_remaining,total_used,max_size
                FROM metrics
                )
                WHERE id=max_id
            )
            SELECT art.body_html, 
                   met.nb_assets, met.bytes, met.nb_articles, met.word_count, met.total_credits, met.credits_remaining, met.total_used, met.max_size
              FROM article art, metric met
             WHERE art.id=1) 
        LOOP
        -- <img class="hero-img" src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '" alt="' || C.alt_text || '">
            l_clob:=l_clob || TO_CLOB('
                        <table>
                            <tr><td></td><td>HOSTING</td><td>CAPACITY USED</td></tr>
                            <tr>
                                <td>CLOUDINARY</td>
                                <td style="line-height:1.5">' || TO_CHAR(C.nb_assets,'9,999,999') || ' media files<br>(' || apex_string_util.to_display_filesize(C.bytes) || ')</td>
                                <td style="text-align: center">' || ROUND((C.total_credits - C.credits_remaining)*100 / C.total_credits) || '%</td>
                                </tr>
                            <tr>
                                <td>ORACLE</td>
                                <td style="line-height:1.5">' || C.nb_articles || ' articles<br>(' || TO_CHAR(C.word_count,'fm999,999') || ' words)</td>
                                <td style="text-align: center">' || ROUND(C.total_used*100/C.max_size) || '%</td>
                            </tr>
                        </table>
*/
    

    PROCEDURE getThumbnailContent(pArticleId IN article.id%type, pUserId IN users.id%type, pNbItems IN OUT PLS_INTEGER, pInstruction IN OUT NOCOPY VARCHAR2, pContent IN OUT NOCOPY CLOB) 
    IS
        l_url_image VARCHAR2(300);
        l_media_type VARCHAR2(5);   
    BEGIN
        pNbItems:=0;
        FOR C IN (
            SELECT a.rowid row_id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(a.created_date,'dd-Mon-yyyy') uploaded, 
                   DECODE(a.width,0,gWidthThumbnail,a.width) width, DECODE(a.height,0,gWidthThumbnail,a.height) height, REPLACE(a.alt_text,'"','&quot;') alt_text, a.description, a.bytes, a.format,
                   COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY a.display_order) rn
              FROM asset a, article t
             WHERE t.id=pArticleId
               AND a.article_id=t.id
               AND t.author_user_id=NVL(pUserId, t.author_user_id)
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            pNbItems:=pNbItems+1;
            
            pContent:=pContent || TO_CLOB('
                <li class="card" tabindex="0"' || CASE WHEN apex_authentication.is_authenticated THEN ' data-id="' || C.row_id || '"' END || '>
                    <div class="button-container">
                        <span>' || C.rn || '/' || C.nb || '</span>' || 
                        CASE WHEN apex_authentication.is_authenticated THEN
                        '<div class="dropdown">
                            <button type="button" class="fa fa-caret-down show-dropdown"></button>
                            <ul class="dropdown-items">
                                <li><button type="button" class="fa fa-refresh update-asset">Update Text</button></li>
                                <li><button type="button" class="fa fa-id-card view-performance">Performance</button></li>
                                <li><button type="button" class="fa fa-trash delete-asset">Delete</button></li>
                            </ul>
                        </div>' END || '
                    </div>');
            
            l_url_image:=getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);
            l_media_type:=getMediaType(C.resource_type, C.format);
            
            pContent:=pContent || TO_CLOB('<img data-dimensions="'  || 
                                            ROUND(C.width*.25) || 'x' || ROUND(C.height*.25) || ':' || 
                                            ROUND(C.width*.625) || 'x' || ROUND(C.height*.625) || ':' || 
                                            C.width || 'x' || C.height || '" src="' || l_url_image || '"' || CASE WHEN l_media_type='video' THEN ' style="display:none"' END || '>');
            
            CASE l_media_type
                                            
                WHEN 'video' THEN
                    pContent:=pContent || TO_CLOB(
                    '<video controls preload="metadata" poster="' || l_url_image || '">
                        <source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>
                    </video>');
                    
                WHEN 'audio' THEN
                    l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                    pContent:=pContent || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>
                    </audio>');
                    
                ELSE NULL;
        
            END CASE;
            
            pContent:=pContent || TO_CLOB('
                <div>
                    <label for="alt-text">Alt text<span></span></label>
                    <textarea id="alt-text" maxlength="50"' || CASE WHEN NOT apex_authentication.is_authenticated THEN ' readonly' END || '>' || C.alt_text || '</textarea>
                </div>
                <div>
                    <label for="description">Description<span></span></label>
                    <textarea id="description" maxlength="500"' || CASE WHEN NOT apex_authentication.is_authenticated THEN ' readonly' END || '>' || C.description || '</textarea>                    
                </div>');
            
            pContent:=pContent || TO_CLOB('</li>');
            
        END LOOP;
        
        pInstruction:=CASE WHEN apex_util.get_session_state('APP_MAXTOUCHPOINTS') > 1 THEN 'Tap' ELSE 'Click' END || ' Image to view in full screen' || 
                       CASE WHEN apex_authentication.is_authenticated AND pNbItems > 1 THEN 
                            '<span>|</span>Drag and drop images to reorder<span>|</span>First image is article cover' END;

    END;
    
    /*
     **  Build gallery of thumbnail images from ASSET table 
     **  Executed in response to user requesting gallery of media assets for a given article
     */
    PROCEDURE getThumbnails(pArticleId IN article.id%type) IS
        l_clob CLOB;
        l_user_id users.id%type:=getUserId();
        l_instruction VARCHAR2(300);
        n PLS_INTEGER;
    BEGIN
        getThumbnailContent(pArticleId, l_user_id, n, l_instruction, l_clob);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.write('instruction', l_instruction);
                            
        apex_json.close_object;
         
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Load metadata after media uploaded to Cloudinary.
     **  Insert uploaded asset metadata into ASSETS table
     **  Return new asset count and url of first image as default cover image
     */       
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB) IS
        l_article_id article.id%type;
        l_metadata clob:=pBodyText;
        l_user_id users.id%type:=getUserId();
        l_start_order PLS_INTEGER;
        l_updated_date article.updated_date%type:=current_timestamp;
        nb_assets PLS_INTEGER;
    BEGIN
        SELECT article_id 
          INTO l_article_id
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id)) WHERE ROWNUM=1;
        
        MERGE INTO article t
        USING (SELECT l_article_id article_id FROM dual) s
           ON (t.id=s.article_id)
         WHEN MATCHED THEN UPDATE SET updated_date=current_timestamp
         WHEN NOT MATCHED THEN INSERT (id, author_user_id, created_date) VALUES (s.article_id, l_user_id, current_timestamp);
        
        SELECT NVL(MAX(display_order),0) INTO l_start_order FROM asset WHERE article_id=l_article_id;

        INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, created_date, display_order)
        SELECT seq_asset.nextval, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, current_timestamp, l_start_order+ROWNUM
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id, public_id, width, height, bytes, resource_type, format, cld_cloud_name));

        /* Return upload details to calling Javascript process in order to update front-end */
        FOR C IN (SELECT cld_cloud_name, resource_type, public_id, format, width, nb_assets
                    FROM
                    (
                    SELECT cld_cloud_name, resource_type, public_id, format, width, display_order, 
                            MIN(display_order) OVER () min_display_order, 
                            COUNT(*) OVER () nb_assets
                    FROM asset 
                    WHERE article_id=l_article_id
                    )
                    WHERE display_order=min_display_order)
        LOOP
            APEX_JSON.open_object; 
            APEX_JSON.write('success', TRUE);
            APEX_JSON.write('articleId',l_article_id);
            APEX_JSON.write('nbAssets',C.nb_assets);
            APEX_JSON.write('imgurl',getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width));
            APEX_JSON.write('updated', fmtUpdatedDate(l_updated_date));
            APEX_JSON.close_object;
        END LOOP;
               
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;  
    
    /*
     **  Upload Performance data from entries accumulated by Javascript Performance API
     */       
    PROCEDURE uploadPerformance(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        n PLS_INTEGER;
    BEGIN
        INSERT /*+ ignore_row_on_dupkey_index ( performance (session_id, url)) */ 
          INTO performance(id, asset_id, session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, capture_date, user_id, ip_address)
        WITH json AS 
        (
            SELECT session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, timestamp'1970-01-01 00:00:00' + numtodsinterval(epoch,'second') capture_date, l_user_id, l_ip_address
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, epoch))
        )
        SELECT seq_performance.nextval, a.id, j.session_id, j.url, j.connection_type, j.transfersize, j.duration, j.content_type, j.window_innerwidth, j.browser, j.capture_date, l_user_id, l_ip_address
          FROM json j, asset a
         WHERE j.cld_cloud_name=a.cld_cloud_name
           AND j.resource_type=a.resource_type
           AND j.public_id=a.public_id;
        
        INSERT /*+ ignore_row_on_dupkey_index ( servertiming (performance_id, seq)) */ 
          INTO servertiming(performance_id, seq, name, duration, description)
        WITH json AS 
        (
            SELECT session_id, url, seq, name, duration, description
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, url,
                        NESTED  '$.servertiming[*]' columns (seq for ordinality,name,duration,description))) 
        )
        SELECT p.id, j.seq, j.name, j.duration, j.description
          FROM json j, performance p
         WHERE p.session_id=j.session_id
           AND p.url=j.url
           AND j.seq IS NOT NULL;        
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object; 
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
    ** Write HTML table of media download performance for the article
    */
    PROCEDURE getPerformance IS
        l_article_id asset.article_id%type:=apex_application.g_x01;
        l_content CLOB;
        l_ip_address performance.ip_address%type;
        l_session_id NUMBER:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
        n PLS_INTEGER:=0;
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
        l_url_parts apex_t_varchar2;
        l_transformation VARCHAR(300);
    BEGIN
        IF (apex_authentication.is_authenticated) THEN
            l_ip_address:=NULL;
        ELSE
            l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        END IF;
        
        /* 
        
        FOR C IN (SELECT  COUNT(*) OVER (PARTITION BY a.cld_cloud_name, a.resource_type, a.public_id) nb_rows, 
                          ROW_NUMBER() OVER (PARTITION BY a.display_order,a.cld_cloud_name, a.resource_type, a.public_id ORDER BY p.capture_date DESC) rn, 
                          a.cld_cloud_name, a.resource_type, a.public_id, a.format, a.width, a.bytes, apex_util.get_since(a.created_date) created_date, apex_util.get_since(p.capture_date) capture_date, 
                          p.url, p.transfersize, p.duration, p.content_type, p.browser, p.session_id, p.window_innerwidth, p.ip_address, p.connection_type, p.servertiming
                    FROM asset a, performance p
                   WHERE a.article_id=l_article_id
                     AND a.cld_cloud_name=p.cld_cloud_name
                     AND a.resource_type=p.resource_type
                     AND a.public_id=p.public_id
                     AND p.ip_address = NVL(l_ip_address, p.ip_address)
                     AND p.session_id=NVL(l_session_id, p.session_id)
                   ORDER BY a.display_order)
        LOOP
            n:=n+1;
            IF (n=1) THEN
                l_content:=to_clob(
                '<table>
                    <caption>CLOUDINARY BASE URL: ' || SUBSTR(C.url,1,INSTR(C.url,'/',1,4)) || '</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>DOWNLOADED<br>I.P. (CONNECTION)<br>BROWSER (WIDTH)</th>
                            <th class="align-left">TRANSFORMATION</th>
                            <th>TRANSFER SIZE<br>DURATION<br>CONTENT/TYPE</th>
                            <th class="align-left">SERVER TIMING</th>
                        </tr>
                    </thead>
                    <tbody>
                ');
            END IF;
            
            IF (C.nb_rows=C.rn) THEN
                l_content:=l_content || to_clob('<tr class="last-tr">');
            ELSE
                l_content:=l_content || to_clob('<tr>');
            END IF;
                
            IF (C.rn=1) THEN 
                l_content:=l_content || to_clob(
                '<td rowspan="' || C.nb_rows || '">
                    <figure><img src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
                        <figcaption><span class="label">File name: </span>' || SUBSTR(C.public_id,1,INSTR(C.public_id,'_',-1)-1) || '.' || C.format 
                            || '<br><span class="label">Original size: </span>' || apex_string_util.to_display_filesize(C.bytes) 
                            || '<br><span class="label">Width: </span>' || C.width || ' px'
                            || '<br><span class="label">Uploaded: </span>' || C.created_date || '
                    </figcaption></figure></td>');
            END IF;
            
            l_url_parts:=apex_string.split(C.url,'/');
            IF (C.resource_type='image') THEN
                l_transformation:=l_url_parts(5);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            ELSE
                l_transformation:=l_url_parts(7);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            END IF;
            
            l_content:=l_content || to_clob('
                <td class="align-center">' || C.capture_date || '<br>' || C.ip_address || CASE WHEN C.connection_type IS NOT NULL THEN ' (' || C.connection_type || ')' END || '<br>' || C.browser || ' (' || C.window_innerwidth || ' px)</td>
                <td>' || l_transformation || '</td>
                <td class="align-center">' || apex_string_util.to_display_filesize(C.transfersize) || '<br>' || C.duration || ' ms<br>' || C.content_type|| '</td>
                <td>' || REPLACE(C.servertiming,'|','<br>') || '</td>
            </tr>');
                
        END LOOP;
        
        IF (n>0) THEN
            l_content:=l_content || to_clob('</tbody></table>');
        ELSE
            l_content:= to_clob('<p>All media for your session was retrieved from Cache</p>');
        END IF;
        */
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('content', l_content);
        APEX_JSON.close_object;          
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);        
    END;
    
    /*
     **  Get the selected article's content in HTML format
     **
     */    
    PROCEDURE getArticle(pArticleId IN article.id%type)  IS
        l_user_id users.id%type;
    BEGIN
        l_user_id:=getUserId();

        FOR C IN (SELECT a.body_html, UPPER(u.name) name, apex_util.get_since(a.created_date) created, CASE WHEN a.word_count<200 THEN 'less than a minute' ELSE ROUND(a.word_count/200) || ' minute read' END minutes 
                    FROM article a, users u 
                   WHERE a.id=pArticleId 
                     AND a.author_user_id=NVL(l_user_id,a.author_user_id)
                     AND a.is_public=CASE WHEN l_user_id IS NULL THEN 'Y' ELSE a.is_public END
                     AND a.author_user_id=u.id )
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE); 
            apex_json.write('content', C.body_html);
            apex_json.write('details','<div class="details"><span>' || C.name || '</span><span>-</span><span>' || C.created || '</span><span>-</span><span>' || C.minutes || '</span></div>');
            apex_json.close_object;
        END LOOP;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm, pAjax=>TRUE);
    END;    

    /*
     **  Procedure called by the autoSave feature of CKEditor
     */        
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        l_user_id users.id%type:=getUserId();
        l_article_id article.id%type;
    BEGIN
        MERGE INTO article t
            USING (
                SELECT SUBSTR(title,1,60) title, 
                       REGEXP_SUBSTR(word_count,'(\d)+') word_count, 
                       SUBSTR(apex_escape.striphtml(edit_text),LENGTH(title)+1,160) excerpt, 
                       edit_text
                FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (title, word_count, edit_text)) ) s
            ON (t.id=pArticleId AND t.author_user_id=l_user_id)
            WHEN NOT MATCHED THEN
                INSERT (id, author_user_id, excerpt, word_count, body_html, created_date) VALUES (seq_article.nextval, l_user_id, s.excerpt, s.word_count, s.edit_text, current_date)
            WHEN MATCHED THEN
                UPDATE SET title=s.title, excerpt=s.excerpt, word_count=s.word_count, body_html=s.edit_text, updated_date=current_timestamp;
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        IF (pArticleId=0) THEN
            APEX_JSON.write('articleId',seq_article.currval);
        END IF;
        apex_json.close_object;
         
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Delete all Cloudinary assets uploaded for a given article
     */   
    FUNCTION deleteUploadedMedia(pArticleId IN NUMBER, pResourceType IN asset.resource_type%type DEFAULT NULL) RETURN NUMBER IS
        l_clob CLOB;
        l_url VARCHAR2(500);
        nb_deleted PLS_INTEGER:=0;
        n PLS_INTEGER;
    BEGIN
        FOR C IN (SELECT DISTINCT a.resource_type, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret 
                    FROM users u, article t, asset a
                   WHERE t.id=pArticleId
                     AND t.author_user_id=u.id
                     AND t.id=a.article_id
                     AND a.resource_type=NVL(pResourceType,a.resource_type))
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || pArticleId;
            l_clob := apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'DELETE',p_username=>C.cld_api_key,p_password=>C.cld_api_secret); 
            SELECT SUM(original) INTO n FROM JSON_TABLE(l_clob FORMAT JSON, '$.deleted_counts.*' COLUMNS (original NUMBER PATH '$.original'));
            nb_deleted:=nb_deleted+n;
        END LOOP;
        RETURN(nb_deleted);
    END;    
    
    /*
     **  Remove article and any uploaded assets
     */   
    PROCEDURE deleteArticle IS
        l_article_id article.id%type:=apex_application.g_x01;
        l_clob CLOB;
        l_url VARCHAR2(500);
    BEGIN
        FOR C IN (SELECT DISTINCT a.resource_type, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret 
                    FROM users u, article t, asset a
                   WHERE t.id=l_article_id
                     AND t.author_user_id=u.id
                     AND t.id=a.article_id)
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || l_article_id;
            l_clob := apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'DELETE',p_username=>C.cld_api_key,p_password=>C.cld_api_secret); 
            log(l_clob);
        END LOOP;
        
        DELETE asset WHERE article_id=l_article_id;
        
        DELETE article WHERE id=l_article_id;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    
    /*
     **  Update the alt_text and description columns of a given ASSET
     */   
    PROCEDURE updateAsset IS
        l_asset_dbid VARCHAR2(20) := apex_application.g_x01;
        l_rowid ROWID:=CHARTOROWID(l_asset_dbid);
        l_alt_text asset.alt_text%type := apex_application.g_x02;
        l_description asset.description%type := apex_application.g_x03;
        l_alt_text_old asset.alt_text%type := apex_application.g_x02;
        l_description_old asset.description%type := apex_application.g_x03; 
        l_alt_text_updated BOOLEAN;
        l_description_updated BOOLEAN;
    BEGIN
        SELECT alt_text, description INTO l_alt_text_old,l_description_old  FROM asset WHERE ROWID=l_rowid;
        
        UPDATE asset SET alt_text=l_alt_text, description=l_description, updated_date=current_timestamp WHERE ROWID=l_rowid;
        
        l_alt_text_updated:=NVL(l_alt_text,'x') != NVL(l_alt_text_old,'x');
        l_description_updated:=NVL(l_description,'x') != NVL(l_description_old,'x');
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('updated', fmtUpdatedDate(current_timestamp)); 
        apex_json.write('alt_text_updated',l_alt_text_updated);
        apex_json.write('description_updated',l_description_updated);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Delete 1 asset for a given article
     */   
    PROCEDURE deleteAsset IS
        pCurrentUser users.email%type;
        l_asset_dbid VARCHAR2(20) := apex_application.g_x01;
        l_rowid ROWID:=CHARTOROWID(l_asset_dbid);
        l_article_id asset.article_id%type;
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_public_id asset.public_id%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_parm_names apex_application_global.VC_ARR2;
        l_parm_values apex_application_global.VC_ARR2;
        l_timestamp NUMBER:=trunc((cast(current_timestamp at time zone 'UTC' as date) - to_date('01-jan-1970','dd-mon-yyyy')) * (86400));
        l_signature VARCHAR2(100);
        l_string_to_sign varchar2(2000);  
        l_error_message VARCHAR2(500);
        l_clob CLOB;
        l_instruction VARCHAR2(500);
        l_updated_date VARCHAR2(20);
        n PLS_INTEGER;
    BEGIN
        SELECT a.article_id, a.cld_cloud_name, a.public_id, u.cld_api_key, u.cld_api_secret
          INTO l_article_id, l_cld_cloud_name, l_public_id, l_cld_api_key, l_cld_api_secret
          FROM asset a, article t, users u
         WHERE a.ROWID=l_rowid
           AND a.article_id=t.id
           AND t.author_user_id=u.id;
        
        l_parm_names(1):='invalidate';
        l_parm_values(1):='true';
        l_parm_names(2):='public_id';
        l_parm_values(2):=l_public_id;        
        l_parm_names(3):='timestamp';    
        l_parm_values(3):=l_timestamp;                
        
        l_string_to_sign:=NULL;
        FOR i IN 1..3 LOOP
            l_string_to_sign:=l_string_to_sign || l_parm_names(i) || '=' || l_parm_values(i) || '&';
        END LOOP;
        l_string_to_sign:=RTRIM(l_string_to_sign,'&') || l_cld_api_secret;
        l_parm_names(4):='signature';
        l_parm_values(4):=dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign), dbms_crypto.HASH_SH1);   
        l_parm_names(5):='api_key';
        l_parm_values(5):=l_cld_api_key;            
        
        l_clob := apex_web_service.make_rest_request(
            p_url=>'https://api.cloudinary.com/v1_1/' || l_cld_cloud_name || '/image/destroy', 
            p_http_method=>'POST',
            p_parm_name=>l_parm_names,
            p_parm_value=>l_parm_values); 

        SELECT error_message INTO l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS error_message VARCHAR2(500) PATH '$.error.message');
        
        IF (l_error_message IS NOT NULL) THEN
            log(l_clob);
            RAISE_APPLICATION_ERROR(-20001, l_error_message);
        END IF;
        
        DELETE asset WHERE ROWID=l_rowid;
        
        UPDATE article SET updated_date=current_date WHERE id=l_article_id;
        
        l_clob:=NULL;
        
        getThumbnailContent(l_article_id, pCurrentUser, n, l_instruction, l_clob);
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('updated', fmtUpdatedDate(current_date));
        apex_json.write('content', l_clob);
        apex_json.write('nb', n);
        apex_json.write('instruction', l_instruction);

        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Remove user and all articles, assets,grants etc. Runs as a background job 
     */   
    PROCEDURE deleteAll(pUserId IN users.id%type) IS
        nb_articles PLS_INTEGER;
        nb_assets NUMBER:=0;
        n NUMBER;
    BEGIN
        FOR C IN (SELECT id FROM article WHERE author_user_id=pUserId) LOOP
            n:=deleteUploadedMedia(C.id);
            nb_assets:=nb_assets+n;
        END LOOP;

        DELETE article WHERE author_user_id=pUserId;
        nb_articles:=SQL%ROWCOUNT;
        
        DELETE users WHERE id=pUserId;

        log('Deleted ' || nb_articles || ' articles and ' || nb_assets || ' images/videos.');
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;        
    END;
    
    /*
     **  Publish / unpublish article
     */   
    PROCEDURE publishArticle IS
        l_article_id article.id%type:=apex_application.g_x01;
        l_is_public article.is_public%type:=apex_application.g_x02;
        n PLS_INTEGER:=-1;
    BEGIN
        /* Reject publication request if cover image does not have ALT description */
        
        apex_json.open_object; 
        
        IF (l_is_public='Y') THEN
            SELECT COUNT(*) INTO n FROM dual WHERE EXISTS
            (
                SELECT alt_text, display_order FROM
                (
                    SELECT MIN(display_order) OVER () cover, display_order, alt_text FROM asset WHERE article_id=l_article_id 
                )
                WHERE display_order=cover AND alt_text IS NOT NULL
            );
            IF (n=0) THEN
                apex_json.write('message', 'Cover Image ALT TEXT must be set before article can be published');
            END IF;
        END IF;
        
        IF (l_is_public='N' OR n=1) THEN
            UPDATE article SET is_public=l_is_public, updated_date=current_date WHERE id=l_article_id;
            apex_json.write('updated', fmtUpdatedDate(current_date));
        END IF;
        
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
                RAISE;
    END;
    
    /*
     **  Reorder assets
     */
    PROCEDURE reorderAssets IS
        l_article_id article.id%type;
        l_dbid_string LONG:=apex_application.g_x01;
        l_first_dbid ROWID;
        
        TYPE t_asset IS RECORD(
            rid ROWID,
            display_order asset.display_order%type);
        TYPE tt_asset IS TABLE OF t_asset;
        l_assets tt_asset; 
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_resource_type asset.resource_type%type; 
        l_public_id asset.public_id%type; 
        l_format asset.format%type; 
        l_width asset.width%type;
        
        l_url VARCHAR2(500);
        l_updated_date VARCHAR2(20);
    BEGIN
        SELECT column_value, rownum 
          BULK COLLECT INTO l_assets
          FROM TABLE(apex_string.split(l_dbid_string,':'));
          
        /* get the article id from first asset */
        SELECT article_id INTO l_article_id
          FROM asset WHERE ROWID=l_assets(1).rid;
        
        /* ... and get rowid of first asset as this may have been replaced */
        SELECT rid 
        INTO l_first_dbid 
        FROM 
        (
            SELECT ROWID rid, display_order, MIN(display_order) OVER () min_display_order
            FROM asset 
            WHERE article_id=l_article_id
        )
        WHERE display_order=min_display_order;
        
        FORALL i IN l_assets.first .. l_assets.last
        UPDATE asset SET display_order=l_assets(i).display_order WHERE ROWID  = l_assets(i).rid;
        
        IF (l_assets(1).rid<>l_first_dbid) THEN
            SELECT cld_cloud_name, resource_type, public_id, format, width
              INTO l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width
              FROM asset 
              WHERE ROWID=l_assets(1).rid;
            l_url:=getCloudinaryUrl(l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width);
            UPDATE article SET updated_date=current_date WHERE id=l_article_id;
            l_updated_date:=fmtUpdatedDate(current_date);
        END IF;
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('url', l_url);
        apex_json.write('updated', l_updated_date);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    
    /**
     **    Update user's record  with Cloudinary API details. Submit background job to transfer users's Cloudinary assets.
     */
    PROCEDURE updateUser IS
        l_cld_api VARCHAR2(200):=apex_util.get_session_state('P2_CLD_API_ENV');
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_p1 INTEGER;
        l_p2 INTEGER;
        l_p3 INTEGER;
        l_error_message VARCHAR2(100);
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_cld_error_message VARCHAR2(100);
        l_clob CLOB;
        l_job_name VARCHAR2(30);
        l_cld_plan VARCHAR2(50);
        l_url VARCHAR2(500);
    BEGIN
        log('Start transfer process for user id:' || l_user_id|| ' P2_CLD_API_ENV:' || l_cld_api);
        
        IF (l_cld_api IS NULL) THEN
            l_error_message:='Cloudinary API Environment variable empty.'; 
        ELSE
            l_p1:=INSTR(l_cld_api,'/',-1);
            l_p2:=INSTR(l_cld_api,':',-1);
            l_p3:=INSTR(l_cld_api,'@');
    
            l_cld_cloud_name:=SUBSTR(l_cld_api,l_p3+1);
            l_cld_api_key:=SUBSTR(l_cld_api,l_p1+1,l_p2-l_p1-1); 
            l_cld_api_secret:=SUBSTR(l_cld_api,l_p2+1,l_p3-l_p2-1);
            
            IF (l_cld_cloud_name IS NULL OR l_cld_api_key IS NULL OR l_cld_api_secret IS NULL) THEN
                l_error_message:='Cloudinary API Environment invalid.';
            END IF;
        END IF;
        
        IF (l_error_message IS NULL) THEN
            l_url:='https://api.cloudinary.com/v1_1/' || l_cld_cloud_name || '/usage';
            l_clob := apex_web_service.make_rest_request(
                p_url=>l_url,
                p_http_method=>'GET',
                p_username=>l_cld_api_key,
                p_password=>l_cld_api_secret);
            SELECT plan, error_message INTO l_cld_plan, l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS plan VARCHAR2(50) PATH '$.plan', error_message VARCHAR2(100) PATH '$.error.message');  
        END IF;
        
        IF (l_error_message IS NOT NULL) THEN
            apex_util.set_session_state('P2_PLSQL_STATUS','nok',p_commit=>false);
            apex_application.g_x01 := l_error_message;
            apex_application.g_x02 := 'CLOUDINARY_URL is invalid or inconsistent'; 
            apex_application.g_x03 := 'error';  
            RETURN;
        END IF;


        /* Validation checks passed. Update user record and submit background job (takes a long time) to transfer the user's assets to their new Cloudinary account */

        UPDATE users 
           SET cld_cloud_name=l_cld_cloud_name,
               cld_api_key=l_cld_api_key, 
               cld_api_secret=l_cld_api_secret,
               cld_plan=l_cld_plan,
               updated_date=current_timestamp
         WHERE id=l_user_id;
        
        apex_util.set_session_state('APP_CLD_API_KEY',l_cld_api_key,p_commit=>false);
        apex_util.set_session_state('APP_CLD_CLOUD_NAME',l_cld_cloud_name,p_commit=>false);
        
        l_job_name:='TRANSFER_USER_ASSETS_'||l_user_id;
        
        dbms_scheduler.create_job(
            job_name =>  l_job_name,
            program_name => 'P_TRANSFER_ASSETS',
            enabled =>    FALSE );
            
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_name => 'PUSERID',
            argument_value => l_user_id);
        
        dbms_scheduler.enable(l_job_name);
        
        apex_util.set_session_state('P2_PLSQL_STATUS','ok',p_commit=>false);
        apex_application.g_x01:='Successfully configured a ' || l_cld_plan || ' Cloudinary plan.';
        apex_application.g_x02:='Starting transfer of all assets to your new Cloudinary account.';
        apex_application.g_x03:='success';

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
    
    /*
     **  Upload Core Web Vitals uploaded through navigator.beacon - hence no response sent.
     */      
    PROCEDURE uploadWebVitals(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        l_plist apex_t_varchar2;
        l_offset PLS_INTEGER;
        l_key VARCHAR2(20);
        l_value VARCHAR2(50);
        l_session_id core_web_vitals.session_id%type;
        l_browser core_web_vitals.browser%type;
        l_width core_web_vitals.width%type;
    BEGIN
        l_plist := apex_string.split(owa_util.get_cgi_env('QUERY_STRING'), '&');
        FOR i IN 1..l_plist.COUNT LOOP
            l_offset := instr(l_plist(i), '=');
            l_key:=substr(l_plist(i), 1, l_offset - 1);
            l_value := substr(l_plist(i), l_offset + 1);
            CASE l_key
                WHEN 'session' THEN l_session_id:=l_value;
                WHEN 'browser' THEN l_browser:=replace(l_value,'+',' ');
                WHEN 'width' THEN l_width:=l_value;
            END CASE;
        END LOOP;
        INSERT INTO core_web_vitals (name, value, rating, ip_address, session_id, browser, width)
        SELECT name, value, rating, l_ip_address, l_session_id, l_browser, l_width
        FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' COLUMNS (name, value, rating))
        LOG ERRORS INTO core_web_vitals_err REJECT LIMIT UNLIMITED;
    END;

    /*
     **  Get Cloudinary usage details for each Cloudinary subscriber. Daily job.
     */    
    PROCEDURE getUsage(pUserId IN users.id%type DEFAULT NULL, pUsageDate IN DATE DEFAULT NULL) IS
        l_url VARCHAR2(100);
        l_clob CLOB;
        l_error_message VARCHAR2(50);
        l_usage_date_param VARCHAR2(16):=NULL;
    BEGIN
        IF (pUsageDate IS NOT NULL) THEN
            l_usage_date_param:='/date='||TO_CHAR(pUsageDate,'DD-MM-YYYY');
        END IF;
        FOR C IN (SELECT id, 
                         cld_cloud_name, 
                         cld_api_key, 
                         cld_api_secret 
                    FROM users 
                   WHERE cld_cloud_name IS NOT NULL
                     AND id=NVL(pUserId,id)
                   ) 
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/usage' || l_usage_date_param;
            log(l_url);
            l_clob := apex_web_service.make_rest_request(
                p_url=>l_url,
                p_http_method=>'GET',
                p_username=>C.cld_api_key,
                p_password=>C.cld_api_secret);
            SELECT error_message INTO l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS error_message VARCHAR2(100) PATH '$.error.message');  
            IF (l_error_message IS NOT NULL) THEN
                log('Error callling REST API for user ' || C.id || ' - ' || l_error_message);
                CONTINUE;
            END IF;
            DELETE usage WHERE user_id=C.id AND usage_date=NVL(pUsageDate,TRUNC(sysdate));
            INSERT INTO usage (user_id,usage_date,last_updated,plan,transformations_usage,transformations_credit_usage,bandwidth_usage,bandwidth_credit_usage,storage_usage,storage_credit_usage,
                credits_usage,credits_limit,used_percent,objects_usage,requests,resources,derived_resources,image_max_size,video_max_size,raw_max_size)
            SELECT C.id, TO_DATE(date_requested,'YYYY-MM-DD"T"hh24:mi:ss"Z"'),TO_DATE(last_updated,'YYYY-MM-DD'),
                plan,
                transformations_usage,transformations_credit_usage,bandwidth_usage,bandwidth_credit_usage,storage_usage,storage_credit_usage,
                credits_usage,credits_limit,used_percent,
                objects_usage,requests,resources,derived_resources,
                image_max_size,video_max_size,raw_max_size
              FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS 
                date_requested VARCHAR2(100) PATH '$.date_requested', 
                last_updated VARCHAR2(100) PATH '$.last_updated', 
                plan VARCHAR2(100) PATH '$.plan',
                transformations_usage NUMBER PATH '$.transformations.usage',
                transformations_credit_usage NUMBER PATH '$.transformations.credits_usage',
                bandwidth_usage NUMBER PATH '$.bandwidth.usage',
                bandwidth_credit_usage NUMBER PATH '$.bandwidth.credits_usage',
                storage_usage NUMBER PATH '$.storage.usage',
                storage_credit_usage NUMBER PATH '$.storage.credits_usage',
                credits_usage NUMBER PATH '$.credits.usage',
                credits_limit NUMBER PATH '$.credits.limit',
                used_percent NUMBER PATH '$.credits.used_percent',
                objects_usage NUMBER PATH '$.objects.usage',
                requests NUMBER PATH '$.requests',
                resources NUMBER PATH '$.resources',
                derived_resources NUMBER PATH '$.derived_resources',
                image_max_size NUMBER PATH '$.media_limits.image_max_size_bytes',
                video_max_size NUMBER PATH '$.media_limits.video_max_size_bytes',
                raw_max_size NUMBER PATH '$.media_limits.raw_max_size_bytes'
                );
        END LOOP;
        COMMIT;
    END;

END;
/