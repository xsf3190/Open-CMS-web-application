CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS" is
    --
    PROCEDURE copyWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE deleteTable(pBodyText IN CLOB);
    --
    PROCEDURE getContent(pWebsiteId IN website.id%type);
    --
    PROCEDURE getCldDetails;
    --
    PROCEDURE getCldSignature(pParamsToSign IN CLOB);
    --
    PROCEDURE getArticle(pArticleId IN article.id%type);
    --
    PROCEDURE getPerformance;
    --
    PROCEDURE getSessionLog(SessionId IN NUMBER);
    --
    PROCEDURE getThumbnails(pArticleId IN article.id%type);
    --
    PROCEDURE getWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE getWebsiteList(pWebsiteId IN website.id%type, pViewOption IN VARCHAR2);
    --
    PROCEDURE publishArticle(pArticleId IN article.id%type);
    --
    PROCEDURE reorderAssets(pBodyText IN CLOB);
    --
    PROCEDURE reorderWebsiteArticles(pWebsiteId IN website_article.website_id%type, pBodyText IN CLOB);
    --
    PROCEDURE setClientInfo(pBodyText IN CLOB);
    --
    PROCEDURE unpublishArticle(pArticleId IN article.id%type);
    --
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE uploadWebVitals(pBodyText IN CLOB);
    --
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB);
    --
    PROCEDURE uploadPageVisit(pBodyText IN CLOB);
    --
    PROCEDURE uploadPerformance(pBodyText IN CLOB);
    --
    PROCEDURE updateField(pBodyText IN CLOB);
    --
    PROCEDURE signout;
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS" is

    PROCEDURE getSessionLog(SessionId IN NUMBER) IS
        l_content CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_content:='
        <table>
            <thead>
                <tr>
                    <th>Log Time</th><th>Log Message</th>
                </tr>
            </thead>
            <tbody>';
        FOR C IN (SELECT log_date, message 
                    FROM log
                   ORDER BY id DESC) 
        LOOP
            l_content:=l_content || '
                <tr>
                    <td>' || TO_CHAR(C.log_date AT TIME ZONE l_session_data.timezone, 'hh24:mi:ss') || '</td><td>' || REPLACE(C.message,chr(10),'<br>') || '</td>
                </tr>';
        END LOOP;
        l_content:=l_content || '
            </tbody>
        </table>';

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    PROCEDURE getCldDetails IS
        l_user_id users.id%type;
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size INTEGER;
        l_video_max_size INTEGER;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        pck_api.getCloudinaryData(pUserId=>l_session_data.user_id, pCloudName=>l_cld_cloud_name, pCldApiKey=>l_cld_api_key, pCldImageMaxSize=>l_image_max_size, pCldVideoMaxSize=>l_video_max_size);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('cloudname', l_cld_cloud_name);
        apex_json.write('apikey', l_cld_api_key);
        apex_json.write('maxImageFileSize', l_image_max_size);
        apex_json.write('maxVideoFileSize', l_video_max_size);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    PROCEDURE getCldSignature(pParamsToSign IN CLOB) IS
        l_params_to_sign clob:=pParamsToSign;
        l_user_id users.id%type;
        l_string_to_sign varchar2(2000):=NULL; 
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM users, JSON_TABLE(l_params_to_sign FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            )
            WHERE users.id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || pck_api.getCloudinaryAPISecret(l_user_id)), dbms_crypto.HASH_SH1));
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     ** Insert row in session_data table when user views home page.
     */
    PROCEDURE setClientInfo(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address session_data.ip_address%type;
    BEGIN
        l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        INSERT INTO session_data (session_id, timezone, maxtouchpoints, browser, browser_version, ip_address)
        SELECT session_id, timezone, maxtouchpoints, browser, browser_version, l_ip_address
            FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' COLUMNS (session_id, timezone, maxtouchpoints, browser, browser_version));

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;


    /*
    ** GET ALL ARTICLE (PAGE) CONTENT FOR A WEBSITE
    */
    PROCEDURE getWebsite(pWebsiteId IN website.id%type) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        apex_json.open_object;

        FOR C IN (
            SELECT w.domain_name, w.contact_email, w.template, w.font, w.favicon_url, w.trade_name, w.affiliation_link_img, w.affiliation_link_url, w.netlify_site_id, w.netlify_site_id_custom
              FROM website w
             WHERE w.id=pWebsiteId
               AND w.user_id=l_session_data.user_id) 
        LOOP
            apex_json.write('domain_name', C.domain_name);
            apex_json.write('contact_email', C.contact_email);
            IF (C.template<>'-1') THEN
                apex_json.write('template', 'template-' || LOWER(C.template));
            END IF;
            apex_json.write('deploy_buttons', pck_core.buildDeployButtons(C.domain_name, C.netlify_site_id, C.netlify_site_id_custom));
            apex_json.write('cards',pck_core.buildWebsiteArticles(pWebsiteId, l_session_data.canuse_popover, l_session_data.timezone));
        END LOOP;

        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    PROCEDURE getWebsiteList(pWebsiteId IN website.id%type, pViewOption IN VARCHAR2) IS
        l_clob CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', pck_core.buildWebsiteArticles(pWebsiteId,l_session_data.canuse_popover, l_session_data.timezone, pViewOption=>pViewOption));
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Build gallery of thumbnail images for a given article
     */
    PROCEDURE getThumbnails(pArticleId IN article.id%type)
    IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_instruction VARCHAR2(300);
        l_url_image VARCHAR2(300);
        l_media_type VARCHAR2(5);
        l_dimensions VARCHAR2(50);
        l_aspect_ratio NUMBER;
        n PLS_INTEGER:=0;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (
            SELECT a.id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(a.created_date,'dd-Mon-yyyy') uploaded, 
                   DECODE(a.width,0,pck_core.gWidthThumbnail,a.width) width, DECODE(a.height,0,pck_core.gWidthThumbnail,a.height) height, REPLACE(a.alt_text,'"','&quot;') alt_text, a.description, a.bytes, a.format
              FROM asset a
             WHERE a.article_id=pArticleId
               AND a.user_id=l_session_data.user_id
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            n:=n+1;
            l_clob:=l_clob || TO_CLOB('
                <li class="card" tabindex="0" data-id="' || C.id || '">
                    <div>
                        <div class="dropdown">
                            <button type="button" class="show-dropdown">&blacktriangledown;</button>
                            <ul class="dropdown-items">
                                <li>
                                    <button type="button" class="with-icon delete" data-table="asset">
                                        <svg class="icon"><use href="#delete"></use></svg>
                                    Delete
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </div>');
            l_url_image:=pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);
            l_media_type:=pck_core.getMediaType(C.resource_type, C.format);

            IF (C.width>0 AND C.width*.25>pck_core.gWidthThumbnail) THEN
                l_dimensions:=pck_core.gWidthThumbnail || 'xheight:' ||
                              ROUND((C.width-pck_core.gWidthThumbnail)/2) || 'xheight:';
            ELSE
                l_dimensions:=ROUND(C.width*.25) || 'x' || ROUND(C.height*.25) || ':' || 
                              ROUND(C.width*.625) || 'x' || ROUND(C.height*.625) || ':';
            END IF;

            l_clob:=l_clob || TO_CLOB('<img class="fullscreen" data-dimensions="'  || l_dimensions || 
                                C.width || 'x' || C.height || '" data-src="' || l_url_image || '"' || CASE WHEN l_media_type='video' THEN ' style="display:none"' END || '>');

            CASE l_media_type

                WHEN 'video' THEN
                    l_clob:=l_clob || TO_CLOB(
                    '<video controls preload="metadata" poster="' || l_url_image || '">
                        <source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>
                    </video>');

                WHEN 'audio' THEN
                    l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                    l_clob:=l_clob || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>
                    </audio>');

                ELSE NULL;
            END CASE;

            l_clob:=l_clob || TO_CLOB(pck_core.buildTextareaWrapper(C.id,'asset.alt_text',C.alt_text, l_session_data.canuse_popover));
            l_clob:=l_clob || TO_CLOB(pck_core.buildTextareaWrapper(C.id,'asset.description',C.description, l_session_data.canuse_popover));

            l_clob:=l_clob || TO_CLOB('</li>');

        END LOOP;

        l_instruction:=CASE WHEN l_session_data.maxtouchpoints > 1 THEN 'Tap' ELSE 'Click' END || ' Image to view in full screen';
        IF (n > 1) THEN 
            l_instruction:=l_instruction || '<span>|</span>Drag and drop images to reorder<span>|</span>First image is article cover';
        END IF;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.write('instruction', l_instruction);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Load metadata after media uploaded to Cloudinary.
     **  Insert uploaded asset metadata into ASSETS table
     **  Return new asset count and url of first image as default cover image
     */       
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB) IS
        l_article_id article.id%type;
        l_website_id website.id%type;
        l_metadata clob:=pBodyText;
        l_user_id users.id%type;
        l_start_order PLS_INTEGER;
        l_start_order_website PLS_INTEGER;
        l_updated_date article.updated_date%type:=current_timestamp;
        l_session_data pck_core.session_data_rt;
        nb_assets PLS_INTEGER;
        n PLS_INTEGER;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT article_id, website_id
          INTO l_article_id, l_website_id
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id, website_id)) WHERE ROWNUM=1;

        MERGE INTO article t
        USING (SELECT l_article_id article_id FROM dual) s
           ON (t.id=s.article_id)
         WHEN MATCHED THEN UPDATE SET updated_date=current_timestamp
         WHEN NOT MATCHED THEN INSERT (id, author_user_id, created_date) VALUES (s.article_id, l_session_data.user_id, current_timestamp);

        /* upload into WEBSITE_ARTICLE table */

        SELECT COUNT(*) INTO n FROM dual WHERE EXISTS (SELECT null FROM website_article WHERE article_id=l_article_id AND website_id=l_website_id);
        IF (n=0) THEN
            SELECT NVL(MAX(display_order),0)+1 INTO l_start_order_website FROM website_article WHERE website_id=l_website_id;
            INSERT INTO website_article(article_id, website_id, display_order, user_id) VALUES (l_article_id, l_website_id, l_start_order_website, l_user_id);
        END IF;

        /* upload into ASSET table */

        SELECT NVL(MAX(display_order),0) INTO l_start_order FROM asset WHERE article_id=l_article_id;

        INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, created_date, display_order, user_id)
        SELECT seq_asset.nextval, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, current_timestamp, l_start_order+ROWNUM, l_session_data.user_id
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id, public_id, width, height, bytes, resource_type, format, cld_cloud_name));

        /* Return upload details to calling Javascript process in order to update front-end */
        FOR C IN (SELECT id, cld_cloud_name, resource_type, public_id, format, width, nb_assets
                    FROM
                    (
                    SELECT id, cld_cloud_name, resource_type, public_id, format, width, display_order, 
                            MIN(display_order) OVER () min_display_order, 
                            COUNT(*) OVER () nb_assets
                    FROM asset 
                    WHERE article_id=l_article_id
                    )
                    WHERE display_order=min_display_order)
        LOOP
            UPDATE article SET cover_asset_id=C.id, nb_assets=C.nb_assets WHERE id=l_article_id;
            APEX_JSON.open_object; 
            APEX_JSON.write('success', TRUE);
            APEX_JSON.write('articleId',l_article_id);
            APEX_JSON.write('nbAssets',C.nb_assets || ' media');
            APEX_JSON.write('imgurl',pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width));
            APEX_JSON.write('updated', TO_CHAR(l_updated_date AT TIME ZONE l_session_data.timezone,'dd Mon yyyy fmhh:fmmi PM'));
            APEX_JSON.close_object;
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;  

    /*
     **  Upload Performance data from entries accumulated by Javascript Performance API
     */       
    PROCEDURE uploadPerformance(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        n PLS_INTEGER;
    BEGIN
        INSERT /*+ ignore_row_on_dupkey_index ( performance (session_id, url)) */ 
          INTO performance(id, asset_id, session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, capture_date, user_id, ip_address)
        WITH json AS 
        (
            SELECT session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, timestamp'1970-01-01 00:00:00' + numtodsinterval(epoch,'second') capture_date, l_user_id, l_ip_address
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, epoch))
        )
        SELECT seq_performance.nextval, a.id, j.session_id, j.url, j.connection_type, j.transfersize, j.duration, j.content_type, j.window_innerwidth, j.browser, j.capture_date, l_user_id, l_ip_address
          FROM json j, asset a
         WHERE j.cld_cloud_name=a.cld_cloud_name
           AND j.resource_type=a.resource_type
           AND j.public_id=a.public_id;

        INSERT /*+ ignore_row_on_dupkey_index ( servertiming (performance_id, seq)) */ 
          INTO servertiming(performance_id, seq, name, duration, description)
        WITH json AS 
        (
            SELECT session_id, url, seq, name, duration, description
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, url,
                        NESTED  '$.servertiming[*]' columns (seq for ordinality,name,duration,description))) 
        )
        SELECT p.id, j.seq, j.name, j.duration, j.description
          FROM json j, performance p
         WHERE p.session_id=j.session_id
           AND p.url=j.url
           AND j.seq IS NOT NULL;        

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object; 

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** Write HTML table of media download performance for the article
    */
    PROCEDURE getPerformance IS
        l_article_id asset.article_id%type:=apex_application.g_x01;
        l_content CLOB;
        l_ip_address performance.ip_address%type;
        l_session_id NUMBER:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
        n PLS_INTEGER:=0;
        l_url_parts apex_t_varchar2;
        l_transformation VARCHAR(300);
    BEGIN
        IF (apex_authentication.is_authenticated) THEN
            l_ip_address:=NULL;
        ELSE
            l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        END IF;

        /* 

        FOR C IN (SELECT  COUNT(*) OVER (PARTITION BY a.cld_cloud_name, a.resource_type, a.public_id) nb_rows, 
                          ROW_NUMBER() OVER (PARTITION BY a.display_order,a.cld_cloud_name, a.resource_type, a.public_id ORDER BY p.capture_date DESC) rn, 
                          a.cld_cloud_name, a.resource_type, a.public_id, a.format, a.width, a.bytes, apex_util.get_since(a.created_date) created_date, apex_util.get_since(p.capture_date) capture_date, 
                          p.url, p.transfersize, p.duration, p.content_type, p.browser, p.session_id, p.window_innerwidth, p.ip_address, p.connection_type, p.servertiming
                    FROM asset a, performance p
                   WHERE a.article_id=l_article_id
                     AND a.cld_cloud_name=p.cld_cloud_name
                     AND a.resource_type=p.resource_type
                     AND a.public_id=p.public_id
                     AND p.ip_address = NVL(l_ip_address, p.ip_address)
                     AND p.session_id=NVL(l_session_id, p.session_id)
                   ORDER BY a.display_order)
        LOOP
            n:=n+1;
            IF (n=1) THEN
                l_content:=to_clob(
                '<table>
                    <caption>CLOUDINARY BASE URL: ' || SUBSTR(C.url,1,INSTR(C.url,'/',1,4)) || '</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>DOWNLOADED<br>I.P. (CONNECTION)<br>BROWSER (WIDTH)</th>
                            <th class="align-left">TRANSFORMATION</th>
                            <th>TRANSFER SIZE<br>DURATION<br>CONTENT/TYPE</th>
                            <th class="align-left">SERVER TIMING</th>
                        </tr>
                    </thead>
                    <tbody>
                ');
            END IF;

            IF (C.nb_rows=C.rn) THEN
                l_content:=l_content || to_clob('<tr class="last-tr">');
            ELSE
                l_content:=l_content || to_clob('<tr>');
            END IF;

            IF (C.rn=1) THEN 
                l_content:=l_content || to_clob(
                '<td rowspan="' || C.nb_rows || '">
                    <figure><img src="' || pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
                        <figcaption><span class="label">File name: </span>' || SUBSTR(C.public_id,1,INSTR(C.public_id,'_',-1)-1) || '.' || C.format 
                            || '<br><span class="label">Original size: </span>' || apex_string_util.to_display_filesize(C.bytes) 
                            || '<br><span class="label">Width: </span>' || C.width || ' px'
                            || '<br><span class="label">Uploaded: </span>' || C.created_date || '
                    </figcaption></figure></td>');
            END IF;

            l_url_parts:=apex_string.split(C.url,'/');
            IF (C.resource_type='image') THEN
                l_transformation:=l_url_parts(5);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            ELSE
                l_transformation:=l_url_parts(7);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            END IF;

            l_content:=l_content || to_clob('
                <td class="align-center">' || C.capture_date || '<br>' || C.ip_address || CASE WHEN C.connection_type IS NOT NULL THEN ' (' || C.connection_type || ')' END || '<br>' || C.browser || ' (' || C.window_innerwidth || ' px)</td>
                <td>' || l_transformation || '</td>
                <td class="align-center">' || apex_string_util.to_display_filesize(C.transfersize) || '<br>' || C.duration || ' ms<br>' || C.content_type|| '</td>
                <td>' || REPLACE(C.servertiming,'|','<br>') || '</td>
            </tr>');

        END LOOP;

        IF (n>0) THEN
            l_content:=l_content || to_clob('</tbody></table>');
        ELSE
            l_content:= to_clob('<p>All media for your session was retrieved from Cache</p>');
        END IF;
        */

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('content', l_content);
        APEX_JSON.close_object;          

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;        
    END;

    PROCEDURE getTerraformParameters(pUserId IN users.id%type, pContactEmail IN website.contact_email%type, pAwsGatewayUrl IN OUT VARCHAR2, pSignatureContactEmail IN OUT VARCHAR2) IS
        l_clob CLOB;
        l_clob2 CLOB;
        l_terraform_organization_name users.terraform_organization_name%type;
        l_terraform_workspace_name users.terraform_workspace_name%type;
        l_terraform_private_key users.terraform_private_key%type;
        l_terraform_private_key_raw RAW(4000);
        l_terraform_url VARCHAR2(200);
        l_signed_data RAW(4000);
    BEGIN
        pck_api.getTerraformData(pUserId, l_terraform_organization_name, l_terraform_workspace_name, l_terraform_private_key);

        pck_api.callTerraformAPI(pUserId=>pUserId, pEndpoint=>'api/v2/organizations/' || l_terraform_organization_name || '/workspaces/' || l_terraform_workspace_name, pMethod=>'GET', pData=>l_clob);

        FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
            pck_api.callTerraformAPI(pUserId=>pUserId, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob2);
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob2, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                pAwsGatewayUrl:=C1.value || '/';
            END LOOP;
        END LOOP;

        l_terraform_private_key_raw:=utl_i18n.string_to_raw(regexp_replace(l_terraform_private_key,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\s?|\s)',''));

        l_signed_data:=DBMS_CRYPTO.SIGN(src =>utl_i18n.string_to_raw(pContactEmail), prv_key =>l_terraform_private_key_raw, pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,sign_alg =>dbms_crypto.SIGN_SHA256_RSA);

        pSignatureContactEmail:=utl_i18n.raw_to_char(utl_encode.base64_encode(l_signed_data));
    END;


    /*
    ** Fetched from Eleventy running in Github action to retrieve website content and array of articles
    ** {
    **    website: {},
    **    articles: [{},{},..{}]
    ** }
    */ 
    PROCEDURE getContent(pWebsiteId IN website.id%type) IS
        l_json JSON_OBJECT_T;
        l_website_object JSON_OBJECT_T;
        l_article_object JSON_OBJECT_T;
        l_article_array JSON_ARRAY_T;
        l_asset_object JSON_OBJECT_T;
        l_asset_array JSON_ARRAY_T;
        l_url_img VARCHAR2(500);
        l_media_type VARCHAR2(5);
        l_nb_articles INTEGER;
        l_nb_assets INTEGER;

        l_clob CLOB;

        l_user_id users.id%type;
        l_app_id NUMBER;
        l_session_data pck_core.session_data_rt;
        l_page_id NUMBER;
        l_aws_gateway_url VARCHAR2(200);
        l_signatureContactEmail VARCHAR2(4000);

        /* If title missing remove the empty <h1></h1> tag */
        FUNCTION stripHeading(pTitle IN VARCHAR2, pBodyHtml IN OUT NOCOPY CLOB) RETURN CLOB IS
        BEGIN
            IF (TRIM(pTitle) IS NOT NULL) THEN
                RETURN (pBodyHtml);
            END IF;
            RETURN (dbms_lob.substr(pBodyHtml, 
                    dbms_lob.getlength (pBodyHtml),
                    dbms_lob.instr(pBodyHtml,'</h1>')+5));
        END;

    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_json:= new JSON_OBJECT_T;
        l_website_object:= new JSON_OBJECT_T;
        l_article_array:= new JSON_ARRAY_T;

        /* Get details of website */
        FOR C IN (SELECT w.id, w.domain_name, w.favicon_url, w.font, wf.parameters, wf.fallback, w.contact_email, w.trade_name, w.affiliation_link_img, w.affiliation_link_url, u.name author_name
                    FROM website w, users u, website_font wf
                   WHERE w.id=pWebsiteId
                     AND w.font(+)=wf.name
                     AND w.user_id=l_session_data.user_id
                     AND u.id=w.user_id)
        LOOP
            l_website_object.put('id',C.id);
            l_website_object.put('name',C.domain_name);
            l_website_object.put('favicon_url',C.favicon_url);
            IF (C.font IS NOT NULL) THEN
                l_website_object.put('google_font',C.font || C.parameters);
                l_website_object.put('font_family',C.font || C.fallback);
            END IF;
            l_website_object.put('contact_email',C.contact_email);
            l_website_object.put('trade_name',C.trade_name);
            l_website_object.put('affiliation_link_img',C.affiliation_link_img);
            l_website_object.put('affiliation_link_url',C.affiliation_link_url);
            l_website_object.put('author',C.author_name);
            IF (C.contact_email IS NOT NULL) THEN 
                getTerraformParameters(l_user_id,C.contact_email,l_aws_gateway_url,l_signatureContactEmail);
                l_website_object.put('aws_gateway_url',l_aws_gateway_url);
                l_website_object.put('signatureContactEmail',l_signatureContactEmail);
            END IF;
            l_website_object.put('visit_url',pck_core.getRestUrl() || 'page-visit');

            l_json.put('website',l_website_object);

            FOR C1 IN (SELECT a.id, a.created_date, a.word_count, a.title, a.body_html, 
                              wa.display_order, wa.page_title, wa.page_description, NVL(apex_string_util.get_slug(wa.nav_name),'index') path_name, wa.nav_name
                        FROM article a, website_article wa
                       WHERE wa.website_id=C.id
                         AND wa.article_id=a.id
                       ORDER BY wa.display_order)
            LOOP
                l_article_object:=new JSON_OBJECT_T;
                l_article_object.put('article_id',C1.id);
                l_article_object.put('display_order',C1.display_order);
                l_article_object.put('path_name',C1.path_name);
                l_article_object.put('page_title',C1.page_title);
                l_article_object.put('page_description',C1.page_description);
                l_article_object.put('created',TO_CHAR(C1.created_date,'dd.mm.yyyy'));

                IF (C1.nav_name IS NOT NULL) THEN
                    l_article_object.put('nav_name',C1.nav_name);
                END IF;

                IF (C1.title IS NOT NULL) THEN
                    l_article_object.put('title',C1.title);
                END IF;

                IF (C1.body_html IS NOT NULL) THEN
                    l_article_object.put('words',C1.word_count);
                    l_article_object.put('text',stripHeading(C1.title, C1.body_html));
                END IF;

                FOR C2 IN (SELECT rn, nb, cld_cloud_name, resource_type, public_id, format, width, height, alt_text 
                             FROM
                                (
                                 SELECT cld_cloud_name, resource_type, public_id, format, width, height, alt_text, display_order, ROW_NUMBER() OVER (ORDER BY display_order) rn, COUNT(*) OVER () nb
                                   FROM asset 
                                  WHERE article_id=C1.id
                                ) 
                            ORDER BY display_order)
                LOOP
                    IF (C2.rn=1) THEN
                        l_asset_array:= new JSON_ARRAY_T;
                        l_asset_object:= new JSON_OBJECT_T;
                    END IF;
                    IF (C2.alt_text IS NOT NULL) THEN
                        l_asset_object.put('alt_text',C2.alt_text);
                    END IF;
                    l_media_type:=pck_core.getMediaType(C2.resource_type, C2.format);
                    l_url_img:=pck_core.getCloudinaryUrl(C2.cld_cloud_name, C2.resource_type, C2.public_id, C2.format, C2.width);
                    l_asset_object.put('media',l_media_type);
                    l_asset_object.put('url',l_url_img);
                    l_asset_object.put('width',ROUND(C2.width*.25));
                    l_asset_object.put('height',ROUND(C2.height*.25));
                    l_asset_array.append(l_asset_object);
                    IF (C2.rn=C2.nb) THEN
                        l_article_object.put('assets',l_asset_array);
                    END IF;
                END LOOP;
                l_article_array.append(l_article_object);
            END LOOP;
        END LOOP;
        l_json.put('articles',l_article_array);

        l_nb_articles:=l_article_array.get_size;
        IF (l_nb_articles=0) THEN
            owa_util.status_line(404, '', true);
        ELSE
            owa_util.status_line(200, '', false);
            owa_util.mime_header( 'application/json', TRUE, 'UTF-8' );
            htp.p(l_json.to_clob);
        END IF;

        EXCEPTION WHEN OTHERS THEN
            owa_util.status_line(400, '', true);
            htp.p('{"sqlcode":'||sqlcode||',"sqlerrm":"'||sqlerrm||'"}');
            pck_core.log_error; 
    END;

    /*
     **  Get the selected article's content in HTML format
     */    
    PROCEDURE getArticle(pArticleId IN article.id%type)  IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT a.body_html, UPPER(u.name) name, apex_util.get_since(a.created_date) created, CASE WHEN a.word_count<200 THEN 'less than a minute' ELSE ROUND(a.word_count/200) || ' minute read' END minutes 
                    FROM article a, users u 
                   WHERE a.id=pArticleId 
                     AND a.author_user_id=NVL(l_session_data.user_id,a.author_user_id)
                     AND a.author_user_id=u.id )
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE); 
            apex_json.write('content', C.body_html);
            apex_json.write('details','<div class="details"><span>' || C.name || '</span><span>-</span><span>' || C.created || '</span><span>-</span><span>' || C.minutes || '</span></div>');
            apex_json.close_object;
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END; 

    /*
     **  Procedure called by the autoSave feature of CKEditor
     */        
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        l_website_id website_article.website_id%type;
        l_article_id article.id%type;
        l_title article.title%type;
        l_excerpt varchar2(1000);
        l_word_count article.word_count%type;
        l_edit_text article.body_html%type;
        l_name users.name%type;
        l_words apex_t_varchar2;
        l_rem PLS_INTEGER;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT website_id,
               SUBSTR(title,1,60) title, 
               REGEXP_SUBSTR(word_count,'(\d)+') word_count,
               edit_text,
               u.name
          INTO l_website_id, l_title, l_word_count, l_edit_text, l_name
          FROM users u, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (website_id, title, word_count, edit_text CLOB))
          WHERE u.id=l_session_data.user_id;

        apex_escape.set_html_escaping_mode('E');
        l_excerpt:=dbms_lob.substr(utl_i18n.unescape_reference(apex_escape.striphtml(l_edit_text)),200,NVL(LENGTHB(l_title),0)+1);

        l_words:=apex_string.split(REPLACE(l_excerpt,CHR(10),' '),' ');
        l_excerpt:=NULL;
        FOR i IN 1..l_words.COUNT LOOP
            IF (l_words(i) IS NULL) THEN
                CONTINUE;
            END IF;
            IF (LENGTHB(l_words(i))>25) THEN
                l_excerpt:=l_excerpt || SUBSTR(l_words(i),1,25);
                EXIT;
            END IF;
            l_rem:=160 - NVL(LENGTHB(l_excerpt),0);
            IF (LENGTHB(l_words(i)) <= l_rem) THEN
                l_excerpt:=l_excerpt || l_words(i) || ' ';
            ELSE
                l_excerpt:=RTRIM(l_excerpt);
                EXIT;
            END IF;
        END LOOP;

        IF (pArticleId=0) THEN
            INSERT INTO article (id, title, excerpt, word_count, body_html, author_user_id, created_date) VALUES (seq_article.nextval, l_title, l_excerpt, l_word_count, l_edit_text, l_session_data.user_id, current_timestamp);
            INSERT INTO website_article(article_id, website_id, display_order, user_id) VALUES (seq_article.currval, l_website_id, seq_article.currval*-1, l_session_data.user_id);
        ELSE
            UPDATE article SET title=l_title, excerpt=l_excerpt, word_count=l_word_count, body_html=l_edit_text, updated_date=current_timestamp
             WHERE id=pArticleId;
        END IF;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        IF (pArticleId=0) THEN
            APEX_JSON.write('articleId',seq_article.currval);
            APEX_JSON.write('new_card',pck_core.buildWebsiteArticles(pWebsiteId=>l_website_id,pCanUsePopover=>l_session_data.canuse_popover, pTimezone=>l_session_data.timezone, pArticleId=>seq_article.currval));
        END IF;
        APEX_JSON.write('title', l_title);
        APEX_JSON.write('excerpt', l_excerpt);
        APEX_JSON.write('words', l_word_count || ' words');
        APEX_JSON.write('author', l_name);
        APEX_JSON.write('updated', TO_CHAR(current_timestamp AT TIME ZONE l_session_data.timezone,'dd Mon yyyy hh24:mi:ss'));
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;    

    /*
     **  Delete website_article. If deleted article not in any other website delete the article and any assets
     */   
    PROCEDURE deleteArticle(pUserId IN users.id%type, pArticleId IN website_article.article_id%type, pWebsiteId IN website_article.website_id%type, pSendResponse IN BOOLEAN DEFAULT TRUE) IS
        l_clob CLOB;
        l_url VARCHAR2(500);
        l_error_message VARCHAR2(4000);
        n PLS_INTEGER;
    BEGIN
        DELETE website_article 
         WHERE user_id=pUserId 
           AND article_id=pArticleId 
           AND website_id=pWebsiteId;

        n:=sql%rowcount;
        /* Confirm current user owned the deleted website_article */

        IF (n=1) THEN 
            SELECT COUNT(*) INTO n FROM dual WHERE EXISTS (SELECT null FROM website_article WHERE article_id=pArticleId);
            IF (n=0) THEN
                /* Delete externally managed assets first to avoid potential cost and inconvenience of orphans */

                FOR C IN (SELECT DISTINCT cld_cloud_name || '/resources/' || resource_type || '/tags/' || pArticleId AS endpoint
                            FROM asset
                           WHERE article_id=pArticleId)
                LOOP
                    pck_api.callCloudinaryAPI(pUserId=>pUserId, pEndpoint=>C.endpoint, pMethod=>'DELETE', pData=>l_clob);
                END LOOP;

                /* Delete the article. Referential integrity constraint cascades to linked asset rows */
                DELETE article WHERE id=pArticleId;

            END IF;
        END IF;

        IF (pSendResponse) THEN
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.close_object;
        END IF;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Delete ASSET row and its Cloudinary media
     */   
    PROCEDURE deleteAsset(pUserId IN asset.user_id%type, pId IN asset.id%type) IS
        l_article_id asset.article_id%type;
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_public_id asset.public_id%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_parm_names apex_application_global.VC_ARR2;
        l_parm_values apex_application_global.VC_ARR2;
        l_timestamp NUMBER:=trunc((cast(current_timestamp at time zone 'UTC' as date) - to_date('01-jan-1970','dd-mon-yyyy')) * (86400));
        l_signature VARCHAR2(100);
        l_string_to_sign varchar2(2000);  
        l_clob CLOB;
        l_error_message VARCHAR2(500);
        l_updated_date VARCHAR2(20);
        l_nb_assets article.nb_assets%type;
        l_json JSON_OBJECT_T;
    BEGIN
        SELECT a.article_id, a.cld_cloud_name, a.public_id, u.cld_api_key, u.cld_api_secret
          INTO l_article_id, l_cld_cloud_name, l_public_id, l_cld_api_key, l_cld_api_secret
          FROM asset a, users u
         WHERE a.id=pId
           AND a.user_id=u.id
           AND u.id=pUserId;

        l_parm_names(1):='invalidate';
        l_parm_values(1):='true';
        l_parm_names(2):='public_id';
        l_parm_values(2):=l_public_id;        
        l_parm_names(3):='timestamp';    
        l_parm_values(3):=l_timestamp;                

        l_string_to_sign:=NULL;
        FOR i IN 1..3 LOOP
            l_string_to_sign:=l_string_to_sign || l_parm_names(i) || '=' || l_parm_values(i) || '&';
        END LOOP;
        l_string_to_sign:=RTRIM(l_string_to_sign,'&') || l_cld_api_secret;
        l_parm_names(4):='signature';
        l_parm_values(4):=dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign), dbms_crypto.HASH_SH1);   
        l_parm_names(5):='api_key';
        l_parm_values(5):=l_cld_api_key;    

        l_json:=new JSON_OBJECT_T;
        FOR i IN 1..l_parm_names.COUNT LOOP
            l_json.put(l_parm_names(i), l_parm_values(i));
        END LOOP;        

        pck_api.callCloudinaryAPI(pUserId=>pUserId, pEndpoint=>l_cld_cloud_name || '/image/destroy', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);

        DELETE asset WHERE id=pId;
        UPDATE article SET nb_assets = nb_assets-1, updated_date=current_date WHERE id=l_article_id RETURNING nb_assets INTO l_nb_assets;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        --apex_json.write('updated', pck_core.fmtUpdatedDate(current_date));
        apex_json.write('nb-assets', l_nb_assets || ' media');
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Copy Website
     */  
    PROCEDURE copyWebsite(pWebsiteId IN website.id%type) IS
        l_domain_name_copy website.domain_name%type;
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT SUBSTR(domain_name,1,25) || '_COPY' INTO l_domain_name_copy FROM website WHERE id=pWebsiteId AND user_id=l_session_data.user_id;

        /* Create Netlify site and store site_id */
        l_json:=new JSON_OBJECT_T;
        l_json.put('name', l_domain_name_copy);

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, 
            pEndpoint=>'sites', 
            pMethod=>'POST', 
            pBody=>l_json.stringify, 
            pData=>l_clob);

        INSERT INTO website (id,domain_name,user_id,favicon_url,template,contact_email,trade_name,affiliation_link_img,affiliation_link_url,netlify_site_id)
        SELECT seq_website.nextval,l_domain_name_copy,w.user_id,w.favicon_url,w.template,w.contact_email,w.trade_name,w.affiliation_link_img,w.affiliation_link_url,s.site_id
          FROM website w, JSON_TABLE(l_clob, '$' COLUMNS(site_id)) s
         WHERE w.id=pWebsiteId
           AND w.user_id=l_session_data.user_id;

        INSERT INTO website_article (website_id,article_id,display_order,nav_name,page_title,page_description,user_id)
        SELECT seq_website.currval, article_id,display_order,nav_name,page_title,page_description,user_id
          FROM website_article
         WHERE website_id=pWebsiteId
           AND user_id=l_session_data.user_id;

        apex_json.open_object;  
        apex_json.write('success',TRUE);
        apex_json.write('website_id',seq_website.currval);
        apex_json.write('domain_name',l_domain_name_copy);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Delete Website and articles from schema and Netlify
     */  
    PROCEDURE deleteWebsite(pUserId IN website.user_id%type, pWebsiteId IN website.id%type) IS
        TYPE t_website_article IS TABLE OF website_article%rowtype;
        l_website_articles t_website_article;
        l_netlify_site_id website.netlify_site_id%type;
        l_netlify_site_id_custom website.netlify_site_id%type;
        l_clob CLOB;
    BEGIN
        SELECT * BULK COLLECT INTO l_website_articles FROM website_article WHERE website_id=pWebsiteId AND user_id=pUserId;

        FOR i IN 1..l_website_articles.COUNT LOOP
            deleteArticle(pUserId, l_website_articles(i).article_id, l_website_articles(i).website_id, pSendResponse=>FALSE);
        END LOOP;

        DELETE website WHERE id=pWebsiteId AND user_id=pUserId 
            RETURNING netlify_site_id, netlify_site_id_custom INTO l_netlify_site_id, l_netlify_site_id_custom;

        IF (l_netlify_site_id IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites/' || l_netlify_site_id, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
        END IF;

        IF (l_netlify_site_id_custom IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites/' || l_netlify_site_id_custom, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
        END IF;

        apex_json.open_object;  
        apex_json.write('success',TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;          

    /*
     **  Publish article
     */   
    PROCEDURE publishArticle(pArticleId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        UPDATE article SET is_public='Y', updated_date=current_date WHERE id=pArticleId AND author_user_id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  UnPublish article
     */   
    PROCEDURE unpublishArticle(pArticleId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        UPDATE article SET is_public='N', updated_date=current_date WHERE id=pArticleId AND author_user_id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
                RAISE;
    END;    

    /*
     **  Reorder website articles
     */
    PROCEDURE reorderWebsiteArticles(pWebsiteId IN website_article.website_id%type, pBodyText IN CLOB) IS
        l_dbid_string LONG;

        TYPE t_website_article IS RECORD(
            article_id website_article.article_id%type,
            display_order website_article.display_order%type);
        TYPE tt_website_article IS TABLE OF t_website_article;
        l_website_articles tt_website_article; 

        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT dbid_string INTO l_dbid_string 
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (dbid_string));

        SELECT column_value, rownum 
          BULK COLLECT INTO l_website_articles
          FROM TABLE(apex_string.split(l_dbid_string,':'));

        FORALL i IN l_website_articles.first .. l_website_articles.last
        UPDATE website_article 
           SET display_order=l_website_articles(i).display_order 
         WHERE website_id = pWebsiteId
           AND article_id=l_website_articles(i).article_id
           AND user_id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Reorder assets
     */
    PROCEDURE reorderAssets(pBodyText IN CLOB) IS
        l_article_id article.id%type;
        l_dbid_string LONG;
        l_first_dbid asset.id%type;

        TYPE t_asset IS RECORD(
            id asset.id%type,
            display_order asset.display_order%type);
        TYPE tt_asset IS TABLE OF t_asset;
        l_assets tt_asset; 
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_resource_type asset.resource_type%type; 
        l_public_id asset.public_id%type; 
        l_format asset.format%type; 
        l_width asset.width%type;

        l_url VARCHAR2(500);
        l_na_number NUMBER;
        l_na_varchar VARCHAR2(500);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT dbid_string INTO l_dbid_string 
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (dbid_string));

        SELECT column_value, rownum 
          BULK COLLECT INTO l_assets
          FROM TABLE(apex_string.split(l_dbid_string,':'));

        /* get the article id from first asset */
        SELECT article_id INTO l_article_id
          FROM asset 
         WHERE id=l_assets(1).id
           AND user_id=l_session_data.user_id;

        /* ... and get id of first asset as this may have been replaced */
        SELECT cover_asset_id 
          INTO l_first_dbid 
          FROM article 
         WHERE id=l_article_id
           AND author_user_id=l_session_data.user_id;

        FORALL i IN l_assets.first .. l_assets.last
        UPDATE asset SET display_order=l_assets(i).display_order WHERE id  = l_assets(i).id;

        IF (l_assets(1).id<>l_first_dbid) THEN
            SELECT cld_cloud_name, resource_type, public_id, format, width
              INTO l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width
              FROM asset 
              WHERE id=l_assets(1).id
                AND user_id=l_session_data.user_id;
            l_url:=pck_core.getCloudinaryUrl(l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width);
            UPDATE article SET updated_date=current_date, cover_asset_id=l_assets(1).id WHERE id=l_article_id;
        END IF;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('url', l_url);
        --apex_json.write('updated', pck_core.fmtUpdatedDate(current_date));
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    **  Check new domain name is not an existing subdomain of netlify.app
    */
    PROCEDURE processDomainName(pUserId IN website.user_id%type, pWebsiteId IN website.id%type, pDomainName IN website.domain_name%type) IS
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_dns_zones CLOB;
        l_netlify_site_id               website.netlify_site_id%type;
        l_netlify_site_id_custom        website.netlify_site_id%type;
        l_new_netlify_site_id_custom    website.netlify_site_id%type;
        l_website_id website.id%type;
        l_message VARCHAR2(50);
    BEGIN
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_dns_zones);

        IF (pWebsiteId IS NOT NULL) THEN
            SELECT netlify_site_id, netlify_site_id_custom INTO l_netlify_site_id, l_netlify_site_id_custom FROM website WHERE id=pWebsiteId;
        END IF;

        /* 1. Create Netlify site for the domain name and store site_id in website.netlify_site_id */

        l_json:=new JSON_OBJECT_T;
        l_json.put('name', pDomainName);

        pck_api.callNetlifyAPI(pUserId=>pUserId, 
            pEndpoint=>'sites' || CASE WHEN l_netlify_site_id IS NOT NULL THEN '/' || l_netlify_site_id END, 
            pMethod=>CASE WHEN l_netlify_site_id IS NULL THEN 'POST' ELSE 'PATCH' END, 
            pBody=>l_json.stringify, 
            pStatusAllowed=>422, 
            pData=>l_clob);
        IF (apex_web_service.g_status_code=422) THEN
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('message', 'Name already taken');
            apex_json.write('color', 'red');
            apex_json.close_object;
            RETURN;
        END IF;

        SELECT site_id INTO l_netlify_site_id FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));

        /* 2. Create Netlify site with custom_domain If domain_name in dns_zones */

        FOR C IN (SELECT name FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS(name)) WHERE name=pDomainName) LOOP
            l_json.put('name', pDomainName || ' custom domain');
            l_json.put('custom_domain', pDomainName);
            pck_api.callNetlifyAPI(pUserId=>pUserId, 
                pEndpoint=>'sites' || CASE WHEN l_netlify_site_id_custom IS NOT NULL THEN '/' || l_netlify_site_id_custom END, 
                pMethod=>CASE WHEN l_netlify_site_id_custom IS NULL THEN 'POST' ELSE 'PATCH' END, 
                pBody=>l_json.stringify, 
                pStatusAllowed=>422, 
                pData=>l_clob);
            IF (apex_web_service.g_status_code=422) THEN
                apex_json.open_object;
                apex_json.write('success', TRUE);
                apex_json.write('message', 'Name already taken');
                apex_json.write('color', 'red');
                apex_json.close_object;
                RETURN;
            END IF;
            SELECT site_id INTO l_new_netlify_site_id_custom FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));
        END LOOP;

        IF (l_netlify_site_id_custom IS NOT NULL AND l_new_netlify_site_id_custom IS NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/' || l_netlify_site_id_custom, pMethod=>'DELETE', pData=>l_clob);
        END IF;

        IF (pWebsiteId IS NULL) THEN
            INSERT INTO website (id, user_id, domain_name, netlify_site_id, netlify_site_id_custom, template) 
                VALUES (seq_website.nextval, pUserId, pDomainName, l_netlify_site_id, l_new_netlify_site_id_custom, '-1');
            l_website_id:=seq_website.currval;
            l_message:='Created OK';
        ELSE
            UPDATE website SET 
                    domain_name=pDomainName, 
                    netlify_site_id_custom=l_new_netlify_site_id_custom, 
                    updated_date=current_timestamp 
             WHERE id=pWebsiteId 
               AND user_id=pUserId;
            l_message:='Updated OK';
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', l_message);
        apex_json.write('color', 'green');
        apex_json.write('deploy_buttons', pck_core.buildDeployButtons(pDomainName, l_netlify_site_id, l_new_netlify_site_id_custom));
        IF (l_website_id IS NOT NULL) THEN
            apex_json.write('website_id', l_website_id);
            apex_json.write('dropdown', '<li><button type="button" class="with-icon edit-website" data-id="' || l_website_id || '"><svg class="icon"><use href="#pen-to-square"></use></svg>' || pDomainName || '</button></li>');
        END IF;
        apex_json.close_object;

    END;

    /**
     **    Update the column value of 1 row.
     **    Complex processing for Domain name change
     */
    PROCEDURE updateField(pBodyText IN CLOB) IS
        l_id_1 NUMBER;
        l_id_2 NUMBER;

        l_message VARCHAR2(50);
        l_color VARCHAR2(5);
        l_website_id website.id%type;
        n PLS_INTEGER:=0;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT t.id, t.table_column, t.value
                    FROM users, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (id, table_column, value)) t
                   WHERE users.id=l_session_data.user_id)
        LOOP
            IF (INSTR(C.id,',')>0) THEN
                l_id_1:=SUBSTR(C.id,1,INSTR(C.id,',')-1);
                l_id_2:=SUBSTR(C.id,INSTR(C.id,',')+1);
            END IF;            

            CASE C.table_column
                WHEN 'website.domain_name' THEN
                    processDomainName(l_session_data.user_id, C.id, C.value);
                    RETURN;
                WHEN 'website.contact_email' THEN
                    UPDATE website SET contact_email=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website.template' THEN
                    UPDATE website SET template=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website.font' THEN
                    UPDATE website SET font=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website_article.nav_name' THEN
                    UPDATE website_article SET nav_name=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
                WHEN 'website_article.page_title' THEN
                    UPDATE website_article SET page_title=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
                WHEN 'website_article.page_description' THEN
                    UPDATE website_article SET page_description=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
                WHEN 'asset.alt_text' THEN
                    UPDATE asset SET alt_text=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'asset.description' THEN
                    UPDATE asset SET description=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;               
            END CASE;
            n:=sql%rowcount;
        END LOOP;

        IF (n=1) THEN  /* means last DML was successful */
            l_color:='green';
            l_message:='Updated OK';
        ELSE  /* means update or insert failed */
            l_color:='red';
            l_message:='Updated NOK';
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', CASE WHEN n=1 THEN 'Updated OK' ELSE 'Updated NOK' END);
        apex_json.write('color', CASE WHEN n=1 THEN 'green' ELSE 'red' END);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /**
     **    Delete object
     */
    PROCEDURE deleteTable(pBodyText IN CLOB) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT t.id, t.article_id, t.website_id, t.table_name
                    FROM users u, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (id, article_id, website_id, table_name)) t
                   WHERE u.id=l_session_data.user_id)
        LOOP
            CASE C.table_name
                WHEN 'user' THEN
                    null;            
                WHEN 'website' THEN
                    deleteWebsite(l_session_data.user_id,C.id);
                WHEN 'website_article' THEN
                    deleteArticle(l_session_data.user_id,C.article_id,C.website_id);
                WHEN 'asset' THEN
                    deleteAsset(l_session_data.user_id,C.id);               
            END CASE;
        END LOOP;

        /* NB: each procedure returns its own JSON response */

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Upload Core Web Vitals uploaded through navigator.beacon - hence no response sent.
     */      
    PROCEDURE uploadWebVitals(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
    BEGIN
        INSERT INTO core_web_vitals (id, session_id, page_id, ip_address, name, value, rating) --, browser, width)
        SELECT seq_core_web_vitals.nextval, session_id, page_id, l_ip_address, name, value, rating --, l_session_id, l_browser, l_width
        FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' COLUMNS (session_id, page_id,
            NESTED '$.cwv[*]' COLUMNS (name, value, rating)))
        LOG ERRORS INTO core_web_vitals_err REJECT LIMIT UNLIMITED;                 
    END;

    /*
     **  Upload page visit details received from deployed website pages
     */      
    PROCEDURE uploadPageVisit(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address website_article_cwv.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
    BEGIN
        INSERT INTO website_article_cwv (website_id, article_id, cwv_name, cwv_value, cwv_rating, referrer, ip_address)
        SELECT website_id, article_id, cwv_name, cwv_value, cwv_rating, referrer, l_ip_address
          FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' COLUMNS (website_id, article_id, cwv_name, cwv_value, cwv_rating, referrer));  

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;   

    /*
    ** Logout authenticated session
    */
    PROCEDURE signout IS
        session_ended EXCEPTION;
        PRAGMA EXCEPTION_INIT(session_ended,-20987);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        BEGIN 
            apex_session.delete_session(p_session_id=>l_session_data.session_id);
            EXCEPTION WHEN session_ended THEN NULL;
        END;
        /*
        owa_cookie.send(
            name => 'ORA_WWV_APP_101',
            value => null,
            expires => sysdate -1, 
            path =>'ords' );
        */
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;     

END;
/