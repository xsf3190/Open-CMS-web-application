CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS" is
    --
    PROCEDURE copyArticle;
    --
    PROCEDURE daily_job;
    --
    PROCEDURE deleteAll(pUserId IN users.id%type);
    --
    PROCEDURE deleteArticle;
    --
    PROCEDURE deleteAsset;
    --
    FUNCTION getArticles(pIsPublic IN article.is_public%type DEFAULT NULL) RETURN CLOB;
    --
    PROCEDURE getCldDetails;
    --
    PROCEDURE getCldSignature;
    --
    PROCEDURE getContent;
    --
    PROCEDURE getContentHTML;
    --
    FUNCTION getHomepage RETURN CLOB;
    --
    PROCEDURE getPerformance;
    --
    PROCEDURE getThumbnails;
    --
    PROCEDURE getUsage(pUserId IN users.id%type DEFAULT NULL, pUsageDate IN DATE DEFAULT NULL);
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2);
    --
    PROCEDURE manual_restore(pPassword IN VARCHAR2);
    --
    PROCEDURE publishArticle;
    --
    PROCEDURE reorderAssets;
    --
    PROCEDURE saveArticle;
    --
    PROCEDURE setClientInfo;
    --
    PROCEDURE updateAsset;
    --
    PROCEDURE updateContent;
    --
    PROCEDURE uploadMetadata;
    --
    PROCEDURE uploadPerformance;
    --
    PROCEDURE updateUser;
    --    
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS" is
    
    g_cloudinary_svg LONG:='<svg viewBox="0 0 172.8 113.18"><path  d="M140.25,40.27A57.84,57.84,0,0,0,85.56,0,56.75,56.75,0,0,0,35.24,29.9a42.79,42.79,0,0,0-10.33,81l1.08.5h.06V99.23a31.95,31.95,0,0,1,13.31-59l3-.31,1.31-2.74A46,46,0,0,1,85.56,10.85a46.83,46.83,0,0,1,45.19,35.79l1,4.11,4.23.07a26.56,26.56,0,0,1,26,26.44c0,10.11-5.83,18.36-15.72,22.55v11.55l.71-.24c15.95-5.21,25.86-18.19,25.86-33.86A37.49,37.49,0,0,0,140.25,40.27Z"/><path d="M64.56,110l2.38,2.38a.47.47,0,0,1-.34.81H47.84a8.53,8.53,0,0,1-8.54-8.53V68.14a.47.47,0,0,0-.47-.47H34.76a.48.48,0,0,1-.34-.81L50.35,50.94a.46.46,0,0,1,.67,0L66.94,66.86a.47.47,0,0,1-.34.81H62.53a.47.47,0,0,0-.47.47V104A8.53,8.53,0,0,0,64.56,110Z"/><path d="M99.76,110l2.38,2.38a.47.47,0,0,1-.34.81H83a8.53,8.53,0,0,1-8.54-8.53V77.32a.47.47,0,0,0-.47-.48H70a.48.48,0,0,1-.34-.81L85.55,60.11a.46.46,0,0,1,.67,0L102.14,76a.47.47,0,0,1-.34.81H97.73a.47.47,0,0,0-.47.48V104A8.53,8.53,0,0,0,99.76,110Z"/><path d="M135,110l2.38,2.38a.47.47,0,0,1-.33.81H118.24a8.54,8.54,0,0,1-8.54-8.53V86.49a.47.47,0,0,0-.47-.47h-4.07a.47.47,0,0,1-.33-.81l15.92-15.93a.48.48,0,0,1,.67,0l15.92,15.93A.47.47,0,0,1,137,86h-4.08a.47.47,0,0,0-.47.47V104A8.53,8.53,0,0,0,135,110Z"/></svg>';
    /*
     ** CLOB and VARCHAR2 signatures for log procedure
     */

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        k_calling_package constant varchar2(128) := utl_call_stack.subprogram(2)(1);
        k_calling_subprog constant varchar2(128) := utl_call_stack.subprogram(2)(2);
    BEGIN
        INSERT INTO log(procedure_name, message) VALUES (k_calling_package || '.' || k_calling_subprog, pMsg);
        COMMIT;
    END;
    
    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        k_calling_package constant varchar2(128) := utl_call_stack.subprogram(2)(1);
        k_calling_subprog constant varchar2(128) := utl_call_stack.subprogram(2)(2);    
    BEGIN
        INSERT INTO log(procedure_name, message) VALUES (k_calling_package || '.' || k_calling_subprog, pMsg);
        COMMIT;
    END;
    
    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2) IS
    BEGIN
        ROLLBACK;
        log(pCode || '-' || pErrMsg || '-' || dbms_utility.format_error_stack||dbms_utility.format_error_backtrace);
    END;

    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2, pAjax IN BOOLEAN) IS
    BEGIN
        log(pCode || '-' || pErrMsg || '-' || dbms_utility.format_error_stack||dbms_utility.format_error_backtrace);
        IF (pAjax) THEN
            apex_json.open_object; 
            apex_json.write('success', FALSE); 
            apex_json.write('sqlcode', sqlcode); 
            apex_json.write('sqlerrm', sqlerrm); 
            apex_json.close_object;
        END IF;
    END;
    
    /*
    ** Run restore process manually. Need to specify the last data pump export schema encryption password.
    */
    PROCEDURE manual_restore(pPassword IN VARCHAR2)  IS 
        l_restore_files varchar2(1000):='GRANT.OBJECT_GRANT:GRANT.SYSTEM_GRANT:EXPORT_SCHEMA.EXAMPLE.dmp:APEX_APPLICATION.100';
    BEGIN
        
        FOR C IN (SELECT github_token, github_repos_owner, github_repos, u.email, w.workspace_name 
              FROM users u, apex_workspace_developers w 
             WHERE w.first_schema_provisioned=sys_context('userenv','current_schema')
               AND w.is_admin='Yes'
               AND w.email=u.email) 
        LOOP
            EXECUTE IMMEDIATE q'{
                BEGIN pck_restore.submit_job@RESTORE_LINK(
                    pGithub_files=>:B1, 
                    pGithub_token=>:B2, 
                    pGithub_repos_owner=>:B3, 
                    pGithub_repos=>:B4,
                    pPassword=>:B5,
                    pEmail=>:B6,
                    pWorkspace=>:B7,
                    pSchema=>:B8); END;}' 
                USING l_restore_files, C.github_token, C.github_repos_owner, C.github_repos, pPassword, C.email, C.workspace_name, sys_context('userenv','current_schema');
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
    
    /*
    ** Generate random 16 character password string. Used in order to create encrypted schema export dumpfile
    */
    FUNCTION generate_password(
        no_of_digits             in number DEFAULT 5,
        no_of_special_characters in number DEFAULT 3,
        no_of_lower              in number DEFAULT 4,
        no_of_upper              in number DEFAULT 4
        ) return varchar2
    IS
        password VARCHAR2(4000);
        digits   CONSTANT VARCHAR2(10) := '0123456789';
        lower    CONSTANT VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';
        upper    CONSTANT VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        special  CONSTANT VARCHAR2(30) := '!"Â£$%^*()-_=+{}[]<>,\|/?;:@#';
    BEGIN
        SELECT LISTAGG(letter, NULL) WITHIN GROUP (ORDER BY DBMS_RANDOM.VALUE)
        INTO   password
        FROM   (
        SELECT SUBSTR(
                 digits,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(digits) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_digits
        UNION ALL
        SELECT SUBSTR(
                 lower,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(lower) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_lower
        UNION ALL
        SELECT SUBSTR(
                 upper,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(upper) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_upper
        UNION ALL
        SELECT SUBSTR(
                 special,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(special) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_special_characters
        );
    
        RETURN password;
    END;    
    
    /*
    **  Daily job run by dbms_scheduler
    */
    PROCEDURE daily_job IS 
        l_github_token users.github_token%type; 
        l_github_repos_owner users.github_repos_owner%type;
        l_github_repos users.github_repos%type;
        l_email users.email%type;
        l_password VARCHAR2(20);
        l_github_filename VARCHAR2(100);
        l_workspace_name apex_workspace_developers.workspace_name%type;
        l_restore_files VARCHAR2(4000);
    BEGIN
        /*
        ** 1. Get Cloudinary usage for all subscribers 
        */
        getUsage;
        
        /*
        **  2. Backup to Github
        **     Github token and repository details are maintained in USERS table
        **     Email address of Apex Admin user must match for this to work
        **     Complex password auto-generated to encrypt schema export dump file
        */
       
        SELECT github_token, github_repos_owner, github_repos, u.email, w.workspace_name 
          INTO l_github_token, l_github_repos_owner, l_github_repos, l_email, l_workspace_name
          FROM users u, apex_workspace_developers w 
         WHERE w.first_schema_provisioned=sys_context('userenv','current_schema')
           AND w.is_admin='Yes'
           AND w.email=u.email;
        
        l_password:=generate_password();
        pck_backup.github_backup(l_github_token, l_github_repos_owner, l_github_repos, l_email, l_password, l_restore_files);
    
        /*
        **  3. Restore from Github into Restore database, where a workspace with same name as current schema must exist.
        **     We use dynamic sql for this so that this package compiles after being restored - nb: DB LINKs are not included in any schema export
        **     To avoid ORA-02074 we submit job on restore database remotely using database link
        **     "l_restore_files" is separated list of github file names to be restored
        */
        
        log('About to submit job on restore server to import Github backup files - ' || l_restore_files);
        EXECUTE IMMEDIATE q'{
            BEGIN pck_restore.submit_job@RESTORE_LINK(
                pGithub_files=>:B1, 
                pGithub_token=>:B2, 
                pGithub_repos_owner=>:B3, 
                pGithub_repos=>:B4,
                pPassword=>:B5,
                pEmail=>:B6,
                pWorkspace=>:B7,
                pSchema=>:B8); END;}' USING l_restore_files, l_github_token, l_github_repos_owner, l_github_repos, l_password, l_email, l_workspace_name,sys_context('userenv','current_schema');
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
    
    PROCEDURE getCldDetails IS
        l_article_id article.id%type:=apex_application.g_x01;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size usage.image_max_size%type;
        l_video_max_size usage.video_max_size%type;
        l_cldapikey VARCHAR2(1);
    BEGIN      
        /* get Cloudinary details either of logged on user of the hosting user */
        BEGIN
            SELECT cld_cloud_name, cld_api_key, image_max_size, video_max_size
              INTO l_cld_cloud_name, l_cld_api_key, l_image_max_size, l_video_max_size
              FROM 
                    (
                        SELECT ROW_NUMBER() OVER (ORDER BY usage_date DESC) rn, users.cld_cloud_name, users.cld_api_key, usage.image_max_size, usage.video_max_size
                        FROM users, usage 
                        WHERE users.id=l_user_id
                        AND usage.user_id=users.id
                    ) 
             WHERE rn=1;
             l_cldapikey:='Y';
             
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    SELECT cld_cloud_name, cld_api_key, image_max_size, video_max_size
                      INTO l_cld_cloud_name, l_cld_api_key, l_image_max_size, l_video_max_size
                      FROM 
                            (
                                SELECT ROW_NUMBER() OVER (ORDER BY usage_date DESC) rn, users.cld_cloud_name, users.cld_api_key, usage.image_max_size, usage.video_max_size
                                FROM users, usage 
                                WHERE users.hosting_user_ind='Y'
                                AND usage.user_id=users.id
                            ) 
                     WHERE rn=1;  
                     l_cldapikey:='N';
            END;

            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('cloudname', l_cld_cloud_name);
            apex_json.write('apikey', l_cld_api_key);
            apex_json.write('maxImageFileSize', l_image_max_size);
            apex_json.write('maxVideoFileSize', l_video_max_size);
            apex_json.write('cldapikey', l_cldapikey);
            apex_json.write('articleId', CASE WHEN l_article_id=0 THEN seq_article.nextval ELSE l_article_id END);
            apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    PROCEDURE getCldSignature IS
        l_params_to_sign clob:=apex_application.g_clob_01;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_string_to_sign varchar2(2000):=NULL; 
    BEGIN
        /* INSERT INTO log(procedure_name, message) VALUES ('generateCldSignature', 'pApexSession' || ': ' || pApexSession || ' pBodytext' || ': ' || pBodytext);*/
        
        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM JSON_TABLE(l_params_to_sign FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            );
        
        /* get Cloudinary details either of logged on user OR the hosting Cloudinary user */
        FOR C IN (SELECT NVL(u1.cld_cloud_name,u2.cld_cloud_name) cld_cloud_name, NVL(u1.cld_api_key, u2.cld_api_key) cld_api_key, NVL(u1.cld_api_secret,u2.cld_api_secret) cld_api_secret
                    FROM users u1, users u2
                   WHERE u1.id=l_user_id
                     AND u2.hosting_user_ind='Y')
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || C.cld_api_secret), dbms_crypto.HASH_SH1));
            apex_json.close_object;
        END LOOP;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    

    
    /*
     ** Set Time Zone according to client device. Procedure called on DOMContentLoaded event
     */
    PROCEDURE setClientInfo IS
        l_client_TZ users.client_tz%type:=apex_application.g_x01;
        l_touchpoints NUMBER:=apex_application.g_x02;
    BEGIN
        apex_util.set_session_state('APP_CLIENT_TZ',l_client_TZ,p_commit=>FALSE);
        apex_util.set_session_state('APP_MAXTOUCHPOINTS',l_touchpoints,p_commit=>FALSE);
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Format timestamp according to user's current time zone
     */
    FUNCTION fmtUpdatedDate(pTimestamp IN article.updated_date%type) RETURN VARCHAR2
    IS
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
    BEGIN
        IF (l_timezone IS NOT NULL) THEN
            RETURN ( TO_CHAR(pTimestamp AT TIME ZONE l_timezone, 'dd Mon yyyy fmhh:fmmi PM') );
        ELSE
            RETURN ( TO_CHAR(pTimestamp, 'dd Mon yyyy'));
        END IF;
    END;
    
    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RAISE_APPLICATION_ERROR(-20001,'Media type not supported - ' || pFormat);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pImgSrc IN BOOLEAN DEFAULT TRUE) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5):=getMediaType(pResourceType, pFormat);
        
        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            l_min_width PLS_INTEGER:=360;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);        
        BEGIN
            IF (l_media_type='audio' AND pImgSrc) THEN
                RETURN (',w_' || l_min_width);
            END IF;
            
            IF (pWidth*.25<l_min_width) THEN
                RETURN NULL;
            END IF;
            
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-l_min_width) <= ABS(l_arr(l_right)-l_min_width)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;        
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        l_url:='https://res.cloudinary.com/' || pCloudname;
        
        IF (pImgSrc OR l_media_type='image') THEN
            l_url:=l_url ||
                CASE l_media_type
                    WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                    WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                    WHEN 'audio' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                END;
        ELSE
            l_url:=l_url || '/video/upload/q_auto' || getwidth() || '/' || pPublicId || '.xxx';    
        END IF;
                
        RETURN (l_url);
    END;
    
    /*
     **  Respond to user clicking "Save & Exit" in Rich Text Editor.
     **  Parse text and extract title and excerpt for the artile.
     **  Convert markdown to html and save in article row.
     */
    PROCEDURE saveArticle 
    IS
        l_article_id    article.id%type:=apex_application.g_x01;
        title_len       PLS_INTEGER;
        excerpt_len     PLS_INTEGER;
        l_word_count    article.word_count%type;
        l_updated_date  article.updated_date%type;
        l_body_html     CLOB;
        l_plain_text    CLOB;
        l_instr         PLS_INTEGER;
        l_null          VARCHAR2(1);
        l_title         VARCHAR2(61);
        l_title_more    VARCHAR2(3);
        l_excerpt       VARCHAR2(161);
        l_excerpt_more  VARCHAR2(3);
        l_excerpt_words VARCHAR2(15);
        --l_extra_link_attributes apex_t_varchar2('target', '_blank');
        
        PROCEDURE split2(pInput IN VARCHAR2, pMaxLen1 IN INTEGER, pOutput1 IN OUT VARCHAR2, pMore1 IN OUT VARCHAR2, 
                                             pMaxLen2 IN INTEGER, pOutput2 IN OUT VARCHAR2, pMore2 IN OUT VARCHAR2) IS
            l_words     apex_t_varchar2;
            rem         PLS_INTEGER;
            l_start2    PLS_INTEGER;
        BEGIN
            l_words:=apex_string.split(REPLACE(pInput,CHR(10),' '),' ');
            --log(apex_string.join(l_words,':'));
            FOR i IN 1..l_words.COUNT LOOP
                IF (l_words(i) IS NULL) THEN
                    CONTINUE;
                END IF;
                rem:=pMaxLen1 - NVL(LENGTHB(pOutput1),0);
                IF (LENGTHB(l_words(i)) <= rem) THEN
                    pOutput1:=pOutput1 || l_words(i) || ' ';
                ELSE
                    pOutput1:=RTRIM(pOutput1);
                    pMore1:='...';
                    l_start2:=i;
                    EXIT;
                END IF;
            END LOOP;
            
            IF (pMaxLen2=0) THEN RETURN; END IF;

    
            FOR i IN l_start2..l_words.COUNT LOOP
                IF (l_words(i) IS NULL) THEN
                    CONTINUE;
                END IF;
                rem:=pMaxLen2 - NVL(LENGTHB(pOutput2),0);
                IF (LENGTHB(l_words(i)) <= rem) THEN
                    pOutput2:=pOutput2 || l_words(i) || ' ';
                ELSE
                    pOutput2:=RTRIM(pOutput2);
                    pMore2:='...';
                    EXIT;
                END IF;
            END LOOP;        
        END;
        
    BEGIN
        SELECT MAX(DECODE(column_name,'TITLE',data_length)), MAX(DECODE(column_name,'EXCERPT',data_length))
        INTO title_len, excerpt_len
        FROM user_tab_columns 
        WHERE table_name='ARTICLE';
    
        FOR C IN (SELECT dbms_lob.getlength(body) len, body
                    FROM article 
                   WHERE id=l_article_id) 
        LOOP
            l_body_html := APEX_MARKDOWN.TO_HTML (p_markdown => C.body, p_embedded_html_mode => APEX_MARKDOWN.c_embedded_html_preserve, p_extra_link_attributes => apex_t_varchar2('target', '_blank')); -- escapes special characters while preserving embedded html
            apex_escape.set_html_escaping_mode('E');
            l_plain_text:=dbms_lob.substr(utl_i18n.unescape_reference(APEX_ESCAPE.STRIPHTML(l_body_html)),title_len+excerpt_len+20,1); -- strip html to plain text, removing any XSS embedded in <script></noscript>
            l_plain_text:=APEX_ESCAPE.STRIPHTML(l_plain_text);
            IF (l_plain_text IS NULL) THEN
                EXIT;
            END IF;
            l_instr:=INSTR(l_plain_text,CHR(10));
            IF (l_instr<=title_len AND l_instr>0) THEN
                l_title:=SUBSTR(l_plain_text,1,l_instr-1);
                split2(SUBSTR(l_plain_text,l_instr+1),excerpt_len,l_excerpt,l_excerpt_more,0,l_null,l_null);
            ELSE
                split2(l_plain_text,title_len,l_title,l_title_more,excerpt_len,l_excerpt,l_excerpt_more);
            END IF;
        END LOOP;
        
        UPDATE article SET title=l_title, title_more=l_title_more, excerpt=l_excerpt, excerpt_more=l_excerpt_more, body_html=l_body_html 
         WHERE id=l_article_id 
         RETURNING word_count, updated_date INTO l_word_count, l_updated_date;

        IF (l_word_count>0 AND l_excerpt IS NOT NULL) THEN
            l_excerpt_words:=' ' || l_word_count || ' word' || CASE WHEN l_word_count>1 THEN 's' END;
        END IF;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('words', l_excerpt_words);
        apex_json.write('title', l_title);
        apex_json.write('excerpt', l_excerpt || l_excerpt_more);
        apex_json.write('updated', fmtUpdatedDate(l_updated_date)); 
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Copy selected article returning new article ID. Code is dead for now because don't know how to "copy" media 
     */
    PROCEDURE copyArticle IS
        l_article_id article.id%type:=apex_application.g_x01;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
    BEGIN
        INSERT INTO article(id,title,author_user_id,is_public,excerpt,word_count,updated_date,created_date,body,body_html,char_count,title_more,excerpt_more) 
        SELECT seq_article.nextval, title,l_user_id,is_public,excerpt,word_count,null,current_date,body,body_html,char_count,title_more,excerpt_more
          FROM article 
         WHERE id=l_article_id;
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('articleId',seq_article.currval);
        APEX_JSON.write('updated', fmtUpdatedDate(current_date));
        APEX_JSON.close_object;
               
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Construct Home page HTML of qualifying blog articles
     **
     **  Unauthenticated user (i.e. HOME page)
     **    - articles where PUBLIC=Y
     **
     **  Authenticated user -
     **    - articles where PUBLIC=Y
     **    - first card is for creatng a new article
     **    - create menu and buttons to manage article
     */
    FUNCTION getArticles(pIsPublic IN article.is_public%type) RETURN CLOB IS
        l_clob CLOB;
        l_app_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_app_user_name users.email%type:=apex_util.get_session_state('APP_USER_NAME');
    BEGIN
        IF (apex_authentication.is_authenticated) THEN
            l_clob:=TO_CLOB(
            '<nav>
                <button type="button" class="add-card">NEW CONTENT</button>
             </nav>');
        END IF;
        
        l_clob:=l_clob || TO_CLOB('<ul class="cards" role="list">');
            
        /* Create cards as <li> elements for each article */
        FOR C IN (
            WITH ids AS (
                SELECT id FROM article WHERE author_user_id=l_app_user_id OR is_public=CASE WHEN pIsPublic='Y' THEN 'Y' END
            ),
            covers AS
            (
                SELECT article_id, alt_text, nb_assets, cld_cloud_name, resource_type, public_id, format, width
                FROM
                (
                SELECT article_id, alt_text, cld_cloud_name, resource_type, public_id, width, format, display_order,  
                       MIN(display_order) OVER (PARTITION BY article_id) min_display_order, 
                       COUNT(*) OVER (PARTITION BY article_id) nb_assets
                FROM asset, ids
                WHERE asset.article_id=ids.id
                AND NVL(asset.format,'N/A')<>'clt'
                ) 
                WHERE display_order=min_display_order
            )
            SELECT art.id,
                   art.is_public,
                   cov.cld_cloud_name, cov.resource_type, cov.public_id, cov.format, cov.width,
                   cov.alt_text,
                   NVL2(cov.nb_assets,1,0) first_asset,
                   NVL(cov.nb_assets,0) nb_assets,
                   art.title || art.title_more title, 
                   art.excerpt || art.excerpt_more excerpt,
                   CASE WHEN art.excerpt IS NOT NULL AND art.word_count>0 THEN art.word_count || ' word' || CASE WHEN art.word_count>1 THEN 's' END END word_count,
                   usr.name,
                   NVL(art.updated_date, art.created_date) updated_date
              FROM article art, users usr, covers cov, ids
             WHERE art.author_user_id=usr.id
               AND art.id=ids.id
               AND cov.article_id(+)=art.id
             UNION ALL
             SELECT -1, null, null, null, null,null,null,null,0,0,null,null,null,l_app_user_name,systimestamp from dual
             ORDER BY updated_date DESC) 
        LOOP
            l_clob:=l_clob || TO_CLOB(
                '<li class="card" tabindex="0" data-id="' || C.id || '">
                    <div class="button-container">
                        <button type="button" class="fa fa-play show-gallery"' || CASE WHEN C.first_asset=0 THEN ' disabled' END || '>' || C.first_asset || '/' || C.nb_assets || '</button>' ||
                        CASE WHEN apex_authentication.is_authenticated THEN
                        '<div class="dropdown">
                          <button type="button" class="fa fa-caret-down"></button>
                          <ul class="dropdown-items">
                            <li><button type="button" class="fa fa-cloud-upload upload-media">Upload</button></li>
                            <li><button type="button" class="fa fa-edit edit-text">Edit</button></li>
                            <li><button type="button" class="fa fa-newspaper-o preview"' || CASE WHEN C.id<0 THEN ' disabled' END || '>Preview</button></li>' ||
                            CASE 
                              WHEN C.is_public='Y' THEN 
                                '<li><button type="button" class="fa fa-share2 unpublish">Unpublish</button></li>'
                              ELSE 
                                '<li><button type="button" class="fa fa-share2 publish"' || CASE WHEN C.id<0 THEN ' disabled' END || '>Publish</button></li>'
                            END 
                            || '
                            <li><button type="button" class="fa fa-trash delete"' || CASE WHEN C.id=1 THEN ' disabled' END || '>Delete</button></li>
                            <li><button type="button" class="fa fa-id-card">' || C.id || '</button></li>
                        </div>'
                        END ||'
                    </div>' ||
                    CASE WHEN C.first_asset=0 
                        THEN '<button type="button" class="no-media upload-media">UPLOAD MEDIA</button>' 
                        ELSE '<img class="show-gallery" src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '" alt="' || C.alt_text || '">' 
                    END ||
                    CASE WHEN COALESCE(C.title,C.excerpt) IS NULL 
                        THEN '<br>
                              <button type="button" class="no-media edit-text">CREATE TEXT</button>'
                        ELSE '<h4 class="title ' || CASE WHEN apex_authentication.is_authenticated THEN 'edit-text' ELSE 'preview' END || '">' || C.title || '</h4>
                              <p class="excerpt">' || C.excerpt || '<span class="word-count">' || C.word_count || '</span></p>'
                    END || '   
                    <footer>' || C.name || ', <span class="updated-date">' || fmtUpdatedDate(C.updated_date)  || '</span></footer>
                </li>');
        END LOOP;
        l_clob:=l_clob || TO_CLOB('</ul>');
        l_clob:=l_clob || TO_CLOB(
            '<dialog class="popup">
                <div>
                    <button type="button" class="close">&times;</button>
                    <h2></h2>
                    <p></p>
                    <button type="button" class="confirm">CONFIRM</button>
                </div>
            </dialog>
            <dialog class="preview">
                <div>
                    <div></div> <!-- empty div for preview grid -->
                    <div class="content ck-content"></div>
                    <button type="button" class="close" autofocus>&times;</button>
                </div>
            </dialog>
            <dialog class="gallery">
                <div>
                    <button type="button" class="close" autofocus>&times;</button>
                    <nav>
                        <div>
                            <button type="button" class="thumbs-minus fa fa-minus"></button>
                            <button type="button" class="thumbs-plus fa fa-plus"></button>
                        </div>
                        <button type="button" class="list-performance">PERFORMANCE</button>
                    </nav>
                    <div class="gallery-container" role="region" aria-label="gallery">
                        <p class="instruction"></p>
                        <ul></ul>
                    </div>
                    <div class="gallery-overlay">
                        <img src="">
                        <fieldset>
                            <legend><span></span><button class="close-fieldset" type="button">&times;</button></legend>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="dimensions"></button>
                        </fieldset>
                        <div>
                            <span class="counter"></span>
                            <button class="copy-url" type="button">&lt;COPY URL&gt;</button>
                        </div>
                        <button type="button" class="close-fullscreen">&times;</button>
                        <button type="button" class="prev">&lt;</button>
                        <button type="button" class="next">&gt;</button>
                    </div>
                </div>
            </dialog>            
            <dialog class="perftable">
                <div>
                    <button type="button" class="close">&times;</button>
                    <div class="content"></div>
                </div>
            </dialog>
            <dialog class="cldapikey">
                <div>
                    <button type="button" class="close">&times;</button>
                    <p>Subscribe to a free <a href="https://cloudinary.com/users/register_free">Cloudinary plan</a> and enter your API key in the field below</p>
                    <p>Alternatively click "Continue as guest" for limited access</p>
                    <fieldset>
                        <legend>Cloudinary API Environment variable</legend>
                        <input type="text" id="cldapikey">
                    </fieldset>
                    <div class="button-container">
                        <button type="button" class="save">Save Changes</button>
                        <button type="button" class="guest">Continue as guest</button>
                    </div>
                </div>
            </dialog> 
            ');

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
  
    /*
    ** Build HTML for public home page. Main content maintained in article id = 1
    */
    FUNCTION getHomepage RETURN CLOB IS
        l_clob CLOB;
    BEGIN
        /*
                <p><a href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Facebook&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">Login Facebook</a></p>
                <p><a href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Google&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">Login Google</a></p>
        ');
        --<p>Wordpress and others offer similar free services but you have to accept the intrusive advertisements which pay for those services; when the ads start obscuring the content, it''s time to pay or go elsewhere.</p>
        */

        FOR C IN (
            WITH cover AS
            (
                SELECT article_id, alt_text, cld_cloud_name, resource_type, public_id, format, width
                FROM
                (
                SELECT article_id, alt_text, cld_cloud_name, resource_type, public_id, width, format, display_order,  
                       MIN(display_order) OVER (PARTITION BY article_id) min_display_order
                  FROM asset
                 WHERE asset.article_id=1  /* HOMEPAGE convention */
                ) 
                WHERE display_order=min_display_order
            )
            SELECT art.body_html, cov.alt_text, cov.cld_cloud_name, cov.resource_type, cov.public_id, cov.width, cov.format
              FROM article art, cover cov 
             WHERE art.id=cov.article_id) 
        LOOP
            l_clob:=l_clob || TO_CLOB('<div class="homepage"><img src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '" alt="' || C.alt_text || '">');
            l_clob:=l_clob || C.body_html || TO_CLOB('</div>');
        END LOOP;
        
        l_clob:=l_clob || '<h2>PUBLISHED ARTICLES</h2>';
        
        l_clob:=l_clob || getArticles('Y');
        
        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;

/*
 **  Build gallery of thumbnail images from ASSET table 
 **  Executed in response to user requesting gallery of media assets for a given article
 **  Include Cloudinary asset sizes for optimized, responsive asset transformations
 */
PROCEDURE getThumbnails IS
        l_clob CLOB;
        l_article_id article.id%type:=apex_application.g_x01;
        l_maxtouchpoints INTEGER:=apex_application.g_x02;
        l_instruction VARCHAR2(300);
        l_url_image VARCHAR2(300); -- includes image, video poster and audo waveform 
        l_url_video VARCHAR2(300); -- includes video and audio
        --n PLS_INTEGER:=0;
        l_media_type VARCHAR(5);
    BEGIN
        FOR C IN (
            SELECT a.rowid row_id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(created_date,'dd-Mon-yyyy') uploaded, 
                   a.width, a.height, REPLACE(a.alt_text,'"','&quot;') alt_text, a.description, a.bytes, a.format,
                   COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY a.display_order) rn
              FROM asset a
             WHERE a.article_id=l_article_id
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            IF (C.rn=1) THEN
                l_instruction:=CASE WHEN l_maxtouchpoints > 1 THEN 'Tap' ELSE 'Click' END || ' Image to view in full screen' || 
                       CASE WHEN apex_authentication.is_authenticated AND C.nb > 1 THEN '<span>|</span>Drag and drop images to reorder<span>|</span>First image is article cover' END;
            END IF;
            l_media_type:=getMediaType(C.resource_type, C.format);
            l_clob:=l_clob || TO_CLOB('<li class="card is-gallery" tabindex="0" data-id="' || C.row_id || '">');
            
            l_url_image:=getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);
            l_url_video:=getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width, FALSE);
            
            l_clob:=l_clob ||TO_CLOB('
                <div class="button-container">
                    <span>' || C.rn || '/' || C.nb || '</span>');
            IF (apex_authentication.is_authenticated) THEN
                l_clob:=l_clob ||TO_CLOB(
                '<div class="dropdown">
                      <button type="button" class="fa fa-caret-down"></button>
                      <ul class="dropdown-items">
                        <li><button type="button" class="fa fa-edit edit-description">Description</button></li>
                        <li><button type="button" class="fa fa-edit edit-alt-text">Alt Text</button></li>
                        <li><button type="button" class="fa fa-id-card view-details">View Details</button></li>
                        <li><button type="button" class="fa fa-trash delete-asset">Delete</button></li>
                </div>');
            END IF;
            l_clob:=l_clob ||TO_CLOB('</div>');
            
            CASE l_media_type
                WHEN 'image' THEN
                    l_clob:=l_clob || TO_CLOB(
                    '<img data-dimensions="'  || ROUND(C.width*.25) || 'x' || ROUND(C.height*.25) || ':' || ROUND(C.width*.625) || 'x' || ROUND(C.height*.625) || ':' || C.width || 'x' || C.height || '"
                        src="' || l_url_image || '">');
                                                
                WHEN 'video' THEN
                    l_clob:=l_clob || TO_CLOB('<img class="no-show" data-dimensions="360x360:360x360:360x360" src="' || REPLACE(l_url_video,'.xxx','.jpg') || '">');
                    l_clob:=l_clob || TO_CLOB(
                    '<video controls preload="metadata" poster="' || REPLACE(l_url_video,'.xxx','.jpg') || '">
                        <source src="' || REPLACE(l_url_video,'.xxx','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_video,'.xxx','.mp4') || '" type="video/mp4"></source>
                    </video>');
                    
                WHEN 'audio' THEN
                    l_clob:=l_clob || TO_CLOB('<img data-dimensions="360x360:360x360:360x360" src="' || REPLACE(l_url_image,'.xxx','.png') || '">');
                    l_clob:=l_clob || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_video,'.xxx','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_video,'.xxx','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_video,'.xxx','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_video,'.xxx','.wav') || '" type="audio/wav"></source>
                    </audio>');
        
            END CASE;
            
            l_clob:=l_clob || TO_CLOB('</li>');
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.write('instruction', l_instruction);
                            
        apex_json.close_object;
         
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Load metadata after media uploaded to Cloudinary.
     **  Cloudinary metadata received as JSON in apex_application.g_clob_01
     **  Insert uploaded asset metadata into ASSETS table
     **  Return new asset count and url of first image as default cover image
     */       
    PROCEDURE uploadMetadata IS
        l_article_id article.id%type;
        l_metadata clob:=apex_application.g_clob_01;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_start_order PLS_INTEGER;
        l_updated_date article.updated_date%type:=current_timestamp;
        nb_assets PLS_INTEGER;
    BEGIN
        SELECT article_id 
          INTO l_article_id
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id)) WHERE ROWNUM=1;
        
        MERGE INTO article t
        USING (SELECT l_article_id article_id FROM dual) s
           ON (t.id=s.article_id)
         WHEN MATCHED THEN UPDATE SET updated_date=current_timestamp
         WHEN NOT MATCHED THEN INSERT (id, author_user_id, created_date) VALUES (s.article_id, l_user_id, current_timestamp);
        
        SELECT NVL(MAX(display_order),0) INTO l_start_order FROM asset WHERE article_id=l_article_id;

        INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, created_date, display_order)
        SELECT seq_asset.nextval, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, current_timestamp, l_start_order+ROWNUM
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id, public_id, width, height, bytes, resource_type, format, cld_cloud_name));

        /* Return upload details to calling Javascript process in order to update front-end */
        FOR C IN (SELECT cld_cloud_name, resource_type, public_id, format, width, nb_assets
                    FROM
                    (
                    SELECT cld_cloud_name, resource_type, public_id, format, width, display_order, 
                            MIN(display_order) OVER () min_display_order, 
                            COUNT(*) OVER () nb_assets
                    FROM asset 
                    WHERE article_id=l_article_id
                    )
                    WHERE display_order=min_display_order)
        LOOP
            APEX_JSON.open_object; 
            APEX_JSON.write('success', TRUE);
            APEX_JSON.write('articleId',l_article_id);
            APEX_JSON.write('nbAssets',C.nb_assets);
            APEX_JSON.write('imgurl',getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width));
            APEX_JSON.write('updated', fmtUpdatedDate(l_updated_date));
            APEX_JSON.close_object;
        END LOOP;
               
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;  
    
    /*
     **  Upload Performance data from entries accumulated by Javascript Performance API
     */       
    PROCEDURE uploadPerformance IS
        l_performance clob:=apex_application.g_clob_01;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        l_session_id NUMBER:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
        n PLS_INTEGER;
    BEGIN
        log(l_performance);

        INSERT /*+ ignore_row_on_dupkey_index ( performance (session_id, url)) */ 
          INTO performance(id, asset_id, session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, capture_date, user_id, ip_address)
        WITH json AS 
        (
            SELECT cld_cloud_name, resource_type, public_id, l_session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, timestamp'1970-01-01 00:00:00' + numtodsinterval(epoch,'second') capture_date, l_user_id, l_ip_address
              FROM JSON_TABLE(l_performance FORMAT JSON, '$.images[*]' 
                    COLUMNS (cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, epoch))
        )
        SELECT seq_performance.nextval, a.id, l_session_id, j.url, j.connection_type, j.transfersize, j.duration, j.content_type, j.window_innerwidth, j.browser, j.capture_date, l_user_id, l_ip_address
          FROM json j, asset a
         WHERE j.cld_cloud_name=a.cld_cloud_name
           AND j.resource_type=a.resource_type
           AND j.public_id=a.public_id;

        log(sql%rowcount);
        
        INSERT /*+ ignore_row_on_dupkey_index ( servertiming (performance_id, seq)) */ 
          INTO servertiming(performance_id, seq, name, duration, description)
        WITH json AS 
        (
            SELECT url, seq, name, duration, description
              FROM JSON_TABLE(l_performance FORMAT JSON, '$.images[*]' 
                    COLUMNS (url,
                        NESTED  '$.servertiming[*]' columns (seq for ordinality,name,duration,description))) 
        )
        SELECT p.id, j.seq, j.name, j.duration, j.description
          FROM json j, performance p
         WHERE p.session_id=l_session_id
           AND p.url=j.url
           AND j.seq IS NOT NULL;        
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object; 
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
    ** Write HTML table of media download performance for the article
    */
    PROCEDURE getPerformance IS
        l_article_id asset.article_id%type:=apex_application.g_x01;
        l_content CLOB;
        l_ip_address performance.ip_address%type;
        l_session_id NUMBER:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
        n PLS_INTEGER:=0;
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
        l_url_parts apex_t_varchar2;
        l_transformation VARCHAR(300);
    BEGIN
        IF (apex_authentication.is_authenticated) THEN
            l_ip_address:=NULL;
        ELSE
            l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        END IF;
        
        /* 
        
        FOR C IN (SELECT  COUNT(*) OVER (PARTITION BY a.cld_cloud_name, a.resource_type, a.public_id) nb_rows, 
                          ROW_NUMBER() OVER (PARTITION BY a.display_order,a.cld_cloud_name, a.resource_type, a.public_id ORDER BY p.capture_date DESC) rn, 
                          a.cld_cloud_name, a.resource_type, a.public_id, a.format, a.width, a.bytes, apex_util.get_since(a.created_date) created_date, apex_util.get_since(p.capture_date) capture_date, 
                          p.url, p.transfersize, p.duration, p.content_type, p.browser, p.session_id, p.window_innerwidth, p.ip_address, p.connection_type, p.servertiming
                    FROM asset a, performance p
                   WHERE a.article_id=l_article_id
                     AND a.cld_cloud_name=p.cld_cloud_name
                     AND a.resource_type=p.resource_type
                     AND a.public_id=p.public_id
                     AND p.ip_address = NVL(l_ip_address, p.ip_address)
                     AND p.session_id=NVL(l_session_id, p.session_id)
                   ORDER BY a.display_order)
        LOOP
            n:=n+1;
            IF (n=1) THEN
                l_content:=to_clob(
                '<table>
                    <caption>CLOUDINARY BASE URL: ' || SUBSTR(C.url,1,INSTR(C.url,'/',1,4)) || '</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>DOWNLOADED<br>I.P. (CONNECTION)<br>BROWSER (WIDTH)</th>
                            <th class="align-left">TRANSFORMATION</th>
                            <th>TRANSFER SIZE<br>DURATION<br>CONTENT/TYPE</th>
                            <th class="align-left">SERVER TIMING</th>
                        </tr>
                    </thead>
                    <tbody>
                ');
            END IF;
            
            IF (C.nb_rows=C.rn) THEN
                l_content:=l_content || to_clob('<tr class="last-tr">');
            ELSE
                l_content:=l_content || to_clob('<tr>');
            END IF;
                
            IF (C.rn=1) THEN 
                l_content:=l_content || to_clob(
                '<td rowspan="' || C.nb_rows || '">
                    <figure><img src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
                        <figcaption><span class="label">File name: </span>' || SUBSTR(C.public_id,1,INSTR(C.public_id,'_',-1)-1) || '.' || C.format 
                            || '<br><span class="label">Original size: </span>' || apex_string_util.to_display_filesize(C.bytes) 
                            || '<br><span class="label">Width: </span>' || C.width || ' px'
                            || '<br><span class="label">Uploaded: </span>' || C.created_date || '
                    </figcaption></figure></td>');
            END IF;
            
            l_url_parts:=apex_string.split(C.url,'/');
            IF (C.resource_type='image') THEN
                l_transformation:=l_url_parts(5);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            ELSE
                l_transformation:=l_url_parts(7);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            END IF;
            
            l_content:=l_content || to_clob('
                <td class="align-center">' || C.capture_date || '<br>' || C.ip_address || CASE WHEN C.connection_type IS NOT NULL THEN ' (' || C.connection_type || ')' END || '<br>' || C.browser || ' (' || C.window_innerwidth || ' px)</td>
                <td>' || l_transformation || '</td>
                <td class="align-center">' || apex_string_util.to_display_filesize(C.transfersize) || '<br>' || C.duration || ' ms<br>' || C.content_type|| '</td>
                <td>' || REPLACE(C.servertiming,'|','<br>') || '</td>
            </tr>');
                
        END LOOP;
        
        IF (n>0) THEN
            l_content:=l_content || to_clob('</tbody></table>');
        ELSE
            l_content:= to_clob('<p>All media for your session was retrieved from Cache</p>');
        END IF;
        */
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('content', l_content);
        APEX_JSON.close_object;          
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);        
    END;
    
    /*
     **  Get the selected article's content for Rich Text Editor (format is markdown).
     **
     */    
    PROCEDURE getContent IS
        l_article_id article.id%type:=apex_application.g_x01;
    BEGIN
        FOR C IN (SELECT body FROM article WHERE id=l_article_id) 
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE); 
            apex_json.write('content', C.body); 
            apex_json.close_object;
        END LOOP;
        
        EXCEPTION
            WHEN NO_DATA_FOUND THEN NULL;
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm, pAjax=>TRUE);
    END;
    
    /*
     **  Get the selected article's content in HTML format
     **
     */    
    PROCEDURE getContentHTML IS
        l_article_id article.id%type:=apex_application.g_x01;
    BEGIN
        FOR C IN (SELECT a.body_html, UPPER(u.name) name, apex_util.get_since(a.created_date) created, CASE WHEN a.word_count<200 THEN 'less than a minute' ELSE ROUND(a.word_count/200) || ' minute read' END minutes 
                    FROM article a, users u 
                   WHERE a.id=l_article_id 
                     AND author_user_id=u.id) 
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE); 
            apex_json.write('content', C.body_html); 
            --apex_json.write('name', C.name); 
            --apex_json.write('created', C.created); 
            --apex_json.write('minutes', C.minutes); 
            apex_json.write('details','<div class="details"><span>' || C.name || '</span><span>-</span><span>' || C.created || '</span><span>-</span><span>' || C.minutes || '</span></div>');
            apex_json.close_object;
        END LOOP;
        
        EXCEPTION
            WHEN NO_DATA_FOUND THEN NULL;
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm, pAjax=>TRUE);
    END;    

    /*
     **  Procedure called by the autoSave feature of CK5Editor
     */        
    PROCEDURE updateContent IS
        l_article_id article.id%type:=apex_application.g_x01; 
        l_word_count_item VARCHAR2(50):=apex_application.g_x02;
        l_char_count_item VARCHAR2(50):=apex_application.g_x03;
        l_word_count NUMBER:=REGEXP_SUBSTR(l_word_count_item,'(\d)+');
        l_char_count NUMBER:=REGEXP_SUBSTR(l_char_count_item,'(\d)+');  
    BEGIN
        /* Ignore when CKEditor savedata function is called during widget initialization */
        IF (l_article_id IS NULL) THEN
            RETURN;
        END IF;
        
        IF (l_article_id=0) THEN
            INSERT INTO article(id, author_user_id, created_date) VALUES (seq_article.nextval, apex_util.get_session_state('APP_USER_ID'), current_date);
        ELSE
            UPDATE article SET body=apex_application.g_clob_01, word_count=l_word_count, char_count=l_char_count, updated_date=current_timestamp WHERE id=l_article_id;
        END IF;
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        IF (l_article_id=0) THEN
            APEX_JSON.write('articleId',seq_article.currval);
        END IF;
        apex_json.close_object;
         
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Delete all Cloudinary assets uploaded for a given article
     */   
    FUNCTION deleteUploadedMedia(pArticleId IN NUMBER, pResourceType IN asset.resource_type%type DEFAULT NULL) RETURN NUMBER IS
        l_clob CLOB;
        l_url VARCHAR2(500);
        nb_deleted PLS_INTEGER:=0;
        n PLS_INTEGER;
    BEGIN
        FOR C IN (SELECT DISTINCT a.resource_type, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret 
                    FROM users u, article t, asset a
                   WHERE t.id=pArticleId
                     AND t.author_user_id=u.id
                     AND t.id=a.article_id
                     AND a.resource_type=NVL(pResourceType,a.resource_type))
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || pArticleId;
            l_clob := apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'DELETE',p_username=>C.cld_api_key,p_password=>C.cld_api_secret); 
            SELECT SUM(original) INTO n FROM JSON_TABLE(l_clob FORMAT JSON, '$.deleted_counts.*' COLUMNS (original NUMBER PATH '$.original'));
            nb_deleted:=nb_deleted+n;
        END LOOP;
        RETURN(nb_deleted);
    END;    
    
    /*
     **  Remove article and any uploaded assets
     */   
    PROCEDURE deleteArticle IS
        l_article_id article.id%type:=apex_application.g_x01;
        l_clob CLOB;
        l_url VARCHAR2(500);
    BEGIN
        FOR C IN (SELECT DISTINCT a.resource_type, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret 
                    FROM users u, article t, asset a
                   WHERE t.id=l_article_id
                     AND t.author_user_id=u.id
                     AND t.id=a.article_id)
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || l_article_id;
            l_clob := apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'DELETE',p_username=>C.cld_api_key,p_password=>C.cld_api_secret); 
            log(l_clob);
        END LOOP;
        
        DELETE asset WHERE article_id=l_article_id;
        
        DELETE article WHERE id=l_article_id;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    
    /*
     **  Update the alt_text and description columns of a given ASSET
     */   
    PROCEDURE updateAsset IS
        l_asset_dbid VARCHAR2(20) := apex_application.g_x01;
        l_rowid ROWID:=CHARTOROWID(l_asset_dbid);
        l_alt_text asset.alt_text%type := apex_application.g_x02;
        l_description asset.description%type := apex_application.g_x03;
    BEGIN
        UPDATE asset SET alt_text=l_alt_text, description=l_description, updated_date=current_timestamp 
         WHERE ROWID=l_rowid;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('updated', fmtUpdatedDate(current_timestamp)); 
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Delete 1 asset for a given article
     */   
    PROCEDURE deleteAsset IS
        l_asset_dbid VARCHAR2(20) := apex_application.g_x01;
        l_rowid ROWID:=CHARTOROWID(l_asset_dbid);
        l_article_id asset.article_id%type;
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_public_id asset.public_id%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_parm_names apex_application_global.VC_ARR2;
        l_parm_values apex_application_global.VC_ARR2;
        l_timestamp NUMBER:=trunc((cast(current_timestamp at time zone 'UTC' as date) - to_date('01-jan-1970','dd-mon-yyyy')) * (86400));
        l_signature VARCHAR2(100);
        l_string_to_sign varchar2(2000);  
        l_error_message VARCHAR2(500);
        l_clob CLOB;
        l_url VARCHAR2(500);
        l_updated_date VARCHAR2(20);
    BEGIN
        SELECT a.article_id, a.cld_cloud_name, a.public_id, u.cld_api_key, u.cld_api_secret
          INTO l_article_id, l_cld_cloud_name, l_public_id, l_cld_api_key, l_cld_api_secret
          FROM asset a, article t, users u
         WHERE a.ROWID=l_rowid
           AND a.article_id=t.id
           AND t.author_user_id=u.id;
        
        l_parm_names(1):='invalidate';
        l_parm_values(1):='true';
        l_parm_names(2):='public_id';
        l_parm_values(2):=l_public_id;        
        l_parm_names(3):='timestamp';    
        l_parm_values(3):=l_timestamp;                
        
        l_string_to_sign:=NULL;
        FOR i IN 1..3 LOOP
            l_string_to_sign:=l_string_to_sign || l_parm_names(i) || '=' || l_parm_values(i) || '&';
        END LOOP;
        l_string_to_sign:=RTRIM(l_string_to_sign,'&') || l_cld_api_secret;
        l_parm_names(4):='signature';
        l_parm_values(4):=dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign), dbms_crypto.HASH_SH1);   
        l_parm_names(5):='api_key';
        l_parm_values(5):=l_cld_api_key;            
        
        l_clob := apex_web_service.make_rest_request(
            p_url=>'https://api.cloudinary.com/v1_1/' || l_cld_cloud_name || '/image/destroy', 
            p_http_method=>'POST',
            p_parm_name=>l_parm_names,
            p_parm_value=>l_parm_values); 

        SELECT error_message INTO l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS error_message VARCHAR2(500) PATH '$.error.message');
        
        IF (l_error_message IS NOT NULL) THEN
            log(l_clob);
            RAISE_APPLICATION_ERROR(-20001, l_error_message);
        END IF;
        
        DELETE asset WHERE ROWID=l_rowid;
        
        UPDATE article SET updated_date=current_date WHERE id=l_article_id;
        
        /* Check whether we need to change the article's cover page image */
        FOR C IN (
            SELECT rid, cld_cloud_name, resource_type, public_id, format, width
            FROM 
            (
                SELECT ROWID rid, display_order, MIN(display_order) OVER () min_display_order,
                        cld_cloud_name, resource_type, public_id, format, width
                FROM asset 
                WHERE article_id=l_article_id
            )
            WHERE display_order=min_display_order) 
        LOOP
            IF (l_rowid<>C.rid) THEN
                l_url:=getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);
            END IF;
        END LOOP;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('updated', fmtUpdatedDate(current_date));
        IF (l_url IS NOT NULL) THEN
            apex_json.write('url', l_url);
        END IF;
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Remove user and all articles, assets,grants etc. Runs as a background job 
     */   
    PROCEDURE deleteAll(pUserId IN users.id%type) IS
        nb_articles PLS_INTEGER;
        nb_assets NUMBER:=0;
        n NUMBER;
    BEGIN
        FOR C IN (SELECT id FROM article WHERE author_user_id=pUserId) LOOP
            n:=deleteUploadedMedia(C.id);
            nb_assets:=nb_assets+n;
        END LOOP;

        DELETE article WHERE author_user_id=pUserId;
        nb_articles:=SQL%ROWCOUNT;
        
        DELETE users WHERE id=pUserId;

        log('Deleted ' || nb_articles || ' articles and ' || nb_assets || ' images/videos.');
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;        
    END;
    
    /*
     **  Publish / unpublish article
     */   
    PROCEDURE publishArticle IS
        l_article_id article.id%type:=apex_application.g_x01;
        l_is_public article.is_public%type:=apex_application.g_x02;
        n PLS_INTEGER:=-1;
    BEGIN
        /* Reject publication request if cover image does not have ALT description */
        
        apex_json.open_object; 
        
        IF (l_is_public='Y') THEN
            SELECT COUNT(*) INTO n FROM dual WHERE EXISTS
            (
                SELECT alt_text, display_order FROM
                (
                    SELECT MIN(display_order) OVER () cover, display_order, alt_text FROM asset WHERE article_id=l_article_id 
                )
                WHERE display_order=cover AND alt_text IS NOT NULL
            );
            IF (n=0) THEN
                apex_json.write('message', 'Cover Image ALT TEXT must be set before article can be published');
            END IF;
        END IF;
        
        IF (l_is_public='N' OR n=1) THEN
            UPDATE article SET is_public=l_is_public, updated_date=current_date WHERE id=l_article_id;
            apex_json.write('updated', fmtUpdatedDate(current_date));
        END IF;
        
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
                RAISE;
    END;
    
    /*
     **  Reorder assets
     */
    PROCEDURE reorderAssets IS
        l_article_id article.id%type;
        l_dbid_string LONG:=apex_application.g_x01;
        l_first_dbid ROWID;
        
        TYPE t_asset IS RECORD(
            rid ROWID,
            display_order asset.display_order%type);
        TYPE tt_asset IS TABLE OF t_asset;
        l_assets tt_asset; 
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_resource_type asset.resource_type%type; 
        l_public_id asset.public_id%type; 
        l_format asset.format%type; 
        l_width asset.width%type;
        
        l_url VARCHAR2(500);
        l_updated_date VARCHAR2(20);
    BEGIN
        SELECT column_value, rownum 
          BULK COLLECT INTO l_assets
          FROM TABLE(apex_string.split(l_dbid_string,':'));
          
        /* get the article id from first asset */
        SELECT article_id INTO l_article_id
          FROM asset WHERE ROWID=l_assets(1).rid;
        
        /* ... and get rowid of first asset as this may have been replaced */
        SELECT rid 
        INTO l_first_dbid 
        FROM 
        (
            SELECT ROWID rid, display_order, MIN(display_order) OVER () min_display_order
            FROM asset 
            WHERE article_id=l_article_id
        )
        WHERE display_order=min_display_order;
        
        FORALL i IN l_assets.first .. l_assets.last
        UPDATE asset SET display_order=l_assets(i).display_order WHERE ROWID  = l_assets(i).rid;
        
        IF (l_assets(1).rid<>l_first_dbid) THEN
            SELECT cld_cloud_name, resource_type, public_id, format, width
              INTO l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width
              FROM asset 
              WHERE ROWID=l_assets(1).rid;
            l_url:=getCloudinaryUrl(l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width);
            UPDATE article SET updated_date=current_date WHERE id=l_article_id;
            l_updated_date:=fmtUpdatedDate(current_date);
        END IF;
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('url', l_url);
        apex_json.write('updated', l_updated_date);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    
    /**
     **    Update user's record  with Cloudinary API details. Submit background job to transfer users's Cloudinary assets.
     */
    PROCEDURE updateUser IS
        l_cld_api VARCHAR2(200):=apex_util.get_session_state('P2_CLD_API_ENV');
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_p1 INTEGER;
        l_p2 INTEGER;
        l_p3 INTEGER;
        l_error_message VARCHAR2(100);
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_cld_error_message VARCHAR2(100);
        l_clob CLOB;
        l_job_name VARCHAR2(30);
        l_cld_plan VARCHAR2(50);
        l_url VARCHAR2(500);
    BEGIN
        log('Start transfer process for user id:' || l_user_id|| ' P2_CLD_API_ENV:' || l_cld_api);
        
        IF (l_cld_api IS NULL) THEN
            l_error_message:='Cloudinary API Environment variable empty.'; 
        ELSE
            l_p1:=INSTR(l_cld_api,'/',-1);
            l_p2:=INSTR(l_cld_api,':',-1);
            l_p3:=INSTR(l_cld_api,'@');
    
            l_cld_cloud_name:=SUBSTR(l_cld_api,l_p3+1);
            l_cld_api_key:=SUBSTR(l_cld_api,l_p1+1,l_p2-l_p1-1); 
            l_cld_api_secret:=SUBSTR(l_cld_api,l_p2+1,l_p3-l_p2-1);
            
            IF (l_cld_cloud_name IS NULL OR l_cld_api_key IS NULL OR l_cld_api_secret IS NULL) THEN
                l_error_message:='Cloudinary API Environment invalid.';
            END IF;
        END IF;
        
        IF (l_error_message IS NULL) THEN
            l_url:='https://api.cloudinary.com/v1_1/' || l_cld_cloud_name || '/usage';
            l_clob := apex_web_service.make_rest_request(
                p_url=>l_url,
                p_http_method=>'GET',
                p_username=>l_cld_api_key,
                p_password=>l_cld_api_secret);
            SELECT plan, error_message INTO l_cld_plan, l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS plan VARCHAR2(50) PATH '$.plan', error_message VARCHAR2(100) PATH '$.error.message');  
        END IF;
        
        IF (l_error_message IS NOT NULL) THEN
            apex_util.set_session_state('P2_PLSQL_STATUS','nok',p_commit=>false);
            apex_application.g_x01 := l_error_message;
            apex_application.g_x02 := 'CLOUDINARY_URL is invalid or inconsistent'; 
            apex_application.g_x03 := 'error';  
            RETURN;
        END IF;


        /* Validation checks passed. Update user record and submit background job (takes a long time) to transfer the user's assets to their new Cloudinary account */

        UPDATE users 
           SET cld_cloud_name=l_cld_cloud_name,
               cld_api_key=l_cld_api_key, 
               cld_api_secret=l_cld_api_secret,
               cld_plan=l_cld_plan,
               updated_date=current_timestamp
         WHERE id=l_user_id;
        
        apex_util.set_session_state('APP_CLD_API_KEY',l_cld_api_key,p_commit=>false);
        apex_util.set_session_state('APP_CLD_CLOUD_NAME',l_cld_cloud_name,p_commit=>false);
        
        l_job_name:='TRANSFER_USER_ASSETS_'||l_user_id;
        
        dbms_scheduler.create_job(
            job_name =>  l_job_name,
            program_name => 'P_TRANSFER_ASSETS',
            enabled =>    FALSE );
            
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_name => 'PUSERID',
            argument_value => l_user_id);
        
        dbms_scheduler.enable(l_job_name);
        
        apex_util.set_session_state('P2_PLSQL_STATUS','ok',p_commit=>false);
        apex_application.g_x01:='Successfully configured a ' || l_cld_plan || ' Cloudinary plan.';
        apex_application.g_x02:='Starting transfer of all assets to your new Cloudinary account.';
        apex_application.g_x03:='success';

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;    

    /*
     **  Get Cloudinary usage details for each Cloudinary subscriber. Daily job.
     */    
    PROCEDURE getUsage(pUserId IN users.id%type DEFAULT NULL, pUsageDate IN DATE DEFAULT NULL) IS
        l_url VARCHAR2(100);
        l_clob CLOB;
        l_error_message VARCHAR2(50);
        l_usage_date_param VARCHAR2(16):=NULL;
    BEGIN
        IF (pUsageDate IS NOT NULL) THEN
            l_usage_date_param:='/date='||TO_CHAR(pUsageDate,'DD-MM-YYYY');
        END IF;
        FOR C IN (SELECT id, 
                         cld_cloud_name, 
                         cld_api_key, 
                         cld_api_secret 
                    FROM users 
                   WHERE cld_cloud_name IS NOT NULL
                     AND id=NVL(pUserId,id)
                   ) 
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/usage' || l_usage_date_param;
            log(l_url);
            l_clob := apex_web_service.make_rest_request(
                p_url=>l_url,
                p_http_method=>'GET',
                p_username=>C.cld_api_key,
                p_password=>C.cld_api_secret);
            SELECT error_message INTO l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS error_message VARCHAR2(100) PATH '$.error.message');  
            IF (l_error_message IS NOT NULL) THEN
                log('Error callling REST API for user ' || C.id || ' - ' || l_error_message);
                CONTINUE;
            END IF;
            DELETE usage WHERE user_id=C.id AND usage_date=NVL(pUsageDate,TRUNC(sysdate));
            INSERT INTO usage (user_id,usage_date,last_updated,plan,transformations_usage,transformations_credit_usage,bandwidth_usage,bandwidth_credit_usage,storage_usage,storage_credit_usage,
                credits_usage,credits_limit,used_percent,objects_usage,requests,resources,derived_resources,image_max_size,video_max_size,raw_max_size)
            SELECT C.id, TO_DATE(date_requested,'YYYY-MM-DD"T"hh24:mi:ss"Z"'),TO_DATE(last_updated,'YYYY-MM-DD'),
                plan,
                transformations_usage,transformations_credit_usage,bandwidth_usage,bandwidth_credit_usage,storage_usage,storage_credit_usage,
                credits_usage,credits_limit,used_percent,
                objects_usage,requests,resources,derived_resources,
                image_max_size,video_max_size,raw_max_size
              FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS 
                date_requested VARCHAR2(100) PATH '$.date_requested', 
                last_updated VARCHAR2(100) PATH '$.last_updated', 
                plan VARCHAR2(100) PATH '$.plan',
                transformations_usage NUMBER PATH '$.transformations.usage',
                transformations_credit_usage NUMBER PATH '$.transformations.credits_usage',
                bandwidth_usage NUMBER PATH '$.bandwidth.usage',
                bandwidth_credit_usage NUMBER PATH '$.bandwidth.credits_usage',
                storage_usage NUMBER PATH '$.storage.usage',
                storage_credit_usage NUMBER PATH '$.storage.credits_usage',
                credits_usage NUMBER PATH '$.credits.usage',
                credits_limit NUMBER PATH '$.credits.limit',
                used_percent NUMBER PATH '$.credits.used_percent',
                objects_usage NUMBER PATH '$.objects.usage',
                requests NUMBER PATH '$.requests',
                resources NUMBER PATH '$.resources',
                derived_resources NUMBER PATH '$.derived_resources',
                image_max_size NUMBER PATH '$.media_limits.image_max_size_bytes',
                video_max_size NUMBER PATH '$.media_limits.video_max_size_bytes',
                raw_max_size NUMBER PATH '$.media_limits.raw_max_size_bytes'
                );
        END LOOP;
        COMMIT;
    END;

END;
/