CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS" is
    --
    PROCEDURE getArticle(pArticleId IN article.id%type);
    --
    PROCEDURE getArticles(pId IN VARCHAR2);
    --
    PROCEDURE getCldDetails;
    --
    PROCEDURE getCldSignature(pParamsToSign IN CLOB);
    --
    PROCEDURE getCodepen(pArticleId IN article.id%type);
    --
    PROCEDURE getSessionLog(SessionId IN NUMBER);
    --
    PROCEDURE getWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE insertCollection(pParentId IN article.id%type);
    --
    PROCEDURE reorder(pId IN NUMBER, pBodyText IN CLOB);
    --
    PROCEDURE restoreArticle(pArticleId IN article.id%type);
    --
    PROCEDURE setClientInfo(pBodyText IN CLOB);
    --
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE updateContent(pZipFile IN BLOB, pId IN VARCHAR2);
    --
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB);
    --
    PROCEDURE uploadPerformance(pBodyText IN CLOB);
    --
    PROCEDURE signout;
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS" is

    g_html_start CONSTANT VARCHAR2(24):='<!-- YOUR CODE START -->';
    g_html_end CONSTANT VARCHAR2(24):='<!-- YOUR CODE END -->';
    g_css_js_start CONSTANT VARCHAR2(24):='/* YOUR CODE START */';
    g_css_js_end CONSTANT VARCHAR2(24):='/* YOUR CODE END */';

    PROCEDURE getCldDetails IS
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size INTEGER;
        l_video_max_size INTEGER;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        pck_api.getCloudinaryData(pUserId=>l_session_data.user_id, pCloudName=>l_cld_cloud_name, pCldApiKey=>l_cld_api_key, pCldImageMaxSize=>l_image_max_size, pCldVideoMaxSize=>l_video_max_size);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('cloudname', l_cld_cloud_name);
        apex_json.write('apikey', l_cld_api_key);
        apex_json.write('maxImageFileSize', l_image_max_size);
        apex_json.write('maxVideoFileSize', l_video_max_size);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    PROCEDURE getCldSignature(pParamsToSign IN CLOB) IS
        l_params_to_sign clob:=pParamsToSign;
        l_string_to_sign varchar2(2000):=NULL; 
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM users, JSON_TABLE(l_params_to_sign FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            )
            WHERE users.id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || pck_api.getCloudinaryAPISecret(l_session_data.user_id)), dbms_crypto.HASH_SH1));
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     ** Insert row in session_data table when user views home page.
     */
    PROCEDURE setClientInfo(pBodyText IN CLOB) IS
        l_ip_address session_data.ip_address%type;
    BEGIN
        l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        INSERT INTO session_data (session_id, timezone, maxtouchpoints, supports_popover, supports_eyedropper, ip_address)
        SELECT session_id, timezone, maxtouchpoints, supports_popover, supports_eyedropper, l_ip_address
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$[*]' COLUMNS (session_id, timezone, maxtouchpoints, supports_popover, supports_eyedropper));

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    PROCEDURE getSessionLog(SessionId IN NUMBER) IS
        l_content CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_content:='
        <table>
            <thead>
                <tr>
                    <th style="width:10%;text-align:left;">Log Time</th>
                    <th style="width:90%;text-align:left;">Log Message</th>
                </tr>
            </thead>
            <tbody>';
        FOR C IN (SELECT log_date, message 
                    FROM log
                   ORDER BY id DESC) 
        LOOP
            l_content:=l_content || '
                <tr>
                    <td>' || TO_CHAR(C.log_date AT TIME ZONE l_session_data.timezone, 'hh24:mi:ss') || '</td><td>' || REPLACE(C.message,chr(10),'<br>') || '</td>
                </tr>';
        END LOOP;
        l_content:=l_content || '
            </tbody>
        </table>';

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    /*
    ** GET CONTENT FOR A SELECTED WEBSITE
    */
    PROCEDURE getWebsite(pWebsiteId IN website.id%type) IS
        l_session_data pck_core.session_data_rt;
        l_website_id website.id%type;
        l_nav_labels LONG;
        l_thumbnails LONG;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        apex_json.open_object;
        FOR C IN (
            SELECT w.domain_name
              FROM website w
             WHERE w.id=pWebsiteId
               AND w.user_id=l_session_data.user_id) 
        LOOP
            apex_json.write('domain_name', C.domain_name);
        END LOOP;
        
        apex_json.write('nav_labels', pck_core.buildPageNav(pWebsiteId));
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Load metadata after media uploaded to Cloudinary.
     **  Insert uploaded asset metadata into ASSETS table
     */       
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB) IS
        l_session_data pck_core.session_data_rt;
        l_bodytext CLOB:=pBodyText;
        l_thumbnails CLOB;
        l_article_id asset.article_id%type;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT article_id INTO l_article_id FROM users, JSON_TABLE(l_bodytext,'$.images[*]' COLUMNS (article_id))  WHERE ROWNUM=1 AND users.id=l_session_data.user_id;

        INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, display_order, created_date, user_id)
        SELECT seq_asset.nextval, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, seq_asset.currval, current_timestamp, l_session_data.user_id
          FROM JSON_TABLE(l_bodytext, '$.images[*]' COLUMNS (article_id, public_id, width, height, bytes, resource_type, format, cld_cloud_name));

        UPDATE article SET (cover_asset_id, nb_assets) = (SELECT  MIN(id), COUNT(*) FROM asset WHERE article_id=l_article_id)
         WHERE id=l_article_id;

        pck_media.getThumbnails(l_article_id,l_thumbnails);

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('thumbnails', l_thumbnails);
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;  

    /*
     **  Upload Performance data from entries accumulated by Javascript Performance API
     */       
    PROCEDURE uploadPerformance(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        n PLS_INTEGER;
    BEGIN
        INSERT /*+ ignore_row_on_dupkey_index ( performance (session_id, url)) */ 
          INTO performance(id, asset_id, session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, capture_date, user_id, ip_address)
        WITH json AS 
        (
            SELECT session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, timestamp'1970-01-01 00:00:00' + numtodsinterval(epoch,'second') capture_date, l_user_id, l_ip_address
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, epoch))
        )
        SELECT seq_performance.nextval, a.id, j.session_id, j.url, j.connection_type, j.transfersize, j.duration, j.content_type, j.window_innerwidth, j.browser, j.capture_date, l_user_id, l_ip_address
          FROM json j, asset a
         WHERE j.cld_cloud_name=a.cld_cloud_name
           AND j.resource_type=a.resource_type
           AND j.public_id=a.public_id;

        INSERT /*+ ignore_row_on_dupkey_index ( servertiming (performance_id, seq)) */ 
          INTO servertiming(performance_id, seq, name, duration, description)
        WITH json AS 
        (
            SELECT session_id, url, seq, name, duration, description
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, url,
                        NESTED  '$.servertiming[*]' columns (seq for ordinality,name,duration,description))) 
        )
        SELECT p.id, j.seq, j.name, j.duration, j.description
          FROM json j, performance p
         WHERE p.session_id=j.session_id
           AND p.url=j.url
           AND j.seq IS NOT NULL;        

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object; 

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** Get contact email address signed by Terraform together with AWS gateway url
    */ 
    PROCEDURE getTerraformParameters(pUserId IN users.id%type, pContactEmail IN website.contact_email%type, pAwsGatewayUrl IN OUT VARCHAR2, pSignatureContactEmail IN OUT VARCHAR2) IS
        l_clob CLOB;
        l_clob2 CLOB;
        l_terraform_organization_name users.terraform_organization_name%type;
        l_terraform_workspace_name users.terraform_workspace_name%type;
        l_terraform_private_key users.terraform_private_key%type;
        l_terraform_private_key_raw RAW(4000);
        l_terraform_url VARCHAR2(200);
        l_signed_data RAW(4000);
    BEGIN
        pck_api.getTerraformData(pUserId, l_terraform_organization_name, l_terraform_workspace_name, l_terraform_private_key);

        pck_api.callTerraformAPI(pUserId=>pUserId, pEndpoint=>'api/v2/organizations/' || l_terraform_organization_name || '/workspaces/' || l_terraform_workspace_name, pMethod=>'GET', pData=>l_clob);

        FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
            pck_api.callTerraformAPI(pUserId=>pUserId, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob2);
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob2, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                pAwsGatewayUrl:=C1.value || '/';
            END LOOP;
        END LOOP;

        l_terraform_private_key_raw:=utl_i18n.string_to_raw(regexp_replace(l_terraform_private_key,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\s?|\s)',''));

        l_signed_data:=DBMS_CRYPTO.SIGN(src =>utl_i18n.string_to_raw(pContactEmail), prv_key =>l_terraform_private_key_raw, pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,sign_alg =>dbms_crypto.SIGN_SHA256_RSA);

        pSignatureContactEmail:=utl_i18n.raw_to_char(utl_encode.base64_encode(l_signed_data));
    END;

    /*
    ** Build resources to open requested article in Codepen
    */
    PROCEDURE getCodepen(pArticleId IN article.id%type) IS
        l_website_id website.id%type;
        l_nav_labels LONG;
        l_email users.email%type;
        l_domain_name website.domain_name%type;
        l_font website.font%type;
        l_max_width website.max_width%type;
        l_color_text website.color_text%type;
        l_color_background website.color_background%type;
        l_color_primary website.color_primary%type;
        l_min_font_size website.min_font_size%type;
        l_min_width_px website.min_width_px%type;
        l_min_scale website.min_scale%type;
        l_max_font_size website.max_font_size%type;
        l_max_width_px website.max_width_px%type;
        l_max_scale website.max_scale%type;
        l_contact_form website_article.contact_form%type;
        l_html CLOB;
        l_css CLOB;
        l_javascript CLOB;
        l_fluid_types pck_core.fluid_type_t;
        l_fluid_css LONG;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT website_id INTO l_website_id FROM website_article WHERE article_id=pArticleId AND user_id=l_session_data.user_id;

        FOR C IN (
            SELECT wa.navigation_label, wa.article_id, COUNT(*) OVER () nb_pages
                FROM website w, website_article wa
                WHERE w.id=l_website_id
                AND w.user_id=l_session_data.user_id
                AND wa.website_id=w.id
            ORDER BY wa.display_order) 
        LOOP
            /* Build navigation labels for multi-page websites */
            IF (C.nb_pages>1) THEN
                l_nav_labels:=l_nav_labels || 
                '<a href="#" class="nav-label' || CASE WHEN C.article_id=pArticleId THEN ' selected' END  || '" data-id="' || C.article_id || '">' || C.navigation_label || '</a>';
            END IF;
        END LOOP;

        IF (l_nav_labels IS NOT NULL) THEN
            l_nav_labels:='<nav aria-label="Main Navigation">' || l_nav_labels || '</nav>';
        END IF;

        /* Build page resources */
        SELECT w.domain_name,  w.font, w.max_width,  w.color_background, w.color_text, w.color_primary, 
                w.min_font_size, w.min_width_px, w.min_scale, w.max_font_size, w.max_width_px, w.max_scale,
                a.body_html, w.css, w.javascript, wa.contact_form
          INTO l_domain_name,  l_font, l_max_width, l_color_background, l_color_text, l_color_primary,
                l_min_font_size, l_min_width_px, l_min_scale, l_max_font_size, l_max_width_px, l_max_scale,
                l_html, l_css, l_javascript, l_contact_form
          FROM website w, website_article wa, article a
         WHERE w.id=l_website_id
           AND w.user_id=l_session_data.user_id
           AND wa.website_id=w.id
           AND wa.article_id=a.id
           AND a.id=pArticleId;

        /* build html */
        l_html:=l_nav_labels || chr(10) || g_html_start || chr(10) || REPLACE(l_html,'<h1>&nbsp;</h1>',null) || chr(10) || g_html_end || chr(10);
        IF (l_contact_form='YES') THEN
            SELECT email INTO l_email FROM users WHERE id=l_session_data.user_id;
            l_html:=l_html || pck_core.buildContactForm(l_email);
        END IF;

        /* build css */
        IF (l_css IS NULL) THEN
            SELECT apex_util.blob_to_clob(file_content)
            INTO l_css
            FROM apex_application_static_files
            WHERE  application_id=l_session_data.app_id
            AND file_name='app' || l_session_data.app_id || '_deploy.css';
        END IF;

        /* build fluid types */
        l_fluid_types:=pck_core.getFluidTypes(l_min_font_size, l_min_width_px, l_min_scale, l_max_font_size, l_max_width_px, l_max_scale);
        l_fluid_css:=chr(9) || '/* Custom properties for Fluid typography and spacing */';
        FOR i IN 1..l_fluid_types.COUNT LOOP
            l_fluid_css:=l_fluid_css || chr(9) || l_fluid_types(i).property || ': ' || l_fluid_types(i).value || ';' || chr(10);
        END LOOP;

        l_css:=
        ':root {' ||chr(10) || l_fluid_css ||
            chr(9) || '--font-family: "' || l_font || '";' || chr(10) ||
            chr(9) || '--max-width: ' || l_max_width || ';' || chr(10) ||
            chr(9) || '--color-background: ' || l_color_background || ';' || chr(10) ||
            chr(9) || '--color-text: ' || l_color_text || ';' || chr(10) ||
            chr(9) || '--color-primary: ' || l_color_primary || ';' || chr(10) ||
        '}' || chr(10) || chr(10) ||
        '<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=' || REPLACE(l_font,' ','+') || '&display=swap">' || chr(10) || chr(10) 
        || g_css_js_start || chr(10) || l_css || chr(10) || g_css_js_end;

        /* build javascript */
        IF (l_javascript IS NULL) THEN
            SELECT apex_util.blob_to_clob(file_content)
            INTO l_javascript
            FROM apex_application_static_files
            WHERE  application_id=l_session_data.app_id
            AND file_name='app' || l_session_data.app_id || '_metric.js';
        END IF;
        l_javascript:=g_css_js_start || chr(10) || l_javascript || chr(10) || g_css_js_end;

        apex_json.open_object;
        apex_json.write('success', TRUE); 
        apex_json.write('domain_name', l_domain_name);
        apex_json.write('html', l_html);
        apex_json.write('css', l_css);
        apex_json.write('js', l_javascript);
        apex_json.close_object;
    END;

    /*
     **  Get requested page content (text and media)
     */    
    PROCEDURE getArticle(pArticleId IN article.id%type)  IS
        l_thumbnails CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (
            SELECT body_html, apex_util.get_since(COALESCE(updated_date, created_date)) updated_date
            FROM article
            WHERE id=pArticleId
            AND author_user_id=l_session_data.user_id)
        LOOP
            pck_media.getThumbnails(pArticleId, l_thumbnails);
            apex_json.open_object;
            apex_json.write('success', TRUE); 
            apex_json.write('html', C.body_html);
            apex_json.write('thumbnails', l_thumbnails);
            apex_json.write('updated_date', C.updated_date);
            apex_json.close_object;
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END; 

    /*
     **  Return list of articles owned by parent article id (i.e. subpages)
     **  parameter is constructed as "parent_id, article_id" where parent_id is the selected Page id
     **  article_id will be "0" if no Page selected - i.e. user clicked on caret button before clicking on a Page
     **  article_id will be the last selected subpage article id if user had selected one - in which case we highlight it in the returned list
     **  article_id may be unrelated to the parent_id if user clicked on caret button having previously clicked on some unrelated Page or subpage
     */    
    PROCEDURE getArticles(pId IN VARCHAR2)  IS
        l_content CLOB;
        l_collection_type website_article.collection_type%type;
        l_parent_id article.id%type;
        l_subarticle_id article.id%type;
        l_item VARCHAR2(500);
        l_url VARCHAR2(500);
        l_session_data pck_core.session_data_rt;
        l_subarticle_selected BOOLEAN:=FALSE;
        l_thumbnails CLOB;
        n PLS_INTEGER:=0;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_parent_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_subarticle_id:=SUBSTR(pId,INSTR(pId,',')+1);

        SELECT collection_type INTO l_collection_type FROM website_article WHERE article_id=l_parent_id;

        FOR C IN (
            SELECT art.id, NVL(art.title,'&#9888; TITLE MISSING') title, apex_util.get_since(COALESCE(art.updated_date, art.created_date)) updated_date,
                    ass.cld_cloud_name, ass.resource_type, ass.public_id, ass.format, ass.width
              FROM article art, asset ass
             WHERE art.parent_id=l_parent_id
               AND art.author_user_id=l_session_data.user_id
               AND art.cover_asset_id=ass.id(+)
             ORDER BY art.display_order)
        LOOP
            CASE l_collection_type
                WHEN 'BLOG' THEN
                    l_item:='<li data-id="' || C.id || '"><a class="with-icon nav-label subpage">';
                    IF (C.id=l_subarticle_id) THEN 
                        l_item:=l_item || '&#9656;&nbsp;';
                        l_subarticle_selected:=TRUE;
                    END IF;
                    l_item:=l_item || C.title || '</a></li>';
                WHEN 'MEDIA' THEN
                    l_item:='<li data-id="' || C.id || '" title="' || C.title || '">';
                    IF (C.cld_cloud_name IS NOT NULL) THEN
                        l_item:=l_item || '<a class="nav-label subpage"><img src="' || pck_media.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '"></a>';
                    END IF;
                    IF (C.id=l_subarticle_id) THEN
                        l_subarticle_selected:=TRUE;
                    END IF;
                    l_item:=l_item || '</li>';
            END CASE;
            l_content:=l_content || TO_CLOB(l_item);
        END LOOP;        
        
        apex_json.open_object;
        apex_json.write('success', TRUE); 
        /* Check subarticle exists within parent article - if not then return html and thumbnails of the parent */
        IF  (NOT l_subarticle_selected) AND (l_parent_id<>l_subarticle_id) THEN
            FOR C IN (SELECT body_html, apex_util.get_since(COALESCE(updated_date, created_date)) updated_date FROM article WHERE id=l_parent_id) LOOP
                apex_json.write('html', C.body_html);
                apex_json.write('updated_date', C.updated_date);
                pck_media.getThumbnails(l_parent_id, l_thumbnails);
                apex_json.write('thumbnails', l_thumbnails);
            END LOOP;
        END IF;
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END; 

    /*
     **  Insert new sub page 
     */        
    PROCEDURE insertCollection(pParentId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT id FROM article WHERE id=pParentId AND author_user_id=l_session_data.user_id) LOOP
            INSERT INTO article (id, parent_id, author_user_id, created_date) VALUES (seq_article.nextval, pParentId, l_session_data.user_id, current_timestamp);
        END LOOP;
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('article_id', seq_article.currval);
        APEX_JSON.close_object;
    END;

    /*
     **  Restore article content to prior to last login
     */        
    PROCEDURE restoreArticle(pArticleId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
        l_timestamp TIMESTAMP;
        l_body_html article.body_html%type;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT login_date INTO l_timestamp FROM user_login WHERE apex_session_id=l_session_data.session_id;
        SELECT body_html INTO l_body_html FROM article AS OF TIMESTAMP l_timestamp WHERE id=pArticleId;
        UPDATE article SET body_html=l_body_html WHERE id=pArticleId;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Procedure called by the autoSave feature of CKEditor
     */        
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        /*l_article_id article.id%type;
        l_title article.title%type;
        l_excerpt varchar2(1000);
        l_word_count article.word_count%type;
        l_body_html article.body_html%type;
        l_name users.name%type;
        l_words apex_t_varchar2;
        l_rem PLS_INTEGER;
        */
        l_session_data pck_core.session_data_rt;
        l_word_count article.word_count%type;
        TYPE t_website_id IS TABLE OF website.id%type;
        l_website_id t_website_id;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        UPDATE article t SET (t.title, t.word_count, t.body_html, t.updated_date) = 
            (
                SELECT SUBSTR(title,1,100) title, REGEXP_SUBSTR(word_count,'(\d)+') word_count, body_html, current_timestamp as updated_date
                FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (title, word_count, body_html CLOB))
            )
        WHERE t.id=pArticleId
          AND t.author_user_id=l_session_data.user_id
        RETURNING t.word_count INTO l_word_count;

        UPDATE website_article SET updated_date=current_timestamp WHERE article_id=pArticleId AND user_id=l_session_data.user_id
        RETURNING website_id BULK COLLECT INTO l_website_id;

        FORALL i IN l_website_id.FIRST..l_website_id.LAST
            UPDATE website SET updated_date=current_timestamp WHERE id=l_website_id(i) AND user_id=l_session_data.user_id;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('message', 'Saved ' || l_word_count || ' words');
        APEX_JSON.close_object;

        /*
        apex_escape.set_html_escaping_mode('E');
        l_excerpt:=dbms_lob.substr(utl_i18n.unescape_reference(apex_escape.striphtml(l_edit_text)),200,NVL(LENGTHB(l_title),0)+1);

        l_words:=apex_string.split(REPLACE(l_excerpt,CHR(10),' '),' ');
        l_excerpt:=NULL;
        FOR i IN 1..l_words.COUNT LOOP
            IF (l_words(i) IS NULL) THEN
                CONTINUE;
            END IF;
            IF (LENGTHB(l_words(i))>25) THEN
                l_excerpt:=l_excerpt || SUBSTR(l_words(i),1,25);
                EXIT;
            END IF;
            l_rem:=160 - NVL(LENGTHB(l_excerpt),0);
            IF (LENGTHB(l_words(i)) <= l_rem) THEN
                l_excerpt:=l_excerpt || l_words(i) || ' ';
            ELSE
                l_excerpt:=RTRIM(l_excerpt);
                EXIT;
            END IF;
        END LOOP;
        */

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Update website HTML / CSS / JS from the contents of an exported Codepen zip file
     */        
    PROCEDURE updateContent(pZipFile IN BLOB, pId IN VARCHAR2) IS
        l_website_id website.id%type;
        l_article_id article.id%type;
        l_domain_name website.domain_name%type;
        l_css CLOB;
        l_javascript CLOB;
        l_html CLOB;
        l_html_updated CLOB;
        l_zip BLOB:=pZipFile;
        l_files apex_zip.t_files;
        l_file BLOB;
        l_clob CLOB;
        l_message VARCHAR2(500);
        l_start PLS_INTEGER;
        l_end PLS_INTEGER;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        /* pId contains website_id,article_id */
        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_article_id:=SUBSTR(pId,INSTR(pId,',')+1);

        /* Get existing clobs */
        SELECT REPLACE(w.domain_name,'.','-'), w.css, w.javascript, a.body_html
          INTO l_domain_name, l_css, l_javascript, l_html
          FROM website w, article a
         WHERE w.id=l_website_id
           AND w.user_id=l_session_data.user_id
           AND a.id=l_article_id
           AND a.author_user_id=l_session_data.user_id;

        l_files := apex_zip.get_files(p_zipped_blob => l_zip);
        FOR i in 1 .. l_files.COUNT LOOP
            CASE l_files(i)
                WHEN l_domain_name||'/src/index.html' THEN
                    l_clob := apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name   => l_files(i)));
                    l_start:=INSTR(l_clob,pck_css_js.g_html_start);
                    l_end:=INSTR(l_clob,pck_css_js.g_html_end);
                    IF (l_end=0 OR l_start=0 OR l_end<l_start) THEN
                        l_message:=l_message || 'HTML - BOUNDARY TAGS CHANGED - no update | ';
                    ELSE
                        l_clob:=dbms_lob.substr(lob_loc=>l_clob, amount=>l_end-(l_start+LENGTH(pck_css_js.g_html_start)), offset=>l_start+LENGTH(pck_css_js.g_html_start));
                        l_clob:=LTRIM(RTRIM(l_clob,chr(10)),chr(10));
                        IF (dbms_lob.compare(l_html, l_clob)=0) THEN
                            l_message:=l_message || 'HTML - no change | ';
                        ELSE
                            UPDATE article SET body_html=l_clob, updated_date=current_timestamp WHERE id=l_article_id;
                            l_message:=l_message || 'HTML - updated successfully | ';
                            l_html_updated:=l_clob;
                        END IF;
                    END IF;            
                WHEN l_domain_name||'/src/script.js' THEN
                    l_clob := apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name   => l_files(i)));
                    IF (dbms_lob.compare(l_javascript, l_clob)=0) THEN
                        l_message:=l_message || 'JAVASCRIPT - no change | ';
                    ELSE
                        UPDATE website SET javascript=l_clob, updated_date=current_timestamp WHERE id=l_website_id;
                        l_message:=l_message || 'JAVASCRIPT - updated successfully | ';
                    END IF;
                WHEN l_domain_name||'/src/style.css' THEN
                    l_clob := apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name   => l_files(i)));
                    IF (dbms_lob.compare(l_css, l_clob)=0) THEN
                        l_message:=l_message || 'CSS - no change | ';
                    ELSE
                        UPDATE website SET css=l_clob, updated_date=current_timestamp WHERE id=l_website_id;
                        l_message:=l_message || 'CSS - updated successfully | ';
                    END IF;
                ELSE
                    NULL;
            END CASE;
        END LOOP;
        IF (l_message IS NULL) THEN
            l_message:='CAN ONLY UPLOAD FILES EXPORTED FROM CODEPEN NAMED ' || l_domain_name || '.zip';
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', l_message);
        IF (l_html_updated IS NOT NULL) THEN
            apex_json.write('html_updated', l_html_updated);
        END IF;
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Reorder rows in specified table - i.e. update column DISPLAY_ORDER
     */
    PROCEDURE reorder(pId IN NUMBER, pBodyText IN CLOB) IS
        l_table_name VARCHAR2(30);
        l_dbid_string LONG;

        TYPE t_table_id IS RECORD(
            id NUMBER,
            display_order NUMBER);
        TYPE tt_table_id IS TABLE OF t_table_id;
        l_table_ids tt_table_id; 

        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT table_name, dbid_string 
          INTO l_table_name, l_dbid_string 
          FROM users, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (table_name, dbid_string))
         WHERE users.id=l_session_data.user_id;

        SELECT column_value, rownum 
          BULK COLLECT INTO l_table_ids
          FROM TABLE(apex_string.split(l_dbid_string,':'));

        CASE l_table_name
            WHEN 'website_article' THEN
                FORALL i IN l_table_ids.first .. l_table_ids.last
                UPDATE website_article 
                   SET display_order=l_table_ids(i).display_order 
                 WHERE website_id = pId
                   AND article_id=l_table_ids(i).id;

            WHEN 'article' THEN
                FORALL i IN l_table_ids.first .. l_table_ids.last
                UPDATE article 
                   SET display_order=l_table_ids(i).display_order 
                 WHERE parent_id = pId
                   AND id=l_table_ids(i).id;

            WHEN 'asset' THEN
                FORALL i IN l_table_ids.first .. l_table_ids.last
                UPDATE asset 
                   SET display_order=l_table_ids(i).display_order 
                 WHERE id=l_table_ids(i).id;
                --
                UPDATE article SET cover_asset_id=l_table_ids(1).id WHERE id=pId;
        END CASE;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** Logout authenticated session
    */
    PROCEDURE signout IS
        session_ended EXCEPTION;
        PRAGMA EXCEPTION_INIT(session_ended,-20987);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        BEGIN 
            apex_session.delete_session(p_session_id=>l_session_data.session_id);
            EXCEPTION WHEN session_ended THEN NULL;
        END;
        /*
        owa_cookie.send(
            name => 'ORA_WWV_APP_101',
            value => null,
            expires => sysdate -1, 
            path =>'ords' );
        */
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;     

END;
/