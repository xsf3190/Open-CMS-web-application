CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS" is
    --
    PROCEDURE daily_job;
    --
    PROCEDURE deleteAll(pUserId IN users.id%type);
    --
    PROCEDURE deleteArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE deleteAsset(pId IN asset.id%type);
    --
    PROCEDURE deployInfrastructure;
    --
    PROCEDURE deployWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE getContent(pWebsiteId IN website.id%type);
    --
    FUNCTION getPageContent RETURN CLOB;
    --
    PROCEDURE getCldDetails(pArticleId IN article.id%type);
    --
    PROCEDURE getCldSignature(pParamsToSign IN CLOB);
    --
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2;
    --
    PROCEDURE getArticle(pArticleId IN article.id%type);
    --
    PROCEDURE getPerformance;
    --
    PROCEDURE getThumbnails(pArticleId IN article.id%type);
    --
    PROCEDURE getUsage(pUserId IN users.id%type DEFAULT NULL, pUsageDate IN DATE DEFAULT NULL);
    --
    PROCEDURE getWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE insertArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE log(pMsg IN VARCHAR2);
    --
    PROCEDURE log(pMsg IN OUT NOCOPY CLOB);
    --
    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2);
    --
    PROCEDURE manual_restore(pPassword IN VARCHAR2);
    --
    PROCEDURE publishArticle(pArticleId IN article.id%type);
    --
    PROCEDURE reorderAssets(pBodyText IN CLOB);
    --
    PROCEDURE setClientInfo(pBodyText IN CLOB);
    --
    PROCEDURE signout;
    --
    PROCEDURE unpublishArticle(pArticleId IN article.id%type);
    --
    PROCEDURE updateAsset(pBodyText IN CLOB, pId IN asset.id%type);
    --
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE uploadWebVitals(pBodyText IN CLOB);
    --
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB);
    --
    PROCEDURE uploadPerformance(pBodyText IN CLOB);
    --
    PROCEDURE updateUser;
    --    
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS" is
    
    g_cloudinary_svg LONG:='<svg id="cld-main-logo" viewBox="0 0 500 96.77">
      <title>Cloudinary Logo</title>
      <defs>
        <style>
          .cls-1 {
            fill: #3448c5;
          }
        </style>
      </defs>
      <g id="Layer_2" data-name="Layer 2">
        <g id="Layer_1-2" data-name="Layer 1">
          <path class="cls-1" d="M160.53,30.41a17.14,17.14,0,0,1,13.56,6.7.69.69,0,0,0,1,.11l5.71-4.55a.71.71,0,0,0,.11-1,26,26,0,0,0-20.61-10.13c-14.91,0-27,12.85-27,28.65s12.13,28.65,27,28.65A25.85,25.85,0,0,0,180.9,68.72a.69.69,0,0,0-.12-1l-5.7-4.5a.71.71,0,0,0-1,.11A17.26,17.26,0,0,1,160.53,70c-10.19,0-18.16-8.7-18.16-19.79S150.34,30.41,160.53,30.41Z"></path>
          <path class="cls-1" d="M188.27,19.91h7.16a.71.71,0,0,1,.71.71V77.4a.7.7,0,0,1-.7.7h-7.16a.71.71,0,0,1-.71-.71V20.62A.7.7,0,0,1,188.27,19.91Z"></path>
          <path class="cls-1" d="M220.54,39.55c-9.49,0-19.09,6.72-19.09,19.57,0,11.29,8.21,19.81,19.09,19.81s19.17-8.52,19.17-19.81S231.47,39.55,220.54,39.55Zm10.53,19.57c0,6.52-4.53,11.44-10.53,11.44S210.1,65.64,210.1,59.12s4.49-11.2,10.44-11.2S231.07,52.73,231.07,59.12Z"></path>
          <path class="cls-1" d="M278.3,40.37h-7.16a.7.7,0,0,0-.71.7v19c0,7.42-5.12,10.05-9.51,10.05-3.88,0-7.79-2.93-7.79-9.48V41.07a.7.7,0,0,0-.71-.7h-7.16a.7.7,0,0,0-.7.7v20.5c0,11.25,5.09,17.44,14.34,17.44,3.36,0,8.8-1.93,10.84-6.19l.69.14V77.4a.71.71,0,0,0,.71.71h7.16a.71.71,0,0,0,.71-.71V41.07A.7.7,0,0,0,278.3,40.37Z"></path>
          <path class="cls-1" d="M322.27,19.91H315.1a.7.7,0,0,0-.7.71V46l-.44-.7c-2.18-3.51-6.87-5.78-11.95-5.78-8.76,0-17.62,6.75-17.62,19.65,0,11.25,7.61,19.73,17.69,19.73,3.84,0,9.25-1.54,11.88-5.86l.44-.72V77.4a.7.7,0,0,0,.7.71h7.17a.7.7,0,0,0,.7-.71V20.62A.7.7,0,0,0,322.27,19.91Zm-8,39.21a11,11,0,0,1-10.75,11.36c-5.86,0-10.45-5-10.45-11.36s4.59-11.2,10.45-11.2A11,11,0,0,1,314.24,59.12Z"></path>
          <path class="cls-1" d="M333,40.37h7.16a.7.7,0,0,1,.7.7V77.4a.7.7,0,0,1-.7.7H333a.71.71,0,0,1-.71-.71V41.07A.71.71,0,0,1,333,40.37Z"></path>
          <path class="cls-1" d="M336.61,21.06a5.57,5.57,0,0,0-5.69,5.57,5.64,5.64,0,0,0,5.69,5.58,5.54,5.54,0,0,0,5.61-5.58A5.48,5.48,0,0,0,336.61,21.06Z"></path>
          <path class="cls-1" d="M370.35,39.55c-3.14,0-8.72,1.69-10.85,6.19l-.69-.14V41.07a.7.7,0,0,0-.71-.7h-7.16a.7.7,0,0,0-.7.7V77.4a.7.7,0,0,0,.7.71h7.16a.71.71,0,0,0,.71-.71v-19c0-7.36,5.12-10,9.51-10,3.88,0,7.79,2.91,7.79,9.4V77.4a.71.71,0,0,0,.71.71H384a.71.71,0,0,0,.71-.71V56.91C384.69,45.72,379.59,39.55,370.35,39.55Z"></path>
          <path class="cls-1" d="M427.48,40.37h-7.16a.7.7,0,0,0-.71.7v5l-.43-.7c-2.19-3.51-6.88-5.78-12-5.78-8.75,0-17.62,6.75-17.62,19.65,0,11.25,7.61,19.73,17.7,19.73,3.83,0,9.24-1.54,11.88-5.86l.43-.72V77.4a.71.71,0,0,0,.71.71h7.16a.7.7,0,0,0,.7-.71V41.07A.7.7,0,0,0,427.48,40.37Zm-8,18.75A11,11,0,0,1,408.7,70.48c-5.86,0-10.44-5-10.44-11.36s4.58-11.2,10.44-11.2A11,11,0,0,1,419.46,59.12Z"></path>
          <path class="cls-1" d="M460.15,40.5a13.66,13.66,0,0,0-5.14-1c-4.76,0-8.22,2.85-10,8.25l-.64-.09V41.07a.7.7,0,0,0-.71-.7h-7.16a.7.7,0,0,0-.71.7V77.4a.71.71,0,0,0,.71.71h7.24a.7.7,0,0,0,.7-.71V65c0-14.8,5.91-17,9.44-17a11,11,0,0,1,4.33.9.72.72,0,0,0,.61,0,.7.7,0,0,0,.36-.48l1.42-7.11A.71.71,0,0,0,460.15,40.5Z"></path>
          <path class="cls-1" d="M499.88,40.68a.69.69,0,0,0-.59-.31h-7.71a.72.72,0,0,0-.66.45L481.59,65l-9.42-24.18a.72.72,0,0,0-.66-.45h-7.86a.69.69,0,0,0-.58.31.7.7,0,0,0-.07.66l14,34.38-7.73,20.09a.71.71,0,0,0,.66,1h7.5a.69.69,0,0,0,.65-.45l21.86-55A.69.69,0,0,0,499.88,40.68Z"></path>
          <path class="cls-1" d="M97.91,28.11A40.38,40.38,0,0,0,59.73,0,39.62,39.62,0,0,0,24.6,20.87a29.88,29.88,0,0,0-7.21,56.56l.75.34h.05v-8.5a22.29,22.29,0,0,1,9.29-41.16l2.1-.22L30.5,26A32.15,32.15,0,0,1,59.73,7.57a32.7,32.7,0,0,1,31.55,25L92,35.43l3,0a18.53,18.53,0,0,1,18.15,18.46c0,7.05-4.07,12.82-11,15.74v8.06l.5-.16c11.14-3.65,18.06-12.71,18.06-23.64A26.19,26.19,0,0,0,97.91,28.11Z"></path>
          <path class="cls-1" d="M45.07,76.79l1.66,1.66a.33.33,0,0,1-.23.56H33.4a6,6,0,0,1-6-6V47.57a.33.33,0,0,0-.33-.33H24.27a.33.33,0,0,1-.24-.56L35.15,35.56a.33.33,0,0,1,.47,0L46.73,46.68a.33.33,0,0,1-.23.56H43.66a.34.34,0,0,0-.34.33v25A6,6,0,0,0,45.07,76.79Z"></path>
          <path class="cls-1" d="M69.64,76.79l1.67,1.66a.33.33,0,0,1-.24.56H58a6,6,0,0,1-6-6V54a.34.34,0,0,0-.33-.34H48.84a.33.33,0,0,1-.23-.56L59.72,42a.33.33,0,0,1,.47,0L71.31,53.08a.33.33,0,0,1-.24.56H68.23a.34.34,0,0,0-.33.34V72.57A6,6,0,0,0,69.64,76.79Z"></path>
          <path class="cls-1" d="M94.22,76.79l1.66,1.66a.33.33,0,0,1-.23.56H82.54a6,6,0,0,1-6-6V60.38a.33.33,0,0,0-.33-.33H73.41a.33.33,0,0,1-.23-.57L84.3,48.37a.32.32,0,0,1,.46,0L95.88,59.48a.33.33,0,0,1-.23.57H92.8a.33.33,0,0,0-.33.33V72.57A6,6,0,0,0,94.22,76.79Z"></path>
        </g>
      </g>
    </svg>';
 
     g_oracle_svg LONG:='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 231 30" preserveAspectRatio="xMinYMid"><path 
     d="M99.61,19.52h15.24l-8.05-13L92,30H85.27l18-28.17a4.29,4.29,0,0,1,7-.05L128.32,30h-6.73l-3.17-5.25H103l-3.36-5.23m69.93,5.23V0.28h-5.72V27.16a2.76,2.76,0,0,0,.85,2,2.89,2.89,0,0,0,2.08.87h26l3.39-5.25H169.54M75,20.38A10,10,0,0,0,75,.28H50V30h5.71V5.54H74.65a4.81,4.81,0,0,1,0,9.62H58.54L75.6,30h8.29L72.43,20.38H75M14.88,30H32.15a14.86,14.86,0,0,0,0-29.71H14.88a14.86,14.86,0,1,0,0,29.71m16.88-5.23H15.26a9.62,9.62,0,0,1,0-19.23h16.5a9.62,9.62,0,1,1,0,19.23M140.25,30h17.63l3.34-5.23H140.64a9.62,9.62,0,1,1,0-19.23h16.75l3.38-5.25H140.25a14.86,14.86,0,1,0,0,29.71m69.87-5.23a9.62,9.62,0,0,1-9.26-7h24.42l3.36-5.24H200.86a9.61,9.61,0,0,1,9.26-7h16.76l3.35-5.25h-20.5a14.86,14.86,0,0,0,0,29.71h17.63l3.35-5.23h-20.6" 
     transform="translate(-0.02 0)" style="fill:#C74634"/></svg>';
     
    g_facebook_svg LONG:='<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 40 40" style="enable-background:new 0 0 40 40;" xml:space="preserve">
<style type="text/css">
	.st0{fill:url(#SVGID_1_);}
	.st1{fill:#FFFFFF;}
</style>
<linearGradient id="SVGID_1_" gradientUnits="userSpaceOnUse" x1="-277.375" y1="406.6018" x2="-277.375" y2="407.5726" gradientTransform="matrix(40 0 0 -39.7778 11115.001 16212.334)">
	<stop  offset="0" style="stop-color:#0062E0"/>
	<stop  offset="1" style="stop-color:#19AFFF"/>
</linearGradient>
<path class="st0" d="M16.7,39.8C7.2,38.1,0,29.9,0,20C0,9,9,0,20,0s20,9,20,20c0,9.9-7.2,18.1-16.7,19.8l-1.1-0.9h-4.4L16.7,39.8z"
	/>
<path class="st1" d="M27.8,25.6l0.9-5.6h-5.3v-3.9c0-1.6,0.6-2.8,3-2.8h2.6V8.2c-1.4-0.2-3-0.4-4.4-0.4c-4.6,0-7.8,2.8-7.8,7.8V20
	h-5v5.6h5v14.1c1.1,0.2,2.2,0.3,3.3,0.3c1.1,0,2.2-0.1,3.3-0.3V25.6H27.8z"/>
</svg>';

    g_google_svg LONG:='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 186.69 190.5" xmlns:v="https://vecta.io/nano"><g transform="translate(1184.583 765.171)"><path clip-path="none" mask="none" d="M-1089.333-687.239v36.888h51.262c-2.251 11.863-9.006 21.908-19.137 28.662l30.913 23.986c18.011-16.625 28.402-41.044 28.402-70.052 0-6.754-.606-13.249-1.732-19.483z" fill="#4285f4"/><path clip-path="none" mask="none" d="M-1142.714-651.791l-6.972 5.337-24.679 19.223h0c15.673 31.086 47.796 52.561 85.03 52.561 25.717 0 47.278-8.486 63.038-23.033l-30.913-23.986c-8.486 5.715-19.31 9.179-32.125 9.179-24.765 0-45.806-16.712-53.34-39.226z" fill="#34a853"/><path clip-path="none" mask="none" d="M-1174.365-712.61c-6.494 12.815-10.217 27.276-10.217 42.689s3.723 29.874 10.217 42.689c0 .086 31.693-24.592 31.693-24.592-1.905-5.715-3.031-11.776-3.031-18.098s1.126-12.383 3.031-18.098z" fill="#fbbc05"/><path d="M-1089.333-727.244c14.028 0 26.497 4.849 36.455 14.201l27.276-27.276c-16.539-15.413-38.013-24.852-63.731-24.852-37.234 0-69.359 21.388-85.032 52.561l31.692 24.592c7.533-22.514 28.575-39.226 53.34-39.226z" fill="#ea4335" clip-path="none" mask="none"/></g></svg>';
    
    
    /*
     ** CLOB and VARCHAR2 signatures for log procedure
     */
     
     gWidthThumbnail CONSTANT INTEGER:=360;
     

    PROCEDURE log(pMsg IN OUT NOCOPY CLOB) IS PRAGMA AUTONOMOUS_TRANSACTION;
        k_calling_package constant varchar2(128) := utl_call_stack.subprogram(2)(1);
        k_calling_subprog constant varchar2(128) := utl_call_stack.subprogram(2)(2);
    BEGIN
        INSERT INTO log(procedure_name, message) VALUES (k_calling_package || '.' || k_calling_subprog, pMsg);
        COMMIT;
    END;
    
    PROCEDURE log(pMsg IN VARCHAR2) IS PRAGMA AUTONOMOUS_TRANSACTION;
        k_calling_package constant varchar2(128) := utl_call_stack.subprogram(2)(1);
        k_calling_subprog constant varchar2(128) := utl_call_stack.subprogram(2)(2);    
    BEGIN
        INSERT INTO log(procedure_name, message) VALUES (k_calling_package || '.' || k_calling_subprog, pMsg);
        COMMIT;
    END;
    
    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2) IS
    BEGIN
        ROLLBACK;
        log(pCode || '-' || pErrMsg || '-' || dbms_utility.format_error_stack||dbms_utility.format_error_backtrace);
    END;

    PROCEDURE log_error(pCode IN NUMBER, pErrMsg IN VARCHAR2, pAjax IN BOOLEAN) IS
    BEGIN
        log_error(pCode, pErrMsg);
        --log(pCode || '-' || pErrMsg || '-' || dbms_utility.format_error_stack||dbms_utility.format_error_backtrace);
        IF (pAjax) THEN
            apex_json.open_object; 
            apex_json.write('success', FALSE); 
            apex_json.write('sqlcode', sqlcode); 
            apex_json.write('sqlerrm', sqlerrm); 
            apex_json.close_object;
        END IF;
    END;
    
    /*
    ** Run restore process manually. Need to specify the last data pump export schema encryption password.
    */
    PROCEDURE manual_restore(pPassword IN VARCHAR2)  IS 
        l_restore_files varchar2(1000):='GRANT.OBJECT_GRANT:GRANT.SYSTEM_GRANT:EXPORT_SCHEMA.EXAMPLE.dmp:APEX_APPLICATION.100';
    BEGIN
        
        FOR C IN (SELECT github_token, github_repos_owner, github_repos, u.email, w.workspace_name 
              FROM users u, apex_workspace_developers w 
             WHERE w.first_schema_provisioned=sys_context('userenv','current_schema')
               AND w.is_admin='Yes'
               AND w.email=u.email) 
        LOOP
            EXECUTE IMMEDIATE q'{
                BEGIN pck_restore.submit_job@RESTORE_LINK(
                    pGithub_files=>:B1, 
                    pGithub_token=>:B2, 
                    pGithub_repos_owner=>:B3, 
                    pGithub_repos=>:B4,
                    pPassword=>:B5,
                    pEmail=>:B6,
                    pWorkspace=>:B7,
                    pSchema=>:B8); END;}' 
                USING l_restore_files, C.github_token, C.github_repos_owner, C.github_repos, pPassword, C.email, C.workspace_name, sys_context('userenv','current_schema');
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
    
    /*
    ** Generate random 16 character password string. Used in order to create encrypted schema export dumpfile
    */
    FUNCTION generate_password(
        no_of_digits             in number DEFAULT 5,
        no_of_special_characters in number DEFAULT 3,
        no_of_lower              in number DEFAULT 4,
        no_of_upper              in number DEFAULT 4
        ) return varchar2
    IS
        password VARCHAR2(4000);
        digits   CONSTANT VARCHAR2(10) := '0123456789';
        lower    CONSTANT VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';
        upper    CONSTANT VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        special  CONSTANT VARCHAR2(30) := '!"£$%^*()-_=+{}[]<>,\|/?;:@#';
    BEGIN
        SELECT LISTAGG(letter, NULL) WITHIN GROUP (ORDER BY DBMS_RANDOM.VALUE)
        INTO   password
        FROM   (
        SELECT SUBSTR(
                 digits,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(digits) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_digits
        UNION ALL
        SELECT SUBSTR(
                 lower,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(lower) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_lower
        UNION ALL
        SELECT SUBSTR(
                 upper,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(upper) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_upper
        UNION ALL
        SELECT SUBSTR(
                 special,
                 FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(special) + 1)),
                 1
               ) AS letter
        FROM   DUAL
        CONNECT BY LEVEL <= no_of_special_characters
        );
    
        RETURN password;
    END;    
    
    /*
    **  Daily job run by dbms_scheduler
    */
    PROCEDURE daily_job IS 
        l_github_token users.github_token%type; 
        l_github_repos_owner users.github_repos_owner%type;
        l_github_repos users.github_repos%type;
        l_email users.email%type;
        l_email_sender users.email%type;
        l_password VARCHAR2(20);
        l_github_filename VARCHAR2(100);
        l_workspace_name apex_workspace_developers.workspace_name%type;
        l_restore_files VARCHAR2(4000);
    BEGIN
        /*
        ** 1. Get Cloudinary usage for all subscribers 
        */
        getUsage;
        
        /*
        **  2. Backup to Github
        **     Github token and repository details are maintained in USERS table
        **     Email address of Apex Admin user must match for this to work
        **     Complex password auto-generated to encrypt schema export dump file
        */
       
        SELECT github_token, github_repos_owner, github_repos, u.email, w.workspace_name 
          INTO l_github_token, l_github_repos_owner, l_github_repos, l_email, l_workspace_name
          FROM users u, apex_workspace_developers w 
         WHERE w.first_schema_provisioned=sys_context('userenv','current_schema')
           AND w.is_admin='Yes'
           AND w.email=u.email;
           
        SELECT email 
          INTO l_email_sender
          FROM users 
         WHERE approved_sender_ind='Y';
        
        l_password:=generate_password();
        pck_backup.github_backup(l_github_token, l_github_repos_owner, l_github_repos, l_email_sender, l_email, l_password, l_restore_files);
    
        /*
        **  3. Restore from Github into Restore database, where a workspace with same name as current schema must exist.
        **     We use dynamic sql for this so that this package compiles after being restored - nb: DB LINKs are not included in any schema export
        **     To avoid ORA-02074 we submit job on restore database remotely using database link
        **     "l_restore_files" is separated list of github file names to be restored
        */
        
        log('About to submit job on restore server to import Github backup files - ' || l_restore_files);
        EXECUTE IMMEDIATE q'{
            BEGIN pck_restore.submit_job@RESTORE_LINK(
                pGithub_files=>:B1, 
                pGithub_token=>:B2, 
                pGithub_repos_owner=>:B3, 
                pGithub_repos=>:B4,
                pPassword=>:B5,
                pEmailSender=>:B6,
                pEmail=>:B7,
                pWorkspace=>:B8,
                pSchema=>:B9); END;}' USING l_restore_files, l_github_token, l_github_repos_owner, l_github_repos, l_password, l_email_sender, l_email, l_workspace_name,sys_context('userenv','current_schema');
                
        INSERT INTO metrics (id,log_date,nb_assets,bytes,nb_articles,word_count,total_credits,credits_remaining,total_used,max_size)
        WITH metrics AS 
            (
                SELECT nb_assets, bytes, nb_articles, word_count  
                  FROM (SELECT COUNT(*) nb_assets, SUM(bytes) bytes FROM asset), (SELECT COUNT(*) nb_articles, SUM(word_count) word_count FROM article)
            ),
            credits AS
            (
                SELECT SUM(credits_limit) total_credits, SUM(credits_limit - (credits_limit*(used_percent/100))) credits_remaining
                FROM usage 
                WHERE usage_date=(SELECT MAX(usage_date) FROM usage)
            ),
            db1 AS
            (
                SELECT total_used_adb1+total_used_adb2 total_used FROM (SELECT SUM(bytes) total_used_adb1 FROM dba_segments WHERE tablespace_name<>'SAMPLESCHEMA'), (SELECT SUM(bytes) total_used_adb2 FROM dba_segments@restore_link WHERE tablespace_name<>'SAMPLESCHEMA')
            ),
            db2 AS
            (
                SELECT max_size_adb1+max_size_adb2 max_size FROM (SELECT max_size max_size_adb1 FROM v$pdbs), (SELECT max_size max_size_adb2 FROM v$pdbs@restore_link)
            )            
        SELECT SEQ_METRICS.nextval as id, current_timestamp as log_date, met.nb_assets, met.bytes, met.nb_articles, met.word_count, cr.total_credits, cr.credits_remaining, db1.total_used, db2.max_size
          FROM metrics met, credits cr, db1, db2;
          
        COMMIT;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;

    
    PROCEDURE getApexSession(pAppId IN OUT NUMBER, pSessionId IN OUT NUMBER, pPageId IN OUT NUMBER) IS
        l_parts apex_t_varchar2;
    BEGIN
        l_parts:=apex_string.split(OWA_UTIL.get_cgi_env('Apex-Session'),',');
        pAppId:=l_parts(1);
        pSessionId:=l_parts(2);
        pPageId:=l_parts(3);
    END;
    
    /*
    ** Return id of authenticated user for the session as 
    */
    FUNCTION getUserId(pSaveCookie BOOLEAN DEFAULT FALSE) RETURN users.id%type IS
        l_names owa_cookie.vc_arr;
        l_vals owa_cookie.vc_arr;
        l_num_vals INTEGER;
        
        l_app_id NUMBER;
        l_session_id users.apex_session_id%type;
        l_page_id NUMBER;
        l_apex_cookie_value users.apex_cookie_value%type;
        l_user_id users.id%type;
    BEGIN
        l_user_id:=NULL;
        
        getApexSession(l_app_id, l_session_id, l_page_id);
        
        FOR C IN (
            SELECT u.id, apex_cookie_value
              FROM apex_workspace_sessions s, users u
             WHERE s.apex_session_id=l_session_id
               AND s.user_name=u.email )
        LOOP
            /* We have an authenticated session */
            l_user_id:=C.id;
            
            /* Additional check that session cookie is valid */
            owa_cookie.get_all(names => l_names, vals => l_vals, num_vals => l_num_vals);
            FOR i IN 1..l_names.COUNT LOOP
                IF (l_names(i)='ORA_WWV_APP_' || l_app_id) THEN
                    IF (pSaveCookie) THEN
                        UPDATE users SET apex_cookie_value=l_vals(i) WHERE id=l_user_id;
                    ELSIF (C.apex_cookie_value<>l_vals(i)) THEN
                        RAISE_APPLICATION_ERROR(-20000,'SESSION COOKIE VALUE HAS CHANGED');
                    END IF;
                END IF;
            END LOOP;            
        END LOOP;
        
        IF (l_user_id IS NULL AND l_page_id=2) THEN
            RAISE_APPLICATION_ERROR(-20000,'YOUR SESSION HAS EXPIRED');
        END IF;

        RETURN (l_user_id);
    END;
    
    /*
    ** Return RESTful API url
    */
    FUNCTION getRestUrl RETURN VARCHAR2 IS
        l_rest_url VARCHAR2(200);
    BEGIN
        SELECT apex_util.host_url() || '/ords/' || s.pattern || m.uri_prefix
          INTO l_rest_url
          FROM user_ords_schemas s, user_ords_modules m
         WHERE s.parsing_schema=sys_context('userenv','current_schema')
           AND m.name='public';
           
        RETURN (l_rest_url);
    END;
    
    /*
    ** Build and deploy infrastructure through Terraform by submitting Github action. Do this once and each time recycle our public key that signs a website's contact email
    */    
    PROCEDURE deployInfrastructure IS
        l_clob CLOB;
        l_admin_user_id users.id%type;
        l_json JSON_OBJECT_T;
        l_action JSON_OBJECT_T;
    BEGIN
        
        /* Get the admin user with Github token and the public key required to verify signed contact email addresses */
        SELECT id INTO l_admin_user_id 
          FROM users 
         WHERE github_repos_owner IS NOT NULL 
           AND github_token IS NOT NULL 
           AND private_key IS NOT NULL 
           AND public_key IS NOT NULL;
        
        
        FOR C IN (SELECT u.github_repos_owner, u.github_repos_owner||'/DEPLOY' deploy_repo, u.github_token, u.terraform_token,
                         replace(utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(public_key))),chr(13)||chr(10),null) public_key
                    FROM users u
                   WHERE u.id=l_admin_user_id) 
        LOOP
            apex_web_service.g_request_headers(1).name := 'Accept';
            apex_web_service.g_request_headers(1).value := 'application/vnd.github+json';
            apex_web_service.g_request_headers(2).name := 'Authorization';
            apex_web_service.g_request_headers(2).value := 'Bearer ' || C.github_token;
            apex_web_service.g_request_headers(3).name := 'User-Agent';
            apex_web_service.g_request_headers(3).value := C.github_repos_owner;
            
            /* trigger the deployment using Githib actions */          
            l_json:=new JSON_OBJECT_T;
            l_json.put('event_type', 'trigger_build_infra');
            
            l_action:=new JSON_OBJECT_T;
            l_action.put('from_email', 'automatic@m93.nl');
            l_action.put('public_key', C.public_key);
            l_action.put('terraform_token', C.terraform_token);
            l_json.put('client_payload', l_action);
            
            log('deployInfrastructure - JSON for dispatching Github Action:'||l_json.stringify);
            
            l_clob := apex_web_service.make_rest_request(p_url=>'https://api.github.com/repos/'|| C.deploy_repo || '/dispatches' ,p_http_method=>'POST',p_body=>l_json.stringify);
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;    
    
    /*
    ** Build and deploy website to Netlify by submitting Github action
    */    
    PROCEDURE deployWebsite(pWebsiteId IN website.id%type) IS
        l_clob CLOB;
        l_website_user_id website.user_id%type;
        l_admin_user_id users.id%type;
        l_repo_id INTEGER;
        l_deploy_key_id VARCHAR2(40);
        l_json JSON_OBJECT_T;
        l_repo JSON_OBJECT_T;
        l_action JSON_OBJECT_T;
        l_site clob;
    BEGIN
        /* get authenticated user that owns website to be deployed */
        l_website_user_id:=getUserId();
        
        /* Get the admin user with Netlify and Github tokens as well as private key required to sign the contact_email for the website */
        SELECT id INTO l_admin_user_id 
          FROM users 
         WHERE github_repos_owner IS NOT NULL 
           AND github_token IS NOT NULL 
           AND netlify_token IS NOT NULL 
           AND netlify_installation_id IS NOT NULL
           AND private_key IS NOT NULL 
           AND public_key IS NOT NULL;
        
        
        FOR C IN (SELECT u.github_repos_owner, u.github_repos_owner||'/DEPLOY' deploy_repo, u.github_token, u.netlify_token, u.netlify_installation_id, 
                         w.name, w.template, w.netlify_site_id, w.contact_email
                    FROM users u, website w
                   WHERE u.id=l_admin_user_id
                     AND w.id=pWebsiteId
                     AND w.user_id=l_website_user_id) 
        LOOP
            /*
            ** 1. Create Netlify Site with deployment id if not already exists
            ** 2. Trigger Github action build
            */
            apex_web_service.g_request_headers(1).name := 'Accept';
            apex_web_service.g_request_headers(1).value := 'application/vnd.github+json';
            apex_web_service.g_request_headers(2).name := 'Authorization';
            apex_web_service.g_request_headers(2).value := 'Bearer ' || C.github_token;
            apex_web_service.g_request_headers(3).name := 'User-Agent';
            apex_web_service.g_request_headers(3).value := C.github_repos_owner;
            
            IF (C.netlify_site_id IS NULL) THEN
                log('Creating Netlify site for '||C.name);
                /* get id of the common DEPLOY repository */
                l_clob := apex_web_service.make_rest_request(p_url=>'https://api.github.com/repos/'|| C.deploy_repo ,p_http_method=>'GET');
                FOR C1 IN (SELECT id FROM JSON_TABLE(l_clob, '$' COLUMNS (id))) LOOP
                    l_repo_id:=C1.id;
                END LOOP;
                log('l_repo_id:'||l_repo_id);

                /* Setup connect to Netlify */
                apex_web_service.clear_request_headers;
                
                apex_web_service.g_request_headers(1).name := 'Authorization';
                apex_web_service.g_request_headers(1).value := 'Bearer ' || C.netlify_token;   
                apex_web_service.g_request_headers(2).name := 'Content-Type';
                apex_web_service.g_request_headers(2).value := 'application/json';
                
                /* get netlify deploy id */
                l_clob := apex_web_service.make_rest_request(p_url=>'https://api.netlify.com/api/v1/deploy_keys',p_http_method=>'POST');
                FOR C1 IN (SELECT id FROM JSON_TABLE(l_clob, '$' COLUMNS (id))) LOOP
                    l_deploy_key_id:=C1.id;
                END LOOP;
                log('l_deploy_key_id:'||l_deploy_key_id);
                
                /* create JSON payload for new Netlify site */
                l_json:=new JSON_OBJECT_T;
                l_json.put('name', C.name);
                
                l_repo:=new JSON_OBJECT_T;
                l_repo.put('provider', 'github');
                l_repo.put('repo_type', 'git');
                l_repo.put('repo_id', l_repo_id);
                l_repo.put('repo', C.deploy_repo);
                l_repo.put('repo_branch', 'main');
                l_repo.put('private', FALSE);
                l_repo.put('deploy_key_id', l_deploy_key_id);
                l_repo.put('installation_id', C.netlify_installation_id);
                l_repo.put('base', C.name);   
                l_json.put('repo', l_repo);
                --l_site:=l_json.to_clob;
                
                /* Create Netlify site and store the site_id in website table */
                log('l_site:'||l_json.stringify);
                l_clob := apex_web_service.make_rest_request(p_url=>'https://api.netlify.com/api/v1/sites', p_http_method=>'POST', p_body=>l_json.stringify);
                log('Response from POST api.netlify.com/api/v1/sites:'||TO_CHAR(l_clob));
                FOR C1 IN (SELECT site_id FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id))) LOOP
                    UPDATE website SET netlify_site_id = C1.site_id WHERE id=pWebsiteId;
                END LOOP;

                apex_web_service.g_request_headers(1).name := 'Accept';
                apex_web_service.g_request_headers(1).value := 'application/vnd.github+json';
                apex_web_service.g_request_headers(2).name := 'Authorization';
                apex_web_service.g_request_headers(2).value := 'Bearer ' || C.github_token;
                apex_web_service.g_request_headers(3).name := 'User-Agent';
                apex_web_service.g_request_headers(3).value := C.github_repos_owner;
            END IF;
            
            /* trigger the deployment using Githib actions */          
            l_json:=new JSON_OBJECT_T;
            l_json.put('event_type', 'trigger_build');
            
            l_action:=new JSON_OBJECT_T;
            l_action.put('build_path', C.name);
            l_action.put('template', C.template);
            l_action.put('fetch_url', getRestUrl() || 'content/' || pWebsiteId);               
            l_json.put('client_payload', l_action);
            
            log('JSON for dispatching Github Action:'||l_json.stringify);
            
            l_clob := apex_web_service.make_rest_request(p_url=>'https://api.github.com/repos/'|| C.deploy_repo || '/dispatches' ,p_http_method=>'POST',p_body=>l_json.stringify);
        END LOOP;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;    
        
    
    PROCEDURE getCldDetails(pArticleId IN article.id%type) IS
        l_user_id users.id%type;
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size usage.image_max_size%type;
        l_video_max_size usage.video_max_size%type;
        l_cldapikey VARCHAR2(1);
    BEGIN      
        l_user_id:=getUserId();
        
        /* get Cloudinary details either of logged on user of the hosting user */
        BEGIN
            SELECT cld_cloud_name, cld_api_key, image_max_size, video_max_size
              INTO l_cld_cloud_name, l_cld_api_key, l_image_max_size, l_video_max_size
              FROM 
                    (
                        SELECT ROW_NUMBER() OVER (ORDER BY usage_date DESC) rn, users.cld_cloud_name, users.cld_api_key, usage.image_max_size, usage.video_max_size
                        FROM users, usage 
                        WHERE users.id=l_user_id
                        AND usage.user_id=users.id
                    ) 
             WHERE rn=1;
             l_cldapikey:='Y';
             
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    SELECT cld_cloud_name, cld_api_key, image_max_size, video_max_size
                      INTO l_cld_cloud_name, l_cld_api_key, l_image_max_size, l_video_max_size
                      FROM 
                            (
                                SELECT ROW_NUMBER() OVER (ORDER BY usage_date DESC) rn, users.cld_cloud_name, users.cld_api_key, usage.image_max_size, usage.video_max_size
                                FROM users, usage 
                                WHERE users.hosting_user_ind='Y'
                                AND usage.user_id=users.id
                            ) 
                     WHERE rn=1;  
                     l_cldapikey:='N';
            END;

            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('cloudname', l_cld_cloud_name);
            apex_json.write('apikey', l_cld_api_key);
            apex_json.write('maxImageFileSize', l_image_max_size);
            apex_json.write('maxVideoFileSize', l_video_max_size);
            apex_json.write('cldapikey', l_cldapikey);
            apex_json.write('articleId', CASE WHEN pArticleId=0 THEN seq_article.nextval ELSE pArticleId END);
            apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    PROCEDURE getCldSignature(pParamsToSign IN CLOB) IS
        l_params_to_sign clob:=pParamsToSign;
        l_user_id users.id%type;
        l_string_to_sign varchar2(2000):=NULL; 
    BEGIN
        l_user_id:=getUserId();
        
        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM JSON_TABLE(l_params_to_sign FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            );
        
        /* get Cloudinary details either of logged on user OR the hosting Cloudinary user */
        FOR C IN (SELECT NVL(u1.cld_cloud_name,u2.cld_cloud_name) cld_cloud_name, NVL(u1.cld_api_key, u2.cld_api_key) cld_api_key, NVL(u1.cld_api_secret,u2.cld_api_secret) cld_api_secret
                    FROM users u1, users u2
                   WHERE u1.id=l_user_id
                     AND u2.hosting_user_ind='Y')
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || C.cld_api_secret), dbms_crypto.HASH_SH1));
            apex_json.close_object;
        END LOOP;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     ** Set Time Zone according to client device. Procedure called on DOMContentLoaded event
     */
    PROCEDURE setClientInfo(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_client_TZ users.client_tz%type;
        l_maxtouchpoints NUMBER;
        l_user_id users.id%type;
    BEGIN
        l_user_id:=getUserId(pSaveCookie=>TRUE);
        
        IF (l_user_id IS NOT NULL) THEN
            SELECT timezone, maxtouchpoints
              INTO l_client_TZ, l_maxtouchpoints
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' COLUMNS (timezone, maxtouchpoints));
            UPDATE users SET client_tz=l_client_TZ, maxtouchpoints=l_maxtouchpoints, updated_date=current_timestamp WHERE id=l_user_id;          
        END IF;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Format timestamp according to user's current time zone
     */
    FUNCTION fmtUpdatedDate(pTimestamp IN article.updated_date%type) RETURN VARCHAR2
    IS
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
    BEGIN
        IF (l_timezone IS NOT NULL) THEN
            RETURN ( TO_CHAR(pTimestamp AT TIME ZONE l_timezone, 'dd Mon yyyy fmhh:fmmi PM') );
        ELSE
            RETURN ( TO_CHAR(pTimestamp, 'dd Mon yyyy'));
        END IF;
    END;
    
    FUNCTION getMediaType(pResourceType IN VARCHAR2, pFormat IN VARCHAR2) RETURN VARCHAR2 
    IS
    BEGIN
        IF (pResourceType='image') THEN
            RETURN ('image');
        ELSIF (pResourceType='video' AND pFormat IN ('mp4')) THEN
            RETURN ('video');
        ELSIF (pResourceType='video' AND pFormat IN ('m4a','wav')) THEN
            RETURN('audio');
        ELSE
            RETURN (NULL);
        END IF;
    END;

    /*
     **  Format Cloudinary URL
     */    
    FUNCTION getCloudinaryUrl(pCloudname IN VARCHAR2, pResourceType IN VARCHAR2, pPublicId IN VARCHAR2, pFormat IN VARCHAR2, pWidth IN INTEGER, pDimension IN NUMBER DEFAULT NULL) RETURN VARCHAR2 
    IS
        l_url VARCHAR2(500);
        l_media_type VARCHAR(5);
        
        FUNCTION getWidth RETURN VARCHAR2 IS
            l_left PLS_INTEGER:=1;
            l_right PLS_INTEGER:=3;
            TYPE t_arr IS VARRAY(3) OF INTEGER;
            l_arr t_arr:=t_arr(1,2,3);
            l_width INTEGER:=pWidth; 
        BEGIN
            IF (pWidth=0) THEN
                RETURN NULL;
            END IF;
            IF (pDimension IS NOT NULL) THEN
                IF (pDimension=1) THEN
                    RETURN NULL;
                ELSE
                    RETURN ',w_' || ROUND(pWidth*pDimension);
                END IF;
            END IF;
            l_arr(1):=pWidth*.25;
            l_arr(2):=pWidth*.625;
            l_arr(3):=pWidth;
            l_left:=1;
            l_right:=3;
            WHILE (l_left<l_right) LOOP
                IF (ABS(l_arr(l_left)-gWidthThumbnail) <= ABS(l_arr(l_right)-gWidthThumbnail)) THEN
                    l_right:=l_right-1;
                ELSE
                    l_left:=l_left+1;
                END IF;
            END LOOP;
            IF (l_arr(l_left)=pWidth) THEN
                RETURN NULL;
            END IF;
            RETURN ',w_' || ROUND(l_arr(l_left));
        END;
    BEGIN
        /* 
         ** Return best-fit thumbnail url of Cloudinary asset
         */
        IF (pResourceType IS NOT NULL) THEN
            l_media_type:=getMediaType(pResourceType, pFormat);
            l_url:='https://res.cloudinary.com/' || pCloudname ||
                    CASE l_media_type
                        WHEN 'image' THEN '/q_auto,f_auto' || getwidth() || '/' || pPublicId
                        WHEN 'video' THEN '/video/upload/q_auto,f_auto' || getwidth() || '/' || pPublicId || '.jpg' -- video poster
                        WHEN 'audio' THEN '/video/upload/q_auto,f_auto,w_' || gWidthThumbnail || '/fl_waveform' || '/' || pPublicId || '.png'  --audio waveform
                    END;
        END IF;        
        RETURN (l_url);
    END;
    
    /*
     **  Respond to user clicking "Save & Exit" in Rich Text Editor.
     **  Parse text and extract title and excerpt for the artile.
     **  Convert markdown to html and save in article row.
     */
     /*
    PROCEDURE saveArticle 
    IS
        l_article_id    article.id%type:=apex_application.g_x01;
        title_len       PLS_INTEGER;
        excerpt_len     PLS_INTEGER;
        l_word_count    article.word_count%type;
        l_updated_date  article.updated_date%type;
        l_body_html     CLOB;
        l_plain_text    CLOB;
        l_instr         PLS_INTEGER;
        l_null          VARCHAR2(1);
        l_title         VARCHAR2(61);
        l_title_more    VARCHAR2(3);
        l_excerpt       VARCHAR2(161);
        l_excerpt_more  VARCHAR2(3);
        l_excerpt_words VARCHAR2(15);
        --l_extra_link_attributes apex_t_varchar2('target', '_blank');
        
        PROCEDURE split2(pInput IN VARCHAR2, pMaxLen1 IN INTEGER, pOutput1 IN OUT VARCHAR2, pMore1 IN OUT VARCHAR2, 
                                             pMaxLen2 IN INTEGER, pOutput2 IN OUT VARCHAR2, pMore2 IN OUT VARCHAR2) IS
            l_words     apex_t_varchar2;
            rem         PLS_INTEGER;
            l_start2    PLS_INTEGER;
        BEGIN
            l_words:=apex_string.split(REPLACE(pInput,CHR(10),' '),' ');
            --log(apex_string.join(l_words,':'));
            FOR i IN 1..l_words.COUNT LOOP
                IF (l_words(i) IS NULL) THEN
                    CONTINUE;
                END IF;
                rem:=pMaxLen1 - NVL(LENGTHB(pOutput1),0);
                IF (LENGTHB(l_words(i)) <= rem) THEN
                    pOutput1:=pOutput1 || l_words(i) || ' ';
                ELSE
                    pOutput1:=RTRIM(pOutput1);
                    pMore1:='...';
                    l_start2:=i;
                    EXIT;
                END IF;
            END LOOP;
            
            IF (pMaxLen2=0) THEN RETURN; END IF;

    
            FOR i IN l_start2..l_words.COUNT LOOP
                IF (l_words(i) IS NULL) THEN
                    CONTINUE;
                END IF;
                rem:=pMaxLen2 - NVL(LENGTHB(pOutput2),0);
                IF (LENGTHB(l_words(i)) <= rem) THEN
                    pOutput2:=pOutput2 || l_words(i) || ' ';
                ELSE
                    pOutput2:=RTRIM(pOutput2);
                    pMore2:='...';
                    EXIT;
                END IF;
            END LOOP;        
        END;
        
    BEGIN
        SELECT MAX(DECODE(column_name,'TITLE',data_length)), MAX(DECODE(column_name,'EXCERPT',data_length))
        INTO title_len, excerpt_len
        FROM user_tab_columns 
        WHERE table_name='ARTICLE';
    
        FOR C IN (SELECT dbms_lob.getlength(body) len, body
                    FROM article 
                   WHERE id=l_article_id) 
        LOOP
            l_body_html := APEX_MARKDOWN.TO_HTML (p_markdown => C.body, p_embedded_html_mode => APEX_MARKDOWN.c_embedded_html_preserve, p_extra_link_attributes => apex_t_varchar2('target', '_blank')); -- escapes special characters while preserving embedded html
            apex_escape.set_html_escaping_mode('E');
            l_plain_text:=dbms_lob.substr(utl_i18n.unescape_reference(APEX_ESCAPE.STRIPHTML(l_body_html)),title_len+excerpt_len+20,1); -- strip html to plain text, removing any XSS embedded in <script></noscript>
            l_plain_text:=APEX_ESCAPE.STRIPHTML(l_plain_text);
            IF (l_plain_text IS NULL) THEN
                EXIT;
            END IF;
            l_instr:=INSTR(l_plain_text,CHR(10));
            IF (l_instr<=title_len AND l_instr>0) THEN
                l_title:=SUBSTR(l_plain_text,1,l_instr-1);
                split2(SUBSTR(l_plain_text,l_instr+1),excerpt_len,l_excerpt,l_excerpt_more,0,l_null,l_null);
            ELSE
                split2(l_plain_text,title_len,l_title,l_title_more,excerpt_len,l_excerpt,l_excerpt_more);
            END IF;
        END LOOP;
        
        UPDATE article SET title=l_title, title_more=l_title_more, excerpt=l_excerpt, excerpt_more=l_excerpt_more, body_html=l_body_html 
         WHERE id=l_article_id 
         RETURNING word_count, updated_date INTO l_word_count, l_updated_date;

        IF (l_word_count>0 AND l_excerpt IS NOT NULL) THEN
            l_excerpt_words:=' ' || l_word_count || ' word' || CASE WHEN l_word_count>1 THEN 's' END;
        END IF;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('words', l_excerpt_words);
        apex_json.write('title', l_title);
        apex_json.write('excerpt', l_excerpt || l_excerpt_more);
        apex_json.write('updated', fmtUpdatedDate(l_updated_date)); 
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    */

    /*
    ** Logout authenticated session
    */
    PROCEDURE signout IS
        l_app_id NUMBER;
        l_session_id NUMBER;
        l_page_id NUMBER;
    BEGIN
        getApexSession(l_app_id, l_session_id, l_page_id);

        apex_session.delete_session(p_session_id=>l_session_id);
        /*
        owa_cookie.send(
            name => 'ORA_WWV_APP_101',
            value => null,
            expires => sysdate -1, 
            path =>'ords' );
        */
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
         
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    FUNCTION buildArticle(pAppPageNo IN NUMBER, 
                            pId IN article.id%type, 
                            pNbAssets IN article.nb_assets%type, 
                            pIsPublic IN article.is_public%type, 
                            pTitle IN article.title%type, 
                            pExcerpt IN article.excerpt%type, 
                            pWordCount IN VARCHAR2, 
                            pUpdatedDate IN article.updated_date%type,
                            pCloudinaryUrl IN VARCHAR2, 
                            pName IN users.name%type) RETURN VARCHAR2 
   IS
        l_element LONG;
    BEGIN
        l_element:=
        '<li class="card" tabindex="0" data-id="' || pId || '">
            <div class="button-container">
                <button type="button" class="fa show-gallery"' || CASE WHEN pNbAssets=0 THEN ' disabled' END || '>&blacktriangleright;' || 
                                                                  CASE WHEN pNbAssets=0 THEN '0' ELSE '1' END || '/' || pNbAssets || '</button>' ||
                CASE WHEN pAppPageNo=2 THEN
                '<div class="dropdown">
                  <button type="button" class="fa fa-caret-down show-dropdown">&blacktriangledown;</button>
                  <ul class="dropdown-items">
                    <li><button type="button" class="fa fa-cloud-upload upload-media">Upload</button></li>
                    <li><button type="button" class="fa fa-edit edit-text">Edit</button></li>
                    <li><button type="button" class="fa fa-newspaper-o preview"' || CASE WHEN pId<0 OR COALESCE(pTitle,pExcerpt) IS NULL THEN ' disabled' END || '>Preview</button></li>' ||
                    CASE 
                      WHEN pIsPublic='Y' THEN 
                        '<li><button type="button" class="fa fa-share2 unpublish">Unpublish</button></li>'
                      ELSE 
                        '<li><button type="button" class="fa fa-share2 publish"' || CASE WHEN pId<0 THEN ' disabled' END || '>Publish</button></li>'
                    END 
                    || '
                    <li><button type="button" class="fa fa-trash delete"' || CASE WHEN pId=1 THEN ' disabled' END || '>Delete</button></li>
                    <li><button type="button" class="fa fa-id-card">' || pId || '</button></li>
                </div>'
                END ||'
            </div>' ||
            CASE WHEN pNbAssets=0 
                THEN '<button type="button" class="no-media upload-media">UPLOAD MEDIA</button>' 
                ELSE '<img class="show-gallery" src="' || pCloudinaryUrl || '">' 
            END ||
            CASE WHEN COALESCE(pTitle,pExcerpt) IS NULL 
                THEN '<br>
                      <button type="button" class="no-media edit-text">CREATE TEXT</button>'
                ELSE '<h4 class="title ' || CASE WHEN pAppPageNo=2 THEN 'edit-text' ELSE 'preview' END || '">' || pTitle || '</h4>
                      <p class="excerpt">' || pExcerpt || '<span class="word-count">' || pWordCount || '</span></p>'
            END || '   
            <footer class="button-container"><span>' || pName || '</span><span class="updated-date">' || fmtUpdatedDate(pUpdatedDate)  || '</span></footer>
        </li>';
        
        RETURN (l_element);
        END;
    
    /*
     **  Construct Home page HTML of qualifying blog articles
     **
     **  Unauthenticated user (i.e. HOME page)
     **    - articles where PUBLIC=Y
     **
     **  Authenticated user -
     **    - articles authored by user
     **    - first card is for creatng a new article
     **    - create menu and buttons to manage article
     */
    FUNCTION getPageContent RETURN CLOB IS
        l_clob CLOB;
        l_css_file_urls APEX_APPLICATION_PAGES.css_file_urls%type;
        l_javascript_file_urls APEX_APPLICATION_PAGES.javascript_file_urls%type;
        l_user_id users.id%type;
        l_user_name users.name%type;
        l_current_website website.id%type;
    BEGIN
        SELECT NVL(css_file_urls,' '), NVL(javascript_file_urls,' ')
          INTO l_css_file_urls, l_javascript_file_urls
          FROM APEX_APPLICATION_PAGES 
         WHERE application_id=apex_application.g_flow_id
           AND page_id=apex_application.g_flow_step_id;
        
        IF (INSTR(l_css_file_urls,'app100.min.css')=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name='app100.css') LOOP
                l_clob:=l_clob || '<style>' || apex_util.blob_to_clob(C.file_content) || '</style>';
            END LOOP;
        END IF;
        
        IF (apex_application.g_flow_step_id=2) THEN
            SELECT id, name 
              INTO l_user_id, l_user_name
              FROM users
             WHERE email=apex_application.g_user;
             
            l_clob:=l_clob || TO_CLOB(
                '<nav>
                    <button type="button" class="add-card">NEW CONTENT</button>
                    <button type="button" class="add-website">NEW WEBSITE</button>');
                    
            FOR C IN (SELECT id, name, rn, nb 
                        FROM
                        ( SELECT id, name, ROW_NUMBER() OVER (ORDER BY COALESCE(updated_date, created_date) DESC) rn, COUNT(*) OVER () nb
                            FROM website
                           WHERE user_id=l_user_id
                        ) 
                        ORDER BY rn)
            LOOP
                IF (C.rn=1) THEN
                    l_current_website:=C.id;
                    l_clob:=l_clob || TO_CLOB(
                    '<div class="dropdown">
                        <button type="button" class="show-dropdown" disabled data-websiteid="' || C.id || '">' || C.name || '</button>
                        <button type="button" class="show-dropdown">&blacktriangledown;</button>
                        <ul class="dropdown-items">
                            <li><button type="button" class="deploy-website" data-websiteid="' || C.id || '">DEPLOY WEBSITE</button></li>
                            <li><button type="button" class="delete-website" data-websiteid="' || C.id || '">DELETE WEBSITE</button></li>');
                END IF;
                IF (C.rn>1) THEN
                    l_clob:=l_clob || TO_CLOB(
                            '<li><button type="button" class="edit-website" data-websiteid="' || C.id || '">' || C.name || '</button></li>');
                END IF;
                IF (C.rn=C.nb) THEN
                    l_clob:=l_clob || TO_CLOB(
                        '</ul>
                    </div>');
                END IF;
            END LOOP;
            
            l_clob:=l_clob || TO_CLOB(
                    '<div class="dropdown">
                        <button type="button" class="show-dropdown" disabled>' || apex_application.g_user || '</button>
                        <button type="button" class="show-dropdown">&blacktriangledown;</button>
                        <ul class="dropdown-items">
                            <li><button type="button" class="fa signout">Sign out</button></li>
                            <li><button type="button" class="fa delete-me">Delete all content</button></li>
                        </ul>
                    </div>
                 </nav>');
            
            /* get Deployment TEMPLATE names */
            /*
            l_clob := apex_web_service.make_rest_request(p_url=>'https://api.github.com/repos/'|| C.deploy_repo||'/contents/TEMPLATES',p_http_method=>'GET');
            FOR C1 IN (SELECT name FROM JSON_TABLE(l_clob, '$[*]' COLUMNS (name))) LOOP
                l_template_names:=l_template_names || C1.name;
            END LOOP;
            */
        ELSE
            FOR C IN (SELECT body_html FROM article WHERE id=1) 
            LOOP
                l_clob:=l_clob || TO_CLOB('
                    <div>
                        <ul class="homepage">
                            <li class="red"></li>
                            <li class="grey">' || g_oracle_svg || '</li>
                            <li class="grey"></li>
                            <li class="grey">' || g_cloudinary_svg || '</li>
                            <li class="yellow">ALWAYS FREE</li>
                            <li class="grey">
                                <h4>Login CMS</h4>
                                <div>
                                    <a href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Facebook&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || g_facebook_svg ||'</a>
                                    <a href="' || apex_util.host_url('SCRIPT') || 'homeauth?request=APEX_AUTHENTICATION=Google&session=' || APEX_CUSTOM_AUTH.GET_SESSION_ID || '">' || g_google_svg ||'</a>
                                </div>
                                <span class="privacy" data-id="19124">Privacy Policy</span>
                            </li>
                            <li class="blue"></li>
                            <li class="grey"></li>
                        </ul>
                        <div class="ck-content">' || C.body_html || '
                        </div>
                    </div>
                    <!--<h2>PUBLISHED ARTICLES</h2>-->');
            END LOOP;
        END IF;
        
        IF (apex_application.g_flow_step_id=2) THEN
            l_clob:=l_clob || TO_CLOB('<ul class="cards" data-websiteid="' || l_current_website || '" role="list">');
                
            IF (l_current_website IS NOT NULL) THEN
                FOR C IN (
                    SELECT a.id,
                           a.is_public,
                           c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                           c.alt_text,
                           NVL2(a.nb_assets,1,0) first_asset,
                           NVL(a.nb_assets,0) nb_assets,
                           a.title, 
                           a.excerpt,
                           CASE WHEN a.excerpt IS NOT NULL AND a.word_count>0 THEN a.word_count || ' word' || CASE WHEN a.word_count>1 THEN 's' END END word_count,
                           NVL(a.updated_date, a.created_date) updated_date
                      FROM article a, asset c, website_article wa
                     WHERE a.author_user_id=l_user_id
                       AND a.cover_asset_id=c.id(+)
                       AND a.id=wa.article_id
                       AND wa.website_id=l_current_website
                     UNION ALL
                     SELECT -1, null, null, null, null,null,null,null,0,0,null,null,null,systimestamp from dual
                     ORDER BY updated_date DESC) 
                LOOP
                    l_clob:=l_clob || TO_CLOB(
                        buildArticle(
                            apex_application.g_flow_step_id, 
                            C.id, C.nb_assets, C.is_public, C.title, C.excerpt, C.word_count, C.updated_date, getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width), l_user_name));
                END LOOP;
            ELSE
                FOR C IN (
                    SELECT a.id,
                           a.is_public,
                           c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                           c.alt_text,
                           NVL2(a.nb_assets,1,0) first_asset,
                           NVL(a.nb_assets,0) nb_assets,
                           a.title, 
                           a.excerpt,
                           CASE WHEN a.excerpt IS NOT NULL AND a.word_count>0 THEN a.word_count || ' word' || CASE WHEN a.word_count>1 THEN 's' END END word_count,
                           NVL(a.updated_date, a.created_date) updated_date
                      FROM article a, asset c
                     WHERE a.author_user_id=l_user_id
                       AND a.cover_asset_id=c.id(+)
                       AND NOT EXISTS (SELECT null FROM website_article WHERE article_id=a.id)
                     UNION ALL
                     SELECT -1, null, null, null, null,null,null,null,0,0,null,null,null,systimestamp from dual
                     ORDER BY updated_date DESC) 
                LOOP
                    l_clob:=l_clob || TO_CLOB(
                        buildArticle(
                            apex_application.g_flow_step_id, 
                            C.id, C.nb_assets, C.is_public, C.title, C.excerpt, C.word_count, C.updated_date, getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width), l_user_name));
                END LOOP;            
            END IF;
        END IF;
        l_clob:=l_clob || TO_CLOB('</ul>');
        
        l_clob:=l_clob || TO_CLOB(
            '<dialog class="popup">
                <div>
                    <button type="button" class="close">&times;</button>
                    <h2></h2>
                    <p></p>
                    <button type="button" class="confirm">CONFIRM</button>
                </div>
            </dialog>
            <dialog class="preview">
                <div>
                    <div></div> <!-- empty div for preview grid -->
                    <div class="content ck-content"></div>
                    <button type="button" class="close" autofocus>&times;</button>
                </div>
            </dialog>
            <dialog class="editor">
                <div>
                    <div></div>
                    <div>
                        <div id="editor"></div>
                        <div class="button-container">
                            <div id="editor-status"></div>
                            <div id="word-count"></div>
                        </div>
                    </div>
                    <button type="button" class="close">&times;</button>
                </div>
            </dialog>            
            <dialog class="gallery">
                <div>
                    <button type="button" class="close" autofocus>&times;</button>
                    <nav>
                        <div>
                            <button type="button" class="thumbs-minus fa">&minus;</button>
                            <button type="button" class="thumbs-plus fa">&plus;</button>
                        </div>
                        <button type="button" class="list-performance">PERFORMANCE</button>
                    </nav>
                    <div class="gallery-container" role="region" aria-label="gallery">
                        <p class="instruction"></p>
                        <ul></ul>
                    </div>
                    <div class="gallery-overlay">
                        <img src="">
                        <fieldset>
                            <legend><span></span><button class="close-fieldset" type="button">&times;</button></legend>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                            <button type="button" class="dimensions"></button>
                            <button type="button" class="copy-url" disabled>&boxbox;</button>
                        </fieldset>
                        <span class="counter"></span>
                        <button type="button" class="close-fullscreen">&times;</button>
                        <button type="button" class="prev">&lt;</button>
                        <button type="button" class="next">&gt;</button>
                    </div>
                </div>
            </dialog>            
            <dialog class="perftable">
                <div>
                    <button type="button" class="close">&times;</button>
                    <div class="content"></div>
                </div>
            </dialog>
            <dialog class="cldapikey">
                <div>
                    <button type="button" class="close">&times;</button>
                    <p>Subscribe to a free <a href="https://cloudinary.com/users/register_free">Cloudinary plan</a> and enter your API key in the field below</p>
                    <p>Alternatively click "Continue as guest" for limited access</p>
                    <fieldset>
                        <legend>Cloudinary API Environment variable</legend>
                        <input type="text" id="cldapikey">
                    </fieldset>
                    <div class="button-container">
                        <button type="button" class="save">Save Changes</button>
                        <button type="button" class="guest">Continue as guest</button>
                    </div>
                </div>
            </dialog> 
            ');
            
        l_clob:=l_clob || TO_CLOB('
            <input type="hidden" name="p_flow_id" value="' || apex_application.g_flow_id ||'" id="pFlowId">
            <input type="hidden" name="p_flow_step_id" value="' || apex_application.g_flow_step_id ||'" id="pFlowStepId">
            <input type="hidden" name="p_instance" value="' || APEX_CUSTOM_AUTH.GET_SESSION_ID ||'" id="pInstance">');            
 
        IF (INSTR(l_javascript_file_urls,'app100.min.js')=0) THEN
            FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name='app100.js') LOOP
                l_clob:=l_clob || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
            END LOOP;
            IF (apex_application.g_flow_step_id=2) THEN
                FOR C IN (SELECT file_content FROM APEX_APPLICATION_STATIC_FILES WHERE application_id=apex_application.g_flow_id AND file_name='app100auth.js') LOOP
                    l_clob:=l_clob || '<script>' || apex_util.blob_to_clob(C.file_content) || '</script>';
                END LOOP;            
            END IF;
        END IF;
        
        l_clob:=l_clob || TO_CLOB('
            <script type="module">
              import {onCLS, onFID, onLCP} from ''https://unpkg.com/web-vitals?module'';
              gRestUrl = "' || getRestUrl() || '";
              gHomeUrl = "' || apex_util.host_url('SCRIPT') || 'home' || '";
              onCLS(addToVitalsQueue);
              onFID(addToVitalsQueue);
              onLCP(addToVitalsQueue);
            </script>');

        RETURN (l_clob);

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
    
    /*
    ** GET ARTICLE (PAGE) CONTENT FOR WEBSITE
    */
    PROCEDURE getWebsite(pWebsiteId IN website.id%type) IS
        l_user_id users.id%type;
        l_user_name users.name%type;
        l_clob CLOB;
    BEGIN
        l_user_id:=getUserId();
        SELECT name INTO l_user_name FROM users WHERE id=l_user_id;
        
        FOR C IN (
            SELECT a.id,
                   a.is_public,
                   c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                   NVL(a.nb_assets,0) nb_assets,
                   a.title, 
                   a.excerpt,
                   CASE WHEN a.excerpt IS NOT NULL AND a.word_count>0 THEN a.word_count || ' word' || CASE WHEN a.word_count>1 THEN 's' END END word_count,
                   NVL(a.updated_date, a.created_date) updated_date,
                   wa.display_order display_order
              FROM article a, website_article wa, asset c
             WHERE wa.website_id=pWebsiteId
               AND a.id=wa.article_id
               AND a.cover_asset_id=c.id(+)
             UNION ALL
             SELECT -1, null, null, null, null,null,null,0,null,null,null,systimestamp,-1 from dual
             ORDER BY display_order) 
        LOOP
            l_clob:=l_clob || TO_CLOB(
                buildArticle(
                    2, 
                    C.id, C.nb_assets, C.is_public, C.title, C.excerpt, C.word_count, C.updated_date, getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width), 
                    l_user_name));
        END LOOP;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.close_object;
         
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    

    PROCEDURE getThumbnailContent(pArticleId IN article.id%type, pUserId IN users.id%type, pNbAssets IN OUT article.nb_assets%type, pInstruction IN OUT NOCOPY VARCHAR2, pContent IN OUT NOCOPY CLOB) 
    IS
        l_url_image VARCHAR2(300);
        l_media_type VARCHAR2(5);   
    BEGIN
        FOR C IN (
            SELECT a.id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(a.created_date,'dd-Mon-yyyy') uploaded, 
                   DECODE(a.width,0,gWidthThumbnail,a.width) width, DECODE(a.height,0,gWidthThumbnail,a.height) height, REPLACE(a.alt_text,'"','&quot;') alt_text, a.description, a.bytes, a.format,
                   COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY a.display_order) rn,
                   t.nb_assets, NVL(u.maxtouchpoints,0) maxtouchpoints
              FROM asset a, article t, users u
             WHERE t.id=pArticleId
               AND a.article_id=t.id
               AND t.author_user_id=NVL(pUserId, t.author_user_id)
               AND u.id=t.author_user_id
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            IF (C.rn=1) THEN
                pNbAssets:=C.nb_assets;
                pInstruction:=CASE WHEN C.maxtouchpoints > 1 THEN 'Tap' ELSE 'Click' END || ' Image to view in full screen' || 
                       CASE WHEN pUserId IS NOT NULL AND C.nb_assets > 1 THEN 
                            '<span>|</span>Drag and drop images to reorder<span>|</span>First image is article cover' END;
            END IF;

            pContent:=pContent || TO_CLOB('
                <li class="card" tabindex="0"' || CASE WHEN pUserId IS NOT NULL THEN ' data-id="' || C.id || '"' END || '>
                    <div class="button-container">
                        <span>' || C.rn || '/' || C.nb || '</span>' || 
                        CASE WHEN pUserId IS NOT NULL THEN
                        '<div class="dropdown">
                            <button type="button" class="fa fa-caret-down show-dropdown">&blacktriangledown;</button>
                            <ul class="dropdown-items">
                                <li><button type="button" class="fa fa-refresh update-asset">Update Text</button></li>
                                <li><button type="button" class="fa fa-id-card view-performance">Performance</button></li>
                                <li><button type="button" class="fa fa-trash delete-asset">Delete</button></li>
                            </ul>
                        </div>' END || '
                    </div>');
            
            l_url_image:=getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);
            l_media_type:=getMediaType(C.resource_type, C.format);
            
            pContent:=pContent || TO_CLOB('<img data-dimensions="'  || 
                                            ROUND(C.width*.25) || 'x' || ROUND(C.height*.25) || ':' || 
                                            ROUND(C.width*.625) || 'x' || ROUND(C.height*.625) || ':' || 
                                            C.width || 'x' || C.height || '" src="' || l_url_image || '"' || CASE WHEN l_media_type='video' THEN ' style="display:none"' END || '>');
            
            CASE l_media_type
                                            
                WHEN 'video' THEN
                    pContent:=pContent || TO_CLOB(
                    '<video controls preload="metadata" poster="' || l_url_image || '">
                        <source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>
                    </video>');
                    
                WHEN 'audio' THEN
                    l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                    pContent:=pContent || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>
                    </audio>');
                    
                ELSE NULL;
        
            END CASE;
            
            pContent:=pContent || TO_CLOB('
                <div>
                    <label for="alt-text">Alt text<span></span></label>
                    <textarea id="alt-text" maxlength="50"' || CASE WHEN pUserId IS NULL THEN ' readonly' END || '>' || C.alt_text || '</textarea>
                </div>
                <div>
                    <label for="description">Description<span></span></label>
                    <textarea id="description" maxlength="500"' || CASE WHEN pUserId IS NULL THEN ' readonly' END || '>' || C.description || '</textarea>                    
                </div>');
            
            pContent:=pContent || TO_CLOB('</li>');
            
        END LOOP;

    END;
    
    /*
     **  Build gallery of thumbnail images from ASSET table 
     **  Executed in response to user requesting gallery of media assets for a given article
     */
    PROCEDURE getThumbnails(pArticleId IN article.id%type) IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_instruction VARCHAR2(300);
        n PLS_INTEGER;
    BEGIN
        l_user_id:=getUserId();
        
        getThumbnailContent(pArticleId, l_user_id, n, l_instruction, l_clob);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.write('instruction', l_instruction);
                            
        apex_json.close_object;
         
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Load metadata after media uploaded to Cloudinary.
     **  Insert uploaded asset metadata into ASSETS table
     **  Return new asset count and url of first image as default cover image
     */       
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB) IS
        l_article_id article.id%type;
        l_website_id website.id%type;
        l_metadata clob:=pBodyText;
        l_user_id users.id%type;
        l_start_order PLS_INTEGER;
        l_start_order_website PLS_INTEGER;
        l_updated_date article.updated_date%type:=current_timestamp;
        nb_assets PLS_INTEGER;
    BEGIN
        l_user_id:=getUserId();
        
        SELECT article_id, website_id
          INTO l_article_id, l_website_id
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id, website_id)) WHERE ROWNUM=1;
        
        MERGE INTO article t
        USING (SELECT l_article_id article_id FROM dual) s
           ON (t.id=s.article_id)
         WHEN MATCHED THEN UPDATE SET updated_date=current_timestamp
         WHEN NOT MATCHED THEN INSERT (id, author_user_id, created_date) VALUES (s.article_id, l_user_id, current_timestamp);
         
        /* create row in website_article table if we are in a website */
        IF (l_website_id IS NOT NULL) THEN
            SELECT NVL(MAX(display_order),0)+1 INTO l_start_order_website FROM website_article WHERE website_id=l_website_id;
            INSERT INTO website_article(article_id, website_id, display_order) VALUES (l_article_id, l_website_id, l_start_order_website);
        END IF;
        
        SELECT NVL(MAX(display_order),0) INTO l_start_order FROM asset WHERE article_id=l_article_id;

        INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, created_date, display_order)
        SELECT seq_asset.nextval, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, current_timestamp, l_start_order+ROWNUM
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id, public_id, width, height, bytes, resource_type, format, cld_cloud_name));

        /* Return upload details to calling Javascript process in order to update front-end */
        FOR C IN (SELECT id, cld_cloud_name, resource_type, public_id, format, width, nb_assets
                    FROM
                    (
                    SELECT id, cld_cloud_name, resource_type, public_id, format, width, display_order, 
                            MIN(display_order) OVER () min_display_order, 
                            COUNT(*) OVER () nb_assets
                    FROM asset 
                    WHERE article_id=l_article_id
                    )
                    WHERE display_order=min_display_order)
        LOOP
            UPDATE article SET cover_asset_id=C.id, nb_assets=C.nb_assets WHERE id=l_article_id;
            APEX_JSON.open_object; 
            APEX_JSON.write('success', TRUE);
            APEX_JSON.write('articleId',l_article_id);
            APEX_JSON.write('nbAssets','&blacktriangleright;1/' || C.nb_assets);
            APEX_JSON.write('imgurl',getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width));
            APEX_JSON.write('updated', fmtUpdatedDate(l_updated_date));
            APEX_JSON.close_object;
        END LOOP;
               
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;  
    
    /*
     **  Upload Performance data from entries accumulated by Javascript Performance API
     */       
    PROCEDURE uploadPerformance(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        n PLS_INTEGER;
    BEGIN
        INSERT /*+ ignore_row_on_dupkey_index ( performance (session_id, url)) */ 
          INTO performance(id, asset_id, session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, capture_date, user_id, ip_address)
        WITH json AS 
        (
            SELECT session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, timestamp'1970-01-01 00:00:00' + numtodsinterval(epoch,'second') capture_date, l_user_id, l_ip_address
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, epoch))
        )
        SELECT seq_performance.nextval, a.id, j.session_id, j.url, j.connection_type, j.transfersize, j.duration, j.content_type, j.window_innerwidth, j.browser, j.capture_date, l_user_id, l_ip_address
          FROM json j, asset a
         WHERE j.cld_cloud_name=a.cld_cloud_name
           AND j.resource_type=a.resource_type
           AND j.public_id=a.public_id;
        
        INSERT /*+ ignore_row_on_dupkey_index ( servertiming (performance_id, seq)) */ 
          INTO servertiming(performance_id, seq, name, duration, description)
        WITH json AS 
        (
            SELECT session_id, url, seq, name, duration, description
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, url,
                        NESTED  '$.servertiming[*]' columns (seq for ordinality,name,duration,description))) 
        )
        SELECT p.id, j.seq, j.name, j.duration, j.description
          FROM json j, performance p
         WHERE p.session_id=j.session_id
           AND p.url=j.url
           AND j.seq IS NOT NULL;        
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object; 
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
    ** Write HTML table of media download performance for the article
    */
    PROCEDURE getPerformance IS
        l_article_id asset.article_id%type:=apex_application.g_x01;
        l_content CLOB;
        l_ip_address performance.ip_address%type;
        l_session_id NUMBER:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
        n PLS_INTEGER:=0;
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
        l_url_parts apex_t_varchar2;
        l_transformation VARCHAR(300);
    BEGIN
        IF (apex_authentication.is_authenticated) THEN
            l_ip_address:=NULL;
        ELSE
            l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        END IF;
        
        /* 
        
        FOR C IN (SELECT  COUNT(*) OVER (PARTITION BY a.cld_cloud_name, a.resource_type, a.public_id) nb_rows, 
                          ROW_NUMBER() OVER (PARTITION BY a.display_order,a.cld_cloud_name, a.resource_type, a.public_id ORDER BY p.capture_date DESC) rn, 
                          a.cld_cloud_name, a.resource_type, a.public_id, a.format, a.width, a.bytes, apex_util.get_since(a.created_date) created_date, apex_util.get_since(p.capture_date) capture_date, 
                          p.url, p.transfersize, p.duration, p.content_type, p.browser, p.session_id, p.window_innerwidth, p.ip_address, p.connection_type, p.servertiming
                    FROM asset a, performance p
                   WHERE a.article_id=l_article_id
                     AND a.cld_cloud_name=p.cld_cloud_name
                     AND a.resource_type=p.resource_type
                     AND a.public_id=p.public_id
                     AND p.ip_address = NVL(l_ip_address, p.ip_address)
                     AND p.session_id=NVL(l_session_id, p.session_id)
                   ORDER BY a.display_order)
        LOOP
            n:=n+1;
            IF (n=1) THEN
                l_content:=to_clob(
                '<table>
                    <caption>CLOUDINARY BASE URL: ' || SUBSTR(C.url,1,INSTR(C.url,'/',1,4)) || '</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>DOWNLOADED<br>I.P. (CONNECTION)<br>BROWSER (WIDTH)</th>
                            <th class="align-left">TRANSFORMATION</th>
                            <th>TRANSFER SIZE<br>DURATION<br>CONTENT/TYPE</th>
                            <th class="align-left">SERVER TIMING</th>
                        </tr>
                    </thead>
                    <tbody>
                ');
            END IF;
            
            IF (C.nb_rows=C.rn) THEN
                l_content:=l_content || to_clob('<tr class="last-tr">');
            ELSE
                l_content:=l_content || to_clob('<tr>');
            END IF;
                
            IF (C.rn=1) THEN 
                l_content:=l_content || to_clob(
                '<td rowspan="' || C.nb_rows || '">
                    <figure><img src="' || getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
                        <figcaption><span class="label">File name: </span>' || SUBSTR(C.public_id,1,INSTR(C.public_id,'_',-1)-1) || '.' || C.format 
                            || '<br><span class="label">Original size: </span>' || apex_string_util.to_display_filesize(C.bytes) 
                            || '<br><span class="label">Width: </span>' || C.width || ' px'
                            || '<br><span class="label">Uploaded: </span>' || C.created_date || '
                    </figcaption></figure></td>');
            END IF;
            
            l_url_parts:=apex_string.split(C.url,'/');
            IF (C.resource_type='image') THEN
                l_transformation:=l_url_parts(5);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            ELSE
                l_transformation:=l_url_parts(7);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            END IF;
            
            l_content:=l_content || to_clob('
                <td class="align-center">' || C.capture_date || '<br>' || C.ip_address || CASE WHEN C.connection_type IS NOT NULL THEN ' (' || C.connection_type || ')' END || '<br>' || C.browser || ' (' || C.window_innerwidth || ' px)</td>
                <td>' || l_transformation || '</td>
                <td class="align-center">' || apex_string_util.to_display_filesize(C.transfersize) || '<br>' || C.duration || ' ms<br>' || C.content_type|| '</td>
                <td>' || REPLACE(C.servertiming,'|','<br>') || '</td>
            </tr>');
                
        END LOOP;
        
        IF (n>0) THEN
            l_content:=l_content || to_clob('</tbody></table>');
        ELSE
            l_content:= to_clob('<p>All media for your session was retrieved from Cache</p>');
        END IF;
        */
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('content', l_content);
        APEX_JSON.close_object;          
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);        
    END;
    
    /*
    ** Fetched from Eleventy to retrieve website content and array of articles
    ** {
    **    website: {},
    **    articles: [{},{},..{}]
    ** }
    */    
    PROCEDURE getContent(pWebsiteId IN website.id%type) IS
        l_json JSON_OBJECT_T;
        l_website_object JSON_OBJECT_T;
        l_article_object JSON_OBJECT_T;
        l_article_array JSON_ARRAY_T;
        l_asset_object JSON_OBJECT_T;
        l_asset_array JSON_ARRAY_T;
        l_url_img VARCHAR2(500);
        l_media_type VARCHAR2(5);
        l_nb_articles INTEGER;
        l_nb_assets INTEGER;
        l_admin_user_id users.id%type;
        l_signed_data RAW(4000);
        l_clob CLOB;
        
        /* If title missing remove the empty <h1></h1> tag */
        FUNCTION stripHeading(pTitle IN VARCHAR2, pBodyHtml IN OUT NOCOPY CLOB) RETURN CLOB IS
        BEGIN
            IF (TRIM(pTitle) IS NOT NULL) THEN
                RETURN (pBodyHtml);
            END IF;
            RETURN (dbms_lob.substr(pBodyHtml, 
                    dbms_lob.getlength (pBodyHtml),
                    dbms_lob.instr(pBodyHtml,'</h1>')+5));
        END;
    BEGIN
        l_json:= new JSON_OBJECT_T;
        l_website_object:= new JSON_OBJECT_T;
        l_article_array:= new JSON_ARRAY_T;

        /* Get the admin user with Netlify and Github tokens as well as private key required to sign the contact_email for the website */
        SELECT id INTO l_admin_user_id 
          FROM users 
         WHERE github_repos_owner IS NOT NULL 
           AND github_token IS NOT NULL 
           AND netlify_token IS NOT NULL 
           AND netlify_installation_id IS NOT NULL
           AND private_key IS NOT NULL 
           AND public_key IS NOT NULL;
           
        FOR C IN (SELECT w.id, w.name, w.favicon_url, w.image_dimension, w.contact_email, w.trade_name, w.affiliation_link_img, w.affiliation_link_url, 
                         utl_i18n.string_to_raw(regexp_replace(u.private_key,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\s?|\s)','')) private_key,
                         u.terraform_token
                    FROM website w, users u
                   WHERE w.id=pWebsiteId
                     AND u.id=l_admin_user_id)
        LOOP
            l_website_object.put('id',C.id);
            l_website_object.put('name',C.name);
            l_website_object.put('favicon_url',C.favicon_url);
            l_website_object.put('contact_email',C.contact_email);
            l_website_object.put('trade_name',C.trade_name);
            l_website_object.put('affiliation_link_img',C.affiliation_link_img);
            l_website_object.put('affiliation_link_url',C.affiliation_link_url);
            
            /* get the invoke_url from terraform api */
            apex_web_service.clear_request_headers;
            apex_web_service.g_request_headers(1).name := 'Authorization';
            apex_web_service.g_request_headers(1).value := 'Bearer ' || C.terraform_token;   
            apex_web_service.g_request_headers(2).name := 'Content-Type';
            apex_web_service.g_request_headers(2).value := 'application/json';
            
            l_clob := apex_web_service.make_rest_request(p_url=>'https://app.terraform.io/api/v2/workspaces/ws-o8qtzg2z8L4AsGC9/current-state-version-outputs',p_http_method=>'GET');
            
            FOR C IN (SELECT name, value FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url')
            LOOP
                l_website_object.put('aws_gateway_url',C.value);
            END LOOP;
            
            /* sign the contact_email */
            l_signed_data:=DBMS_CRYPTO.SIGN(
               src =>utl_i18n.string_to_raw(C.contact_email),
               prv_key =>C.private_key,
               pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,
               sign_alg =>dbms_crypto.SIGN_SHA256_RSA);
            l_website_object.put('signatureContactEmail', utl_i18n.raw_to_char(utl_encode.base64_encode(l_signed_data)));

            l_json.put('website',l_website_object);
        
            FOR C1 IN (SELECT a.id, a.created_date, a.word_count, a.title, a.body_html, wa.display_order, wa.path_name, wa.nav_name
                        FROM article a, website_article wa
                       WHERE wa.website_id=C.id
                         AND wa.article_id=a.id
                       ORDER BY wa.display_order)
            LOOP
                l_article_object:=new JSON_OBJECT_T;
                l_article_object.put('article_id',C.id);
                l_article_object.put('display_order',C1.display_order);
                l_article_object.put('path_name',C1.path_name);
                l_article_object.put('created',TO_CHAR(C1.created_date,'dd.mm.yyyy'));
                
                IF (C1.nav_name IS NOT NULL) THEN
                    l_article_object.put('nav_name',C1.nav_name);
                END IF;
                
                IF (C1.title IS NOT NULL) THEN
                    l_article_object.put('title',C1.title);
                END IF;
                
                IF (C1.body_html IS NOT NULL) THEN
                    l_article_object.put('words',C1.word_count);
                    l_article_object.put('text',stripHeading(C1.title, C1.body_html));
                END IF;
                
                
                FOR C2 IN (SELECT rn, nb, cld_cloud_name, resource_type, public_id, format, width, alt_text 
                             FROM
                                (
                                 SELECT cld_cloud_name, resource_type, public_id, format, width, alt_text, display_order, ROW_NUMBER() OVER (ORDER BY display_order) rn, COUNT(*) OVER () nb
                                   FROM asset 
                                  WHERE article_id=C1.id
                                ) 
                            ORDER BY display_order)
                LOOP
                    IF (C2.rn=1) THEN
                        l_asset_array:= new JSON_ARRAY_T;
                        l_asset_object:= new JSON_OBJECT_T;
                    END IF;
                    IF (C2.alt_text IS NOT NULL) THEN
                        l_asset_object.put('alt_text',C2.alt_text);
                    END IF;
                    l_media_type:=getMediaType(C2.resource_type, C2.format);
                    l_url_img:=getCloudinaryUrl(C2.cld_cloud_name, C2.resource_type, C2.public_id, C2.format, C2.width, C.image_dimension);
                    l_asset_object.put('media',l_media_type);
                    l_asset_object.put('url',l_url_img);
                    l_asset_array.append(l_asset_object);
                    IF (C2.rn=C2.nb) THEN
                        l_article_object.put('assets',l_asset_array);
                    END IF;
                END LOOP;
                l_article_array.append(l_article_object);
            END LOOP;
        END LOOP;
        l_json.put('articles',l_article_array);

        l_nb_articles:=l_article_array.get_size;
        IF (l_nb_articles=0) THEN
            owa_util.status_line(404, '', true);
        ELSE
            owa_util.status_line(200, '', false);
            owa_util.mime_header( 'application/json', TRUE, 'UTF-8' );
            htp.p(l_json.to_clob);
        END IF;
            
        EXCEPTION WHEN OTHERS THEN
            log_error(sqlcode,sqlerrm); 
            owa_util.status_line(400, '', true);
            htp.p('{"sqlcode":'||sqlcode||',"sqlerrm":"'||sqlerrm||'"}');
    END;
    
    /*
     **  Get the selected article's content in HTML format
     **
     */    
    PROCEDURE getArticle(pArticleId IN article.id%type)  IS
        l_user_id users.id%type;
    BEGIN
        l_user_id:=getUserId();

        FOR C IN (SELECT a.body_html, UPPER(u.name) name, apex_util.get_since(a.created_date) created, CASE WHEN a.word_count<200 THEN 'less than a minute' ELSE ROUND(a.word_count/200) || ' minute read' END minutes 
                    FROM article a, users u 
                   WHERE a.id=pArticleId 
                     AND a.author_user_id=NVL(l_user_id,a.author_user_id)
                     AND a.is_public=CASE WHEN l_user_id IS NULL THEN 'Y' ELSE a.is_public END
                     AND a.author_user_id=u.id )
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE); 
            apex_json.write('content', C.body_html);
            apex_json.write('details','<div class="details"><span>' || C.name || '</span><span>-</span><span>' || C.created || '</span><span>-</span><span>' || C.minutes || '</span></div>');
            apex_json.close_object;
        END LOOP;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm, pAjax=>TRUE);
    END;  
    
    /*
     **  Insert row in article table for new article text content
     */      
    PROCEDURE insertArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS 
        l_user_id users.id%type;
        l_website_id website_article.website_id%type;
        l_display_order website_article.display_order%type;
    BEGIN
    
        l_user_id:=getUserId();
        
        INSERT INTO article (id, author_user_id, created_date) 
        SELECT seq_article.nextval, id, current_timestamp
          FROM users u
         WHERE id=l_user_id;
        
        FOR C IN (SELECT websiteid FROM JSON_TABLE(pBodyText, '$' COLUMNS (websiteid))) LOOP
            SELECT NVL(MAX(display_order),0)+1 INTO l_display_order FROM website_article WHERE website_id=C.websiteid;
            INSERT INTO website_article(article_id, website_id, display_order) VALUES (seq_article.currval, C.websiteid, l_display_order);
        END LOOP;
        
        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('articleId',seq_article.currval);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Procedure called by the autoSave feature of CKEditor
     */        
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        l_user_id users.id%type;
        l_article_id article.id%type;
        l_title article.title%type;
        l_excerpt varchar2(1000);
        l_word_count article.word_count%type;
        l_edit_text article.body_html%type;
        l_name users.name%type;
        l_client_TZ users.client_TZ%type;
        l_words apex_t_varchar2;
        l_rem PLS_INTEGER;
    BEGIN
        l_user_id:=getUserId();
        
        SELECT SUBSTR(title,1,60) title, 
               REGEXP_SUBSTR(word_count,'(\d)+') word_count,
               edit_text,
               u.name,
               u.client_TZ
          INTO l_title, l_word_count, l_edit_text, l_name, l_client_TZ
          FROM users u, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (title, word_count, edit_text CLOB))
          WHERE u.id=l_user_id;
          
        apex_escape.set_html_escaping_mode('E');
        l_excerpt:=dbms_lob.substr(utl_i18n.unescape_reference(apex_escape.striphtml(l_edit_text)),200,NVL(LENGTHB(l_title),0)+1);
        
        l_words:=apex_string.split(REPLACE(l_excerpt,CHR(10),' '),' ');
        l_excerpt:=NULL;
        FOR i IN 1..l_words.COUNT LOOP
            IF (l_words(i) IS NULL) THEN
                CONTINUE;
            END IF;
            IF (LENGTHB(l_words(i))>25) THEN
                l_excerpt:=l_excerpt || SUBSTR(l_words(i),1,25);
                EXIT;
            END IF;
            l_rem:=160 - NVL(LENGTHB(l_excerpt),0);
            IF (LENGTHB(l_words(i)) <= l_rem) THEN
                l_excerpt:=l_excerpt || l_words(i) || ' ';
            ELSE
                l_excerpt:=RTRIM(l_excerpt);
                EXIT;
            END IF;
        END LOOP;
        
        UPDATE article SET title=l_title, excerpt=l_excerpt, word_count=l_word_count, body_html=l_edit_text, updated_date=current_timestamp
         WHERE id=pArticleId;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('title', l_title);
        APEX_JSON.write('excerpt', l_excerpt);
        APEX_JSON.write('words', l_word_count || ' words');
        APEX_JSON.write('author', l_name);
        APEX_JSON.write('updated', TO_CHAR(current_timestamp AT TIME ZONE l_client_TZ,'dd Mon yyyy hh24:mi:ss'));
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Delete all Cloudinary assets uploaded for a given article
     */   
    FUNCTION deleteUploadedMedia(pArticleId IN NUMBER, pResourceType IN asset.resource_type%type DEFAULT NULL) RETURN NUMBER IS
        l_clob CLOB;
        l_url VARCHAR2(500);
        nb_deleted PLS_INTEGER:=0;
        n PLS_INTEGER;
    BEGIN
        FOR C IN (SELECT DISTINCT a.resource_type, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret 
                    FROM users u, article t, asset a
                   WHERE t.id=pArticleId
                     AND t.author_user_id=u.id
                     AND t.id=a.article_id
                     AND a.resource_type=NVL(pResourceType,a.resource_type))
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || pArticleId;
            l_clob := apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'DELETE',p_username=>C.cld_api_key,p_password=>C.cld_api_secret); 
            SELECT SUM(original) INTO n FROM JSON_TABLE(l_clob FORMAT JSON, '$.deleted_counts.*' COLUMNS (original NUMBER PATH '$.original'));
            nb_deleted:=nb_deleted+n;
        END LOOP;
        RETURN(nb_deleted);
    END;    
    
    /*
     **  Remove article and any uploaded assets
     */   
    PROCEDURE deleteArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        l_clob CLOB;
        l_url VARCHAR2(500);
        l_user_id users.id%type;
        l_website_id website_article.website_id%type;
        n PLS_INTEGER;
    BEGIN
        l_user_id:=getUserId();
        
        FOR C IN (SELECT websiteid FROM JSON_TABLE(pBodyText, '$' COLUMNS (websiteid))) LOOP
            log('C.websiteid:'||C.websiteid);
            l_website_id:=C.websiteid;
        END LOOP;
        
        IF (l_website_id IS NOT NULL) THEN
            DELETE website_article WHERE article_id=pArticleId AND website_id=l_website_id;
        END IF;
        
        /* delete article if not in any website */
        
        SELECT COUNT(*) INTO n FROM dual WHERE EXISTS (SELECT null FROM website_article WHERE article_id=pArticleId);
        
        IF (n=0) THEN
            DELETE asset WHERE article_id=pArticleId;
            
            DELETE article WHERE id=pArticleId;
            
            FOR C IN (SELECT DISTINCT a.resource_type, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret 
                        FROM users u, article t, asset a
                       WHERE t.id=pArticleId
                         AND t.author_user_id=u.id
                         AND u.id=l_user_id
                         AND t.id=a.article_id)
            LOOP
                l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || pArticleId;
                l_clob := apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'DELETE',p_username=>C.cld_api_key,p_password=>C.cld_api_secret); 
                log(l_clob);
            END LOOP;
        END IF;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    
    /*
     **  Update the alt_text and description columns of a given ASSET
     */   
    PROCEDURE updateAsset(pBodyText IN CLOB, pId IN asset.id%type) IS
        l_alt_text asset.alt_text%type := apex_application.g_x02;
        l_description asset.description%type := apex_application.g_x03;
        l_alt_text_old asset.alt_text%type := apex_application.g_x02;
        l_description_old asset.description%type := apex_application.g_x03; 
        l_alt_text_updated BOOLEAN;
        l_description_updated BOOLEAN;
    BEGIN
        SELECT alttext, description INTO l_alt_text, l_description
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (alttext, description));
        
        SELECT alt_text, description INTO l_alt_text_old,l_description_old  FROM asset WHERE id=pId;
        
        UPDATE asset SET alt_text=l_alt_text, description=l_description, updated_date=current_timestamp WHERE id=pId;
        
        l_alt_text_updated:=NVL(l_alt_text,'x') != NVL(l_alt_text_old,'x');
        l_description_updated:=NVL(l_description,'x') != NVL(l_description_old,'x');
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('updated', fmtUpdatedDate(current_timestamp)); 
        apex_json.write('alt_text_updated',l_alt_text_updated);
        apex_json.write('description_updated',l_description_updated);
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Delete 1 asset for a given article
     */   
    PROCEDURE deleteAsset(pId IN asset.id%type) IS
        l_article_id asset.article_id%type;
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_public_id asset.public_id%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_nb_assets article.nb_assets%type;
        l_parm_names apex_application_global.VC_ARR2;
        l_parm_values apex_application_global.VC_ARR2;
        l_timestamp NUMBER:=trunc((cast(current_timestamp at time zone 'UTC' as date) - to_date('01-jan-1970','dd-mon-yyyy')) * (86400));
        l_signature VARCHAR2(100);
        l_string_to_sign varchar2(2000);  
        l_error_message VARCHAR2(500);
        l_clob CLOB;
        l_instruction VARCHAR2(500);
        l_updated_date VARCHAR2(20);
        l_user_id users.id%type;
    BEGIN
        l_user_id:=getUserId();
        
        SELECT a.article_id, a.cld_cloud_name, a.public_id, u.cld_api_key, u.cld_api_secret
          INTO l_article_id, l_cld_cloud_name, l_public_id, l_cld_api_key, l_cld_api_secret
          FROM asset a, article t, users u
         WHERE a.id=pId
           AND a.article_id=t.id
           AND t.author_user_id=u.id
           AND u.id=l_user_id;
        
        l_parm_names(1):='invalidate';
        l_parm_values(1):='true';
        l_parm_names(2):='public_id';
        l_parm_values(2):=l_public_id;        
        l_parm_names(3):='timestamp';    
        l_parm_values(3):=l_timestamp;                
        
        l_string_to_sign:=NULL;
        FOR i IN 1..3 LOOP
            l_string_to_sign:=l_string_to_sign || l_parm_names(i) || '=' || l_parm_values(i) || '&';
        END LOOP;
        l_string_to_sign:=RTRIM(l_string_to_sign,'&') || l_cld_api_secret;
        l_parm_names(4):='signature';
        l_parm_values(4):=dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign), dbms_crypto.HASH_SH1);   
        l_parm_names(5):='api_key';
        l_parm_values(5):=l_cld_api_key;            
        
        l_clob := apex_web_service.make_rest_request(
            p_url=>'https://api.cloudinary.com/v1_1/' || l_cld_cloud_name || '/image/destroy', 
            p_http_method=>'POST',
            p_parm_name=>l_parm_names,
            p_parm_value=>l_parm_values); 

        SELECT error_message INTO l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS error_message VARCHAR2(500) PATH '$.error.message');
        
        IF (l_error_message IS NOT NULL) THEN
            log(l_clob);
            RAISE_APPLICATION_ERROR(-20001, l_error_message);
        END IF;
        
        DELETE asset WHERE id=pId;
        
        l_clob:=NULL;
        getThumbnailContent(l_article_id, l_user_id, l_nb_assets, l_instruction, l_clob);
        
        UPDATE article SET updated_date=current_date, nb_assets=l_nb_assets WHERE id=l_article_id;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('updated', fmtUpdatedDate(current_date));
        apex_json.write('content', l_clob);
        apex_json.write('nb', l_nb_assets);
        apex_json.write('instruction', l_instruction);

        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;
    
    /*
     **  Remove user and all articles, assets,grants etc. Runs as a background job 
     */   
    PROCEDURE deleteAll(pUserId IN users.id%type) IS
        nb_articles PLS_INTEGER;
        nb_assets NUMBER:=0;
        n NUMBER;
    BEGIN
        FOR C IN (SELECT id FROM article WHERE author_user_id=pUserId) LOOP
            n:=deleteUploadedMedia(C.id);
            nb_assets:=nb_assets+n;
        END LOOP;

        DELETE article WHERE author_user_id=pUserId;
        nb_articles:=SQL%ROWCOUNT;
        
        DELETE users WHERE id=pUserId;

        log('Deleted ' || nb_articles || ' articles and ' || nb_assets || ' images/videos.');
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;        
    END;
    
    /*
     **  Publish article
     */   
    PROCEDURE publishArticle(pArticleId IN article.id%type) IS
        n PLS_INTEGER;
        l_user_id users.id%type;
    BEGIN
        l_user_id:=getUserId();
        
        /* Reject publication request if cover image does not have ALT description */

        SELECT COUNT(*) INTO n FROM dual WHERE EXISTS
        (
            SELECT alt_text, display_order FROM
            (
                SELECT MIN(display_order) OVER () cover, display_order, alt_text FROM asset WHERE article_id=pArticleId 
            )
            WHERE display_order=cover AND alt_text IS NOT NULL
        );

        apex_json.open_object; 
        
        IF (n=0) THEN
            apex_json.write('message', 'Cover Image ALT TEXT must be set before article can be published');
        ELSE
            UPDATE article SET is_public='Y', updated_date=current_date WHERE id=pArticleId AND author_user_id=l_user_id;
        END IF;
        
        apex_json.write('updated', fmtUpdatedDate(current_date));
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
                RAISE;
    END;
    
    /*
     **  Publish article
     */   
    PROCEDURE unpublishArticle(pArticleId IN article.id%type) IS
        l_user_id users.id%type;
    BEGIN
        l_user_id:=getUserId();
        
        UPDATE article SET is_public='N', updated_date=current_date WHERE id=pArticleId AND author_user_id=l_user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
                RAISE;
    END;    
    
    /*
     **  Reorder assets
     */
    PROCEDURE reorderAssets(pBodyText IN CLOB) IS
        l_article_id article.id%type;
        l_dbid_string LONG;
        l_first_dbid asset.id%type;
        
        TYPE t_asset IS RECORD(
            id asset.id%type,
            display_order asset.display_order%type);
        TYPE tt_asset IS TABLE OF t_asset;
        l_assets tt_asset; 
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_resource_type asset.resource_type%type; 
        l_public_id asset.public_id%type; 
        l_format asset.format%type; 
        l_width asset.width%type;
        
        l_user_id users.id%type;
        l_url VARCHAR2(500);
        l_clob CLOB;
        l_na_number NUMBER;
        l_na_varchar VARCHAR2(500);
    BEGIN
        l_user_id:=getUserId();
        
        SELECT dbid_string INTO l_dbid_string 
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (dbid_string));

        SELECT column_value, rownum 
          BULK COLLECT INTO l_assets
          FROM TABLE(apex_string.split(l_dbid_string,':'));
          
        /* get the article id from first asset */
        SELECT article_id INTO l_article_id
          FROM asset WHERE id=l_assets(1).id;
        
        /* ... and get id of first asset as this may have been replaced */
        SELECT cover_asset_id 
          INTO l_first_dbid 
          FROM article 
         WHERE id=l_article_id;
        
        FORALL i IN l_assets.first .. l_assets.last
        UPDATE asset SET display_order=l_assets(i).display_order WHERE id  = l_assets(i).id;
        
        IF (l_assets(1).id<>l_first_dbid) THEN
            SELECT cld_cloud_name, resource_type, public_id, format, width
              INTO l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width
              FROM asset 
              WHERE id=l_assets(1).id;
            l_url:=getCloudinaryUrl(l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width);
            UPDATE article SET updated_date=current_date, cover_asset_id=l_assets(1).id WHERE id=l_article_id;
        END IF;
        
        l_clob:=NULL;
        getThumbnailContent(l_article_id, l_user_id, l_na_number, l_na_varchar, l_clob);
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('url', l_url);
        apex_json.write('content', l_clob);
        apex_json.write('updated', fmtUpdatedDate(current_date));
        apex_json.close_object;
        
        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    
    /**
     **    Update user's record  with Cloudinary API details. Submit background job to transfer users's Cloudinary assets.
     */
    PROCEDURE updateUser IS
        l_cld_api VARCHAR2(200):=apex_util.get_session_state('P2_CLD_API_ENV');
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_p1 INTEGER;
        l_p2 INTEGER;
        l_p3 INTEGER;
        l_error_message VARCHAR2(100);
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_cld_error_message VARCHAR2(100);
        l_clob CLOB;
        l_job_name VARCHAR2(30);
        l_cld_plan VARCHAR2(50);
        l_url VARCHAR2(500);
    BEGIN
        log('Start transfer process for user id:' || l_user_id|| ' P2_CLD_API_ENV:' || l_cld_api);
        
        IF (l_cld_api IS NULL) THEN
            l_error_message:='Cloudinary API Environment variable empty.'; 
        ELSE
            l_p1:=INSTR(l_cld_api,'/',-1);
            l_p2:=INSTR(l_cld_api,':',-1);
            l_p3:=INSTR(l_cld_api,'@');
    
            l_cld_cloud_name:=SUBSTR(l_cld_api,l_p3+1);
            l_cld_api_key:=SUBSTR(l_cld_api,l_p1+1,l_p2-l_p1-1); 
            l_cld_api_secret:=SUBSTR(l_cld_api,l_p2+1,l_p3-l_p2-1);
            
            IF (l_cld_cloud_name IS NULL OR l_cld_api_key IS NULL OR l_cld_api_secret IS NULL) THEN
                l_error_message:='Cloudinary API Environment invalid.';
            END IF;
        END IF;
        
        IF (l_error_message IS NULL) THEN
            l_url:='https://api.cloudinary.com/v1_1/' || l_cld_cloud_name || '/usage';
            l_clob := apex_web_service.make_rest_request(
                p_url=>l_url,
                p_http_method=>'GET',
                p_username=>l_cld_api_key,
                p_password=>l_cld_api_secret);
            SELECT plan, error_message INTO l_cld_plan, l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS plan VARCHAR2(50) PATH '$.plan', error_message VARCHAR2(100) PATH '$.error.message');  
        END IF;
        
        IF (l_error_message IS NOT NULL) THEN
            apex_util.set_session_state('P2_PLSQL_STATUS','nok',p_commit=>false);
            apex_application.g_x01 := l_error_message;
            apex_application.g_x02 := 'CLOUDINARY_URL is invalid or inconsistent'; 
            apex_application.g_x03 := 'error';  
            RETURN;
        END IF;


        /* Validation checks passed. Update user record and submit background job (takes a long time) to transfer the user's assets to their new Cloudinary account */

        UPDATE users 
           SET cld_cloud_name=l_cld_cloud_name,
               cld_api_key=l_cld_api_key, 
               cld_api_secret=l_cld_api_secret,
               cld_plan=l_cld_plan,
               updated_date=current_timestamp
         WHERE id=l_user_id;
        
        apex_util.set_session_state('APP_CLD_API_KEY',l_cld_api_key,p_commit=>false);
        apex_util.set_session_state('APP_CLD_CLOUD_NAME',l_cld_cloud_name,p_commit=>false);
        
        l_job_name:='TRANSFER_USER_ASSETS_'||l_user_id;
        
        dbms_scheduler.create_job(
            job_name =>  l_job_name,
            program_name => 'P_TRANSFER_ASSETS',
            enabled =>    FALSE );
            
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_name => 'PUSERID',
            argument_value => l_user_id);
        
        dbms_scheduler.enable(l_job_name);
        
        apex_util.set_session_state('P2_PLSQL_STATUS','ok',p_commit=>false);
        apex_application.g_x01:='Successfully configured a ' || l_cld_plan || ' Cloudinary plan.';
        apex_application.g_x02:='Starting transfer of all assets to your new Cloudinary account.';
        apex_application.g_x03:='success';

        EXCEPTION
            WHEN OTHERS THEN
                log_error(sqlcode,sqlerrm);
                RAISE;
    END;
    
    /*
     **  Upload Core Web Vitals uploaded through navigator.beacon - hence no response sent.
     */      
    PROCEDURE uploadWebVitals(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
    BEGIN
        INSERT INTO core_web_vitals (id, session_id, page_id, ip_address, name, value, rating) --, browser, width)
        SELECT seq_core_web_vitals.nextval, session_id, page_id, l_ip_address, name, value, rating --, l_session_id, l_browser, l_width
        FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' COLUMNS (session_id, page_id,
            NESTED '$.cwv[*]' COLUMNS (name, value, rating)))
        LOG ERRORS INTO core_web_vitals_err REJECT LIMIT UNLIMITED;                 
    END;

    /*
     **  Get Cloudinary usage details for each Cloudinary subscriber. Daily job.
     */    
    PROCEDURE getUsage(pUserId IN users.id%type DEFAULT NULL, pUsageDate IN DATE DEFAULT NULL) IS
        l_url VARCHAR2(100);
        l_clob CLOB;
        l_error_message VARCHAR2(50);
        l_usage_date_param VARCHAR2(16):=NULL;
    BEGIN
        IF (pUsageDate IS NOT NULL) THEN
            l_usage_date_param:='/date='||TO_CHAR(pUsageDate,'DD-MM-YYYY');
        END IF;
        FOR C IN (SELECT id, 
                         cld_cloud_name, 
                         cld_api_key, 
                         cld_api_secret 
                    FROM users 
                   WHERE cld_cloud_name IS NOT NULL
                     AND id=NVL(pUserId,id)
                   ) 
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/usage' || l_usage_date_param;
            log(l_url);
            l_clob := apex_web_service.make_rest_request(
                p_url=>l_url,
                p_http_method=>'GET',
                p_username=>C.cld_api_key,
                p_password=>C.cld_api_secret);
            SELECT error_message INTO l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS error_message VARCHAR2(100) PATH '$.error.message');  
            IF (l_error_message IS NOT NULL) THEN
                log('Error callling REST API for user ' || C.id || ' - ' || l_error_message);
                CONTINUE;
            END IF;
            DELETE usage WHERE user_id=C.id AND usage_date=NVL(pUsageDate,TRUNC(sysdate));
            INSERT INTO usage (user_id,usage_date,last_updated,plan,transformations_usage,transformations_credit_usage,bandwidth_usage,bandwidth_credit_usage,storage_usage,storage_credit_usage,
                credits_usage,credits_limit,used_percent,objects_usage,requests,resources,derived_resources,image_max_size,video_max_size,raw_max_size)
            SELECT C.id, TO_DATE(date_requested,'YYYY-MM-DD"T"hh24:mi:ss"Z"'),TO_DATE(last_updated,'YYYY-MM-DD'),
                plan,
                transformations_usage,transformations_credit_usage,bandwidth_usage,bandwidth_credit_usage,storage_usage,storage_credit_usage,
                credits_usage,credits_limit,used_percent,
                objects_usage,requests,resources,derived_resources,
                image_max_size,video_max_size,raw_max_size
              FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS 
                date_requested VARCHAR2(100) PATH '$.date_requested', 
                last_updated VARCHAR2(100) PATH '$.last_updated', 
                plan VARCHAR2(100) PATH '$.plan',
                transformations_usage NUMBER PATH '$.transformations.usage',
                transformations_credit_usage NUMBER PATH '$.transformations.credits_usage',
                bandwidth_usage NUMBER PATH '$.bandwidth.usage',
                bandwidth_credit_usage NUMBER PATH '$.bandwidth.credits_usage',
                storage_usage NUMBER PATH '$.storage.usage',
                storage_credit_usage NUMBER PATH '$.storage.credits_usage',
                credits_usage NUMBER PATH '$.credits.usage',
                credits_limit NUMBER PATH '$.credits.limit',
                used_percent NUMBER PATH '$.credits.used_percent',
                objects_usage NUMBER PATH '$.objects.usage',
                requests NUMBER PATH '$.requests',
                resources NUMBER PATH '$.resources',
                derived_resources NUMBER PATH '$.derived_resources',
                image_max_size NUMBER PATH '$.media_limits.image_max_size_bytes',
                video_max_size NUMBER PATH '$.media_limits.video_max_size_bytes',
                raw_max_size NUMBER PATH '$.media_limits.raw_max_size_bytes'
                );
        END LOOP;
        COMMIT;
    END;

END;
/