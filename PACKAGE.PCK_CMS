CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS" is
    --
    PROCEDURE deleteAll(pUserId IN users.id%type);
    --
    PROCEDURE deleteArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE deleteAsset(pId IN asset.id%type);
    --
    PROCEDURE deleteWebsite(pWebsiteId IN website.id%type, pBodyText IN CLOB);
    --
    PROCEDURE getContent(pWebsiteId IN website.id%type);
    --
    PROCEDURE getCldDetails(pArticleId IN article.id%type);
    --
    PROCEDURE getCldSignature(pParamsToSign IN CLOB);
    --
    PROCEDURE getArticle(pArticleId IN article.id%type);
    --
    PROCEDURE getPerformance;
    --
    PROCEDURE getThumbnails(pArticleId IN article.id%type);
    --
    PROCEDURE getWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE getWebsiteList(pWebsiteId IN website.id%type);
    --
    PROCEDURE insertArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE insertWebsite(pWebsiteId IN website.id%type, pBodyText IN CLOB);
    --
    PROCEDURE publishArticle(pArticleId IN article.id%type);
    --
    PROCEDURE reorderAssets(pBodyText IN CLOB);
    --
    PROCEDURE reorderWebsiteArticles(pWebsiteId IN website_article.website_id%type, pBodyText IN CLOB);
    --
    PROCEDURE setClientInfo(pBodyText IN CLOB);
    --
    PROCEDURE unpublishArticle(pArticleId IN article.id%type);
    --
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE uploadWebVitals(pBodyText IN CLOB);
    --
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB);
    --
    PROCEDURE uploadPerformance(pBodyText IN CLOB);
    --
    PROCEDURE updateField(pBodyText IN CLOB);
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS" is

    PROCEDURE getCldDetails(pArticleId IN article.id%type) IS
        l_user_id users.id%type;
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size usage.image_max_size%type;
        l_video_max_size usage.video_max_size%type;
        l_cldapikey VARCHAR2(1);
    BEGIN      
        l_user_id:=pck_core.getUserId();

        /* get Cloudinary details either of logged on user of the hosting user */
        BEGIN
            SELECT cld_cloud_name, cld_api_key, image_max_size, video_max_size
              INTO l_cld_cloud_name, l_cld_api_key, l_image_max_size, l_video_max_size
              FROM 
                    (
                        SELECT ROW_NUMBER() OVER (ORDER BY usage_date DESC) rn, users.cld_cloud_name, users.cld_api_key, usage.image_max_size, usage.video_max_size
                        FROM users, usage 
                        WHERE users.id=l_user_id
                        AND usage.user_id=users.id
                    ) 
             WHERE rn=1;
             l_cldapikey:='Y';

            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    SELECT cld_cloud_name, cld_api_key, image_max_size, video_max_size
                      INTO l_cld_cloud_name, l_cld_api_key, l_image_max_size, l_video_max_size
                      FROM 
                            (
                                SELECT ROW_NUMBER() OVER (ORDER BY usage_date DESC) rn, users.cld_cloud_name, users.cld_api_key, usage.image_max_size, usage.video_max_size
                                FROM users, usage 
                                WHERE users.hosting_user_ind='Y'
                                AND usage.user_id=users.id
                            ) 
                     WHERE rn=1;  
                     l_cldapikey:='N';
            END;

            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('cloudname', l_cld_cloud_name);
            apex_json.write('apikey', l_cld_api_key);
            apex_json.write('maxImageFileSize', l_image_max_size);
            apex_json.write('maxVideoFileSize', l_video_max_size);
            apex_json.write('cldapikey', l_cldapikey);
            apex_json.write('articleId', CASE WHEN pArticleId=0 THEN seq_article.nextval ELSE pArticleId END);
            apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    PROCEDURE getCldSignature(pParamsToSign IN CLOB) IS
        l_params_to_sign clob:=pParamsToSign;
        l_user_id users.id%type;
        l_string_to_sign varchar2(2000):=NULL; 
    BEGIN
        l_user_id:=pck_core.getUserId();

        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM JSON_TABLE(l_params_to_sign FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            );

        /* get Cloudinary details either of logged on user OR the hosting Cloudinary user */
        FOR C IN (SELECT NVL(u1.cld_cloud_name,u2.cld_cloud_name) cld_cloud_name, NVL(u1.cld_api_key, u2.cld_api_key) cld_api_key, NVL(u1.cld_api_secret,u2.cld_api_secret) cld_api_secret
                    FROM users u1, users u2
                   WHERE u1.id=l_user_id
                     AND u2.hosting_user_ind='Y')
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || C.cld_api_secret), dbms_crypto.HASH_SH1));
            apex_json.close_object;
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     ** Set Time Zone according to client device. Procedure called on DOMContentLoaded event
     */
    PROCEDURE setClientInfo(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_client_TZ users.client_tz%type;
        l_maxtouchpoints NUMBER;
        l_user_id users.id%type;
    BEGIN
        l_user_id:=pck_core.getUserId(pSaveCookie=>TRUE);

        IF (l_user_id IS NOT NULL) THEN
            SELECT timezone, maxtouchpoints
              INTO l_client_TZ, l_maxtouchpoints
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' COLUMNS (timezone, maxtouchpoints));
            UPDATE users SET client_tz=l_client_TZ, maxtouchpoints=l_maxtouchpoints, updated_date=current_timestamp WHERE id=l_user_id;          
        END IF;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;


    /*
    ** GET ARTICLE (PAGE) CONTENT FOR WEBSITE
    */
    PROCEDURE getWebsite(pWebsiteId IN website.id%type) IS
        l_user_id users.id%type;
    BEGIN
        l_user_id:=pck_core.getUserId();

        apex_json.open_object;

        FOR C IN (
            SELECT domain_name, contact_email, DECODE(image_dimension,0.25,'s',0.625,'m',1,'l') image_dimension, template, favicon_url, trade_name,affiliation_link_img,affiliation_link_url
              FROM website 
             WHERE id=pWebsiteId
               AND user_id=l_user_id) 
        LOOP
            apex_json.write('domain_name', C.domain_name);
            apex_json.write('contact_email', C.contact_email);
            apex_json.write('image_dimension', 'image-dimension-' || C.image_dimension);
            apex_json.write('template', 'template-' || LOWER(C.template));
        END LOOP;

        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
    ** GET ARTICLE (PAGE) CONTENT FOR WEBSITE
    */
    PROCEDURE getWebsiteArticles(pWebsiteId IN website.id%type) IS
        l_user_id users.id%type;
        l_user_name users.name%type;
        l_clob CLOB;
    BEGIN
        l_user_id:=pck_core.getUserId();
        SELECT name INTO l_user_name FROM users WHERE id=l_user_id;
        /*
        FOR C IN (
            SELECT a.id,
                   a.is_public,
                   c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                   NVL(a.nb_assets,0) nb_assets,
                   a.title, 
                   a.excerpt,
                   wa.nav_name,
                   wa.page_title,
                   CASE WHEN a.excerpt IS NOT NULL AND a.word_count>0 THEN a.word_count || ' word' || CASE WHEN a.word_count>1 THEN 's' END END word_count,
                   NVL(a.updated_date, a.created_date) updated_date,
                   wa.display_order display_order
              FROM article a, website_article wa, asset c
             WHERE wa.website_id=pWebsiteId
               AND a.id=wa.article_id
               AND a.cover_asset_id=c.id(+)
             UNION ALL
             SELECT -1, null, null, null, null,null,null,0,null,null,null,null,null,systimestamp,-1 from dual
             ORDER BY display_order) 
        LOOP
            l_clob:=l_clob || TO_CLOB(
                pck_core.buildArticle(C.id, C.nb_assets, C.is_public, C.title, C.excerpt, C.nav_name, C.page_title, C.word_count, C.updated_date, pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width)));
        END LOOP;
        */

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    PROCEDURE getWebsiteList(pWebsiteId IN website.id%type) IS
        l_clob CLOB;
    BEGIN
        FOR C IN (SELECT wa.article_id,
                   c.cld_cloud_name, c.resource_type, c.public_id, c.format, c.width,
                   NVL(a.title, a.excerpt) article_text,
                   wa.display_order display_order
              FROM article a, website_article wa, asset c
             WHERE wa.website_id=pWebsiteId
               AND a.id=wa.article_id
               AND a.cover_asset_id=c.id(+)
             ORDER BY display_order)
        LOOP
            l_clob:=l_clob || TO_CLOB('
            <li data-id="' || C.article_id || '">
                <figure>
                    <img src="' || pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
                    <figcaption>' || C.article_text || '</figcaption>
                </figure>
            </li>');
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;


    PROCEDURE getThumbnailContent(pArticleId IN article.id%type, pUserId IN users.id%type, pNbAssets IN OUT article.nb_assets%type, pInstruction IN OUT NOCOPY VARCHAR2, pContent IN OUT NOCOPY CLOB) 
    IS
        l_url_image VARCHAR2(300);
        l_media_type VARCHAR2(5);   
    BEGIN
        FOR C IN (
            SELECT a.id, a.cld_cloud_name, a.resource_type, a.public_id, TO_CHAR(a.created_date,'dd-Mon-yyyy') uploaded, 
                   DECODE(a.width,0,pck_core.gWidthThumbnail,a.width) width, DECODE(a.height,0,pck_core.gWidthThumbnail,a.height) height, REPLACE(a.alt_text,'"','&quot;') alt_text, a.description, a.bytes, a.format,
                   COUNT(*) OVER () nb, ROW_NUMBER() OVER (ORDER BY a.display_order) rn,
                   t.nb_assets, NVL(u.maxtouchpoints,0) maxtouchpoints
              FROM asset a, article t, users u
             WHERE t.id=pArticleId
               AND a.article_id=t.id
               AND t.author_user_id=NVL(pUserId, t.author_user_id)
               AND u.id=t.author_user_id
               AND NVL(a.format,'N/A')<>'clt'
             ORDER BY a.display_order )
        LOOP
            IF (C.rn=1) THEN
                pNbAssets:=C.nb_assets;
                pInstruction:=CASE WHEN C.maxtouchpoints > 1 THEN 'Tap' ELSE 'Click' END || ' Image to view in full screen' || 
                       CASE WHEN pUserId IS NOT NULL AND C.nb_assets > 1 THEN 
                            '<span>|</span>Drag and drop images to reorder<span>|</span>First image is article cover' END;
            END IF;

            pContent:=pContent || TO_CLOB('
                <li class="card" tabindex="0" data-id="' || C.id || '">
                    <div class="button-container">
                        <span>' || C.rn || '/' || C.nb || '</span>
                        <button type="button" class="fa delete-asset">' || pck_icons.g_delete_svg || '</button>
                    </div>');

            l_url_image:=pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width);
            l_media_type:=pck_core.getMediaType(C.resource_type, C.format);

            pContent:=pContent || TO_CLOB('<img class="fullscreen" data-dimensions="'  || 
                                            ROUND(C.width*.25) || 'x' || ROUND(C.height*.25) || ':' || 
                                            ROUND(C.width*.625) || 'x' || ROUND(C.height*.625) || ':' || 
                                            C.width || 'x' || C.height || '" src="' || l_url_image || '"' || CASE WHEN l_media_type='video' THEN ' style="display:none"' END || '>');

            CASE l_media_type

                WHEN 'video' THEN
                    pContent:=pContent || TO_CLOB(
                    '<video controls preload="metadata" poster="' || l_url_image || '">
                        <source src="' || REPLACE(l_url_image,'.jpg','.webm') || '" type="video/webm"></source>
                        <source src="' || REPLACE(l_url_image,'.jpg','.mp4') || '" type="video/mp4"></source>
                    </video>');

                WHEN 'audio' THEN
                    l_url_image:=REGEXP_REPLACE(l_url_image,',w_(\d)+\/fl_waveform',NULL);
                    pContent:=pContent || TO_CLOB(
                    '<audio preload="metadata" controls>
                        <source src="' || REPLACE(l_url_image,'.png','.aac') || '" type="audio/aac"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.ogg') || '" type="audio/ogg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.mp3') || '" type="audio/mpeg"></source>
                        <source src="' || REPLACE(l_url_image,'.png','.wav') || '" type="audio/wav"></source>
                    </audio>');

                ELSE NULL;

            END CASE;

            pContent:=pContent || TO_CLOB(pck_core.buildTextareaWrapper(C.id,'asset.alt_text',C.alt_text));
            pContent:=pContent || TO_CLOB(pck_core.buildTextareaWrapper(C.id,'asset.description',C.description));

            pContent:=pContent || TO_CLOB('</li>');

        END LOOP;

    END;

    /*
     **  Build gallery of thumbnail images from ASSET table 
     **  Executed in response to user requesting gallery of media assets for a given article
     */
    PROCEDURE getThumbnails(pArticleId IN article.id%type) IS
        l_clob CLOB;
        l_user_id users.id%type;
        l_instruction VARCHAR2(300);
        n PLS_INTEGER;
    BEGIN
        l_user_id:=pck_core.getUserId();

        getThumbnailContent(pArticleId, l_user_id, n, l_instruction, l_clob);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_clob);
        apex_json.write('instruction', l_instruction);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Load metadata after media uploaded to Cloudinary.
     **  Insert uploaded asset metadata into ASSETS table
     **  Return new asset count and url of first image as default cover image
     */       
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB) IS
        l_article_id article.id%type;
        l_website_id website.id%type;
        l_metadata clob:=pBodyText;
        l_user_id users.id%type;
        l_start_order PLS_INTEGER;
        l_start_order_website PLS_INTEGER;
        l_updated_date article.updated_date%type:=current_timestamp;
        nb_assets PLS_INTEGER;
        n PLS_INTEGER;
    BEGIN
        l_user_id:=pck_core.getUserId();

        SELECT article_id, website_id
          INTO l_article_id, l_website_id
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id, website_id)) WHERE ROWNUM=1;

        MERGE INTO article t
        USING (SELECT l_article_id article_id FROM dual) s
           ON (t.id=s.article_id)
         WHEN MATCHED THEN UPDATE SET updated_date=current_timestamp
         WHEN NOT MATCHED THEN INSERT (id, author_user_id, created_date) VALUES (s.article_id, l_user_id, current_timestamp);

        SELECT COUNT(*) INTO n FROM dual WHERE EXISTS (SELECT null FROM website_article WHERE article_id=l_article_id AND website_id=l_website_id);
        IF (n=0) THEN
            SELECT NVL(MAX(display_order),0)+1 INTO l_start_order_website FROM website_article WHERE website_id=l_website_id;
            INSERT INTO website_article(article_id, website_id, display_order, user_id) VALUES (l_article_id, l_website_id, l_start_order_website, l_user_id);
        END IF;

        SELECT NVL(MAX(display_order),0) INTO l_start_order FROM asset WHERE article_id=l_article_id;

        INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, created_date, display_order)
        SELECT seq_asset.nextval, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, current_timestamp, l_start_order+ROWNUM
          FROM JSON_TABLE(l_metadata FORMAT JSON, '$.images[*]' COLUMNS (article_id, public_id, width, height, bytes, resource_type, format, cld_cloud_name));

        /* Return upload details to calling Javascript process in order to update front-end */
        FOR C IN (SELECT id, cld_cloud_name, resource_type, public_id, format, width, nb_assets
                    FROM
                    (
                    SELECT id, cld_cloud_name, resource_type, public_id, format, width, display_order, 
                            MIN(display_order) OVER () min_display_order, 
                            COUNT(*) OVER () nb_assets
                    FROM asset 
                    WHERE article_id=l_article_id
                    )
                    WHERE display_order=min_display_order)
        LOOP
            UPDATE article SET cover_asset_id=C.id, nb_assets=C.nb_assets WHERE id=l_article_id;
            APEX_JSON.open_object; 
            APEX_JSON.write('success', TRUE);
            APEX_JSON.write('articleId',l_article_id);
            APEX_JSON.write('nbAssets','&blacktriangleright;1/' || C.nb_assets);
            APEX_JSON.write('imgurl',pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width));
            APEX_JSON.write('updated', pck_core.fmtUpdatedDate(l_updated_date));
            APEX_JSON.close_object;
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;  

    /*
     **  Upload Performance data from entries accumulated by Javascript Performance API
     */       
    PROCEDURE uploadPerformance(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        n PLS_INTEGER;
    BEGIN
        INSERT /*+ ignore_row_on_dupkey_index ( performance (session_id, url)) */ 
          INTO performance(id, asset_id, session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, capture_date, user_id, ip_address)
        WITH json AS 
        (
            SELECT session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, timestamp'1970-01-01 00:00:00' + numtodsinterval(epoch,'second') capture_date, l_user_id, l_ip_address
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, epoch))
        )
        SELECT seq_performance.nextval, a.id, j.session_id, j.url, j.connection_type, j.transfersize, j.duration, j.content_type, j.window_innerwidth, j.browser, j.capture_date, l_user_id, l_ip_address
          FROM json j, asset a
         WHERE j.cld_cloud_name=a.cld_cloud_name
           AND j.resource_type=a.resource_type
           AND j.public_id=a.public_id;

        INSERT /*+ ignore_row_on_dupkey_index ( servertiming (performance_id, seq)) */ 
          INTO servertiming(performance_id, seq, name, duration, description)
        WITH json AS 
        (
            SELECT session_id, url, seq, name, duration, description
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, url,
                        NESTED  '$.servertiming[*]' columns (seq for ordinality,name,duration,description))) 
        )
        SELECT p.id, j.seq, j.name, j.duration, j.description
          FROM json j, performance p
         WHERE p.session_id=j.session_id
           AND p.url=j.url
           AND j.seq IS NOT NULL;        

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object; 

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
    ** Write HTML table of media download performance for the article
    */
    PROCEDURE getPerformance IS
        l_article_id asset.article_id%type:=apex_application.g_x01;
        l_content CLOB;
        l_ip_address performance.ip_address%type;
        l_session_id NUMBER:=APEX_CUSTOM_AUTH.GET_SESSION_ID;
        n PLS_INTEGER:=0;
        l_timezone users.client_tz%type:=apex_util.get_session_state('APP_CLIENT_TZ');
        l_url_parts apex_t_varchar2;
        l_transformation VARCHAR(300);
    BEGIN
        IF (apex_authentication.is_authenticated) THEN
            l_ip_address:=NULL;
        ELSE
            l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        END IF;

        /* 

        FOR C IN (SELECT  COUNT(*) OVER (PARTITION BY a.cld_cloud_name, a.resource_type, a.public_id) nb_rows, 
                          ROW_NUMBER() OVER (PARTITION BY a.display_order,a.cld_cloud_name, a.resource_type, a.public_id ORDER BY p.capture_date DESC) rn, 
                          a.cld_cloud_name, a.resource_type, a.public_id, a.format, a.width, a.bytes, apex_util.get_since(a.created_date) created_date, apex_util.get_since(p.capture_date) capture_date, 
                          p.url, p.transfersize, p.duration, p.content_type, p.browser, p.session_id, p.window_innerwidth, p.ip_address, p.connection_type, p.servertiming
                    FROM asset a, performance p
                   WHERE a.article_id=l_article_id
                     AND a.cld_cloud_name=p.cld_cloud_name
                     AND a.resource_type=p.resource_type
                     AND a.public_id=p.public_id
                     AND p.ip_address = NVL(l_ip_address, p.ip_address)
                     AND p.session_id=NVL(l_session_id, p.session_id)
                   ORDER BY a.display_order)
        LOOP
            n:=n+1;
            IF (n=1) THEN
                l_content:=to_clob(
                '<table>
                    <caption>CLOUDINARY BASE URL: ' || SUBSTR(C.url,1,INSTR(C.url,'/',1,4)) || '</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>DOWNLOADED<br>I.P. (CONNECTION)<br>BROWSER (WIDTH)</th>
                            <th class="align-left">TRANSFORMATION</th>
                            <th>TRANSFER SIZE<br>DURATION<br>CONTENT/TYPE</th>
                            <th class="align-left">SERVER TIMING</th>
                        </tr>
                    </thead>
                    <tbody>
                ');
            END IF;

            IF (C.nb_rows=C.rn) THEN
                l_content:=l_content || to_clob('<tr class="last-tr">');
            ELSE
                l_content:=l_content || to_clob('<tr>');
            END IF;

            IF (C.rn=1) THEN 
                l_content:=l_content || to_clob(
                '<td rowspan="' || C.nb_rows || '">
                    <figure><img src="' || pck_core.getCloudinaryUrl(C.cld_cloud_name, C.resource_type, C.public_id, C.format, C.width) || '">
                        <figcaption><span class="label">File name: </span>' || SUBSTR(C.public_id,1,INSTR(C.public_id,'_',-1)-1) || '.' || C.format 
                            || '<br><span class="label">Original size: </span>' || apex_string_util.to_display_filesize(C.bytes) 
                            || '<br><span class="label">Width: </span>' || C.width || ' px'
                            || '<br><span class="label">Uploaded: </span>' || C.created_date || '
                    </figcaption></figure></td>');
            END IF;

            l_url_parts:=apex_string.split(C.url,'/');
            IF (C.resource_type='image') THEN
                l_transformation:=l_url_parts(5);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            ELSE
                l_transformation:=l_url_parts(7);
                IF (INSTR(l_transformation,'f_auto'))=0 THEN
                    l_transformation:=NULL;
                END IF;
            END IF;

            l_content:=l_content || to_clob('
                <td class="align-center">' || C.capture_date || '<br>' || C.ip_address || CASE WHEN C.connection_type IS NOT NULL THEN ' (' || C.connection_type || ')' END || '<br>' || C.browser || ' (' || C.window_innerwidth || ' px)</td>
                <td>' || l_transformation || '</td>
                <td class="align-center">' || apex_string_util.to_display_filesize(C.transfersize) || '<br>' || C.duration || ' ms<br>' || C.content_type|| '</td>
                <td>' || REPLACE(C.servertiming,'|','<br>') || '</td>
            </tr>');

        END LOOP;

        IF (n>0) THEN
            l_content:=l_content || to_clob('</tbody></table>');
        ELSE
            l_content:= to_clob('<p>All media for your session was retrieved from Cache</p>');
        END IF;
        */

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('content', l_content);
        APEX_JSON.close_object;          

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);        
    END;

    /*
    ** Fetched from Eleventy to retrieve website content and array of articles
    ** {
    **    website: {},
    **    articles: [{},{},..{}]
    ** }
    */ 

    PROCEDURE getContent(pWebsiteId IN website.id%type) IS
        l_json JSON_OBJECT_T;
        l_website_object JSON_OBJECT_T;
        l_article_object JSON_OBJECT_T;
        l_article_array JSON_ARRAY_T;
        l_asset_object JSON_OBJECT_T;
        l_asset_array JSON_ARRAY_T;
        l_url_img VARCHAR2(500);
        l_media_type VARCHAR2(5);
        l_nb_articles INTEGER;
        l_nb_assets INTEGER;
        l_admin_user_id users.id%type;
        l_signed_data RAW(4000);
        l_clob CLOB;

        /* If title missing remove the empty <h1></h1> tag */
        FUNCTION stripHeading(pTitle IN VARCHAR2, pBodyHtml IN OUT NOCOPY CLOB) RETURN CLOB IS
        BEGIN
            IF (TRIM(pTitle) IS NOT NULL) THEN
                RETURN (pBodyHtml);
            END IF;
            RETURN (dbms_lob.substr(pBodyHtml, 
                    dbms_lob.getlength (pBodyHtml),
                    dbms_lob.instr(pBodyHtml,'</h1>')+5));
        END;

        FUNCTION getTerraformInvokeUrl RETURN VARCHAR2 IS
            l_clob CLOB;
            l_terraform_url VARCHAR2(200);
            l_invoke_url VARCHAR2(200);
        BEGIN
            FOR C IN (SELECT organization_name, workspace_name, token FROM terraform) LOOP
                apex_web_service.clear_request_headers;
                apex_web_service.g_request_headers(1).name := 'Authorization';
                apex_web_service.g_request_headers(1).value := 'Bearer ' || C.token;   
                apex_web_service.g_request_headers(2).name := 'Content-Type';
                apex_web_service.g_request_headers(2).value := 'application/json';

                l_terraform_url:='https://app.terraform.io/api/v2/organizations/' || C.organization_name || '/workspaces/' || C.workspace_name;                
                l_clob := apex_web_service.make_rest_request(p_url=>l_terraform_url, p_http_method=>'GET');

                SELECT 'https://app.terraform.io' || related 
                  INTO l_terraform_url
                  FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related));

                l_clob := apex_web_service.make_rest_request(p_url=>l_terraform_url, p_http_method=>'GET');
                FOR C1 IN (SELECT name, value FROM JSON_TABLE(l_clob, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')))
                LOOP
                    pck_core.log(C1.name || ':' || C1.value);
                    IF (C1.name='invoke_url') THEN
                        l_invoke_url:=C1.value || '/';
                    END IF;
                END LOOP;
            END LOOP;
            RETURN (l_invoke_url);
        END;  

    BEGIN
        l_json:= new JSON_OBJECT_T;
        l_website_object:= new JSON_OBJECT_T;
        l_article_array:= new JSON_ARRAY_T;

        /* Get the admin user with Netlify and Github tokens as well as private key required to sign the contact_email for the website */
        SELECT id INTO l_admin_user_id 
          FROM users 
         WHERE github_repos_owner IS NOT NULL 
           AND github_token IS NOT NULL 
           AND netlify_token IS NOT NULL 
           AND netlify_installation_id IS NOT NULL;

        FOR C IN (SELECT w.id, w.domain_name, w.favicon_url, w.image_dimension, w.contact_email, w.trade_name, w.affiliation_link_img, w.affiliation_link_url, 
                         utl_i18n.string_to_raw(regexp_replace(t.private_key,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\s?|\s)','')) private_key
                    FROM website w, users u, terraform t
                   WHERE w.id=pWebsiteId
                     AND u.id=l_admin_user_id)
        LOOP
            l_website_object.put('id',C.id);
            l_website_object.put('name',C.domain_name);
            l_website_object.put('favicon_url',C.favicon_url);
            l_website_object.put('contact_email',C.contact_email);
            l_website_object.put('trade_name',C.trade_name);
            l_website_object.put('affiliation_link_img',C.affiliation_link_img);
            l_website_object.put('affiliation_link_url',C.affiliation_link_url);            
            l_website_object.put('aws_gateway_url',getTerraformInvokeUrl());

            /* sign the contact_email for the website */
            l_signed_data:=DBMS_CRYPTO.SIGN(
               src =>utl_i18n.string_to_raw(C.contact_email),
               prv_key =>C.private_key,
               pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,
               sign_alg =>dbms_crypto.SIGN_SHA256_RSA);

            l_website_object.put('signatureContactEmail', utl_i18n.raw_to_char(utl_encode.base64_encode(l_signed_data)));

            l_json.put('website',l_website_object);

            FOR C1 IN (SELECT a.id, a.created_date, a.word_count, a.title, a.body_html, wa.display_order, apex_string_util.get_slug(wa.nav_name) path_name, wa.nav_name
                        FROM article a, website_article wa
                       WHERE wa.website_id=C.id
                         AND wa.article_id=a.id
                       ORDER BY wa.display_order)
            LOOP
                l_article_object:=new JSON_OBJECT_T;
                l_article_object.put('article_id',C.id);
                l_article_object.put('display_order',C1.display_order);
                l_article_object.put('path_name',NVL(C1.path_name,'index'));
                l_article_object.put('created',TO_CHAR(C1.created_date,'dd.mm.yyyy'));

                IF (C1.nav_name IS NOT NULL) THEN
                    l_article_object.put('nav_name',C1.nav_name);
                END IF;

                IF (C1.title IS NOT NULL) THEN
                    l_article_object.put('title',C1.title);
                END IF;

                IF (C1.body_html IS NOT NULL) THEN
                    l_article_object.put('words',C1.word_count);
                    l_article_object.put('text',stripHeading(C1.title, C1.body_html));
                END IF;


                FOR C2 IN (SELECT rn, nb, cld_cloud_name, resource_type, public_id, format, width, alt_text 
                             FROM
                                (
                                 SELECT cld_cloud_name, resource_type, public_id, format, width, alt_text, display_order, ROW_NUMBER() OVER (ORDER BY display_order) rn, COUNT(*) OVER () nb
                                   FROM asset 
                                  WHERE article_id=C1.id
                                ) 
                            ORDER BY display_order)
                LOOP
                    IF (C2.rn=1) THEN
                        l_asset_array:= new JSON_ARRAY_T;
                        l_asset_object:= new JSON_OBJECT_T;
                    END IF;
                    IF (C2.alt_text IS NOT NULL) THEN
                        l_asset_object.put('alt_text',C2.alt_text);
                    END IF;
                    l_media_type:=pck_core.getMediaType(C2.resource_type, C2.format);
                    l_url_img:=pck_core.getCloudinaryUrl(C2.cld_cloud_name, C2.resource_type, C2.public_id, C2.format, C2.width, C.image_dimension);
                    l_asset_object.put('media',l_media_type);
                    l_asset_object.put('url',l_url_img);
                    l_asset_array.append(l_asset_object);
                    IF (C2.rn=C2.nb) THEN
                        l_article_object.put('assets',l_asset_array);
                    END IF;
                END LOOP;
                l_article_array.append(l_article_object);
            END LOOP;
        END LOOP;
        l_json.put('articles',l_article_array);

        l_nb_articles:=l_article_array.get_size;
        IF (l_nb_articles=0) THEN
            owa_util.status_line(404, '', true);
        ELSE
            owa_util.status_line(200, '', false);
            owa_util.mime_header( 'application/json', TRUE, 'UTF-8' );
            htp.p(l_json.to_clob);
        END IF;

        EXCEPTION WHEN OTHERS THEN
            pck_core.log_error(sqlcode,sqlerrm); 
            owa_util.status_line(400, '', true);
            htp.p('{"sqlcode":'||sqlcode||',"sqlerrm":"'||sqlerrm||'"}');
    END;

    /*
     **  Get the selected article's content in HTML format
     **
     */    
    PROCEDURE getArticle(pArticleId IN article.id%type)  IS
        l_user_id users.id%type;
    BEGIN
        l_user_id:=pck_core.getUserId();

        FOR C IN (SELECT a.body_html, UPPER(u.name) name, apex_util.get_since(a.created_date) created, CASE WHEN a.word_count<200 THEN 'less than a minute' ELSE ROUND(a.word_count/200) || ' minute read' END minutes 
                    FROM article a, users u 
                   WHERE a.id=pArticleId 
                     AND a.author_user_id=NVL(l_user_id,a.author_user_id)
                     AND a.is_public=CASE WHEN l_user_id IS NULL THEN 'Y' ELSE a.is_public END
                     AND a.author_user_id=u.id )
        LOOP
            apex_json.open_object; 
            apex_json.write('success', TRUE); 
            apex_json.write('content', C.body_html);
            apex_json.write('details','<div class="details"><span>' || C.name || '</span><span>-</span><span>' || C.created || '</span><span>-</span><span>' || C.minutes || '</span></div>');
            apex_json.close_object;
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm, pAjax=>TRUE);
    END;  

    /*
     **  Insert row in article table for new article text content
     */      
    PROCEDURE insertArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS 
        l_user_id users.id%type;
        l_website_id website_article.website_id%type;
        l_display_order website_article.display_order%type;
    BEGIN

        l_user_id:=pck_core.getUserId();

        INSERT INTO article (id, author_user_id, created_date) 
        SELECT seq_article.nextval, id, current_timestamp
          FROM users u
         WHERE id=l_user_id;

        FOR C IN (SELECT websiteid FROM JSON_TABLE(pBodyText, '$' COLUMNS (websiteid))) LOOP
            SELECT NVL(MAX(display_order),0)+1 INTO l_display_order FROM website_article WHERE website_id=C.websiteid;
            INSERT INTO website_article(article_id, website_id, display_order, user_id) VALUES (seq_article.currval, C.websiteid, l_display_order, l_user_id);
        END LOOP;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('articleId',seq_article.currval);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Procedure called by the autoSave feature of CKEditor
     */        
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        l_user_id users.id%type;
        l_article_id article.id%type;
        l_title article.title%type;
        l_excerpt varchar2(1000);
        l_word_count article.word_count%type;
        l_edit_text article.body_html%type;
        l_name users.name%type;
        l_client_TZ users.client_TZ%type;
        l_words apex_t_varchar2;
        l_rem PLS_INTEGER;
    BEGIN
        l_user_id:=pck_core.getUserId();

        SELECT SUBSTR(title,1,60) title, 
               REGEXP_SUBSTR(word_count,'(\d)+') word_count,
               edit_text,
               u.name,
               u.client_TZ
          INTO l_title, l_word_count, l_edit_text, l_name, l_client_TZ
          FROM users u, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (title, word_count, edit_text CLOB))
          WHERE u.id=l_user_id;

        apex_escape.set_html_escaping_mode('E');
        l_excerpt:=dbms_lob.substr(utl_i18n.unescape_reference(apex_escape.striphtml(l_edit_text)),200,NVL(LENGTHB(l_title),0)+1);

        l_words:=apex_string.split(REPLACE(l_excerpt,CHR(10),' '),' ');
        l_excerpt:=NULL;
        FOR i IN 1..l_words.COUNT LOOP
            IF (l_words(i) IS NULL) THEN
                CONTINUE;
            END IF;
            IF (LENGTHB(l_words(i))>25) THEN
                l_excerpt:=l_excerpt || SUBSTR(l_words(i),1,25);
                EXIT;
            END IF;
            l_rem:=160 - NVL(LENGTHB(l_excerpt),0);
            IF (LENGTHB(l_words(i)) <= l_rem) THEN
                l_excerpt:=l_excerpt || l_words(i) || ' ';
            ELSE
                l_excerpt:=RTRIM(l_excerpt);
                EXIT;
            END IF;
        END LOOP;

        UPDATE article SET title=l_title, excerpt=l_excerpt, word_count=l_word_count, body_html=l_edit_text, updated_date=current_timestamp
         WHERE id=pArticleId;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('title', l_title);
        APEX_JSON.write('excerpt', l_excerpt);
        APEX_JSON.write('words', l_word_count || ' words');
        APEX_JSON.write('author', l_name);
        APEX_JSON.write('updated', TO_CHAR(current_timestamp AT TIME ZONE l_client_TZ,'dd Mon yyyy hh24:mi:ss'));
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Delete all Cloudinary assets uploaded for a given article
     */   
    FUNCTION deleteUploadedMedia(pArticleId IN NUMBER, pResourceType IN asset.resource_type%type DEFAULT NULL) RETURN NUMBER IS
        l_clob CLOB;
        l_url VARCHAR2(500);
        nb_deleted PLS_INTEGER:=0;
        n PLS_INTEGER;
    BEGIN
        FOR C IN (SELECT DISTINCT a.resource_type, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret 
                    FROM users u, article t, asset a
                   WHERE t.id=pArticleId
                     AND t.author_user_id=u.id
                     AND t.id=a.article_id
                     AND a.resource_type=NVL(pResourceType,a.resource_type))
        LOOP
            l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || pArticleId;
            l_clob := apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'DELETE',p_username=>C.cld_api_key,p_password=>C.cld_api_secret); 
            SELECT SUM(original) INTO n FROM JSON_TABLE(l_clob FORMAT JSON, '$.deleted_counts.*' COLUMNS (original NUMBER PATH '$.original'));
            nb_deleted:=nb_deleted+n;
        END LOOP;
        RETURN(nb_deleted);
    END;    

    /*
     **  Remove article and any uploaded assets
     */   
    PROCEDURE deleteArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        l_clob CLOB;
        l_url VARCHAR2(500);
        l_user_id users.id%type;
        l_website_id website_article.website_id%type;
        n PLS_INTEGER;
    BEGIN
        l_user_id:=pck_core.getUserId();

        FOR C IN (SELECT websiteid FROM JSON_TABLE(pBodyText, '$' COLUMNS (websiteid))) LOOP
            l_website_id:=C.websiteid;
        END LOOP;

        IF (l_website_id IS NOT NULL) THEN
            DELETE website_article WHERE article_id=pArticleId AND website_id=l_website_id;
        END IF;

        /* delete article if not in any website */

        SELECT COUNT(*) INTO n FROM dual WHERE EXISTS (SELECT null FROM website_article WHERE article_id=pArticleId);

        IF (n=0) THEN
            DELETE asset WHERE article_id=pArticleId;

            DELETE article WHERE id=pArticleId;

            FOR C IN (SELECT DISTINCT a.resource_type, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret 
                        FROM users u, article t, asset a
                       WHERE t.id=pArticleId
                         AND t.author_user_id=u.id
                         AND u.id=l_user_id
                         AND t.id=a.article_id)
            LOOP
                l_url:='https://api.cloudinary.com/v1_1/' || C.cld_cloud_name || '/resources/' || C.resource_type || '/tags/' || pArticleId;
                l_clob := apex_web_service.make_rest_request(p_url=>l_url, p_http_method=>'DELETE',p_username=>C.cld_api_key,p_password=>C.cld_api_secret); 
            END LOOP;
        END IF;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Delete 1 asset for a given article
     */   
    PROCEDURE deleteAsset(pId IN asset.id%type) IS
        l_article_id asset.article_id%type;
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_public_id asset.public_id%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_nb_assets article.nb_assets%type;
        l_parm_names apex_application_global.VC_ARR2;
        l_parm_values apex_application_global.VC_ARR2;
        l_timestamp NUMBER:=trunc((cast(current_timestamp at time zone 'UTC' as date) - to_date('01-jan-1970','dd-mon-yyyy')) * (86400));
        l_signature VARCHAR2(100);
        l_string_to_sign varchar2(2000);  
        l_error_message VARCHAR2(500);
        l_clob CLOB;
        l_instruction VARCHAR2(500);
        l_updated_date VARCHAR2(20);
        l_user_id users.id%type;
    BEGIN
        l_user_id:=pck_core.getUserId();

        SELECT a.article_id, a.cld_cloud_name, a.public_id, u.cld_api_key, u.cld_api_secret
          INTO l_article_id, l_cld_cloud_name, l_public_id, l_cld_api_key, l_cld_api_secret
          FROM asset a, article t, users u
         WHERE a.id=pId
           AND a.article_id=t.id
           AND t.author_user_id=u.id
           AND u.id=l_user_id;

        l_parm_names(1):='invalidate';
        l_parm_values(1):='true';
        l_parm_names(2):='public_id';
        l_parm_values(2):=l_public_id;        
        l_parm_names(3):='timestamp';    
        l_parm_values(3):=l_timestamp;                

        l_string_to_sign:=NULL;
        FOR i IN 1..3 LOOP
            l_string_to_sign:=l_string_to_sign || l_parm_names(i) || '=' || l_parm_values(i) || '&';
        END LOOP;
        l_string_to_sign:=RTRIM(l_string_to_sign,'&') || l_cld_api_secret;
        l_parm_names(4):='signature';
        l_parm_values(4):=dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign), dbms_crypto.HASH_SH1);   
        l_parm_names(5):='api_key';
        l_parm_values(5):=l_cld_api_key;            

        l_clob := apex_web_service.make_rest_request(
            p_url=>'https://api.cloudinary.com/v1_1/' || l_cld_cloud_name || '/image/destroy', 
            p_http_method=>'POST',
            p_parm_name=>l_parm_names,
            p_parm_value=>l_parm_values); 

        SELECT error_message INTO l_error_message FROM JSON_TABLE(l_clob FORMAT JSON, '$' COLUMNS error_message VARCHAR2(500) PATH '$.error.message');

        IF (l_error_message IS NOT NULL) THEN
            pck_core.log(l_clob);
            RAISE_APPLICATION_ERROR(-20001, l_error_message);
        END IF;

        DELETE asset WHERE id=pId;
        UPDATE article SET nb_assets = nb_assets-1, updated_date=current_date WHERE id=l_article_id;

        l_clob:=NULL;
        getThumbnailContent(l_article_id, l_user_id, l_nb_assets, l_instruction, l_clob);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('updated', pck_core.fmtUpdatedDate(current_date));
        apex_json.write('content', l_clob);
        apex_json.write('nb', l_nb_assets);
        apex_json.write('instruction', l_instruction);

        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Remove user and all articles, assets,grants etc. Runs as a background job 
     */   
    PROCEDURE deleteAll(pUserId IN users.id%type) IS
        nb_articles PLS_INTEGER;
        nb_assets NUMBER:=0;
        n NUMBER;
    BEGIN
        FOR C IN (SELECT id FROM article WHERE author_user_id=pUserId) LOOP
            n:=deleteUploadedMedia(C.id);
            nb_assets:=nb_assets+n;
        END LOOP;

        DELETE article WHERE author_user_id=pUserId;
        nb_articles:=SQL%ROWCOUNT;

        DELETE users WHERE id=pUserId;

        pck_core.log('Deleted ' || nb_articles || ' articles and ' || nb_assets || ' images/videos.');

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm);
                RAISE;        
    END;

    /*
     **  Insert Website
     */  
    PROCEDURE insertWebsite(pWebsiteId IN website.id%type, pBodyText IN CLOB) IS
        l_user_id users.id%type;
    BEGIN
        l_user_id:=pck_core.getUserId();

        FOR C IN (SELECT domain_name, contact_email, template 
                    FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (domain_name, contact_email, template )))
        LOOP
            INSERT INTO website (id, user_id, domain_name, contact_email, template)
                VALUES (seq_website.nextval, l_user_id, C.domain_name, C.contact_email, C.template);
        END LOOP;

        apex_json.open_object;  
        apex_json.write('success', TRUE);
        apex_json.write('websiteid', seq_website.currval);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
                RAISE;
    END;  

    /*
     **  Delete Website. 
     **  Articles that would become orpaned as a result are also deleted along with any assets.
     */  
    PROCEDURE deleteWebsite(pWebsiteId IN website.id%type, pBodyText IN CLOB) IS
        l_user_id users.id%type;
        TYPE t_website_article IS TABLE OF website_article%rowtype;
        l_website_articles t_website_article;
    BEGIN
        l_user_id:=pck_core.getUserId();

        SELECT * BULK COLLECT INTO l_website_articles FROM website_article WHERE website_id=pWebsiteId;

        DELETE website WHERE id=pWebsiteId AND user_id=l_user_id;

        FOR i IN 1..l_website_articles.COUNT LOOP
            pck_core.log(l_website_articles(i).article_id);
        END LOOP;

        apex_json.open_object;  
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
                RAISE;
    END;          

    /*
     **  Publish article
     */   
    PROCEDURE publishArticle(pArticleId IN article.id%type) IS
        n PLS_INTEGER;
        l_user_id users.id%type;
    BEGIN
        l_user_id:=pck_core.getUserId();

        /* Reject publication request if cover image does not have ALT description */

        SELECT COUNT(*) INTO n FROM dual WHERE EXISTS
        (
            SELECT alt_text, display_order FROM
            (
                SELECT MIN(display_order) OVER () cover, display_order, alt_text FROM asset WHERE article_id=pArticleId 
            )
            WHERE display_order=cover AND alt_text IS NOT NULL
        );

        apex_json.open_object; 

        IF (n=0) THEN
            apex_json.write('message', 'Cover Image ALT TEXT must be set before article can be published');
        ELSE
            UPDATE article SET is_public='Y', updated_date=current_date WHERE id=pArticleId AND author_user_id=l_user_id;
        END IF;

        apex_json.write('updated', pck_core.fmtUpdatedDate(current_date));
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
                RAISE;
    END;

    /*
     **  Publish article
     */   
    PROCEDURE unpublishArticle(pArticleId IN article.id%type) IS
        l_user_id users.id%type;
    BEGIN
        l_user_id:=pck_core.getUserId();

        UPDATE article SET is_public='N', updated_date=current_date WHERE id=pArticleId AND author_user_id=l_user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
                RAISE;
    END;    

    /*
     **  Reorder website articles
     */
    PROCEDURE reorderWebsiteArticles(pWebsiteId IN website_article.website_id%type, pBodyText IN CLOB) IS
        l_dbid_string LONG;

        TYPE t_website_article IS RECORD(
            article_id website_article.article_id%type,
            display_order website_article.display_order%type);
        TYPE tt_website_article IS TABLE OF t_website_article;
        l_website_articles tt_website_article; 

        l_user_id users.id%type;
    BEGIN
        l_user_id:=pck_core.getUserId();

        SELECT dbid_string INTO l_dbid_string 
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (dbid_string));

        SELECT column_value, rownum 
          BULK COLLECT INTO l_website_articles
          FROM TABLE(apex_string.split(l_dbid_string,':'));

        FORALL i IN l_website_articles.first .. l_website_articles.last
        UPDATE website_article 
           SET display_order=l_website_articles(i).display_order 
         WHERE website_id = pWebsiteId
           AND article_id=l_website_articles(i).article_id
           AND user_id=l_user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Reorder assets
     */
    PROCEDURE reorderAssets(pBodyText IN CLOB) IS
        l_article_id article.id%type;
        l_dbid_string LONG;
        l_first_dbid asset.id%type;

        TYPE t_asset IS RECORD(
            id asset.id%type,
            display_order asset.display_order%type);
        TYPE tt_asset IS TABLE OF t_asset;
        l_assets tt_asset; 
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_resource_type asset.resource_type%type; 
        l_public_id asset.public_id%type; 
        l_format asset.format%type; 
        l_width asset.width%type;

        l_user_id users.id%type;
        l_url VARCHAR2(500);
        l_clob CLOB;
        l_na_number NUMBER;
        l_na_varchar VARCHAR2(500);
    BEGIN
        l_user_id:=pck_core.getUserId();

        SELECT dbid_string INTO l_dbid_string 
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (dbid_string));

        SELECT column_value, rownum 
          BULK COLLECT INTO l_assets
          FROM TABLE(apex_string.split(l_dbid_string,':'));

        /* get the article id from first asset */
        SELECT article_id INTO l_article_id
          FROM asset WHERE id=l_assets(1).id;

        /* ... and get id of first asset as this may have been replaced */
        SELECT cover_asset_id 
          INTO l_first_dbid 
          FROM article 
         WHERE id=l_article_id;

        FORALL i IN l_assets.first .. l_assets.last
        UPDATE asset SET display_order=l_assets(i).display_order WHERE id  = l_assets(i).id;

        IF (l_assets(1).id<>l_first_dbid) THEN
            SELECT cld_cloud_name, resource_type, public_id, format, width
              INTO l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width
              FROM asset 
              WHERE id=l_assets(1).id;
            l_url:=pck_core.getCloudinaryUrl(l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width);
            UPDATE article SET updated_date=current_date, cover_asset_id=l_assets(1).id WHERE id=l_article_id;
        END IF;

        l_clob:=NULL;
        getThumbnailContent(l_article_id, l_user_id, l_na_number, l_na_varchar, l_clob);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('url', l_url);
        apex_json.write('content', l_clob);
        apex_json.write('updated', pck_core.fmtUpdatedDate(current_date));
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    FUNCTION domainExists(pUserid IN users.id%type, pName IN VARCHAR2) RETURN VARCHAR2 IS
        n PLS_INTEGER;
        l_clob CLOB;
    BEGIN
        IF (pName IS NULL) THEN
            RETURN('Domain name must be entered');
        END IF;

        SELECT COUNT(*) INTO n FROM dual WHERE EXISTS (SELECT NULL FROM website WHERE domain_name=pName);
        IF (n>0) THEN
            RETURN('Name already taken');
        END IF;

        pck_core.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites', pMethod=>'GET', pData=>l_clob);
        FOR C IN (SELECT name, custom_domain FROM JSON_TABLE(l_clob, '$[*]' COLUMNS name, custom_domain)) LOOP
            IF (pName=C.name OR pName=C.custom_domain) THEN
                RETURN('Name already taken');
                EXIT;
            END IF;
        END LOOP;

        RETURN NULL;
    END;

    /**
     **    Update the column value of 1 row
     */
    PROCEDURE updateField(pBodyText IN CLOB) IS
        l_user_id users.id%type;
        l_id_1 NUMBER;
        l_id_2 NUMBER;

        l_message VARCHAR2(50);
        l_color VARCHAR2(5);
        n PLS_INTEGER:=1;
    BEGIN
        l_user_id:=pck_core.getUserId();

        FOR C IN (SELECT id, table_column, CASE WHEN table_column='website.domain_name' THEN regexp_replace(value,'[^a-zA-Z0-9-]',null) ELSE value END value
                    FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (id, table_column, value)))
        LOOP
            IF (C.table_column='website.domain_name') THEN
                l_message:=domainExists(l_user_id, C.value);
                IF (l_message IS NOT NULL) THEN
                    l_color:='red';
                    EXIT;
                END IF;
            END IF;

            IF (INSTR(C.id,',')>0) THEN
                l_id_1:=SUBSTR(C.id,1,INSTR(C.id,',')-1);
                l_id_2:=SUBSTR(C.id,INSTR(C.id,',')+1);
            END IF;            

            IF (C.id IS NOT NULL) THEN
                CASE C.table_column
                    WHEN 'website.domain_name' THEN
                        UPDATE website SET domain_name=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_user_id;
                    WHEN 'website.contact_email' THEN
                        UPDATE website SET contact_email=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_user_id;
                    WHEN 'website.template' THEN
                        UPDATE website SET template=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_user_id;
                    WHEN 'website_article.nav_name' THEN
                        UPDATE website_article SET nav_name=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_user_id;
                    WHEN 'website_article.page_title' THEN
                        UPDATE website_article SET page_title=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_user_id;
                    WHEN 'website_article.page_description' THEN
                        UPDATE website_article SET page_description=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_user_id;
                    WHEN 'asset.alt_text' THEN
                        UPDATE asset SET alt_text=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_user_id;
                    WHEN 'asset.description' THEN
                        UPDATE asset SET description=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_user_id;               
                END CASE;
                n:=sql%rowcount;
            END IF;
        END LOOP;

        IF (l_message IS NULL) THEN
            IF (n=1) THEN
                l_message:='Updated OK';
                l_color:='green';
            ELSE
                l_message:='Update NOK';
                l_color:='red';
            END IF;
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', l_message);
        apex_json.write('color', l_color);

        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error(sqlcode,sqlerrm,pAjax=>TRUE);
    END;

    /*
     **  Upload Core Web Vitals uploaded through navigator.beacon - hence no response sent.
     */      
    PROCEDURE uploadWebVitals(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
    BEGIN
        INSERT INTO core_web_vitals (id, session_id, page_id, ip_address, name, value, rating) --, browser, width)
        SELECT seq_core_web_vitals.nextval, session_id, page_id, l_ip_address, name, value, rating --, l_session_id, l_browser, l_width
        FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' COLUMNS (session_id, page_id,
            NESTED '$.cwv[*]' COLUMNS (name, value, rating)))
        LOG ERRORS INTO core_web_vitals_err REJECT LIMIT UNLIMITED;                 
    END;

END;
/