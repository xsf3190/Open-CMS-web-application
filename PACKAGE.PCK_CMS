CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS" is
    --
    PROCEDURE deleteTable(pBodyText IN CLOB);
    --
    PROCEDURE getArticle(pId IN VARCHAR2);
    --
    PROCEDURE getCldDetails;
    --
    PROCEDURE getCldSignature(pParamsToSign IN CLOB);
    --
    PROCEDURE getFieldHTML(pParams IN CLOB);
    --
    PROCEDURE getSessionLog(SessionId IN NUMBER);
    --
    PROCEDURE getWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE getVisits(pWebsiteIdId IN website.id%type);
    --
    PROCEDURE insertArticle(pId IN VARCHAR2);
    --
    PROCEDURE publishArticle(pArticleId IN article.id%type);
    --
    PROCEDURE reorderAssets(pBodyText IN CLOB);
    --
    PROCEDURE reorderWebsiteArticles(pWebsiteId IN website_article.website_id%type, pBodyText IN CLOB, pReturnJson IN BOOLEAN DEFAULT TRUE);
    --
    PROCEDURE setClientInfo(pBodyText IN CLOB);
    --
    PROCEDURE unpublishArticle(pArticleId IN article.id%type);
    --
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type);
    --
    PROCEDURE updateContent(pZipFile IN BLOB, pId IN VARCHAR2);
    --
    PROCEDURE uploadWebVitals(pBodyText IN CLOB);
    --
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB);
    --
    PROCEDURE uploadPageVisit(pBodyText IN CLOB);
    --
    PROCEDURE uploadPerformance(pBodyText IN CLOB);
    --
    PROCEDURE updateField(pBodyText IN CLOB);
    --
    PROCEDURE signout;
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS" is

    PROCEDURE getSessionLog(SessionId IN NUMBER) IS
        l_content CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_content:='
        <table>
            <thead>
                <tr>
                    <th style="width:10%;text-align:left;">Log Time</th>
                    <th style="width:90%;text-align:left;">Log Message</th>
                </tr>
            </thead>
            <tbody>';
        FOR C IN (SELECT log_date, message 
                    FROM log
                   ORDER BY id DESC) 
        LOOP
            l_content:=l_content || '
                <tr>
                    <td>' || TO_CHAR(C.log_date AT TIME ZONE l_session_data.timezone, 'hh24:mi:ss') || '</td><td>' || REPLACE(C.message,chr(10),'<br>') || '</td>
                </tr>';
        END LOOP;
        l_content:=l_content || '
            </tbody>
        </table>';

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    /*
    **  Return log of all visits to website
    */
    PROCEDURE getVisits(pWebsiteIdId IN website.id%type) IS
        l_content CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_content:='
        <table>
            <thead>
                <tr>
                    <th style="width:10%;text-align:left;">Date</th>
                    <th style="width:30%;text-align:left;">Location</th>
                    <th style="width:60%;text-align:left;">Referrer</th>
                </tr>
            </thead>
            <tbody>';
        FOR C IN (SELECT wa.navigation_label, cwv.visit_date, NVL(cwv.referrer,'N/A') referrer, ip.city, ip.country_code, ip.postal
                    FROM website_article_cwv cwv, website_article wa, ip_lookup ip
                   WHERE wa.website_id=pWebsiteIdId
                     AND cwv.website_id=wa.website_id
                     AND cwv.cwv_name='LCP'
                     AND ip.ip=cwv.ip_address
                   ORDER BY cwv.visit_date DESC) 
        LOOP
            l_content:=l_content || '
                <tr>
                    <td>' || TO_CHAR(C.visit_date AT TIME ZONE l_session_data.timezone, 'dd.mm.yyyy hh24:mi:ss') || '</td>
                    <td>' || apex_string.join(apex_t_varchar2(C.city,C.country_code,C.postal),',') || '</td>
                    <td>' || C.referrer || '</td>
                </tr>';
        END LOOP;
        l_content:=l_content || '
            </tbody>
        </table>';

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;

        EXCEPTION WHEN OTHERS THEN pck_core.log_error;
    END;

    PROCEDURE getCldDetails IS
        l_user_id users.id%type;
        l_cld_cloud_name users.cld_cloud_name%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_image_max_size INTEGER;
        l_video_max_size INTEGER;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        pck_api.getCloudinaryData(pUserId=>l_session_data.user_id, pCloudName=>l_cld_cloud_name, pCldApiKey=>l_cld_api_key, pCldImageMaxSize=>l_image_max_size, pCldVideoMaxSize=>l_video_max_size);

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('cloudname', l_cld_cloud_name);
        apex_json.write('apikey', l_cld_api_key);
        apex_json.write('maxImageFileSize', l_image_max_size);
        apex_json.write('maxVideoFileSize', l_video_max_size);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    PROCEDURE getCldSignature(pParamsToSign IN CLOB) IS
        l_params_to_sign clob:=pParamsToSign;
        l_user_id users.id%type;
        l_string_to_sign varchar2(2000):=NULL; 
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM users, JSON_TABLE(l_params_to_sign FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            )
            WHERE users.id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('signature', dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || pck_api.getCloudinaryAPISecret(l_session_data.user_id)), dbms_crypto.HASH_SH1));
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     ** Insert row in session_data table when user views home page.
     */
    PROCEDURE setClientInfo(pBodyText IN CLOB) IS
        l_ip_address session_data.ip_address%type;
    BEGIN
        l_ip_address:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        INSERT INTO session_data (session_id, timezone, maxtouchpoints, supports_popover, ip_address)
        SELECT session_id, timezone, maxtouchpoints, supports_popover, l_ip_address
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$[*]' COLUMNS (session_id, timezone, maxtouchpoints, supports_popover));

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;


    /*
    ** GET CONTENT FOR A SELECTED WEBSITE
    */
    PROCEDURE getWebsite(pWebsiteId IN website.id%type) IS
        l_session_data pck_core.session_data_rt;
        l_nav_labels LONG;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        apex_json.open_object;

        FOR C IN (
            SELECT w.domain_name, w.css, w.javascript, w.netlify_site_id, w.netlify_site_id_custom
              FROM website w
             WHERE w.id=pWebsiteId
               AND w.user_id=l_session_data.user_id) 
        LOOP
            apex_json.write('domain_name', C.domain_name);
            apex_json.write('css', C.css);

            apex_json.write('deploy_buttons', pck_core.buildDeployButtons(C.domain_name, C.netlify_site_id, C.netlify_site_id_custom));
        END LOOP;

        FOR C IN (SELECT article_id, navigation_label FROM website_article WHERE website_id=pWebsiteId ORDER BY display_order) LOOP
            l_nav_labels:=l_nav_labels || '<a href="#" class="nav-label" data-id="' || C.article_id || '">' || C.navigation_label || '</a>';
        END LOOP;
        IF (l_nav_labels IS NOT NULL) THEN
            apex_json.write('nav_labels', l_nav_labels);
        END IF;

        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Get HTML to edit a selected website article field. ID i the row to retrieve
     */
    PROCEDURE getFieldHTML(pParams IN CLOB) IS
        l_session_data pck_core.session_data_rt;
        l_field_html LONG;
        l_pk VARCHAR2(20);
        l_value CLOB;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT table_column, website_id, id FROM JSON_TABLE(pParams, '$[*]' COLUMNS (table_column, website_id, id))) LOOP
            IF (C.table_column LIKE 'website_article%') THEN
                l_pk:=C.website_id||','||C.id;
            ELSE
                l_pk:=C.id;
            END IF;

            CASE C.table_column
                WHEN 'website_article.navigation_label' THEN
                    SELECT navigation_label INTO l_value FROM website_article WHERE website_id=C.website_id AND article_id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website_article.page_title' THEN
                    SELECT page_title INTO l_value FROM website_article WHERE website_id=C.website_id AND article_id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website_article.page_description' THEN
                    SELECT page_description INTO l_value FROM website_article WHERE website_id=C.website_id AND article_id=C.id AND user_id=l_session_data.user_id;            
            END CASE;
            l_field_html:=pck_core.buildTextareaWrapper(l_pk,C.table_column,l_value,l_session_data.canuse_popover);
        END LOOP;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_field_html);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Load metadata after media uploaded to Cloudinary.
     **  Insert uploaded asset metadata into ASSETS table
     */       
    PROCEDURE uploadCldMetadata(pBodyText IN CLOB) IS
        l_session_data pck_core.session_data_rt;
        l_bodytext CLOB:=pBodyText;
        l_thumbnails CLOB;
        l_article_id asset.article_id%type;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT article_id INTO l_article_id FROM JSON_TABLE(l_bodytext,'$.images[*]' COLUMNS (article_id))  WHERE ROWNuM=1;

        INSERT INTO asset(id, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, created_date, user_id)
        SELECT seq_asset.nextval, article_id, cld_cloud_name, resource_type, public_id, width, height, bytes, format, current_timestamp, l_session_data.user_id
          FROM JSON_TABLE(l_bodytext, '$.images[*]' COLUMNS (article_id, public_id, width, height, bytes, resource_type, format, cld_cloud_name));


        pck_core.getThumbnails(l_article_id,l_thumbnails);

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('thumbnails', l_thumbnails);
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;  

    /*
     **  Upload Performance data from entries accumulated by Javascript Performance API
     */       
    PROCEDURE uploadPerformance(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_user_id users.id%type:=apex_util.get_session_state('APP_USER_ID');
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
        n PLS_INTEGER;
    BEGIN
        INSERT /*+ ignore_row_on_dupkey_index ( performance (session_id, url)) */ 
          INTO performance(id, asset_id, session_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, capture_date, user_id, ip_address)
        WITH json AS 
        (
            SELECT session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, timestamp'1970-01-01 00:00:00' + numtodsinterval(epoch,'second') capture_date, l_user_id, l_ip_address
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, cld_cloud_name, resource_type, public_id, url, connection_type, transfersize, duration, content_type, window_innerwidth, browser, epoch))
        )
        SELECT seq_performance.nextval, a.id, j.session_id, j.url, j.connection_type, j.transfersize, j.duration, j.content_type, j.window_innerwidth, j.browser, j.capture_date, l_user_id, l_ip_address
          FROM json j, asset a
         WHERE j.cld_cloud_name=a.cld_cloud_name
           AND j.resource_type=a.resource_type
           AND j.public_id=a.public_id;

        INSERT /*+ ignore_row_on_dupkey_index ( servertiming (performance_id, seq)) */ 
          INTO servertiming(performance_id, seq, name, duration, description)
        WITH json AS 
        (
            SELECT session_id, url, seq, name, duration, description
              FROM JSON_TABLE(l_bodytext FORMAT JSON, '$[*]' 
                    COLUMNS (session_id, url,
                        NESTED  '$.servertiming[*]' columns (seq for ordinality,name,duration,description))) 
        )
        SELECT p.id, j.seq, j.name, j.duration, j.description
          FROM json j, performance p
         WHERE p.session_id=j.session_id
           AND p.url=j.url
           AND j.seq IS NOT NULL;        

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object; 

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** Get contact email address signed by Terraform together with AWS gateway url
    */ 
    PROCEDURE getTerraformParameters(pUserId IN users.id%type, pContactEmail IN website.contact_email%type, pAwsGatewayUrl IN OUT VARCHAR2, pSignatureContactEmail IN OUT VARCHAR2) IS
        l_clob CLOB;
        l_clob2 CLOB;
        l_terraform_organization_name users.terraform_organization_name%type;
        l_terraform_workspace_name users.terraform_workspace_name%type;
        l_terraform_private_key users.terraform_private_key%type;
        l_terraform_private_key_raw RAW(4000);
        l_terraform_url VARCHAR2(200);
        l_signed_data RAW(4000);
    BEGIN
        pck_api.getTerraformData(pUserId, l_terraform_organization_name, l_terraform_workspace_name, l_terraform_private_key);

        pck_api.callTerraformAPI(pUserId=>pUserId, pEndpoint=>'api/v2/organizations/' || l_terraform_organization_name || '/workspaces/' || l_terraform_workspace_name, pMethod=>'GET', pData=>l_clob);

        FOR C IN (SELECT related FROM JSON_TABLE(l_clob, '$.data.relationships.outputs.links' COLUMNS (related))) LOOP
            pck_api.callTerraformAPI(pUserId=>pUserId, pEndpoint=>C.related, pMethod=>'GET', pData=>l_clob2);
            FOR C1 IN (SELECT value FROM JSON_TABLE(l_clob2, '$.data[*]' COLUMNS (name PATH '$.attributes.name', value PATH '$.attributes.value')) WHERE name='invoke_url') LOOP
                pAwsGatewayUrl:=C1.value || '/';
            END LOOP;
        END LOOP;

        l_terraform_private_key_raw:=utl_i18n.string_to_raw(regexp_replace(l_terraform_private_key,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\s?|\s)',''));

        l_signed_data:=DBMS_CRYPTO.SIGN(src =>utl_i18n.string_to_raw(pContactEmail), prv_key =>l_terraform_private_key_raw, pubkey_alg =>dbms_crypto.KEY_TYPE_RSA,sign_alg =>dbms_crypto.SIGN_SHA256_RSA);

        pSignatureContactEmail:=utl_i18n.raw_to_char(utl_encode.base64_encode(l_signed_data));
    END;

    /*
     **  Get article HTML if 1 parameter passed
     **  Get all assets (HTML/CSS/JS) for codepen when both parameters passed
     */    
    PROCEDURE getArticle(pId IN VARCHAR2)  IS
        l_id_1 NUMBER;
        l_id_2 NUMBER;
        l_thumbnails_html CLOB;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        /* pId contains website_id,article_id or just the article_id */
        IF (INSTR(pId,',')=0) THEN
            l_id_1:=pId;
        ELSE
            l_id_1:=SUBSTR(pId,1,INSTR(pId,',')-1);
            l_id_2:=SUBSTR(pId,INSTR(pId,',')+1);
        END IF;

        /* Website and Article data */
        IF (l_id_1 IS NOT NULL AND l_id_2 IS NOT NULL) THEN
            FOR C IN (
                SELECT w.domain_name, w.css, w.javascript, a.body_html
                FROM website w, article a
                WHERE w.id=l_id_1
                AND w.user_id=l_session_data.user_id
                AND a.id=l_id_2
                AND a.author_user_id=l_session_data.user_id) 
            LOOP
                apex_json.open_object;
                apex_json.write('success', TRUE); 
                apex_json.write('domain_name', C.domain_name);
                apex_json.write('html', C.body_html);
                apex_json.write('css', C.css) ;
                apex_json.write('js', C.javascript);
                apex_json.close_object;
            END LOOP;
        ELSE
            FOR C IN (
                SELECT body_html
                FROM article
                WHERE id=l_id_1
                AND author_user_id=l_session_data.user_id) 
            LOOP
                pck_core.getThumbnails(l_id_1, l_thumbnails_html);
                apex_json.open_object;
                apex_json.write('success', TRUE); 
                apex_json.write('html', C.body_html);
                apex_json.write('thumbnails', l_thumbnails_html);
                apex_json.close_object;
            END LOOP;
        END IF;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END; 

    /*
     **  Insert new page in website
     */        
    PROCEDURE insertArticle(pId IN VARCHAR2) IS
        l_session_data pck_core.session_data_rt;
        l_website_id website.id%type;
        l_selected_id article.id%type;
        l_dbid_string apex_t_varchar2;
        l_next_article_id article.id%type;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_selected_id:=SUBSTR(pId,INSTR(pId,',')+1);

        /* Build string of article id to be reordered */ 
        l_next_article_id:=seq_article.nextval;
        FOR C IN (SELECT article_id FROM website_article WHERE website_id=l_website_id ORDER BY display_order) LOOP
            apex_string.push(l_dbid_string, C.article_id);
            IF (C.article_id=l_selected_id) THEN
                apex_string.push(l_dbid_string, l_next_article_id);
            END IF;
        END LOOP;

        INSERT INTO article (id, author_user_id, created_date) VALUES (l_next_article_id, l_session_data.user_id, current_timestamp);
        INSERT INTO website_article(article_id, website_id, navigation_label, display_order, user_id) VALUES (l_next_article_id, l_website_id, '[New Page]', 0, l_session_data.user_id);

        reorderWebsiteArticles(l_website_id,'{"dbid_string":"'|| apex_string.join(l_dbid_string,':') ||'"}',pReturnJson=>FALSE);

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.write('article_id', seq_article.currval);
        APEX_JSON.write('nav_label','<a href="#" class="nav-label selected" data-id="' || seq_article.currval || '">[New Page]</a>');

        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Procedure called by the autoSave feature of CKEditor
     */        
    PROCEDURE updateArticle(pBodyText IN CLOB, pArticleId IN article.id%type) IS
        l_website_id website_article.website_id%type;
        l_article_id article.id%type;
        l_title article.title%type;
        l_excerpt varchar2(1000);
        l_word_count article.word_count%type;
        l_body_html article.body_html%type;
        l_name users.name%type;
        l_words apex_t_varchar2;
        l_rem PLS_INTEGER;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT website_id,
               SUBSTR(title,1,60) title, 
               REGEXP_SUBSTR(word_count,'(\d)+') word_count,
               body_html,
               u.name
          INTO l_website_id, l_title, l_word_count, l_body_html, l_name
          FROM users u, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (website_id, title, word_count, body_html CLOB))
          WHERE u.id=l_session_data.user_id;
        /*
        apex_escape.set_html_escaping_mode('E');
        l_excerpt:=dbms_lob.substr(utl_i18n.unescape_reference(apex_escape.striphtml(l_edit_text)),200,NVL(LENGTHB(l_title),0)+1);

        l_words:=apex_string.split(REPLACE(l_excerpt,CHR(10),' '),' ');
        l_excerpt:=NULL;
        FOR i IN 1..l_words.COUNT LOOP
            IF (l_words(i) IS NULL) THEN
                CONTINUE;
            END IF;
            IF (LENGTHB(l_words(i))>25) THEN
                l_excerpt:=l_excerpt || SUBSTR(l_words(i),1,25);
                EXIT;
            END IF;
            l_rem:=160 - NVL(LENGTHB(l_excerpt),0);
            IF (LENGTHB(l_words(i)) <= l_rem) THEN
                l_excerpt:=l_excerpt || l_words(i) || ' ';
            ELSE
                l_excerpt:=RTRIM(l_excerpt);
                EXIT;
            END IF;
        END LOOP;
        */
        UPDATE article SET title=l_title, word_count=l_word_count, body_html=l_body_html, updated_date=current_timestamp
         WHERE id=pArticleId;

        APEX_JSON.open_object; 
        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;    

    /*
     **  Delete website_article. If deleted article not in any other website delete the article and any assets
     */   
    PROCEDURE deleteArticle(pUserId IN users.id%type, pArticleId IN website_article.article_id%type, pWebsiteId IN website_article.website_id%type, pSendResponse IN BOOLEAN DEFAULT TRUE) IS
        l_clob CLOB;
        l_url VARCHAR2(500);
        l_error_message VARCHAR2(4000);
        n PLS_INTEGER;
    BEGIN
        DELETE website_article 
         WHERE user_id=pUserId 
           AND article_id=pArticleId 
           AND website_id=pWebsiteId;

        n:=sql%rowcount;
        /* Confirm current user owned the deleted website_article */

        IF (n=1) THEN 
            SELECT COUNT(*) INTO n FROM dual WHERE EXISTS (SELECT null FROM website_article WHERE article_id=pArticleId);
            IF (n=0) THEN
                /* Delete externally managed assets first to avoid potential cost and inconvenience of orphans */

                FOR C IN (SELECT DISTINCT cld_cloud_name || '/resources/' || resource_type || '/tags/' || pArticleId AS endpoint
                            FROM asset
                           WHERE article_id=pArticleId)
                LOOP
                    pck_api.callCloudinaryAPI(pUserId=>pUserId, pEndpoint=>C.endpoint, pMethod=>'DELETE', pData=>l_clob);
                END LOOP;

                /* Delete the article. Referential integrity constraint cascades to linked asset rows */
                DELETE article WHERE id=pArticleId;

            END IF;
        END IF;

        IF (pSendResponse) THEN
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.close_object;
        END IF;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Update website HTML / CSS / JS from the contents of an exported Codepen zip file
     */        
    PROCEDURE updateContent(pZipFile IN BLOB, pId IN VARCHAR2) IS
        l_website_id website.id%type;
        l_article_id article.id%type;
        l_domain_name website.domain_name%type;
        l_css CLOB;
        l_javascript CLOB;
        l_html CLOB;
        l_zip BLOB:=pZipFile;
        l_files apex_zip.t_files;
        l_file BLOB;
        l_clob CLOB;
        l_message VARCHAR2(500);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        /* pId contains website_id,article_id */
        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_article_id:=SUBSTR(pId,INSTR(pId,',')+1);

        /* Get existing clobs */
        SELECT REPLACE(w.domain_name,'.','-'), w.css, w.javascript, a.body_html
          INTO l_domain_name, l_css, l_javascript, l_html
          FROM website w, article a
         WHERE w.id=l_website_id
           AND w.user_id=l_session_data.user_id
           AND a.id=l_article_id
           AND a.author_user_id=l_session_data.user_id;

        l_files := apex_zip.get_files(p_zipped_blob => l_zip);
        FOR i in 1 .. l_files.COUNT LOOP
            CASE l_files(i)
                WHEN l_domain_name||'/src/index.html' THEN
                    l_clob := apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name   => l_files(i)));
                    IF (dbms_lob.compare(l_html, l_clob)=0) THEN
                        l_message:=l_message || 'HTML - no change | ';
                    ELSE
                        UPDATE article SET body_html=l_clob, updated_date=current_timestamp WHERE id=l_article_id;
                        l_message:=l_message || 'HTML - updated successfully | ';
                    END IF;            
                WHEN l_domain_name||'/src/script.js' THEN
                    l_clob := apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name   => l_files(i)));
                    IF (dbms_lob.compare(l_javascript, l_clob)=0) THEN
                        l_message:=l_message || 'JAVASCRIPT - no change | ';
                    ELSE
                        UPDATE website SET javascript=l_clob, updated_date=current_timestamp WHERE id=l_website_id;
                        l_message:=l_message || 'JAVASCRIPT - updated successfully | ';
                    END IF;
                WHEN l_domain_name||'/src/style.css' THEN
                    l_clob := apex_util.blob_to_clob(p_blob => apex_zip.get_file_content(p_zipped_blob => l_zip, p_file_name   => l_files(i)));
                    IF (dbms_lob.compare(l_css, l_clob)=0) THEN
                        l_message:=l_message || 'CSS - no change | ';
                    ELSE
                        UPDATE website SET css=l_clob, updated_date=current_timestamp WHERE id=l_website_id;
                        l_message:=l_message || 'CSS - updated successfully | ';
                    END IF;
                ELSE
                    NULL;
            END CASE;
        END LOOP;
        IF (l_message IS NULL) THEN
            l_message:='CAN ONLY UPLOAD FILES EXPORTED FROM CODEPEN NAMED ' || l_domain_name || '.zip';
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', l_message);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Delete ASSET row and its Cloudinary media
     */   
    PROCEDURE deleteAsset(pUserId IN asset.user_id%type, pId IN asset.id%type) IS
        l_article_id asset.article_id%type;
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_public_id asset.public_id%type;
        l_cld_api_key users.cld_api_key%type;
        l_cld_api_secret users.cld_api_secret%type;
        l_parm_names apex_application_global.VC_ARR2;
        l_parm_values apex_application_global.VC_ARR2;
        l_timestamp NUMBER:=trunc((cast(current_timestamp at time zone 'UTC' as date) - to_date('01-jan-1970','dd-mon-yyyy')) * (86400));
        l_signature VARCHAR2(100);
        l_string_to_sign varchar2(2000);  
        l_clob CLOB;
        l_error_message VARCHAR2(500);
        l_updated_date VARCHAR2(20);
        l_nb_assets article.nb_assets%type;
        l_json JSON_OBJECT_T;
    BEGIN
        SELECT a.article_id, a.cld_cloud_name, a.public_id, u.cld_api_key, u.cld_api_secret
          INTO l_article_id, l_cld_cloud_name, l_public_id, l_cld_api_key, l_cld_api_secret
          FROM asset a, users u
         WHERE a.id=pId
           AND a.user_id=u.id
           AND u.id=pUserId;

        l_parm_names(1):='invalidate';
        l_parm_values(1):='true';
        l_parm_names(2):='public_id';
        l_parm_values(2):=l_public_id;        
        l_parm_names(3):='timestamp';    
        l_parm_values(3):=l_timestamp;                

        l_string_to_sign:=NULL;
        FOR i IN 1..3 LOOP
            l_string_to_sign:=l_string_to_sign || l_parm_names(i) || '=' || l_parm_values(i) || '&';
        END LOOP;
        l_string_to_sign:=RTRIM(l_string_to_sign,'&') || l_cld_api_secret;
        l_parm_names(4):='signature';
        l_parm_values(4):=dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign), dbms_crypto.HASH_SH1);   
        l_parm_names(5):='api_key';
        l_parm_values(5):=l_cld_api_key;    

        l_json:=new JSON_OBJECT_T;
        FOR i IN 1..l_parm_names.COUNT LOOP
            l_json.put(l_parm_names(i), l_parm_values(i));
        END LOOP;        

        pck_api.callCloudinaryAPI(pUserId=>pUserId, pEndpoint=>l_cld_cloud_name || '/image/destroy', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);

        DELETE asset WHERE id=pId;
        UPDATE article SET nb_assets = nb_assets-1, updated_date=current_date WHERE id=l_article_id RETURNING nb_assets INTO l_nb_assets;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        --apex_json.write('updated', pck_core.fmtUpdatedDate(current_date));
        apex_json.write('nb-assets', l_nb_assets || ' media');
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Delete Website and articles from schema and Netlify
     */  
    PROCEDURE deleteWebsite(pUserId IN website.user_id%type, pWebsiteId IN website.id%type) IS
        TYPE t_website_article IS TABLE OF website_article%rowtype;
        l_website_articles t_website_article;
        l_netlify_site_id website.netlify_site_id%type;
        l_netlify_site_id_custom website.netlify_site_id%type;
        l_clob CLOB;
    BEGIN
        SELECT * BULK COLLECT INTO l_website_articles FROM website_article WHERE website_id=pWebsiteId AND user_id=pUserId;

        FOR i IN 1..l_website_articles.COUNT LOOP
            deleteArticle(pUserId, l_website_articles(i).article_id, l_website_articles(i).website_id, pSendResponse=>FALSE);
        END LOOP;

        DELETE website WHERE id=pWebsiteId AND user_id=pUserId 
            RETURNING netlify_site_id, netlify_site_id_custom INTO l_netlify_site_id, l_netlify_site_id_custom;

        IF (l_netlify_site_id IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites/' || l_netlify_site_id, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
        END IF;

        IF (l_netlify_site_id_custom IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>pUserid, pEndpoint=>'sites/' || l_netlify_site_id_custom, pMethod=>'DELETE', pStatusAllowed=>404, pData=>l_clob);
        END IF;

        apex_json.open_object;  
        apex_json.write('success',TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;          

    /*
     **  Publish article
     */   
    PROCEDURE publishArticle(pArticleId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        UPDATE website_article SET publish='Y', updated_date=current_date WHERE article_id=pArticleId AND user_id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  UnPublish article
     */   
    PROCEDURE unpublishArticle(pArticleId IN article.id%type) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        UPDATE website_article SET publish='N', updated_date=current_date WHERE article_id=pArticleId AND user_id=l_session_data.user_id;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;        

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
                RAISE;
    END;    

    /*
     **  Reorder website articles
     */
    PROCEDURE reorderWebsiteArticles(pWebsiteId IN website_article.website_id%type, pBodyText IN CLOB, pReturnJson IN BOOLEAN DEFAULT TRUE) IS
        l_dbid_string LONG;

        TYPE t_website_article IS RECORD(
            article_id website_article.article_id%type,
            display_order website_article.display_order%type);
        TYPE tt_website_article IS TABLE OF t_website_article;
        l_website_articles tt_website_article; 

        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT dbid_string INTO l_dbid_string 
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (dbid_string));

        SELECT column_value, rownum 
          BULK COLLECT INTO l_website_articles
          FROM TABLE(apex_string.split(l_dbid_string,':'));

        FORALL i IN l_website_articles.first .. l_website_articles.last
        UPDATE website_article 
           SET display_order=l_website_articles(i).display_order 
         WHERE website_id = pWebsiteId
           AND article_id=l_website_articles(i).article_id
           AND user_id=l_session_data.user_id;

        IF (pReturnJson) THEN
            apex_json.open_object; 
            apex_json.write('success', TRUE);
            apex_json.close_object;
        END IF;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Reorder assets
     */
    PROCEDURE reorderAssets(pBodyText IN CLOB) IS
        l_article_id article.id%type;
        l_dbid_string LONG;
        l_first_dbid asset.id%type;

        TYPE t_asset IS RECORD(
            id asset.id%type,
            display_order asset.display_order%type);
        TYPE tt_asset IS TABLE OF t_asset;
        l_assets tt_asset; 
        l_cld_cloud_name asset.cld_cloud_name%type;
        l_resource_type asset.resource_type%type; 
        l_public_id asset.public_id%type; 
        l_format asset.format%type; 
        l_width asset.width%type;

        l_url VARCHAR2(500);
        l_na_number NUMBER;
        l_na_varchar VARCHAR2(500);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT dbid_string INTO l_dbid_string 
          FROM JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (dbid_string));

        SELECT column_value, rownum 
          BULK COLLECT INTO l_assets
          FROM TABLE(apex_string.split(l_dbid_string,':'));

        /* get the article id from first asset */
        SELECT article_id INTO l_article_id
          FROM asset 
         WHERE id=l_assets(1).id
           AND user_id=l_session_data.user_id;

        /* ... and get id of first asset as this may have been replaced */
        SELECT cover_asset_id 
          INTO l_first_dbid 
          FROM article 
         WHERE id=l_article_id
           AND author_user_id=l_session_data.user_id;

        FORALL i IN l_assets.first .. l_assets.last
        UPDATE asset SET display_order=l_assets(i).display_order WHERE id  = l_assets(i).id;

        IF (l_assets(1).id<>l_first_dbid) THEN
            SELECT cld_cloud_name, resource_type, public_id, format, width
              INTO l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width
              FROM asset 
              WHERE id=l_assets(1).id
                AND user_id=l_session_data.user_id;
            l_url:=pck_core.getCloudinaryUrl(l_cld_cloud_name, l_resource_type, l_public_id, l_format, l_width);
            UPDATE article SET updated_date=current_date, cover_asset_id=l_assets(1).id WHERE id=l_article_id;
        END IF;

        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('articleId', l_article_id);
        apex_json.write('url', l_url);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    **  Create new website if pWebsiteId IS NULL
    **  Maintain separate Netlify sites for TEST and LIVE websites
    **  Auto-create the LIVE site if a dns zone exists with same domain name
    **  N.b. 1) DNS zone created automatically if custom domain purchased through Netlify 
    **       2) DNS delegated to Netlify from registrar (e.g. Godaddy, Namecheap) requires that Dns zone is created in separate process
    */
    PROCEDURE processDomainName(pUserId IN website.user_id%type, pWebsiteId IN website.id%type, pDomainName IN website.domain_name%type) IS
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_dns_zones CLOB;
        l_netlify_site_id               website.netlify_site_id%type;
        l_netlify_site_id_custom        website.netlify_site_id%type;
        l_website_id website.id%type;
        l_endpoint VARCHAR2(100);
        l_method VARCHAR2(6);
        l_message VARCHAR2(50);

        FUNCTION name_taken RETURN BOOLEAN IS
        BEGIN
            IF (apex_web_service.g_status_code=422) THEN
                apex_json.open_object;
                apex_json.write('success', TRUE);
                apex_json.write('message', 'Name already taken');
                apex_json.write('color', 'red');
                apex_json.close_object;
                RETURN TRUE;
            ELSE
                RETURN FALSE;
            END IF;
        END;
    BEGIN
        /* Get all dns zones - create separate Netlify site with custom_domain if match */
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_dns_zones);


        BEGIN
            SELECT netlify_site_id, netlify_site_id_custom 
              INTO l_netlify_site_id, l_netlify_site_id_custom 
              FROM website 
             WHERE id=pWebsiteId;
            EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
        END;

        /* Always create TEST site that deploys to https://pDomainName.netlify.app */
        l_json:=new JSON_OBJECT_T;
        l_json.put('name', pDomainName);
        l_endpoint:='sites' || CASE WHEN l_netlify_site_id IS NOT NULL THEN '/' || l_netlify_site_id END;
        l_method:=CASE WHEN l_netlify_site_id IS NULL THEN 'POST' ELSE 'PATCH' END;

        /* Netlify sites API returns 422 if domain name unavailable */
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>l_endpoint, pMethod=>l_method, pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
        IF (name_taken) THEN
            RETURN;
        END IF;

        /* Get Netlify site_id for TEST site */
        SELECT site_id INTO l_netlify_site_id FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));

        /* Changing domain name of site that already has custom_domain assigned requires us to delete existing site */ 
        IF (l_netlify_site_id_custom IS NOT NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites/' || l_netlify_site_id_custom, pMethod=>'DELETE', pData=>l_clob);
        END IF;

        /* Create Netlify LIVE site with custom_domain if domain_name in dns_zones */
        FOR C IN (SELECT name FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS(name)) WHERE name=pDomainName) LOOP
            l_json.put('name', pDomainName || ' custom domain');
            l_json.put('custom_domain', pDomainName);

            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites', pMethod=>'POST', pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
            IF (name_taken) THEN
                RETURN;
            END IF;
            SELECT site_id INTO l_netlify_site_id_custom FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));
        END LOOP;

        IF (pWebsiteId IS NULL) THEN
            INSERT INTO website (id, user_id, domain_name, netlify_site_id, netlify_site_id_custom) 
                VALUES (seq_website.nextval, pUserId, pDomainName, l_netlify_site_id, l_netlify_site_id_custom);
            l_website_id:=seq_website.currval;
            INSERT INTO article (id, author_user_id, updated_date) 
                VALUES (seq_article.nextval, pUserId, current_timestamp);
            INSERT INTO website_article (website_id, article_id, user_id, display_order, navigation_label) 
                VALUES (seq_website.currval, seq_article.currval, pUserId, 1, 'Home');
            l_message:='Created OK';
        ELSE
            UPDATE website SET 
                    domain_name=pDomainName, 
                    netlify_site_id_custom=l_netlify_site_id_custom, 
                    updated_date=current_timestamp 
             WHERE id=pWebsiteId 
               AND user_id=pUserId;
            l_message:='Updated OK';
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', l_message);
        apex_json.write('color', 'green');
        apex_json.write('deploy_buttons', pck_core.buildDeployButtons(pDomainName, l_netlify_site_id, l_netlify_site_id_custom));
        IF (l_website_id IS NOT NULL) THEN
            apex_json.write('website_id', l_website_id);
            apex_json.write('dropdown', '<li><button type="button" class="with-icon edit-website" data-id="' || l_website_id || '"><svg class="icon"><use href="#pen-to-square"></use></svg>' || pDomainName || '</button></li>');
        END IF;
        apex_json.close_object;

    END;

    /**
     **    Update the column value of 1 row.
     **    Complex processing for Domain name change
     */
    PROCEDURE updateField(pBodyText IN CLOB) IS
        l_id_1 NUMBER;
        l_id_2 NUMBER;

        l_message VARCHAR2(50);
        l_color VARCHAR2(5);
        l_website_id website.id%type;
        n PLS_INTEGER:=0;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT t.id, t.table_column, t.value
                    FROM users, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (id, table_column, value CLOB)) t
                   WHERE users.id=l_session_data.user_id)
        LOOP
            IF (INSTR(C.id,',')>0) THEN
                l_id_1:=SUBSTR(C.id,1,INSTR(C.id,',')-1);
                l_id_2:=SUBSTR(C.id,INSTR(C.id,',')+1);
            END IF;            

            CASE C.table_column
                WHEN 'website.domain_name' THEN
                    processDomainName(l_session_data.user_id, C.id, C.value);
                    RETURN;
                WHEN 'website.contact_email' THEN
                    UPDATE website SET contact_email=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website_article.navigation_label' THEN
                    UPDATE website_article SET navigation_label=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
                WHEN 'website_article.page_title' THEN
                    UPDATE website_article SET page_title=C.value WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
                WHEN 'website_article.page_description' THEN
                    UPDATE website_article SET page_description=C.value WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;       
            END CASE;
            n:=sql%rowcount;
        END LOOP;

        IF (n=1) THEN  /* means last DML was successful */
            l_color:='green';
            l_message:='Updated OK';
        ELSE  /* means update or insert failed */
            l_color:='red';
            l_message:='Updated NOK';
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', CASE WHEN n=1 THEN 'Updated OK' ELSE 'Updated NOK' END);
        apex_json.write('color', CASE WHEN n=1 THEN 'green' ELSE 'red' END);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /**
     **    Delete Table row
     */
    PROCEDURE deleteTable(pBodyText IN CLOB) IS
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT t.id, t.article_id, t.website_id, t.table_name
                    FROM users u, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (id, article_id, website_id, table_name)) t
                   WHERE u.id=l_session_data.user_id)
        LOOP
            CASE C.table_name
                WHEN 'user' THEN
                    null;            
                WHEN 'website' THEN
                    deleteWebsite(l_session_data.user_id,C.id);
                WHEN 'website_article' THEN
                    deleteArticle(l_session_data.user_id,C.article_id,C.website_id);
                WHEN 'asset' THEN
                    deleteAsset(l_session_data.user_id,C.id);               
            END CASE;
        END LOOP;

        /* NB: each procedure returns its own JSON response */

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
     **  Upload Core Web Vitals uploaded through navigator.beacon - hence no response sent.
     */      
    PROCEDURE uploadWebVitals(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address performance.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
    BEGIN
        INSERT INTO core_web_vitals (id, session_id, page_id, ip_address, name, value, rating) --, browser, width)
        SELECT seq_core_web_vitals.nextval, session_id, page_id, l_ip_address, name, value, rating --, l_session_id, l_browser, l_width
        FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' COLUMNS (session_id, page_id,
            NESTED '$.cwv[*]' COLUMNS (name, value, rating)))
        LOG ERRORS INTO core_web_vitals_err REJECT LIMIT UNLIMITED;                 
    END;

    /*
     **  Upload page visit details received from deployed website pages
     */      
    PROCEDURE uploadPageVisit(pBodyText IN CLOB) IS
        l_bodytext CLOB:=pBodyText;
        l_ip_address website_article_cwv.ip_address%type:=OWA_UTIL.get_cgi_env ('REMOTE_ADDR');
    BEGIN
        INSERT INTO website_article_cwv (website_id, article_id, cwv_name, cwv_value, cwv_rating, referrer, ip_address)
        SELECT website_id, article_id, cwv_name, cwv_value, cwv_rating, referrer, l_ip_address
          FROM JSON_TABLE(l_bodytext FORMAT JSON, '$' COLUMNS (website_id, article_id, cwv_name, cwv_value, cwv_rating, referrer));  

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;   

    /*
    ** Logout authenticated session
    */
    PROCEDURE signout IS
        session_ended EXCEPTION;
        PRAGMA EXCEPTION_INIT(session_ended,-20987);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        BEGIN 
            apex_session.delete_session(p_session_id=>l_session_data.session_id);
            EXCEPTION WHEN session_ended THEN NULL;
        END;
        /*
        owa_cookie.send(
            name => 'ORA_WWV_APP_101',
            value => null,
            expires => sysdate -1, 
            path =>'ords' );
        */
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;     

END;
/