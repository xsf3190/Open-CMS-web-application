CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS_UPDATE" IS
    --
    PROCEDURE getPageoptions(pId IN VARCHAR2);
    --
    PROCEDURE getWebsiteoptions(pWebsiteId IN website.id%type);
    --
    PROCEDURE init(pBodyText IN CLOB);
    --
    PROCEDURE netlify_status;
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS_UPDATE" IS

    /*
     **  Create wrapper html for input element
     */
    FUNCTION buildInputWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN, pUseEyeDropper IN BOOLEAN DEFAULT FALSE, pUseCharcounter IN BOOLEAN DEFAULT TRUE) RETURN VARCHAR2 IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_data_type user_tab_columns.data_type%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT c.data_length, NVL(i.comments,'Info not defined yet'), c.data_type
          INTO l_data_length, l_comments, l_data_type
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="input-wrapper">
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || 
            CASE WHEN pCanUsePopover THEN
                '<button type="button" popovertarget="' || l_column_name || '_popover">&#9432;
                </button>
                <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' 
            END ||
            CASE WHEN pUseEyeDropper THEN
                '<button type="button" class="use_eyedropper" aria-label="Select color from screen">
                    &#128997;&#129001;&#128998;
                </button>' 
            END ||
            '</label>
            <input  class="cms" placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                '" maxlength="' || l_data_length || '" value="' || pValue || '" data-column="' || pColumn || '" data-id="' || pId || '">
            <button type="button" class="clear-input" title="clear input" aria-label="clear input">&times;</button>
            <div class="button-container">
                <span class="result">&nbsp;</span>' ||
                CASE WHEN pUseCharcounter THEN
                '<span class="charcounter">' || NVL(LENGTH(pValue),0) ||  '/' || l_data_length || '</span>'
                END ||
            '</div>
        </div>');
    END;

    /*
     **  Create wrapper html for radio elements
     */
    FUNCTION buildRadioWrapper(pColumn IN VARCHAR2, pRadioButtons IN VARCHAR2, pCanUsePopover IN BOOLEAN) RETURN VARCHAR2 IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_comments user_col_comments.comments%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT NVL(i.comments,'Info not defined yet') 
          INTO l_comments
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="radio-wrapper">
                <fieldset>
                    <legend>' || INITCAP(l_column_name) || 
                    CASE WHEN pCanUsePopover 
                        THEN '<button type="button" popovertarget="' || l_column_name || '_popover"><svg><use href="#info"></use></svg></button>
                              <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' END || '
                    </legend>
                    <div class="cluster">' || pRadioButtons || '
                    </div>
                </fieldset>
                <div class="button-container">
                    <span class="result"></span><span>&nbsp;</span>
                </div>
            </div>');
    END;

    /*
     **  Create wrapper html for select element
     */
    FUNCTION buildSelectWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pOptionsColumn IN VARCHAR2, pOptionsOrder IN VARCHAR2, pCanUsePopover IN BOOLEAN) RETURN CLOB IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_options_table_name user_tab_columns.table_name%type;
        l_options_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_data_type user_tab_columns.data_type%type;
        l_sql VARCHAR2(250);
        TYPE t_options IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
        l_options t_options;
        l_select_options CLOB;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));
        l_options_table_name:=UPPER(SUBSTR(pOptionsColumn,1,INSTR(pOptionsColumn,'.')-1));
        l_options_column_name:=UPPER(SUBSTR(pOptionsColumn,INSTR(pOptionsColumn,'.')+1));

        SELECT c.data_length, NVL(i.comments,'Info not defined yet'), c.data_type
          INTO l_data_length, l_comments, l_data_type
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        /* Build select options */
        l_sql:='SELECT ' || l_options_column_name || ' FROM ' || l_options_table_name || ' ORDER BY ' || pOptionsOrder;
        EXECUTE IMMEDIATE l_sql BULK COLLECT INTO l_options;
        FOR i IN 1..l_options.COUNT LOOP
            l_select_options:=l_select_options || '<option' || CASE WHEN l_options(i)=pValue THEN ' selected' END || '>' || l_options(i) || '</option>'; 
        END LOOP;

        RETURN('
        <div class="select-wrapper">
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || 
                CASE WHEN pCanUsePopover 
                        THEN '<button type="button" popovertarget="' || l_column_name || '_popover">&#9432;</button>
                              <div id="' || l_column_name || '_popover" popover>' || l_comments || '</div>' END ||'
            </label>
            <select class="cms" id="' || l_column_name || '" name="' || LOWER(l_column_name) || '" data-column="' || pColumn || '" data-id="' || pId || '">' || l_select_options || 
            '</select>
            <div class="button-container">
                <span class="result"></span>
                <span>' || TO_CHAR(l_options.COUNT) || ' options</span>
            </div>
        </div>');
    END;

    /*
     **  Create wrapper html for textarea element
     */
    FUNCTION buildTextareaWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN) RETURN VARCHAR2 IS
        l_table_name user_tab_columns.table_name%type;
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_data_type user_tab_columns.data_type%type;
    BEGIN
        l_table_name:=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1));
        l_column_name:=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1));

        SELECT c.data_length, NVL(i.comments,'Info not defined yet'), c.data_type
          INTO l_data_length, l_comments, l_data_type
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=l_table_name
           AND c.column_name=l_column_name
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        l_column_name:=LOWER(l_column_name);

        RETURN('
        <div class="textarea-wrapper">
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || 
            CASE WHEN pCanUsePopover THEN
            '<button type="button" popovertarget="' || l_column_name || '_popover">
                <svg><use href="#info"></use></svg>
            </button>
            <div id="' || l_column_name || '_popover" popover>' || l_comments || 
            '</div>'
            END ||
            '</label>
            <textarea class="cms" placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                CASE WHEN l_data_type='CLOB' THEN '" rows="5" cols="60"' 
                     WHEN l_data_length=4000 THEN '" rows="5" cols="50" maxlength="' || l_data_length || '"' 
                     ELSE '" maxlength="' || l_data_length || '" rows="1" cols="0"' 
                END || ' data-column="' || pColumn || '" data-id="' || pId || '">' || pValue || '</textarea>
            <button type="button" class="clear-input" title="clear input" aria-label="clear input">&times;</button>        
            <div class="button-container">
                <span class="result"></span>
                <span class="charcounter">' || NVL(LENGTH(pValue),0) || CASE WHEN l_data_type<>'CLOB' THEN '/' || l_data_length END || '</span>
            </div>
        </div>');
    END;

    /*
    ** GET WEBSITE OPTIONS TO DISPLAY IN DIALOG
    */
    PROCEDURE getWebsiteoptions(pWebsiteId IN website.id%type) IS
        l_session_data pck_core.session_data_rt;
        l_content CLOB;
        l_website_id website.id%type;
        l_eyedropper VARCHAR2(3);
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT w.id, w.domain_name, w.font, g.url_regular, w.contact_email, w.max_width, w.fluid_types, w.color_dark, w.color_light, w.color_primary, w.netlify_site_id_custom
                    FROM website w, google_font g
                   WHERE w.id=pWebsiteId
                     AND w.font=g.family
                     AND w.user_id=l_session_data.user_id) 
        LOOP
            l_content:=
            '<form>' ||
                CASE WHEN C.netlify_site_id_custom IS NULL THEN buildInputWrapper(C.id, 'website.domain_name', C.domain_name, l_session_data.canuse_popover) END ||
                buildInputWrapper(C.id, 'website.contact_email', C.contact_email, l_session_data.canuse_popover) ||
                buildSelectWrapper(C.id, 'website.font', C.font, 'google_font.family', 'seq', l_session_data.canuse_popover) ||
                buildInputWrapper(C.id, 'website.max_width', C.max_width, l_session_data.canuse_popover) ||
                '<details>
                    <summary>Website Colours</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'website.color_dark', C.color_dark, l_session_data.canuse_popover, l_session_data.canuse_eyedropper, FALSE) ||
                    buildInputWrapper(C.id, 'website.color_light', C.color_light, l_session_data.canuse_popover, l_session_data.canuse_eyedropper, FALSE) ||
                    buildInputWrapper(C.id, 'website.color_primary', C.color_primary, l_session_data.canuse_popover, l_session_data.canuse_eyedropper, FALSE) ||
                    '</fieldset>
                </details>
                <div class="demo" style="clip-path:polygon(0 0, 100% 0, 100% 80%, 0 100%); height:5vw; background:' || C.color_primary || '"></div>
                <textarea class="demo" readonly style="background:' || C.color_light || ';color:' || C.color_dark || ';margin-top:calc(var(--space-m) * -1);padding:0.5em;">Dark text against light background</textarea>' ||
                --buildTextareaWrapper(C.id, 'website.fluid_types', C.fluid_types, l_session_data.canuse_popover) ||
                '<details>
                    <summary>DELETE WEBSITE</summary>' ||
                    pck_core.buildPushableButton('delete-website','&#128686;') ||
                '</details>
            </form>';

            apex_json.open_object;
            apex_json.write('content', l_content);
            apex_json.write('font_family', C.font);
            apex_json.write('font_url', 'url(' || C.url_regular || ')');
            apex_json.write('success', TRUE);
            apex_json.close_object;        
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** GET PAGE OPTIONS TO EDIT IN DIALOG
    */
    PROCEDURE getPageOptions(pId IN VARCHAR2) IS
        l_session_data pck_core.session_data_rt;
        l_content CLOB;
        l_website_id website_article.website_id%type;
        l_article_id website_article.article_id%type;
        l_radio LONG;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_article_id:=SUBSTR(pId,INSTR(pId,',')+1);

        FOR C IN (SELECT navigation_label, contact_form, page_title, page_description
                    FROM website_article 
                   WHERE website_id=l_website_id
                     AND article_id=l_article_id
                     AND user_id=l_session_data.user_id) 
        LOOP
            l_radio:=
            '<div>
                <input class="cms" type="radio" data-column="website_article.contact_form" data-id="' || pId || '" id="contact_form-yes" name="template" value="YES"' ||
                CASE WHEN C.contact_form='YES' THEN ' checked' END || '>
                </input>
                <label for="contact_form-yes">YES</label>
            </div>
            <div>
                <input type="radio" class="cms" data-column="website_article.contact_form" data-id="' || pId || '" id="contact_form-no" name="template" value="NO"' ||
                CASE WHEN C.contact_form='NO' THEN ' checked' END || '>
                </input> <label for="contact_form-no">NO</label>
            </div>';
            l_content:=l_content || 
            '<form>' ||
                buildInputWrapper(pId, 'website_article.navigation_label', C.navigation_label, l_session_data.canuse_popover) ||
                buildTextareaWrapper(pId, 'website_article.page_title', C.page_title, l_session_data.canuse_popover) ||
                buildTextareaWrapper(pId, 'website_article.page_description', C.page_description, l_session_data.canuse_popover) ||
                buildRadioWrapper('website_article.contact_form', l_radio, l_session_data.canuse_popover) || 
                '<details>
                    <summary>CODEPEN FEATURES</summary>' ||
                    pck_core.buildPushableButton('edit-codepen','&#9917;') ||
                    pck_core.buildPushableButton('upload-codepen','&#9917;') ||
                '</details>
                <details>
                    <summary>DELETE PAGE</summary>' ||
                    pck_core.buildPushableButton('delete-page', '&#128686;') ||
                '</details>
            </form>';      

            apex_json.open_object;
            apex_json.write('content', l_content);
            apex_json.write('success', TRUE);
            apex_json.close_object;        
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    **  Maintain separate Netlify site objects for TEST and LIVE websites
    **  Auto-create the LIVE site if a dns zone exists with same domain name
    **  N.b. 1) DNS zone created automatically if custom domain purchased through Netlify 
    **       2) DNS delegated to Netlify from registrar (e.g. Godaddy, Namecheap) requires that Dns zone is created in a separate process
    */
    PROCEDURE processDomainName(pUserId IN website.user_id%type, pWebsiteId IN website.id%type, pDomainName IN website.domain_name%type) IS
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_dns_zones CLOB;
        l_netlify_site_id               website.netlify_site_id%type;
        l_netlify_site_id_custom        website.netlify_site_id%type;
        l_website_id website.id%type;
        l_endpoint VARCHAR2(100);
        l_method VARCHAR2(6);
        l_message VARCHAR2(50);

        FUNCTION name_taken RETURN BOOLEAN IS
        BEGIN
            IF (apex_web_service.g_status_code=422) THEN
                apex_json.open_object;
                apex_json.write('success', TRUE);
                apex_json.write('message', 'Name already taken');
                apex_json.write('color', 'red');
                apex_json.close_object;
                RETURN TRUE;
            ELSE
                RETURN FALSE;
            END IF;
        END;
    BEGIN

        SELECT netlify_site_id, netlify_site_id_custom 
          INTO l_netlify_site_id, l_netlify_site_id_custom 
          FROM website 
         WHERE id=pWebsiteId
           AND user_id=pUserId;

        /* Change Netlify site name  at user's request */
        l_json:=new JSON_OBJECT_T;
        l_json.put('name', pDomainName);
        l_endpoint:='sites' || CASE WHEN l_netlify_site_id IS NOT NULL THEN '/' || l_netlify_site_id END;
        l_method:=CASE WHEN l_netlify_site_id IS NULL THEN 'POST' ELSE 'PATCH' END;

        /* Netlify sites API returns 422 if domain name unavailable */
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>l_endpoint, pMethod=>l_method, pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
        IF (name_taken) THEN
            RETURN;
        END IF;

        /* Get Netlify site_id for TEST site */
        SELECT site_id INTO l_netlify_site_id FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));

        /* Create Netlify LIVE site with custom_domain if domain_name in dns_zones */
        IF (l_netlify_site_id_custom IS NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_dns_zones);
            FOR C IN (SELECT name FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS(name)) WHERE name=pDomainName) LOOP

                l_json:=new JSON_OBJECT_T;
                l_json.put('name', pDomainName || ' custom domain');
                l_json.put('custom_domain', pDomainName);

                pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites', pMethod=>'POST', pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
                IF (name_taken) THEN
                    RETURN;
                END IF;
                SELECT site_id INTO l_netlify_site_id_custom FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));
            END LOOP;
        END IF;

        UPDATE website SET 
                domain_name=pDomainName, 
                netlify_site_id=l_netlify_site_id,
                netlify_site_id_custom=l_netlify_site_id_custom, 
                updated_date=current_timestamp 
         WHERE id=pWebsiteId;
        l_message:='Updated OK';

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', l_message);
        apex_json.write('color', 'green');
        apex_json.write('deploy_buttons', pck_core.buildDeployButtons(pDomainName, l_netlify_site_id, l_netlify_site_id_custom));
        apex_json.close_object;

    END;

    /**
     **    Update the column value of 1 row.
     **    Complex processing for Domain name change
     */
    PROCEDURE init(pBodyText IN CLOB) IS
        l_id_1 NUMBER;
        l_id_2 NUMBER;

        l_message VARCHAR2(50);
        l_color VARCHAR2(5);
        l_getFontUrl BOOLEAN:=FALSE;
        l_family google_font.family%type;
        l_url_regular google_font.url_regular%type;
        l_website_id website.id%type;
        n PLS_INTEGER:=0;
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT t.id, t.table_column, t.value
                    FROM users, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (id, table_column, value)) t
                   WHERE users.id=l_session_data.user_id)
        LOOP
            IF (C.table_column IN ('website.color_light','website.color_dark','website.color_primary')) THEN
                IF NOT (REGEXP_LIKE(C.value,'^#[0-9A-F]{6}[0-9a-f]{0,2}$','i')) THEN
                    EXIT;
                END IF;
            END IF;

            IF (INSTR(C.id,',')>0) THEN
                l_id_1:=SUBSTR(C.id,1,INSTR(C.id,',')-1);
                l_id_2:=SUBSTR(C.id,INSTR(C.id,',')+1);
            END IF;     

            CASE C.table_column
                WHEN 'website.domain_name' THEN
                    processDomainName(l_session_data.user_id, C.id, C.value);
                    RETURN;
                WHEN 'website.contact_email' THEN
                    UPDATE website SET contact_email=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website.font' THEN
                    UPDATE website SET font=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                    l_getFontUrl:=TRUE;
                WHEN 'website.max_width' THEN
                    UPDATE website SET max_width=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website.color_light' THEN
                    UPDATE website SET color_light=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website.color_primary' THEN
                    UPDATE website SET color_primary=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website.color_dark' THEN
                    UPDATE website SET color_dark=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website.fluid_types' THEN
                    UPDATE website SET fluid_types=C.value, updated_date=current_timestamp WHERE id=C.id AND user_id=l_session_data.user_id;
                WHEN 'website_article.navigation_label' THEN
                    UPDATE website_article SET navigation_label=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
                WHEN 'website_article.page_title' THEN
                    UPDATE website_article SET page_title=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
                WHEN 'website_article.page_description' THEN
                    UPDATE website_article SET page_description=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
                WHEN 'website_article.contact_form' THEN
                    UPDATE website_article SET contact_form=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2 AND user_id=l_session_data.user_id;
            END CASE;
            n:=sql%rowcount;
            IF (l_getFontUrl AND n=1) THEN
                SELECT family, url_regular INTO l_family, l_url_regular FROM google_font WHERE family=C.value;
            END IF;
        END LOOP;

        IF (n=1) THEN  /* means last DML was successful */
            l_color:='green';
            l_message:='Updated OK';
        ELSE  /* means update or insert failed */
            l_color:='red';
            l_message:='Updated NOK';
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', CASE WHEN n=1 THEN 'Updated OK' ELSE 'Updated NOK' END);
        apex_json.write('color', CASE WHEN n=1 THEN 'green' ELSE 'red' END);
        IF (l_getFontUrl) THEN
            apex_json.write('font_family', '"' || l_family || '"');
            apex_json.write('font_url','url(' || l_url_regular || ')');
        END IF;
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    **  Run this to get a status of Netlify sites
    */
    PROCEDURE netlify_status IS 
        l_clob CLOB;
    BEGIN
        pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_clob);
        DELETE netlify_dns_zone;
        INSERT INTO netlify_dns_zone (id, name, site_id, created_at, updated_at)
        SELECT id, name, site_id, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') 
          FROM JSON_TABLE(l_clob, '$[*]' COLUMNS(id, name, site_id, created_at, updated_at));

        DELETE netlify_dns_zone_server;
        INSERT INTO netlify_dns_zone_server (dns_zone_id, server)
        SELECT id, server FROM JSON_TABLE(l_clob, '$[*]' COLUMNS (id, NESTED '$.dns_servers[*]' COLUMNS (server varchar2(50) path '$')));

        pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'sites', pMethod=>'GET', pData=>l_clob);
        DELETE netlify_site;
        INSERT INTO netlify_site (id, name, custom_domain, url, created_at, updated_at)
        SELECT id, name, custom_domain, url, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR')
          FROM JSON_TABLE(l_clob, '$[*]' COLUMNS(id, name, custom_domain, url, created_at, updated_at));
    END;
END;
/