CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS_UPDATE" IS
    --
    PROCEDURE getApiKeys;
    --
    PROCEDURE getPageoptions(pId IN VARCHAR2);
    --
    PROCEDURE getWebsiteoptions(pId IN VARCHAR2);
    --
    PROCEDURE goliveWebsite(pWebsiteId IN website.id%type);
    --
    PROCEDURE init(pBodyText IN CLOB);
    --
    PROCEDURE netlify_status;
    --
END;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS_UPDATE" IS

    PROCEDURE getColumnDetails(pColumn IN VARCHAR2, pCanUsePopover IN BOOLEAN, pDataLength IN OUT user_tab_columns.data_length%type, pPopover IN OUT VARCHAR2 ) IS
        l_comments user_col_comments.comments%type;
        l_column_name user_tab_columns.column_name%type:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);
    BEGIN
        SELECT c.data_length, NVL(i.comments,'Info not defined yet')
          INTO pDataLength, l_comments
          FROM user_tab_columns c, user_col_comments i
         WHERE c.table_name=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1))
           AND c.column_name=UPPER(l_column_name)
           AND i.table_name=c.table_name
           AND i.column_name=c.column_name;

        IF (pCanUsePopover AND l_comments IS NOT NULL) THEN
            pPopover:=
            '<button type="button" popovertarget="' || l_column_name || '_popover" id="' || l_column_name || '_btn">&#9432;</button>
            <div id="' || l_column_name || '_popover" popover anchor="' || l_column_name || '_btn">' || l_comments || '</div>';
        END IF;
    END;

    /*
     **  Create wrapper html for input text element
     */
    FUNCTION buildInputWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN, pUseEyeDropper IN BOOLEAN DEFAULT FALSE, pUseCharcounter IN BOOLEAN DEFAULT TRUE, pClassName IN VARCHAR2 DEFAULT 'cms', pReadonly IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_popover LONG;
    BEGIN
        getColumnDetails(pColumn, pCanUsePopover, l_data_length, l_popover);

        l_column_name:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);

        RETURN('
        <div class="input-wrapper">
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || l_popover ||
            CASE WHEN pUseEyeDropper THEN
                '<button type="button" class="use_eyedropper" aria-label="Select color from screen">
                    &#128997;&#129001;&#128998;
                </button>' 
            END ||
            '</label>
            <input  class="' || pClassName || '"' ||
            ' placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                '" maxlength="' || l_data_length || '" value="' || pValue || '" data-column="' || pColumn || '" data-id="' || pId || '"' || pReadonly || '>' ||
            CASE WHEN pValue IS NOT NULL AND pReadonly IS NULL THEN
            '<button type="button" class="clear-input" title="clear input" aria-label="clear input">&times;</button>'
            END ||
            '<div class="button-container">
                <span class="result">&nbsp;</span>' ||
                CASE WHEN pUseCharcounter THEN
                '<span class="charcounter">' || NVL(LENGTH(pValue),0) ||  '/' || l_data_length || '</span>'
                END ||
            '</div>
        </div>');
    END;

    /*
     **  Create wrapper html for input number element
     */
    FUNCTION buildInputNumberWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN NUMBER, pCanUsePopover IN BOOLEAN, pMin IN VARCHAR2 DEFAULT NULL, pMax IN VARCHAR2 DEFAULT NULL, pStep IN VARCHAR2 DEFAULT NULL, pClassName IN VARCHAR2 DEFAULT 'cms') RETURN VARCHAR2 IS
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_popover LONG;
    BEGIN
        getColumnDetails(pColumn, pCanUsePopover, l_data_length, l_popover);

        l_column_name:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);

        RETURN('
        <div class="input-wrapper">
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || l_popover ||
            '</label>
            <input  type="number" class="' || pClassName || '"' ||
            ' id="' || l_column_name || '" name="' || LOWER(l_column_name) || '"' ||
            CASE WHEN pMin IS NOT NULL THEN ' min="' || pMin || '"' END ||
            CASE WHEN pMax IS NOT NULL THEN ' max="' || pMax || '"' END ||
            CASE WHEN pStep IS NOT NULL THEN ' step="' || pStep || '"' END || 
            ' value="' || TO_CHAR(pValue) || '" data-column="' || pColumn || '" data-id="' || pId || '">
            <div class="button-container">
                <span class="result">&nbsp;</span>' ||
            '</div>
        </div>');
    END;

    /*
     **  Create wrapper html for radio elements
     */
    FUNCTION buildRadioWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN) RETURN VARCHAR2 IS
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_comments user_col_comments.comments%type;
        l_radio_options user_constraints.search_condition_vc%type;
        l_html LONG;
        pos_1 PLS_INTEGER;
        pos_2 PLS_INTEGER;
        l_popover LONG;
    BEGIN
        getColumnDetails(pColumn, pCanUsePopover, l_data_length, l_popover);

        l_column_name:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);

        SELECT con.search_condition_vc
          INTO l_radio_options
          FROM user_cons_columns col, user_constraints con 
         WHERE col.table_name=UPPER(SUBSTR(pColumn,1,INSTR(pColumn,'.')-1))
           AND col.column_name=UPPER(SUBSTR(pColumn,INSTR(pColumn,'.')+1))
           AND col.owner=con.owner
           AND col.table_name=con.table_name
           AND col.constraint_name=con.constraint_name
           AND con.constraint_type='C';

        pos_1:=INSTR(l_radio_options,'(');
        pos_2:=INSTR(l_radio_options,')');
        l_radio_options:=REPLACE(SUBSTR(l_radio_options,pos_1+1,pos_2-pos_1-1), '''',NULL);

        l_column_name:=LOWER(l_column_name);

        FOR C IN (SELECT column_value FROM TABLE(apex_string.split(l_radio_options,','))) LOOP
            l_html:=l_html || 
            '<div>
                <label for="' || l_column_name || '-' || LOWER(C.column_value) || '">' || C.column_value|| '</label>
                <input class="cms" type="radio" data-column="' || pColumn || '" data-id="' || pId || '" id="' || l_column_name || '-' || LOWER(C.column_value) || '" name="' || l_column_name || '" value="' || C.column_value || '"' ||
                CASE WHEN pValue=C.column_value THEN ' checked' END || '>
                </input> 
            </div>';
        END LOOP;

        RETURN
        ('<div class="radio-wrapper">
                <fieldset>
                    <legend>' || INITCAP(REPLACE(l_column_name,'_',' ')) || l_popover || '</legend>
                    <div class="radio-options">' || l_html || '
                    </div>
                </fieldset>
                <div class="button-container">
                    <span class="result"></span><span>&nbsp;</span>
                </div>
            </div>');
    END;

    /*
     **  Create wrapper html for select element
     */
    FUNCTION buildSelectWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pOptions IN VARCHAR2, pCanUsePopover IN BOOLEAN, pClassName IN VARCHAR2 DEFAULT 'cms') RETURN CLOB IS
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_popover LONG;
    BEGIN
        getColumnDetails(pColumn, pCanUsePopover, l_data_length, l_popover);

        l_column_name:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);

        RETURN('
        <div class="select-wrapper">
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || l_popover ||
            '</label>
            <select class="' || pClassName || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || '" data-column="' || pColumn || '" data-id="' || pId || '">' || pOptions || 
            '</select>
            <div class="button-container">
                <span class="result"></span>
            </div>
        </div>');
    END;

    /*
     **  Create wrapper html for list element
     */
    FUNCTION buildListWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pOptions IN OUT NOCOPY CLOB, pCanUsePopover IN BOOLEAN, pClassName IN VARCHAR2 DEFAULT 'cms') RETURN CLOB IS
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_popover LONG;
    BEGIN
        getColumnDetails(pColumn, pCanUsePopover, l_data_length, l_popover);

        l_column_name:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);

        RETURN('
        <div class="list-wrapper">
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || l_popover  ||
            '</label>
            <input list="font-datalist" value="' || pValue || '" class="' || pClassName || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || '" data-column="' || pColumn || '" data-id="' || pId || '">' || 
            '<datalist id="font-datalist">' || pOptions || '</datalist>
            <div class="button-container">
                <span class="result"></span>
            </div>
        </div>');
    END;

    /*
     **  Create wrapper html for textarea element
     */
    FUNCTION buildTextareaWrapper(pId IN VARCHAR2, pColumn IN VARCHAR2, pValue IN VARCHAR2, pCanUsePopover IN BOOLEAN) RETURN VARCHAR2 IS
        l_column_name user_tab_columns.column_name%type;
        l_data_length user_tab_columns.data_length%type;
        l_popover LONG;
    BEGIN
        getColumnDetails(pColumn, pCanUsePopover, l_data_length, l_popover);

        l_column_name:=SUBSTR(pColumn,INSTR(pColumn,'.')+1);

        RETURN('
        <div class="textarea-wrapper">
            <label for="' || l_column_name || '">' || INITCAP(REPLACE(l_column_name,'_',' ')) || l_popover ||
            '</label>
            <textarea class="cms" placeholder="Enter new ' || REPLACE(l_column_name,'_',' ') || '" id="' || l_column_name || '" name="' || LOWER(l_column_name) || 
                '" maxlength="' || l_data_length || '" data-column="' || pColumn || '" data-id="' || pId || '">' || pValue || '</textarea>
            <button type="button" class="clear-input" title="clear input" aria-label="clear input">&times;</button>        
            <div class="button-container">
                <span class="result"></span>
                <span class="charcounter">' || NVL(LENGTH(pValue),0) ||  '/' || l_data_length || '</span>
            </div>
        </div>');
    END;

    /*
    ** GET API KEY DETAILS FOR CURRENT USER
    */
    PROCEDURE getApiKeys IS
        l_content CLOB;
        l_readonly VARCHAR2(8);
        l_session_data pck_core.session_data_rt;
    BEGIN
        l_session_data:=pck_core.getSessionData();
        FOR C IN (SELECT a.is_admin, u.id, u.cld_cloud_name, u.cld_api_key, u.cld_api_secret, u.netlify_token, u.netlify_account_slug, u.stripe_publishable_key_test, u.stripe_secret_key_test,
                         CASE WHEN a.is_admin='Yes' THEN u.github_token ELSE '********' END github_token, 
                         CASE WHEN a.is_admin='Yes' THEN u.github_repos_owner ELSE '********' END github_repos_owner, 
                         CASE WHEN a.is_admin='Yes' THEN u.github_repos ELSE '********' END github_repos,
                         CASE WHEN a.is_admin='Yes' THEN u.google_api_key ELSE '********' END google_api_key, 
                         CASE WHEN a.is_admin='Yes' THEN u.google_client_id ELSE '********' END google_client_id, 
                         CASE WHEN a.is_admin='Yes' THEN u.ipdata_api_key ELSE '********' END ipdata_api_key,
                         CASE WHEN a.is_admin='Yes' THEN u.terraform_token ELSE '********' END terraform_token,
                         CASE WHEN a.is_admin='Yes' THEN u.whatismybrowser_api_key ELSE '********' END whatismybrowser_api_key
                    FROM users u, apex_workspace_apex_users a
                   WHERE u.id=l_session_data.user_id
                     AND a.email(+)=u.email) 
        LOOP
            IF (C.github_token LIKE '*%') THEN
                l_readonly:='readonly';
            END IF;
            l_content:=
            '<form>
                <h2>Private API Keys</h2>
                <details>
                    <summary>NETLIFY</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'users.netlify_token', C.netlify_token, l_session_data.canuse_popover) || 
                    buildInputWrapper(C.id, 'users.netlify_account_slug', C.netlify_account_slug, l_session_data.canuse_popover) || 
                    '</fieldset>
                </details>
                <details>
                    <summary>CLOUDINARY</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'users.cld_cloud_name', C.cld_cloud_name, l_session_data.canuse_popover) || 
                    buildInputWrapper(C.id, 'users.cld_api_key', C.cld_api_key, l_session_data.canuse_popover) || 
                    buildInputWrapper(C.id, 'users.cld_api_secret', C.cld_api_secret, l_session_data.canuse_popover) || 
                    '</fieldset>
                </details>
                <details>
                    <summary>STRIPE</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'users.stripe_publishable_key_test', C.stripe_publishable_key_test, l_session_data.canuse_popover) || 
                    buildInputWrapper(C.id, 'users.stripe_secret_key_test', C.stripe_secret_key_test, l_session_data.canuse_popover) || 
                    '</fieldset>
                </details>
                <hr>
                <h2>Administrator API keys</h2>
                <details>
                    <summary>GITHUB</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'users.github_token', C.github_token, l_session_data.canuse_popover,pReadonly=>l_readonly) || 
                    buildInputWrapper(C.id, 'users.github_repos_owner', C.github_repos_owner, l_session_data.canuse_popover,pReadonly=>l_readonly) || 
                    buildInputWrapper(C.id, 'users.github_repos', C.github_repos, l_session_data.canuse_popover,pReadonly=>l_readonly) || 
                    '</fieldset>
                </details>
                <details>
                    <summary>GOOGLE</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'users.google_api_key', C.google_api_key, l_session_data.canuse_popover,pReadonly=>l_readonly) || 
                    buildInputWrapper(C.id, 'users.google_client_id', C.google_client_id, l_session_data.canuse_popover,pReadonly=>l_readonly) || 
                    '</fieldset>
                </details>
                <details>
                    <summary>IPDATA</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'users.ipdata_api_key', C.ipdata_api_key, l_session_data.canuse_popover,pReadonly=>l_readonly) || 
                    '</fieldset>
                </details>
                <details>
                    <summary>TERRAFORM</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'users.terraform_token', C.terraform_token, l_session_data.canuse_popover,pReadonly=>l_readonly) || 
                    '</fieldset>
                </details>
                <details>
                    <summary>WHATISMYBROWSER</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'users.whatismybrowser_api_key', C.whatismybrowser_api_key, l_session_data.canuse_popover,pReadonly=>l_readonly) || 
                    '</fieldset>
                </details>
            </form>';
        END LOOP;
        
        apex_json.open_object; 
        apex_json.write('success', TRUE);
        apex_json.write('content', l_content);
        apex_json.close_object;
    EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** GET WEBSITE OPTIONS TO DISPLAY IN DIALOG. N.B. pWebsiteId=0 IS REQUEST TO CREATE NEW WEBSITE
    */
    PROCEDURE getWebsiteoptions(pId IN VARCHAR2) IS
        l_website_id website.id%type;
        l_website_env VARCHAR2(4);
        l_session_data pck_core.session_data_rt;
        l_content CLOB;
        l_eyedropper VARCHAR2(3);
        l_select_options CLOB;
        l_fluid_types pck_core.fluid_type_t;
        l_domain_html LONG;
        l_delete_html LONG;

        FUNCTION buildFontOptions(pFont IN VARCHAR2) RETURN VARCHAR2 IS
            l_options LONG;
        BEGIN
            /* Build select options for most popular Google Fonts */
            FOR C IN (SELECT family,seq FROM google_font WHERE seq BETWEEN 1 AND 50 
                        UNION
                      SELECT family,seq FROM google_font WHERE family IN ('Roboto Serif','Geologica')
                      ORDER BY seq) 
            LOOP
                l_options:=l_options || '<option value="'|| C.family || '"';
                IF (C.family=pFont) THEN
                    l_options:=l_options || ' selected';
                END IF;
                l_options:=l_options || '>' || C.family || '</option>';
            END LOOP;
            RETURN (l_options);
        END;

        FUNCTION buildScaleOptions(pScale IN NUMBER) RETURN VARCHAR2 IS
            TYPE t_scale IS VARRAY(4) OF NUMBER;
            l_scale t_scale:=t_scale(1.2, 1.25, 1.33, 1.618);
            l_options LONG;
        BEGIN
            FOR i IN 1..L_scale.COUNT LOOP
                l_options:=l_options || '<option value="' || l_scale(i) || '"';
                IF (l_scale(i)=pScale) THEN
                    l_options:=l_options || ' selected';
                END IF;
                l_options:=l_options || '>' || l_scale(i) || '</option>';
            END LOOP;
            RETURN (l_options);
        END;

    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_website_env:=SUBSTR(pId,INSTR(pId,',')+1);

        IF (l_website_id=0) THEN
            l_content:=
                buildInputWrapper(l_website_id, 'website.domain_name', NULL, l_session_data.canuse_popover) ||
                pck_core.buildPushableButton('save');
            apex_json.open_object;
            apex_json.write('content', l_content );
            apex_json.write('success', TRUE);
            apex_json.close_object;
            RETURN;
        END IF;

        FOR C IN (
            SELECT w.id, w.domain_name, w.font, w.contact_email, w.max_width, w.favicon_code,
                     w.min_font_size, w.min_width_px, w.min_scale, w.max_font_size, w.max_width_px, w.max_scale, 
                     w.color_text, w.color_background, w.color_primary, w.netlify_site_id_custom, w.price_currency,
                     w.deploy_css_file, w.netlify_last_published, g.url_regular
              FROM website w, google_font g
             WHERE w.id=l_website_id
               AND w.font=g.family
               AND w.user_id=l_session_data.user_id) 
        LOOP
            apex_json.open_object;

            /* domain name can only be changed if no LIVE website deployed */
            IF (C.netlify_site_id_custom IS NULL) THEN
                l_domain_html:=buildInputWrapper(C.id, 'website.domain_name', C.domain_name, l_session_data.canuse_popover);
                /* Only go live if TEST site deployed */
                IF (C.netlify_last_published IS NOT NULL) THEN
                    l_domain_html:=l_domain_html|| pck_core.buildPushableButton('go-live',pButtonText=>'GO LIVE WITH PURCHASED DOMAIN NAME');
                END IF;
            END IF;

            /* DELETE website and definition only if no LIVE site */
            CASE l_website_env
                WHEN 'TEST' THEN
                    IF (C.netlify_site_id_custom IS NULL) THEN
                        l_delete_html:=pck_core.buildPushableButton('delete-website','&#128686;', pButtonText=>'DELETE WEBSITE AND CONTENT');
                    END IF;
                WHEN 'LIVE' THEN
                    l_delete_html:=pck_core.buildPushableButton('delete-website','&#128686;', pButtonText=>'DELETE LIVE WEBSITE');
            END CASE;

            l_content:=
            '<form>' ||
                l_domain_html ||
                buildInputWrapper(C.id, 'website.contact_email', C.contact_email, l_session_data.canuse_popover) ||
                buildInputWrapper(C.id, 'website.favicon_code', C.favicon_code, l_session_data.canuse_popover) ||
                buildInputWrapper(C.id, 'website.max_width', C.max_width, l_session_data.canuse_popover) ||
                buildSelectWrapper(C.id, 'website.font', C.font, buildFontOptions(C.font), l_session_data.canuse_popover) ||
                buildRadioWrapper(C.id, 'website.deploy_css_file', C.deploy_css_file, l_session_data.canuse_popover) ||
                '<details>
                    <summary>Fluid Typography</summary>
                    <div class="cards-50-50">
                        <fieldset>
                            <legend>Min Viewport</legend>' ||
                            buildInputNumberWrapper(C.id, 'website.min_font_size', TO_CHAR(C.min_font_size), l_session_data.canuse_popover, '1', '2', '0.1', 'fluid') ||
                            buildInputNumberWrapper(C.id, 'website.min_width_px', TO_CHAR(C.min_width_px), l_session_data.canuse_popover, '320', '400', '', 'fluid') ||
                            buildSelectWrapper(C.id, 'website.min_scale', C.min_scale, buildScaleOptions(C.min_scale), l_session_data.canuse_popover, 'fluid') ||   
                        '</fieldset>
                        <fieldset>
                            <legend>Max Viewport</legend>' ||
                            buildInputNumberWrapper(C.id, 'website.max_font_size', TO_CHAR(C.max_font_size), l_session_data.canuse_popover, '2', '5', '0.1', 'fluid') ||
                            buildInputNumberWrapper(C.id, 'website.max_width_px', TO_CHAR(C.max_width_px), l_session_data.canuse_popover, '800', '1600', '', 'fluid') ||
                            buildSelectWrapper(C.id, 'website.max_scale', C.max_scale, buildScaleOptions(C.max_scale), l_session_data.canuse_popover, 'fluid') || 
                        '</fieldset>' ||
                        pck_core.buildPushableButton('save-fluid-types') ||
                    '</div>
                </details>
                <details>
                    <summary>Website Colours</summary>
                    <fieldset>' ||
                    buildInputWrapper(C.id, 'website.color_text', C.color_text, l_session_data.canuse_popover, l_session_data.canuse_eyedropper, FALSE, 'color') ||
                    buildInputWrapper(C.id, 'website.color_background', C.color_background, l_session_data.canuse_popover, l_session_data.canuse_eyedropper, FALSE, 'color') ||
                    buildInputWrapper(C.id, 'website.color_primary', C.color_primary, l_session_data.canuse_popover, l_session_data.canuse_eyedropper, FALSE, 'color') ||
                    pck_core.buildPushableButton('save-colors') ||
                    '</fieldset>
                </details>
                <div class="demo-container">
                    <div><span></span></div>
                    <h1></h1>
                    <p></p>
                </div>' ||
                buildRadioWrapper(C.id, 'website.price_currency', C.price_currency, l_session_data.canuse_popover) ||
                CASE WHEN l_delete_html IS NOT NULL THEN
                '<details><summary>DELETE WEBSITE</summary>' || l_delete_html || '</details>'
                END || '
            </form>';

            apex_json.write('content', l_content);
            apex_json.write('font_family', C.font);
            apex_json.write('font_url', 'url(' || C.url_regular || ')');
            apex_json.write('color_text', C.color_text);
            apex_json.write('color_background', C.color_background);
            apex_json.write('color_primary', C.color_primary);

            l_fluid_types:=pck_core.getFluidTypes(C.min_font_size, C.min_width_px, C.min_scale, C.max_font_size, C.max_width_px, C.max_scale);
            apex_json.open_array('fluid_types');
            FOR i IN 1..l_fluid_types.COUNT LOOP
                IF (INSTR(l_fluid_types(i).property,'step')>0) THEN
                    apex_json.open_object;
                    apex_json.write('property',l_fluid_types(i).property);
                    apex_json.write('value', l_fluid_types(i).value);
                    apex_json.close_object;
                END IF;
            END LOOP;
            apex_json.close_array;

            apex_json.write('success', TRUE);
            apex_json.close_object;        
        END LOOP;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    ** GET PAGE OPTIONS TO EDIT IN DIALOG. "pId" IS WEBSITE ID PLUS:
    ** 1) "0" - INCLUDE ONLY NEW NAVIGATION LABEL IN DIALOG TO CREATE NEW PAGE
    ** 2) PAGE ID OF EXISTING WEBSITE PAGE
    ** 3) SUBPAGE ID - ONLY ALLOW DELETE OPTION
    */
    PROCEDURE getPageOptions(pId IN VARCHAR2) IS
        l_session_data pck_core.session_data_rt;
        l_content CLOB;
        l_website_id website_article.website_id%type;
        l_article_id website_article.article_id%type;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        l_website_id:=SUBSTR(pId,1,INSTR(pId,',')-1);
        l_article_id:=SUBSTR(pId,INSTR(pId,',')+1);

        IF (l_article_id=0) THEN
            l_content:=buildInputWrapper(pId, 'website_article.navigation_label', NULL, l_session_data.canuse_popover) || pck_core.buildPushableButton('save');
            apex_json.open_object;
            apex_json.write('content', l_content );
            apex_json.write('success', TRUE);
            apex_json.close_object;
            RETURN;
        END IF;

        FOR C IN (SELECT navigation_label, collection_type, contact_form, page_title, page_description
                    FROM website_article 
                   WHERE website_id=l_website_id
                     AND article_id=l_article_id
                     AND user_id=l_session_data.user_id) 
        LOOP
            l_content:=l_content || 
            '<form>' ||
                buildInputWrapper(pId, 'website_article.navigation_label', C.navigation_label, l_session_data.canuse_popover) ||
                buildRadioWrapper(pId, 'website_article.collection_type', C.collection_type, l_session_data.canuse_popover) || 
                buildTextareaWrapper(pId, 'website_article.page_title', C.page_title, l_session_data.canuse_popover) ||
                buildTextareaWrapper(pId, 'website_article.page_description', C.page_description, l_session_data.canuse_popover) ||
                buildRadioWrapper(pId, 'website_article.contact_form', C.contact_form, l_session_data.canuse_popover) || 
                '<details>
                    <summary>CODEPEN FEATURES</summary>' ||
                    pck_core.buildPushableButton('edit-codepen','&#9917;') ||
                    pck_core.buildPushableButton('upload-codepen','&#9917;') ||
                '</details>
                <details>
                    <summary>DELETE PAGE</summary>' ||
                    pck_core.buildPushableButton('delete-page', '&#128686;') ||
                '</details>
            </form>';            
        END LOOP;

        /* No content means it  must be a sub-article */
        IF (l_content IS NULL) THEN 
            FOR C IN (SELECT wa.navigation_label, wa.collection_type, a.product_price, a.featured
                        FROM article a, website_article wa
                       WHERE a.id=l_article_id
                         AND wa.website_id=l_website_id
                         AND wa.article_id=a.parent_id
                         AND user_id=l_session_data.user_id) 
            LOOP
                l_content:='<form>';
                IF (C.collection_type='PRODUCT') THEN
                    l_content:=l_content || 
                    buildInputNumberWrapper(l_article_id, 'article.product_price', TO_CHAR(C.product_price), l_session_data.canuse_popover);
                END IF;
                l_content:=l_content || 
                    buildRadioWrapper(l_article_id, 'article.featured', C.featured, l_session_data.canuse_popover) || 
                    '<details>
                        <summary>CODEPEN FEATURES</summary>' ||
                        pck_core.buildPushableButton('edit-codepen','&#9917;') ||
                        pck_core.buildPushableButton('upload-codepen','&#9917;') ||
                    '</details>
                    <details>
                        <summary>DELETE ' || UPPER(C.navigation_label) || ' ITEM</summary>' ||
                        pck_core.buildPushableButton('delete-article', '&#128686;') ||
                    '</details>
                </form>';
            END LOOP;
        END IF;

        apex_json.open_object;
        apex_json.write('content', l_content);
        apex_json.write('success', TRUE);
        apex_json.close_object;  

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    **  Create LIVE site for domain purchased externally, e.g. GoDaddy, Namecheap etc
    */
    PROCEDURE goliveWebsite(pWebsiteId IN website.id%type) IS
        l_json JSON_OBJECT_T;
        l_domain_name website.domain_name%type;
        l_netlify_account_slug users.netlify_account_slug%type;
        l_netlify_site_id_custom website.netlify_site_id_custom%type;
        l_netlify_dns_zone_id website.netlify_dns_zone_id%type;
        l_clob CLOB;
        l_session_data pck_core.session_data_rt;
        l_error LONG;
        l_dns_servers VARCHAR2(200);
        l_job_name VARCHAR2(30);
        n PLS_INTEGER:=0;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        SELECT w.domain_name
          INTO l_domain_name
          FROM website w
         WHERE w.user_id=l_session_data.user_id
           AND w.id=pWebsiteId;

        /* Create NETLIFY site object for LIVE site - i.e. for custom domain */
        l_json:=new JSON_OBJECT_T;
        l_json.put('name', l_domain_name || ' custom domain');
        l_json.put('custom_domain', l_domain_name);

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'sites', pMethod=>'POST', pStatusAllowed=>422, pBody=>l_json.stringify, pData=>l_clob);
        IF (apex_web_service.g_status_code=422) THEN
            apex_json.open_object;
            apex_json.write('success', TRUE);
            apex_json.write('message', 'Domain Name must include top level domain, eg ".com"');
            apex_json.close_object;
            RETURN;
        END IF;

        SELECT id, account_slug 
          INTO l_netlify_site_id_custom, l_netlify_account_slug
          FROM JSON_TABLE(l_clob, '$' COLUMNS (id, account_slug));

        /* Create NETLIFY DNS ZONE for LIVE site */
        l_json:=new JSON_OBJECT_T;
        l_json.put('account_slug', l_netlify_account_slug);
        l_json.put('site_id', l_netlify_site_id_custom);
        l_json.put('name', l_domain_name);

        pck_api.callNetlifyAPI(pUserId=>l_session_data.user_id, pEndpoint=>'dns_zones', pMethod=>'POST', pBody=>l_json.stringify, pData=>l_clob);

        /* Get dns zone id and servers */
        FOR C IN (SELECT id, dns_server  FROM JSON_TABLE(l_clob, '$' COLUMNS (id, NESTED PATH '$.dns_servers[*]' COLUMNS (dns_server pATH '$'))) ) 
        LOOP
            n:=n+1;
            l_netlify_dns_zone_id:=C.id;
            l_dns_servers:=l_dns_servers || '(' || TO_CHAR(n) || ') ' || C.dns_server || chr(10);
        END LOOP;

        UPDATE website 
           SET netlify_site_id_custom=l_netlify_site_id_custom, netlify_dns_zone_id=l_netlify_dns_zone_id, updated_date=current_timestamp 
         WHERE id=pWebsiteId;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('dropdown', pck_core.makeWebsiteListItem(pWebsiteId, l_domain_name, 'TEST') || pck_core.makeWebsiteListItem(pWebsiteId, l_domain_name, 'LIVE') || '<hr>');
        apex_json.write('dns_servers', '<ol>' || l_dns_servers || '</ol');
        apex_json.close_object;

        /* Deploy in background */
        DELETE website_deploy WHERE website_id=pWebsiteId;
        UPDATE website SET netlify_deploy_id=NULL WHERE id=pWebsiteId;
        
        l_job_name:=dbms_scheduler.generate_job_name('DEPLOY_');
        dbms_scheduler.create_job(
            job_name   => l_job_name,
            job_type   =>'STORED_PROCEDURE',
            job_action =>'pck_deploy.runDeployment',
            number_of_arguments=>6,
            start_date=>systimestamp
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 1,
            argument_value => pWebsiteId
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 2,
            argument_value => l_session_data.user_id
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 3,
            argument_value => '.min.js'
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 4,
            argument_value => l_netlify_site_id_custom
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 5,
            argument_value => pck_core.getRestUrl()
        );
        dbms_scheduler.set_job_argument_value(
            job_name => l_job_name,
            argument_position => 6,
            argument_value => l_session_data.app_id
        );
        dbms_scheduler.enable(l_job_name);
    END;

    /*
    **  Maintain separate Netlify site objects for TEST and LIVE websites
    **  Auto-create the LIVE site if a dns zone exists with same domain name
    **  N.b. 1) DNS zone created automatically if custom domain purchased through Netlify 
    **       2) DNS delegated to Netlify from registrar (e.g. Godaddy, Namecheap) requires that Dns zone is created in a separate process
    */
    PROCEDURE processDomainName(pUserId IN website.user_id%type, pWebsiteId IN website.id%type, pDomainName IN website.domain_name%type) IS
        l_json JSON_OBJECT_T;
        l_clob CLOB;
        l_dns_zones CLOB;
        l_netlify_site_id               website.netlify_site_id%type;
        l_netlify_site_id_custom        website.netlify_site_id%type;
        l_website_id website.id%type;
        l_endpoint VARCHAR2(100);
        l_method VARCHAR2(6);
        l_message VARCHAR2(50);
        l_dropdown LONG;

        FUNCTION name_taken RETURN BOOLEAN IS
        BEGIN
            IF (apex_web_service.g_status_code=422) THEN
                apex_json.open_object;
                apex_json.write('success', TRUE);
                apex_json.write('message', 'Name already taken');
                apex_json.write('color', 'red');
                apex_json.close_object;
                RETURN TRUE;
            ELSE
                RETURN FALSE;
            END IF;
        END;
    BEGIN
        /* pWebsiteId=0 means create new website */
        IF (pWebsiteId<>0) THEN
            SELECT netlify_site_id, netlify_site_id_custom 
              INTO l_netlify_site_id, l_netlify_site_id_custom 
              FROM website 
             WHERE id=pWebsiteId
               AND user_id=pUserId;
        END IF;

        /* Change Netlify site name  at user's request */
        l_json:=new JSON_OBJECT_T;
        l_json.put('name', pDomainName);
        l_endpoint:='sites' || CASE WHEN l_netlify_site_id IS NOT NULL THEN '/' || l_netlify_site_id END;
        l_method:=CASE WHEN l_netlify_site_id IS NULL THEN 'POST' ELSE 'PATCH' END;

        /* Netlify sites API returns 422 if domain name unavailable */
        pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>l_endpoint, pMethod=>l_method, pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
        IF (name_taken) THEN
            RETURN;
        END IF;

        /* Get Netlify site_id for TEST site */
        SELECT site_id INTO l_netlify_site_id FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));

        /* Create Netlify LIVE site with custom_domain if domain_name in dns_zones */
        IF (l_netlify_site_id_custom IS NULL) THEN
            pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_dns_zones);
            FOR C IN (SELECT name FROM JSON_TABLE(l_dns_zones, '$[*]' COLUMNS(name)) WHERE name=pDomainName) LOOP
                l_json:=new JSON_OBJECT_T;
                l_json.put('name', pDomainName || ' custom domain');
                l_json.put('custom_domain', pDomainName);

                pck_api.callNetlifyAPI(pUserId=>pUserId, pEndpoint=>'sites', pMethod=>'POST', pBody=>l_json.stringify, pStatusAllowed=>422, pData=>l_clob);
                IF (name_taken) THEN
                    RETURN;
                END IF;
                SELECT site_id INTO l_netlify_site_id_custom FROM JSON_TABLE(l_clob, '$' COLUMNS (site_id));
            END LOOP;
        END IF;

        IF (pWebsiteId=0) THEN
            INSERT INTO website(id, domain_name, netlify_site_id, netlify_site_id_custom, created_date, user_id)
                VALUES (seq_website.nextval, pDomainName, l_netlify_site_id, l_netlify_site_id_custom, current_timestamp, pUserId);
            l_message:='Created OK';  
            l_website_id:=seq_website.currval;
        ELSE
            UPDATE website SET 
                    domain_name=pDomainName, 
                    netlify_site_id=l_netlify_site_id,
                    netlify_site_id_custom=l_netlify_site_id_custom, 
                    updated_date=current_timestamp 
             WHERE id=pWebsiteId;
            l_message:='Updated OK';
            l_website_id:=pWebsiteId;
        END IF;

        l_dropdown:=pck_core.makeWebsiteListItem(l_website_id, pDomainName, 'TEST');
        IF (l_netlify_site_id_custom IS NOT NULL) THEN
            l_dropdown:=l_dropdown || pck_core.makeWebsiteListItem(l_website_id, pDomainName, 'LIVE');
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', l_message);
        apex_json.write('color', 'green');
        apex_json.write('websiteid', l_website_id);
        apex_json.write('dropdown', l_dropdown);
        apex_json.close_object;
    END;

    /*
    **  USER CREATES NEW WEBSITE PAGE OR CHANGES NAVIGATION LABEL
    */
    PROCEDURE processNavigationLabel(pUserId IN website.user_id%type, pWebsiteId IN website_article.website_id%type, pArticleId IN website_article.article_id%type, pNavigationLabel IN website_article.navigation_label%type) IS
        l_next_article_id article.id%type;
    BEGIN
        APEX_JSON.open_object; 
        BEGIN
            IF (pArticleId=0) THEN
                l_next_article_id:=seq_article.nextval;
                INSERT INTO article (id, author_user_id, created_date) VALUES (l_next_article_id, pUserId, current_timestamp);
                INSERT INTO website_article(article_id, website_id, navigation_label, display_order, user_id) VALUES (l_next_article_id, pWebsiteId, pNavigationLabel, 0, pUserId);
                apex_json.write('nav_label', pck_core.buildNavLabel(l_next_article_id,pNavigationLabel, 'page-options'));
                apex_json.write('new_article_id',l_next_article_id);
                apex_json.write('message', 'Created OK');
                apex_json.write('color', 'green');
            ELSE
                UPDATE website_article 
                   SET navigation_label=pNavigationLabel, updated_date=current_timestamp 
                 WHERE website_id=pWebsiteId
                   AND article_id=pArticleId;
                apex_json.write('message', 'Updated OK');
                apex_json.write('color', 'green');
            END IF;
            EXCEPTION WHEN DUP_VAL_ON_INDEX THEN 
                apex_json.write('message', 'Label must be unique');
                apex_json.write('color', 'red');
        END;

        APEX_JSON.write('success', TRUE);
        APEX_JSON.close_object;
    END;

    /**
     **    Update the column value of 1 row.
     **    Complex processing for Domain name change
     */
    PROCEDURE init(pBodyText IN CLOB) IS
        l_id_1 NUMBER;
        l_id_2 NUMBER;

        l_message VARCHAR2(50);
        l_color VARCHAR2(5);
        l_getFontUrl BOOLEAN:=FALSE;
        l_family google_font.family%type;
        l_url_regular google_font.url_regular%type;
        l_website_id website.id%type;
        n PLS_INTEGER:=0;
        l_session_data pck_core.session_data_rt;
        l_error LONG;
    BEGIN
        l_session_data:=pck_core.getSessionData();

        FOR C IN (SELECT t.id, t.table_column, t.value
                    FROM users, JSON_TABLE(pBodyText FORMAT JSON, '$' COLUMNS (id, table_column, value)) t
                   WHERE users.id=l_session_data.user_id)
        LOOP
            IF (INSTR(C.id,',')>0) THEN
                l_id_1:=SUBSTR(C.id,1,INSTR(C.id,',')-1);
                l_id_2:=SUBSTR(C.id,INSTR(C.id,',')+1);
            END IF;     

            CASE C.table_column
                WHEN 'website.domain_name' THEN
                    processDomainName(l_session_data.user_id, C.id, C.value);
                    RETURN;
                WHEN 'website_article.navigation_label' THEN
                    processNavigationLabel(l_session_data.user_id, l_id_1, l_id_2, C.value);
                    RETURN;
                WHEN 'website.contact_email' THEN
                    UPDATE website SET contact_email=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.font' THEN
                    UPDATE website SET font=C.value, updated_date=current_timestamp WHERE id=C.id;
                    l_getFontUrl:=TRUE;
                WHEN 'website.favicon_code' THEN
                    UPDATE website SET favicon_code=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.max_width' THEN
                    UPDATE website SET max_width=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.color_background' THEN
                    UPDATE website SET color_background=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.color_primary' THEN
                    UPDATE website SET color_primary=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.color_text' THEN
                    UPDATE website SET color_text=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.min_font_size' THEN
                    UPDATE website SET min_font_size=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.min_width_px' THEN
                    UPDATE website SET min_width_px=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.min_scale' THEN
                    UPDATE website SET min_scale=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.max_font_size' THEN
                    UPDATE website SET max_font_size=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.max_width_px' THEN
                    UPDATE website SET max_width_px=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.max_scale' THEN
                    UPDATE website SET max_scale=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.price_currency' THEN
                    UPDATE website SET price_currency=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website.deploy_css_file' THEN
                    UPDATE website SET deploy_css_file=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'website_article.collection_type' THEN
                    UPDATE website_article SET collection_type=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2;
                WHEN 'website_article.page_title' THEN
                    UPDATE website_article SET page_title=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2;
                WHEN 'website_article.page_description' THEN
                    UPDATE website_article SET page_description=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2;
                WHEN 'website_article.contact_form' THEN
                    UPDATE website_article SET contact_form=C.value, updated_date=current_timestamp WHERE website_id=l_id_1 AND article_id=l_id_2;
                WHEN 'article.product_price' THEN
                    UPDATE article SET product_price=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'article.featured' THEN
                    UPDATE article SET featured=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.netlify_token' THEN
                    UPDATE users SET netlify_token=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.netlify_account_slug' THEN
                    UPDATE users SET netlify_account_slug=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.cld_cloud_name' THEN
                    UPDATE users SET cld_cloud_name=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.cld_api_key' THEN
                    UPDATE users SET cld_api_key=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.cld_api_secret' THEN
                    UPDATE users SET cld_api_secret=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.github_token' THEN
                    UPDATE users SET github_token=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.github_repos_owner' THEN
                    UPDATE users SET github_repos_owner=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.github_repos' THEN
                    UPDATE users SET github_repos=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.google_api_key' THEN
                    UPDATE users SET google_api_key=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.google_client_id' THEN
                    UPDATE users SET google_client_id=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.ipdata_api_key' THEN
                    UPDATE users SET ipdata_api_key=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.terraform_token' THEN
                    UPDATE users SET terraform_token=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.stripe_publishable_key_test' THEN
                    UPDATE users SET stripe_publishable_key_test=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.stripe_secret_key_test' THEN
                    UPDATE users SET stripe_secret_key_test=C.value, updated_date=current_timestamp WHERE id=C.id;
                WHEN 'users.whatismybrowser_api_key' THEN
                    UPDATE users SET whatismybrowser_api_key=C.value, updated_date=current_timestamp WHERE id=C.id;
                ELSE
                    l_error:='id:' || C.id || 'table_column:' || C.table_column;
            END CASE;
            n:=sql%rowcount;
            IF (l_getFontUrl AND n=1) THEN
                SELECT family, url_regular INTO l_family, l_url_regular FROM google_font WHERE family=C.value;
            END IF;
        END LOOP;

        IF (n=1) THEN  /* means last DML was successful */
            l_color:='green';
            l_message:='Updated OK';
        ELSE  /* means update or insert failed */
            l_color:='red';
            l_message:='Updated NOK - ' || l_error;
        END IF;

        apex_json.open_object;
        apex_json.write('success', TRUE);
        apex_json.write('message', CASE WHEN n=1 THEN 'Updated OK' ELSE 'Updated NOK' END);
        apex_json.write('color', CASE WHEN n=1 THEN 'green' ELSE 'red' END);
        IF (l_getFontUrl) THEN
            apex_json.write('font_family', l_family);
            apex_json.write('font_url','url(' || l_url_regular || ')');
        END IF;
        apex_json.close_object;

        EXCEPTION
            WHEN OTHERS THEN
                pck_core.log_error;
    END;

    /*
    **  Run this to get a status of Netlify sites
    */
    PROCEDURE netlify_status IS 
        l_clob CLOB;
    BEGIN
        pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'dns_zones', pMethod=>'GET', pData=>l_clob);
        DELETE netlify_dns_zone;
        INSERT INTO netlify_dns_zone (id, name, site_id, created_at, updated_at)
        SELECT id, name, site_id, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR') 
          FROM JSON_TABLE(l_clob, '$[*]' COLUMNS(id, name, site_id, created_at, updated_at));

        DELETE netlify_dns_zone_server;
        INSERT INTO netlify_dns_zone_server (dns_zone_id, server)
        SELECT id, server FROM JSON_TABLE(l_clob, '$[*]' COLUMNS (id, NESTED '$.dns_servers[*]' COLUMNS (server varchar2(50) path '$')));

        pck_api.callNetlifyAPI(pUserId=>null, pEndpoint=>'sites', pMethod=>'GET', pData=>l_clob);
        DELETE netlify_site;
        INSERT INTO netlify_site (id, name, custom_domain, url, created_at, updated_at)
        SELECT id, name, custom_domain, url, TO_TIMESTAMP_TZ(created_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR'), TO_TIMESTAMP_TZ(updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.FXFF3TZR')
          FROM JSON_TABLE(l_clob, '$[*]' COLUMNS(id, name, custom_domain, url, created_at, updated_at));
    END;
END;
/