CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CSS_JS" AS

    g_html_start CONSTANT VARCHAR2(24):='<!-- YOUR CODE START -->';
    g_html_end CONSTANT VARCHAR2(24):='<!-- YOUR CODE END -->';
    g_css_start CONSTANT VARCHAR2(24):='/* YOUR CODE START */';
    g_css_end CONSTANT VARCHAR2(24):='/* YOUR CODE END */';
    --
    g_css CONSTANT LONG:=
'*,*::before,*::after {
    box-sizing: border-box;
}
body,h1,h2,h3,h4,p,figure,blockquote,dl,dd {
  margin-block-end: 0;
}
body {
    background: var(--color-light);
    color: var(--color-dark);
    font-family: var(--font-family), sans-serif;
    font-size: var(--step-0);
    line-height: 1.5;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    min-height: 100vh;
    max-inline-size: var(--max-width);
    margin-inline: auto;
    padding-inline: 1rem;
}
body > * + * {
    margin-top: var(--space-m);
}

/* HEADER TYPOGRAPHY STYLES */
h1 {
    font-size: var(--step-4);
    text-align: center;
}
h2 {
    font-size: var(--step-3);
}
h3 {
    font-size: var(--step-2);
}
h4 {
    font-size: var(--step-1);
}

/* Set shorter line heights on headings and interactive elements */
h1, h2, h3, h4, button, input, label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1, h2, h3, h4 {
  text-wrap: balance;
}

img, picture {
  max-width: 100%;
  display: block;
  object-fit: scale-down;
}

/* NEED TO REVIEW IMAGE CLASSES - MAYBE DO IT IN CKEDITOR */
img.float-right {
    float: right;
    border-radius: 0.5em;
    margin: 0 0 1em 1em;
}

input, textarea, button, select {
    font: inherit;
}

/* NAVIGATION LABEL STYLES */
nav[aria-label="Main Navigation"] {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
    justify-content: space-evenly;
}
.nav-label:not(.selected) {
    text-decoration: none;
}
.nav-label.selected {
    text-decoration-color: var(--color-primary);
    text-decoration-thickness: var(--space-3xs);
    text-underline-offset: var(--space-3xs);
    text-decoration-skip-ink: none;
}

/* LOGO STYLES */
div.logo {
    border: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1em;
}

div.logo svg {
    inline-size: 5em;
}

/* ANCHOR (WITH SVG) STYLES */
a:has(svg) {
    display: inline-flex;
    gap: 1em;
    align-items: center;
    text-decoration-color: var(--color-primary);
    text-decoration-thickness: 0.3ex;
    text-underline-offset: 0.5ex;
    cursor: pointer;
}
svg.icon {
    inline-size: 1.5em;
    block-size: 1.5em;
}

/* ELEMENT WITH BORDER. CENTERED IMAGE */
.with-border {
    border: solid 1px var(--color-primary);
    padding: var(--space-m);
    border-radius: var(--space-s);
}

.with-border img {
    border-radius: var(--space-s);
    margin-inline: auto;
}

/* UNORDERED LIST ITEMS WITH BORDER. SET CLASS ON UNSUPPORTED CKEDITOR ANCESTOR ELEMENT */
.with-border-list ul {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: var(--space-s);
}

.with-border-list li {
    list-style: none;
    border: solid 1px var(--color-primary);
    border-radius: var(--space-s);
    padding: var(--space-s);
}

/* AUTO-FIT CARD ELEMENTS. ELEMENTS AT END OF EACH CARD ALIGNED AT BOTTOM */
.auto-fit-cards {
    clear: both;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
    gap: var(--space-l);
    & > * {
      display:flex;
      flex-direction: column;
      justify-content: space-between;
      & :nth-last-child(2) {
        margin-block-end: var(--space-s);
      }
      & :last-child {
        margin-block-start: auto;
      }
  }
}

/* CONTACT FORM STYLES */
.contact {
    display: grid;
    place-items: center;
    gap: 1em;
}

.contact > p {
    text-align:center;
}

.contact .copy-content {
    display: inline-flex;
    gap: .5em;
    cursor: pointer;
    border: 0;
}

.contact .copy-content svg {
    inline-size: .8em;
}

.contact .result {
    color: green;
    opacity: 0;
    transition: opacity 1ms;
}

form {
    display: flex;
    flex-direction: column;
    gap: 1em;
    inline-size: fit-content;
    border: solid 1px var(--color-primary);
    padding: 1em;
    border-radius: 0.5em;
}

form label {
    display: block;
    font-weight: 600;
}

form input {
    inline-size: 95%;
    line-height: 2;
}

button[type=''submit''] {
    inline-size: fit-content;
    position: relative;
    border: none;
    background: transparent;
    padding: 0;
    cursor: pointer;
    outline-offset: 4px;
    transition: filter 250ms;
}

/* PUSHABLE BUTTON STYLES */
.pushable {
    inline-size: fit-content;
    position: relative;
    border: none;
    background: transparent;
    padding: 0;
    cursor: pointer;
    outline-offset: 4px;
    transition: filter 250ms;
  }
  .shadow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 12px;
    background: hsl(0deg 0% 0% / 0.25);
    will-change: transform;
    transform: translateY(2px);
    transition:
      transform
      600ms
      cubic-bezier(.3, .7, .4, 1);
  }
  .edge {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 12px;
    background: linear-gradient(
      to left,
      hsl(340deg 100% 16%) 0%,
      hsl(340deg 100% 32%) 8%,
      hsl(340deg 100% 32%) 92%,
      hsl(340deg 100% 16%) 100%
    );
  }
  .front {
    display: block;
    position: relative;
    padding: 12px 42px;
    border-radius: 12px;
    color: white;
    background: hsl(345deg 100% 47%);
    will-change: transform;
    transform: translateY(-4px);
    transition:
      transform
      600ms
      cubic-bezier(.3, .7, .4, 1);
  }
  .pushable:hover {
    filter: brightness(110%);
  }
  .pushable:hover .front {
    transform: translateY(-6px);
    transition:
      transform
      250ms
      cubic-bezier(.3, .7, .4, 1.5);
  }
  .pushable:active .front {
    transform: translateY(-2px);
    transition: transform 34ms;
  }
  .pushable:hover .shadow {
    transform: translateY(4px);
    transition:
      transform
      250ms
      cubic-bezier(.3, .7, .4, 1.5);
  }
  .pushable:active .shadow {
    transform: translateY(1px);
    transition: transform 34ms;
  }
  .pushable:focus:not(:focus-visible) {
    outline: none;
  }

  /* DIALOG STYLES */
  dialog {
  max-inline-size: min(60ch,90vw);
  overscroll-behavior: contain;
}

dialog > div:first-of-type {
  display: grid;
  grid-template-columns: 1fr 44px;
}

dialog h2 {
  text-align: center;
}

dialog button.close {
  place-self: start end;
  background-color: transparent;
  font-size: var(--step-2);
  outline: 0;
  border: 0;
  position: sticky;
  top: 0;
  cursor: pointer;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
   scroll-behavior: auto;
  } 
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
';
    --
    g_javascript CONSTANT LONG:=
'/*
** SETUP COLLECTION OF METRICS. 
*/
if (!sessionStorage.getItem("website_loaded")) {
    console.log("setting sessionStorage.website_loaded");
    sessionStorage.setItem("website_loaded",Math.round(Date.now()/1000));
}

let page_loaded = Date.now(),
    page_visit = 0;

const vitalsQueue = new Set(),
      mediaQueue = new Set();

const flushQueues = () => {
    /* Prevent error in codepen whch does not allow importing modules */
    if (!document.querySelector("[name=''website_id'']")) return;

    if (vitalsQueue.size === 0 && page_loaded === 0) return;

    const website_loaded = Number(sessionStorage.getItem("website_loaded"));
    /* This would happen if user manually clears sessionStorage for example */
    if (website_loaded === 0) return; 

    const website_id = document.querySelector("[name=''website_id'']").value,
          article_id = document.querySelector("[name=''article_id'']").value,
          visit_url = document.querySelector("[name=''visit_url'']").value;

    const json = {};
    json["website_id"] = website_id;
    json["article_id"] = article_id;
    json["website_loaded"] = Number(sessionStorage.getItem("website_loaded"));
    json["seq"] = page_visit;
    if (page_loaded !== 0) {
        json["duration_visible"] =  Math.round((Date.now() - page_loaded)/1000);
        page_loaded = 0;
    }

    if (vitalsQueue.size > 0) {
        for (const item of vitalsQueue.values()) {
            json[item.name] = item.name === "CLS" ? item.value.toFixed(2) : item.value.toFixed();
            json[item.name+"_rating"] = item.rating;
        }
        vitalsQueue.clear();
    }

    /* Send full details only on first page visit to save network cost */
    if (page_visit === 0) {
        const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
        if (connection) {
            json["connection"] = connection.downlink + " Mb/s" + " -" + connection.effectiveType;
        }

        const agent = bowser.getParser(window.navigator.userAgent),
            browserName = agent.getBrowserName(),
            browserVersion = agent.getBrowserVersion().split(".");
        let browser = browserName + " " + browserVersion[0];
        if (browserVersion[1]!=="0") {
            browser+="."+browserVersion[1];
        }
        json["browser"] = browser;
        if (navigator.userAgentData) {
            json["mobile"] = navigator.userAgentData.mobile;
        }

        json["url"] = window.location.hostname;
        json["referrer"] = document.referrer;
    }

    const body = JSON.stringify(json);
    page_visit++;
    (navigator.sendBeacon && navigator.sendBeacon(visit_url, body)) || fetch(visit_url, {body, method: ''POST'', keepalive: true});


    /* Send any media performance metrics */
    if (mediaQueue.size > 0) {    
        const body = JSON.stringify([...mediaQueue]);
        let url = gRestUrl + "media-performance";
        (navigator.sendBeacon && navigator.sendBeacon(url, body)) || fetch(url, {body, method: ''POST'', keepalive: true});
        mediaQueue.clear();
    }
}

const addToVitalsQueue = (metric) => {
    console.log(metric.name,metric.value);
    vitalsQueue.add(metric);
};

addEventListener(''visibilitychange'', () => {
    console.log("visibilityState",document.visibilityState);
    if (document.visibilityState === "hidden") {
        flushQueues();
    } else {
        page_loaded = Date.now();
    }
}, { capture: true} );

if (''onpagehide'' in self) {
    addEventListener(''pagehide'', () => {
        console.log("pagehide");
        flushQueues();
    }, { capture: true} );
}

/*
** IMAGE INTERSECTION OBSERVER
*/
const images = document.querySelectorAll(''[data-src]'');
const config = {rootMargin: ''0px 0px 50px 0px'',threshold: 0};

let observer = new IntersectionObserver(function (entries, self) {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      preloadImage(entry.target);
      // Stop watching and load the image
      self.unobserve(entry.target);
    }
  });
}, config);

images.forEach(image => {
  observer.observe(image);
});

const preloadImage = (img) => {
  const src = img.getAttribute(''data-src'');
  if (!src) {
    return; 
  }
  img.src = src;
};

/*
** DIALOG HANDLING
*/
document.querySelectorAll("a[data-dialog]").forEach((button) => {
    button.addEventListener("click", (e) => {
      e.preventDefault();
      document.querySelector("dialog."+e.target.dataset.dialog).showModal();
    });
});

document.querySelectorAll("dialog button.close").forEach((button) => {
    button.addEventListener("click", (e) => {
      e.target.closest("dialog").close();
    });
    button.textContent = "X";
});

const copy_content = document.querySelector("button.copy-content");
if (copy_content) {
    copy_content.addEventListener("click", async () => {
        const text = copy_content.innerText;
        const result = copy_content.querySelector("span");
        try {
            await navigator.clipboard.writeText(text);
            result.textContent = "Copied";
            result.style.opacity = "1";
        } catch (error) {
            result.textContent = error.message;
        }
    });
}

/*
** CONTACT FORM SUBMISSION
*/
const form = document.querySelector("div.contact > form");
if (form) {
    form.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        const submit = form.querySelector("button");
        const aws_gateway_url = submit.dataset.url;
        fetch(aws_gateway_url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
            },
            redirect: "follow",
            referrerPolicy: "no-referrer",
            body: JSON.stringify({
                name: formData.get("name"),
                email: formData.get("email"),
                message: formData.get("message"),
                contactEmail: formData.get("contactEmail"),
                signatureContactEmail: formData.get("signatureContactEmail")
            }),
        }).then((response) => {
            if (response.status) {
                console.log("submitted form");
                const formBtn = form.querySelector("button");
                formBtn.disabled = true;
                formBtn.style.cursor = "none";
                const front = formBtn.querySelector(".front");
                front.textContent = "Sent";
                front.style.background = "green";
                formBtn.querySelector(".edge").remove();
                formBtn.querySelector(".shadow").remove();
                form.querySelector(".result").style.opacity = "1";
                return;
            }
            throw new Error("Could not submit request");
        }).catch( (error) => {
            console.error(error);
            form.querySelector(".result").style.opacity = "1";
            form.querySelector(".result").textContent(error);
        });
    });
}';

END;
/
