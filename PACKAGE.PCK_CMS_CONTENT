CREATE OR REPLACE EDITIONABLE PACKAGE "PCK_CMS_CONTENT" as
    --
    PROCEDURE generateSignature(pBodytext IN CLOB, pCurrentUser IN VARCHAR2);
    --
    PROCEDURE getContent(pCurrentUser IN VARCHAR2, pBodyText IN CLOB, pStatus OUT INTEGER, pMessage OUT VARCHAR2);
    --
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PCK_CMS_CONTENT" as

    PROCEDURE return_json(p_property IN VARCHAR2, p_value IN VARCHAR2) IS
    BEGIN
        APEX_JSON.initialize_clob_output;
        APEX_JSON.open_object;
        APEX_JSON.write(p_property, p_value);
        APEX_JSON.close_object;
        htp.p(APEX_JSON.get_clob_output);
        APEX_JSON.free_output;
    END;

    PROCEDURE getContent(pCurrentUser IN VARCHAR2, pBodyText IN CLOB, pStatus OUT INTEGER, pMessage OUT VARCHAR2) IS
        TYPE t_sql IS TABLE OF LONG INDEX BY VARCHAR2(20);
        l_sqls t_sql := t_sql(
            'images' => 
                 q'{SELECT json_arrayagg(json_object(art.ID, ass.DISPLAY_ORDER, ass.CLD_CLOUD_NAME, ass.PUBLIC_ID, ass.WIDTH, ass.HEIGHT, ass.DESCRIPTION returning clob) ORDER BY ID desc, DISPLAY_ORDER returning clob)
                      FROM article art, asset ass
                     WHERE ass.resource_type='image'
                       AND ass.article_id=art.id
                       AND art.author_user_id=:B1}', 
            'testimonials' =>
                 q'{SELECT json_arrayagg(json_object(ID, NAME, POSITION, DATE_GIVEN, TEXT returning clob) ORDER BY ID returning clob)
                      FROM testimonial
                     WHERE author_user_id=:B1}'
           ); 
        l_bodytext CLOB:=pBodyText;
        l_object json_object_t:=json_object_t.parse(l_bodytext);
        l_sql LONG;
        l_user_id users.id%type;
        l_data VARCHAR2(20);
        l_binds INTEGER:=1;
        l_csr  INTEGER DEFAULT dbms_sql.open_cursor;
        l_json CLOB;
        l_debug BOOLEAN:=FALSE;
    BEGIN
        /* All parameters are passed in the request body */
        
        /* requested sql of course is mandatory */
        l_data:=l_object.get_string('data');

        /* get the authenticated user id from the USERS table corresponding to the OAUTH2 client id specified in the request */
        SELECT usr.id 
          INTO l_user_id 
          FROM users usr, user_ords_clients oau
         WHERE usr.email=oau.name
           AND oau.client_id=pCurrentUser;
           
        l_sql:=l_sqls(l_data);

        /* Check whether request changes the order */
        IF (l_object.has('order')) THEN
            l_sql:=REGEXP_REPLACE(l_sql,'(ORDER BY .+)','ORDER BY ' || l_object.get_string('order') || ' RETURNING CLOB)',1);
        END IF;
        
        /* Check whether request specifies one or more IDs */
        IF (l_object.has('id')) THEN
            l_sql:=l_sql || ' AND ' || NVL(REGEXP_SUBSTR(l_sql,'(\w+\.ID)',1,1),'ID') || q'{ IN (SELECT id FROM JSON_TABLE(:B2, '$.id[*]' COLUMNS (id path '$')))}';
            l_binds:=2;
        END IF;

        dbms_sql.parse(l_csr, l_sql, dbms_sql.native );
        dbms_sql.define_column(l_csr, 1, l_json );
        dbms_sql.bind_variable(l_csr, 'B1', l_user_id);
        IF (l_binds=2) THEN
            dbms_sql.bind_variable(l_csr, 'B2', l_bodytext);
        END IF;

        IF (dbms_sql.execute_and_fetch(l_csr) = 1) THEN
            dbms_sql.column_value( l_csr, 1, l_json);
        END IF;
        dbms_sql.close_cursor(l_csr);
        
        /* Log executed sql if DEBUG requested */
        IF (l_object.has('debug')) THEN
            l_debug:=l_object.get_boolean('debug');
            IF (l_debug) THEN 
                pck_cms.log(l_sql); 
            END IF;
        END IF;

        owa_util.mime_header( 'application/json', TRUE, 'UTF-8' );
        htp.p(NVL(l_json,'[]'));
        
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                pMessage:='"data" key has invalid value "images", "testimonials"';
                pStatus:=400;
            WHEN VALUE_ERROR THEN
                pMessage:='invalid object type specified "data":' || l_data;
                pStatus:=400;            
            WHEN OTHERS THEN
                pck_cms.log(l_sql);
                pStatus:=400;  
                pMessage:='Oracle failure: ' || dbms_utility.format_error_stack;
    END;
    
    PROCEDURE generateSignature(pBodytext IN CLOB, pCurrentUser IN VARCHAR2) IS
        l_signature VARCHAR2(100);
        l_api_secret users.cld_api_secret%type;
        l_string_to_sign varchar2(2000):=NULL;
        l_sqlerrm VARCHAR2(100);    
    BEGIN
        INSERT INTO log(procedure_name, message) VALUES ('generateSignature', 'pBodytext' || ': ' || pBodytext);
        
        SELECT NVL2(filename_override,'filename_override='||filename_override||'&',NULL) ||
               NVL2(headers,'headers='||headers||'&',NULL) ||
               NVL2(source,'source='||source||'&',NULL) ||
               NVL2(tags,'tags='||tags||'&',NULL) ||
               NVL2(timestamp,'timestamp='||timestamp||'&',NULL) ||
               NVL2(use_filename,'use_filename='||use_filename,NULL)
          INTO l_string_to_sign
          FROM JSON_TABLE(pBodytext FORMAT JSON, '$'
            COLUMNS filename_override,headers,source,tags,timestamp,use_filename                 
            );
        
        SELECT usr.cld_api_secret 
          INTO l_api_secret
          FROM users usr, user_ords_clients oau
         WHERE oau.client_id=pCurrentUser
           AND usr.email=oau.name;
           
        l_signature:=dbms_crypto.hash(utl_raw.cast_to_raw(l_string_to_sign || l_api_secret), dbms_crypto.HASH_SH1);
        
        return_json('signature', l_signature);
        
        EXCEPTION WHEN OTHERS THEN
            l_sqlerrm:=SUBSTR(SQLERRM,1,100);
            pck_cms.log_error(sqlcode,l_sqlerrm);
            return_json('error', l_sqlerrm);
    END;
    
end pck_cms_content;
/